{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vhlab-toolbox-matlab \u00b6 About \u00b6 vlt is a Matlab toolbox for general Matlab programming, science, and neuroscience. It includes the functions we wish Matlab had natively as well as some lab-invented file formats. It has been slowly building since Steve was a grad student in 1999, with contributions from the lab and other colleagues (notably Alexander Heimel, Mark Mazurek, and others) over the years. The functions are available in two ways: as regular functions and in the package 'vlt'. The use of the functions without the vlt.package.function_name form is deprecated but they are still available.","title":"Home"},{"location":"#vhlab-toolbox-matlab","text":"","title":"vhlab-toolbox-matlab"},{"location":"#about","text":"vlt is a Matlab toolbox for general Matlab programming, science, and neuroscience. It includes the functions we wish Matlab had natively as well as some lab-invented file formats. It has been slowly building since Steve was a grad student in 1999, with contributions from the lab and other colleagues (notably Alexander Heimel, Mark Mazurek, and others) over the years. The functions are available in two ways: as regular functions and in the package 'vlt'. The use of the functions without the vlt.package.function_name form is deprecated but they are still available.","title":"About"},{"location":"contributing/","text":"Contributing \u00b6 Anyone with a GitHub account can contribute. You might write an issue to see if your change is already planned or for the developers' recommended way of implementing your proposed change. Press the Fork button in the upper-right corner of the vhlab-toolbox-matlab GitHub repository to make a copy/fork of vhlab-toolbox-matlab in your own GitHub space. Make your changes. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the vhlab-toolbox-matlab development team for integration.","title":"Contributing"},{"location":"contributing/#contributing","text":"Anyone with a GitHub account can contribute. You might write an issue to see if your change is already planned or for the developers' recommended way of implementing your proposed change. Press the Fork button in the upper-right corner of the vhlab-toolbox-matlab GitHub repository to make a copy/fork of vhlab-toolbox-matlab in your own GitHub space. Make your changes. Commit your changes back to your fork. Finally, issue a Pull Request on GitHub from your fork. The request will be received by the vhlab-toolbox-matlab development team for integration.","title":"Contributing"},{"location":"installation/","text":"Installation: \u00b6 Recommended method: \u00b6 vhlab-toolbox-matlab is installed as a part of the Neuroscience Data Interface ( NDI ). The easiest way is to install it with the NDI installer as described here. Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Run the following in Matlab: cd ~/Desktop ndi_install Manual method: \u00b6 Run the following on your terminal command line: git clone http://github.com/VH-Lab/vhlab-toolbox-matlab You'll need a Matlab startup.m file. Add the command vlt_Init to that file, after ensuring that the directory for vhlab-toolbox-matlab is on your Matlab path. (All of these steps are taken care of via the automatic installation above.)","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation:"},{"location":"installation/#recommended-method","text":"vhlab-toolbox-matlab is installed as a part of the Neuroscience Data Interface ( NDI ). The easiest way is to install it with the NDI installer as described here. Make sure git is installed on your machine. If it is not, on Windows, go here . On Mac, open a terminal, and type xcode-select --install . Accept the license and wait for install. On Linux, consult your Linux distribution's package manager. Download the file ndi_install.m to your Desktop. Run the following in Matlab: cd ~/Desktop ndi_install","title":"Recommended method:"},{"location":"installation/#manual-method","text":"Run the following on your terminal command line: git clone http://github.com/VH-Lab/vhlab-toolbox-matlab You'll need a Matlab startup.m file. Add the command vlt_Init to that file, after ensuring that the directory for vhlab-toolbox-matlab is on your Matlab path. (All of these steps are taken care of via the automatic installation above.)","title":"Manual method:"},{"location":"reference/vlt_Init.m/","text":"vlt_Init \u00b6 VLT_INIT Add paths and initialize variables for VH Lab toolbox Initializes the file path and global variables for package + vlt VLT_INIT () The function takes no input arguments and produces no outputs . It builds the global variables described in vlt . globals See also : vlt . globals","title":"vlt_Init"},{"location":"reference/vlt_Init.m/#vlt_init","text":"VLT_INIT Add paths and initialize variables for VH Lab toolbox Initializes the file path and global variables for package + vlt VLT_INIT () The function takes no input arguments and produces no outputs . It builds the global variables described in vlt . globals See also : vlt . globals","title":"vlt_Init"},{"location":"reference/%2Bvlt/globals.m/","text":"vlt.globals \u00b6 vlt . globals - define global variables for VLT ( VH Lab tools ) vlt . globals Script that defines some global variables for the VLT package The following variables are defined : Name : | Description ------------------------------------------------------------------------- vlt_globals . path . path | The path of the VLT distribution on this machine | ( Initialized by vlt_Init . m ) vlt_globals . path . preferences | A path to a directory of preferences files vlt_globals . path . filecachepath | A path where files may be cached ( not deleted every time ) vlt_globals . path . temppath | The path to a directory that may be used for | temporary files ( Initialized by ndi_Init . m ) vlt_globals . path . testpath | A path to a safe place to run test code vlt_globals . debug | A structure with preferences for debugging vlt_globals . log | An object that manages writing system , error , debugging logs ( vlt . app . log ) vlt_globals . cache | A vlt . data . cache object for the use of the toolbox","title":"vlt.globals"},{"location":"reference/%2Bvlt/globals.m/#vltglobals","text":"vlt . globals - define global variables for VLT ( VH Lab tools ) vlt . globals Script that defines some global variables for the VLT package The following variables are defined : Name : | Description ------------------------------------------------------------------------- vlt_globals . path . path | The path of the VLT distribution on this machine | ( Initialized by vlt_Init . m ) vlt_globals . path . preferences | A path to a directory of preferences files vlt_globals . path . filecachepath | A path where files may be cached ( not deleted every time ) vlt_globals . path . temppath | The path to a directory that may be used for | temporary files ( Initialized by ndi_Init . m ) vlt_globals . path . testpath | A path to a safe place to run test code vlt_globals . debug | A structure with preferences for debugging vlt_globals . log | An object that manages writing system , error , debugging logs ( vlt . app . log ) vlt_globals . cache | A vlt . data . cache object for the use of the toolbox","title":"vlt.globals"},{"location":"reference/%2Bvlt/%2Bapp/log.m/","text":"CLASS vlt.app.log \u00b6 vlt . app . log : A logger for system and / or error messages by a Matlab application or package vlt . app . log is an API and implementation for writing messages to a log file . This is useful for monitoring program operation , debugging , and helping end - users diagonose problems . It also allows the program not to write all messages to the command line , which can be confusing for end - users ( or even developers ). vlt . app . log Properties : system_logfile - A character string with the full path to the system log file error_logfile - A character string with the full path to the error log file debug_logfile - A character string with the full path to the debug log file system_verbosity - A double number that indicates whether or not a system message should be written . If a message priority exceeds verbosity , it will be written to the log error_verbosity - A double number that indicates whether or not an error message should be written . If a message priority exceeds verbosity , it will be written to the log debug_verbosity - A double number that indicates whether or not a debugging message should be written . If a message priority exceeds verbosity , it will be written to the log log_name - The name to preprend to each log message as '[log_name] ' . log_error_behavior - A string that indicates what the log should do if it cannot write a message to the log file . Valid values are 'Error' , 'Warning' , 'Nothing' vlt . all . log Methods : log - create a log object msg - write a message to the log seterrorbehavior - set the error behavior of a LOG object touch - create the log files if they don ' t exist Superclasses \u00b6 handle Properties \u00b6 Property Description system_logfile A character string with the full path to the system log file error_logfile A character string with the full path to the error log file debug_logfile A character string with the full path to the debug log file system_verbosity A double number that indicates whether or not a system message should be written. error_verbosity A double number that indicates whether or not an error message should be written. debug_verbosity A double number that indicates whether or not a debugging message should be written. log_name The name to preprend to each log message as '[log_name] '. log_error_behavior A string that indicates what the object should do if it cannot write a message to the file Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. log create a vlt.app.log for writing system, debugging, error information to log files lt < (LT) Less than relation for handles. msg write a log message to the log ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. seterrorbehavior set the error behavior of a LOG object touch create all log files if they do not already exist Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , VLT . APP . LOG , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . app . log / addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also VLT . APP . LOG , VLT . APP . LOG / ISVALID , CLEAR Help for vlt . app . log / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , VLT . APP . LOG Help for vlt . app . log / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also VLT . APP . LOG , VLT . APP . LOG / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for vlt . app . log / findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / LE , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also VLT . APP . LOG , VLT . APP . LOG / DELETE Help for vlt . app . log / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , VLT . APP . LOG , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . app . log / listener is inherited from superclass handle log - create a vlt.app.log for writing system, debugging, error information to log files LOG_OBJ = LOG ( PROPERTY1 , VALUE1 , ... ) Creates a new vlt . app . log object with the properties initiallized with name / value pair arguments . If not specified , the default values of the parameters are the following : Property | Default_value --------------------------------------------------------- system_logfile | [ userpath filesep 'system.log' ] error_logfile | [ userpath filesep 'error.log' ] debug_logfile | [ userpath filesep 'debug.log' ] system_verbosity | 1 . 0 error_verbosity | 1 . 0 debug_verbosity | 1 . 0 log_name | '' log_error_behavior | 'warning' Documentation for vlt . app . log / log doc vlt . app . log lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / NE Help for vlt . app . log / lt is inherited from superclass handle msg - write a log message to the log B = MSG ( LOG_OBJ , TYPE , PRIORITY , MESSAGE ) Appends the character string MESSAGE to the appropriate log file for the matapptools . log object LOG_OBJ . If the message exceeds the verbosity PRIORITY for that message type , then the message is written . Possible values for type are 'SYSTEM' , 'ERROR' , and 'DEBUG' ( not case sensitive ) . The word SYSTEM , ERROR , or DEBUG is pre - pended to the message . It is good form for MESSAGE to end with a period . A newline is added after MESSAGE . A time stamp is added to the beginning of the log message , in UTC leap seconds . B is 1 if the operation is successful , and 0 otherwise . The error behavior is determined by LOG_OBJ . LOG_ERROR_BEHAVIOR . Example : log_obj . msg ( 'system' , 1 , 'starting my program' ); log_obj . msg ( 'error' , 1 , 'Could not find file C:\\mydir \\a bc.txt.' ); log_obj . msg ( 'debug' , 1 , 'a=5 here.' ); ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / LT Help for vlt . app . log / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also VLT . APP . LOG , VLT . APP . LOG / ADDLISTENER , VLT . APP . LOG / LISTENER , EVENT . EVENTDATA , EVENTS Help for vlt . app . log / notify is inherited from superclass handle seterrorbehavior - set the error behavior of a LOG object LOG_OBJ = SETERRORBEHAVIOR(LOG_OBJ, LOG_ERROR_BEHAVIOR) Assign LOG_ERROR_BEHAVIOR, which can be 'warning', 'error', or 'nothing'. touch - create all log files if they do not already exist TOUCH ( LOG_OBJ ) Creates all log files if they do not already exist . If these log files cannot be created , then an error is generated .","title":"vlt.app.log"},{"location":"reference/%2Bvlt/%2Bapp/log.m/#class-vltapplog","text":"vlt . app . log : A logger for system and / or error messages by a Matlab application or package vlt . app . log is an API and implementation for writing messages to a log file . This is useful for monitoring program operation , debugging , and helping end - users diagonose problems . It also allows the program not to write all messages to the command line , which can be confusing for end - users ( or even developers ). vlt . app . log Properties : system_logfile - A character string with the full path to the system log file error_logfile - A character string with the full path to the error log file debug_logfile - A character string with the full path to the debug log file system_verbosity - A double number that indicates whether or not a system message should be written . If a message priority exceeds verbosity , it will be written to the log error_verbosity - A double number that indicates whether or not an error message should be written . If a message priority exceeds verbosity , it will be written to the log debug_verbosity - A double number that indicates whether or not a debugging message should be written . If a message priority exceeds verbosity , it will be written to the log log_name - The name to preprend to each log message as '[log_name] ' . log_error_behavior - A string that indicates what the log should do if it cannot write a message to the log file . Valid values are 'Error' , 'Warning' , 'Nothing' vlt . all . log Methods : log - create a log object msg - write a message to the log seterrorbehavior - set the error behavior of a LOG object touch - create the log files if they don ' t exist","title":"CLASS vlt.app.log"},{"location":"reference/%2Bvlt/%2Bapp/log.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bapp/log.m/#properties","text":"Property Description system_logfile A character string with the full path to the system log file error_logfile A character string with the full path to the error log file debug_logfile A character string with the full path to the debug log file system_verbosity A double number that indicates whether or not a system message should be written. error_verbosity A double number that indicates whether or not an error message should be written. debug_verbosity A double number that indicates whether or not a debugging message should be written. log_name The name to preprend to each log message as '[log_name] '. log_error_behavior A string that indicates what the object should do if it cannot write a message to the file","title":"Properties"},{"location":"reference/%2Bvlt/%2Bapp/log.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. log create a vlt.app.log for writing system, debugging, error information to log files lt < (LT) Less than relation for handles. msg write a log message to the log ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. seterrorbehavior set the error behavior of a LOG object touch create all log files if they do not already exist","title":"Methods"},{"location":"reference/%2Bvlt/%2Bapp/log.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , VLT . APP . LOG , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . app . log / addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also VLT . APP . LOG , VLT . APP . LOG / ISVALID , CLEAR Help for vlt . app . log / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , VLT . APP . LOG Help for vlt . app . log / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also VLT . APP . LOG , VLT . APP . LOG / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for vlt . app . log / findprop is inherited from superclass handle ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / LE , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also VLT . APP . LOG , VLT . APP . LOG / DELETE Help for vlt . app . log / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LT , VLT . APP . LOG / NE Help for vlt . app . log / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , VLT . APP . LOG , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . app . log / listener is inherited from superclass handle log - create a vlt.app.log for writing system, debugging, error information to log files LOG_OBJ = LOG ( PROPERTY1 , VALUE1 , ... ) Creates a new vlt . app . log object with the properties initiallized with name / value pair arguments . If not specified , the default values of the parameters are the following : Property | Default_value --------------------------------------------------------- system_logfile | [ userpath filesep 'system.log' ] error_logfile | [ userpath filesep 'error.log' ] debug_logfile | [ userpath filesep 'debug.log' ] system_verbosity | 1 . 0 error_verbosity | 1 . 0 debug_verbosity | 1 . 0 log_name | '' log_error_behavior | 'warning' Documentation for vlt . app . log / log doc vlt . app . log lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / NE Help for vlt . app . log / lt is inherited from superclass handle msg - write a log message to the log B = MSG ( LOG_OBJ , TYPE , PRIORITY , MESSAGE ) Appends the character string MESSAGE to the appropriate log file for the matapptools . log object LOG_OBJ . If the message exceeds the verbosity PRIORITY for that message type , then the message is written . Possible values for type are 'SYSTEM' , 'ERROR' , and 'DEBUG' ( not case sensitive ) . The word SYSTEM , ERROR , or DEBUG is pre - pended to the message . It is good form for MESSAGE to end with a period . A newline is added after MESSAGE . A time stamp is added to the beginning of the log message , in UTC leap seconds . B is 1 if the operation is successful , and 0 otherwise . The error behavior is determined by LOG_OBJ . LOG_ERROR_BEHAVIOR . Example : log_obj . msg ( 'system' , 1 , 'starting my program' ); log_obj . msg ( 'error' , 1 , 'Could not find file C:\\mydir \\a bc.txt.' ); log_obj . msg ( 'debug' , 1 , 'a=5 here.' ); ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . APP . LOG , VLT . APP . LOG / EQ , VLT . APP . LOG / GE , VLT . APP . LOG / GT , VLT . APP . LOG / LE , VLT . APP . LOG / LT Help for vlt . app . log / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also VLT . APP . LOG , VLT . APP . LOG / ADDLISTENER , VLT . APP . LOG / LISTENER , EVENT . EVENTDATA , EVENTS Help for vlt . app . log / notify is inherited from superclass handle seterrorbehavior - set the error behavior of a LOG object LOG_OBJ = SETERRORBEHAVIOR(LOG_OBJ, LOG_ERROR_BEHAVIOR) Assign LOG_ERROR_BEHAVIOR, which can be 'warning', 'error', or 'nothing'. touch - create all log files if they do not already exist TOUCH ( LOG_OBJ ) Creates all log files if they do not already exist . If these log files cannot be created , then an error is generated .","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bbatch/simple_batch.m/","text":"vlt.batch.simple_batch \u00b6 SIMPLE_BATCH - Run a simple batch vlt . batch . simple_batch ( TEXTFILE ) Runs a simple batch script . The TEXTFILE is assumed to be a tab - delimited text file with the first row describing the fields ( described here ) : jobclaimfile -- the filename that will be created to \"claim\" the job for this Matlab pathtorun -- the directory that will be changed to with the cd command commandtorun -- the command that will be run savefile -- the output will be saved to this file errorsave -- if there is an error , the workspace will be saved to this file","title":"vlt.batch.simple_batch"},{"location":"reference/%2Bvlt/%2Bbatch/simple_batch.m/#vltbatchsimple_batch","text":"SIMPLE_BATCH - Run a simple batch vlt . batch . simple_batch ( TEXTFILE ) Runs a simple batch script . The TEXTFILE is assumed to be a tab - delimited text file with the first row describing the fields ( described here ) : jobclaimfile -- the filename that will be created to \"claim\" the job for this Matlab pathtorun -- the directory that will be changed to with the cd command commandtorun -- the command that will be run savefile -- the output will be saved to this file errorsave -- if there is an error , the workspace will be saved to this file","title":"vlt.batch.simple_batch"},{"location":"reference/%2Bvlt/%2Bcolorspace/angle2ybgr.m/","text":"vlt.colorspace.angle2ybgr \u00b6 ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = vlt . colorspace . angle2ybgr ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to blue at 180 degrees ( [ 0 0 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : vlt . colorspace . angle2ycgr Examples : ctab = vlt . colorspace . angle2ybgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = vlt . colorspace . angle2ybgr ( angle );","title":"vlt.colorspace.angle2ybgr"},{"location":"reference/%2Bvlt/%2Bcolorspace/angle2ybgr.m/#vltcolorspaceangle2ybgr","text":"ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = vlt . colorspace . angle2ybgr ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to blue at 180 degrees ( [ 0 0 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : vlt . colorspace . angle2ycgr Examples : ctab = vlt . colorspace . angle2ybgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = vlt . colorspace . angle2ybgr ( angle );","title":"vlt.colorspace.angle2ybgr"},{"location":"reference/%2Bvlt/%2Bcolorspace/angle2ycgr.m/","text":"vlt.colorspace.angle2ycgr \u00b6 ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = vlt . colorspace . angle2ycgr ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to cyan at 180 degrees ( [ 0 1 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : vlt . colorspace . angle2ybgr Examples : ctab = vlt . colorspace . angle2ycgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = vlt . colorspace . angle2ycgr ( angle );","title":"vlt.colorspace.angle2ycgr"},{"location":"reference/%2Bvlt/%2Bcolorspace/angle2ycgr.m/#vltcolorspaceangle2ycgr","text":"ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = vlt . colorspace . angle2ycgr ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to cyan at 180 degrees ( [ 0 1 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : vlt . colorspace . angle2ybgr Examples : ctab = vlt . colorspace . angle2ycgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = vlt . colorspace . angle2ycgr ( angle );","title":"vlt.colorspace.angle2ycgr"},{"location":"reference/%2Bvlt/%2Bcolorspace/cmyk2rgb.m/","text":"vlt.colorspace.cmyk2rgb \u00b6 CMYK2RGB - Convert CMYK to RGB RGB = vlt.colorspace.cmyk2rgb(COLOR) Converts from CMYK color space to RGB space. Color values must be in 0..1. See also: vlt.colorspace.rgb2cmyk Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"vlt.colorspace.cmyk2rgb"},{"location":"reference/%2Bvlt/%2Bcolorspace/cmyk2rgb.m/#vltcolorspacecmyk2rgb","text":"CMYK2RGB - Convert CMYK to RGB RGB = vlt.colorspace.cmyk2rgb(COLOR) Converts from CMYK color space to RGB space. Color values must be in 0..1. See also: vlt.colorspace.rgb2cmyk Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"vlt.colorspace.cmyk2rgb"},{"location":"reference/%2Bvlt/%2Bcolorspace/rgb2cmyk.m/","text":"vlt.colorspace.rgb2cmyk \u00b6 RGB2CMYK - Convert RGB to CMYK CMYK = vlt.colorspace.rgb2cmyk(RGB) Converts from RGB color space to CMYK space. Color values must be in 0..1. See also: vlt.colorspace.cmyk2rgb Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"vlt.colorspace.rgb2cmyk"},{"location":"reference/%2Bvlt/%2Bcolorspace/rgb2cmyk.m/#vltcolorspacergb2cmyk","text":"RGB2CMYK - Convert RGB to CMYK CMYK = vlt.colorspace.rgb2cmyk(RGB) Converts from RGB color space to CMYK space. Color values must be in 0..1. See also: vlt.colorspace.cmyk2rgb Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"vlt.colorspace.rgb2cmyk"},{"location":"reference/%2Bvlt/%2Bconfig/add_config_file.m/","text":"vlt.config.add_config_file \u00b6 ADD_CONFIG_FILE - Add a default configuration file to the configuration directory vlt.config.add_config_file(CONFIG_FILENAME, CONFIG_BASENAME, ...) Makes a copy of the file CONFIG_BASENAME and places it in a file called CONFIG_FILENAME. The CONFIG_FILENAME is located in a directory called config_dirpath, which is by default determined by calling CONFIG_DIRPATH. This default behavior of this program can be modified by passing name/value pairs: NAME (default) | Description ----------------------------------------------------------- config_dirpath | Path of where the file should be (config_dirname) | saved","title":"vlt.config.add_config_file"},{"location":"reference/%2Bvlt/%2Bconfig/add_config_file.m/#vltconfigadd_config_file","text":"ADD_CONFIG_FILE - Add a default configuration file to the configuration directory vlt.config.add_config_file(CONFIG_FILENAME, CONFIG_BASENAME, ...) Makes a copy of the file CONFIG_BASENAME and places it in a file called CONFIG_FILENAME. The CONFIG_FILENAME is located in a directory called config_dirpath, which is by default determined by calling CONFIG_DIRPATH. This default behavior of this program can be modified by passing name/value pairs: NAME (default) | Description ----------------------------------------------------------- config_dirpath | Path of where the file should be (config_dirname) | saved","title":"vlt.config.add_config_file"},{"location":"reference/%2Bvlt/%2Bconfig/config_dirname.m/","text":"vlt.config.config_dirname \u00b6 CONFIG_DIRNAME - Return the path location of configuration files DIRNAME = vlt . config . config_dirname Defines the default location for configuration files for vhlab - toolbox - matlab . By default , the location is in a directory called 'vhlab_configuration' that is located in the same directory as vhlab - toolbox - matlab . If the DIRNAME does not exist , it is created and added to the current Matlab path .","title":"vlt.config.config_dirname"},{"location":"reference/%2Bvlt/%2Bconfig/config_dirname.m/#vltconfigconfig_dirname","text":"CONFIG_DIRNAME - Return the path location of configuration files DIRNAME = vlt . config . config_dirname Defines the default location for configuration files for vhlab - toolbox - matlab . By default , the location is in a directory called 'vhlab_configuration' that is located in the same directory as vhlab - toolbox - matlab . If the DIRNAME does not exist , it is created and added to the current Matlab path .","title":"vlt.config.config_dirname"},{"location":"reference/%2Bvlt/%2Bdaq/%2BMCCUSB1208FS/MCCUSB1208FS_AcquireSimpleDaq.m/","text":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq \u00b6 vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq is a function. [data, newsd] = vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq(sd)","title":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2BMCCUSB1208FS/MCCUSB1208FS_AcquireSimpleDaq.m/#vltdaqmccusb1208fsmccusb1208fs_acquiresimpledaq","text":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq is a function. [data, newsd] = vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq(sd)","title":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_AcquireSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2BMCCUSB1208FS/MCCUSB1208FS_CloseSimpleDaq.m/","text":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq \u00b6 vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq is a function. newsd = vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq(sd)","title":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2BMCCUSB1208FS/MCCUSB1208FS_CloseSimpleDaq.m/#vltdaqmccusb1208fsmccusb1208fs_closesimpledaq","text":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq is a function. newsd = vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq(sd)","title":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_CloseSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2BMCCUSB1208FS/MCCUSB1208FS_OpenSimpleDaq.m/","text":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq \u00b6 vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq is a function. newsd = vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq(sd)","title":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2BMCCUSB1208FS/MCCUSB1208FS_OpenSimpleDaq.m/#vltdaqmccusb1208fsmccusb1208fs_opensimpledaq","text":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq is a function. newsd = vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq(sd)","title":"vlt.daq.MCCUSB1208FS.MCCUSB1208FS_OpenSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bdummyekgeegdaq/dummyekgeegdaq_AcquireSimpleDaq.m/","text":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq \u00b6 vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq is a function. [data, newsd] = vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq(sd)","title":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bdummyekgeegdaq/dummyekgeegdaq_AcquireSimpleDaq.m/#vltdaqdummyekgeegdaqdummyekgeegdaq_acquiresimpledaq","text":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq is a function. [data, newsd] = vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq(sd)","title":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_AcquireSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bdummyekgeegdaq/dummyekgeegdaq_CloseSimpleDaq.m/","text":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq \u00b6 vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq is a function. newsd = vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq(sd)","title":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bdummyekgeegdaq/dummyekgeegdaq_CloseSimpleDaq.m/#vltdaqdummyekgeegdaqdummyekgeegdaq_closesimpledaq","text":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq is a function. newsd = vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq(sd)","title":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_CloseSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bdummyekgeegdaq/dummyekgeegdaq_OpenSimpleDaq.m/","text":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq \u00b6 vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq is a function. newsd = vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq(sd)","title":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bdummyekgeegdaq/dummyekgeegdaq_OpenSimpleDaq.m/#vltdaqdummyekgeegdaqdummyekgeegdaq_opensimpledaq","text":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq is a function. newsd = vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq(sd)","title":"vlt.daq.dummyekgeegdaq.dummyekgeegdaq_OpenSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/AcquireSimpleDaq.m/","text":"vlt.daq.simpledaq.AcquireSimpleDaq \u00b6 vlt . daq . simpledaq . AcquireSimpleDaq - Acquires a SimpleDaq device [ DATA , NEWSD ] = vlt . daq . simpledaq . AcquireSimpleDaq ( SD ) Calls the acquire function for the SimpleDaq device SD . Literally returns [ DATA , NEWSD ] = SD . daqname_AcquireSimpleDaq ( SD ) The structure DATA will have the following fields : starttime -- the 'clock' value at the beginning of the recording ; this is the 6 element vector returned by the Matlab function CLOCK data -- a cell list of all data records , the ith of which is a matrix with entries [ t_i ; data_i_1 ; data_i_2 ; ... ] where t_i indicates the sample times of data record i ( usually with respect to starttime ; that is 0 == starttime ) and data_i_n is the value sampled on channel n .","title":"vlt.daq.simpledaq.AcquireSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/AcquireSimpleDaq.m/#vltdaqsimpledaqacquiresimpledaq","text":"vlt . daq . simpledaq . AcquireSimpleDaq - Acquires a SimpleDaq device [ DATA , NEWSD ] = vlt . daq . simpledaq . AcquireSimpleDaq ( SD ) Calls the acquire function for the SimpleDaq device SD . Literally returns [ DATA , NEWSD ] = SD . daqname_AcquireSimpleDaq ( SD ) The structure DATA will have the following fields : starttime -- the 'clock' value at the beginning of the recording ; this is the 6 element vector returned by the Matlab function CLOCK data -- a cell list of all data records , the ith of which is a matrix with entries [ t_i ; data_i_1 ; data_i_2 ; ... ] where t_i indicates the sample times of data record i ( usually with respect to starttime ; that is 0 == starttime ) and data_i_n is the value sampled on channel n .","title":"vlt.daq.simpledaq.AcquireSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/CloseSimpleDaq.m/","text":"vlt.daq.simpledaq.CloseSimpleDaq \u00b6 vlt . daq . simpledaq . CloseSimpleDaq - Closes a SimpleDaq device NEWSD = vlt . daq . simpledaq . CloseSimpleDaq ( SD ) Calls the close function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_CloseSimpleDaq ( SD )","title":"vlt.daq.simpledaq.CloseSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/CloseSimpleDaq.m/#vltdaqsimpledaqclosesimpledaq","text":"vlt . daq . simpledaq . CloseSimpleDaq - Closes a SimpleDaq device NEWSD = vlt . daq . simpledaq . CloseSimpleDaq ( SD ) Calls the close function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_CloseSimpleDaq ( SD )","title":"vlt.daq.simpledaq.CloseSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/NewSimpleDaq.m/","text":"vlt.daq.simpledaq.NewSimpleDaq \u00b6 vlt . daq . simpledaq . NewSimpleDaq - Creates a new SimpleDaq object SD = vlt . daq . simpledaq . NewSimpleDaq ( DAQNAME , PARAMETERS ) Returns a structure with fieldnames 'daqname' and 'parameters' , set to the string DAQNAME and the variable PARAMETERS , respectfully . This structure can then be passed to the SimpleDAQ commands such as vlt . daq . simpledaq . OpenSimpleDaq vlt . daq . simpledaq . CloseSimpleDaq vlt . daq . simpledaq . AcquireSimpleDaq SimpleDaq is a wrapper class for many types of aqcusition devices . When one calls vlt . daq . simpledaq . OpenSimpleDaq , vlt . daq . simpledaq . OpenSimpleDaq will in turn call DAQNAME_OpenSimpleDaq ( DAQNAME , PARAMETERS )","title":"vlt.daq.simpledaq.NewSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/NewSimpleDaq.m/#vltdaqsimpledaqnewsimpledaq","text":"vlt . daq . simpledaq . NewSimpleDaq - Creates a new SimpleDaq object SD = vlt . daq . simpledaq . NewSimpleDaq ( DAQNAME , PARAMETERS ) Returns a structure with fieldnames 'daqname' and 'parameters' , set to the string DAQNAME and the variable PARAMETERS , respectfully . This structure can then be passed to the SimpleDAQ commands such as vlt . daq . simpledaq . OpenSimpleDaq vlt . daq . simpledaq . CloseSimpleDaq vlt . daq . simpledaq . AcquireSimpleDaq SimpleDaq is a wrapper class for many types of aqcusition devices . When one calls vlt . daq . simpledaq . OpenSimpleDaq , vlt . daq . simpledaq . OpenSimpleDaq will in turn call DAQNAME_OpenSimpleDaq ( DAQNAME , PARAMETERS )","title":"vlt.daq.simpledaq.NewSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/OpenSimpleDaq.m/","text":"vlt.daq.simpledaq.OpenSimpleDaq \u00b6 vlt . daq . simpledaq . OpenSimpleDaq - Opens a SimpleDaq device NEWSD = vlt . daq . simpledaq . OpenSimpleDaq ( SD ) Calls the open function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_OpenSimpleDaq ( SD )","title":"vlt.daq.simpledaq.OpenSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdaq/%2Bsimpledaq/OpenSimpleDaq.m/#vltdaqsimpledaqopensimpledaq","text":"vlt . daq . simpledaq . OpenSimpleDaq - Opens a SimpleDaq device NEWSD = vlt . daq . simpledaq . OpenSimpleDaq ( SD ) Calls the open function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_OpenSimpleDaq ( SD )","title":"vlt.daq.simpledaq.OpenSimpleDaq"},{"location":"reference/%2Bvlt/%2Bdata/assign.m/","text":"vlt.data.assign \u00b6 assign - make a list of assignments ( matlab 5 or higher ) vlt . data . assign ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; vlt . data . assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"vlt.data.assign"},{"location":"reference/%2Bvlt/%2Bdata/assign.m/#vltdataassign","text":"assign - make a list of assignments ( matlab 5 or higher ) vlt . data . assign ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; vlt . data . assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"vlt.data.assign"},{"location":"reference/%2Bvlt/%2Bdata/cache.m/","text":"CLASS vlt.data.cache \u00b6 cache - Cache class Superclasses \u00b6 handle Properties \u00b6 Property Description maxMemory The maximum memory, in bytes, that can be consumed by an CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache Methods \u00b6 Method Description add add data to an NDI.CACHE addlistener ADDLISTENER Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an CACHE object Methods help \u00b6 add - add data to an NDI.CACHE CACHE_OBJ = ADD ( CACHE_OBJ , KEY , TYPE , DATA , [ PRIORITY ] ) Adds DATA to the CACHE_OBJ that is referenced by a KEY and TYPE . If desired , a PRIORITY can be added ; items with greatest PRIORITY will be deleted last . addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , VLT . DATA . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . data . cache / addlistener is inherited from superclass handle bytes - memory size of an NDI.CACHE object in bytes B = BYTES ( CACHE_OBJ ) Return the current memory that is occupied by the table of CACHE_OBJ . cache - create a new NDI cache handle CACHE_OBJ = vlt . data . cache ( ... ) Creates a new vlt . data . cache object . Additional arguments can be specified as name value pairs : Parameter ( default ) | Description ------------------------------------------------------------ maxMemory ( 100 e6 ) | Max memory for cache , in bytes ( 100 MB default ) replacement_rule ( 'fifo' ) | Replacement rule ( see CACHE / SET_REPLACEMENT_RULE Note that the cache is not 'secure' , any function can query the data added . See also : vlt . data . namevaluepair Documentation for vlt . data . cache / cache doc vlt . data . cache clear - clear data from an NDI.CACHE CACHE_OBJ = CLEAR(CACHE_OBJ) Clears all entries from the NDI.CACHE object CACHE_OBJ. delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also VLT . DATA . CACHE , VLT . DATA . CACHE / ISVALID , CLEAR Help for vlt . data . cache / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , VLT . DATA . CACHE Help for vlt . data . cache / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also VLT . DATA . CACHE , VLT . DATA . CACHE / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for vlt . data . cache / findprop is inherited from superclass handle freebytes - remove the lowest priority entries from the cache to free a certain amount of memory CACHE_OBJ = FREEBYTES ( CACHE_OBJ , FREEBYTES ) Remove entries to free at least FREEBYTES memory . Entries will be removed , first by PRIORITY and then by the replacement_rule parameter . See also : NDI . CACHE / ADD , NDI . CACHE / SET_REPLACEMENT_RULE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also VLT . DATA . CACHE , VLT . DATA . CACHE / DELETE Help for vlt . data . cache / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , VLT . DATA . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . data . cache / listener is inherited from superclass handle lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE TABLEENTRY = LOOKUP(CACHE_OBJ, KEY, TYPE) Performs a case-sensitive lookup of the CACHE entry whose key and type match KEY and TYPE. The table entry is returned. The table has fields: Fieldname | Description ----------------------------------------------------- key | The key string type | The type string timestamp | The Matlab date stamp (serial date number, see NOW) when data was stored priority | The priority of maintaining the data (higher is better) bytes | The size of the data in this entry (bytes) data | The data stored lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / NE Help for vlt . data . cache / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT Help for vlt . data . cache / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also VLT . DATA . CACHE , VLT . DATA . CACHE / ADDLISTENER , VLT . DATA . CACHE / LISTENER , EVENT . EVENTDATA , EVENTS Help for vlt . data . cache / notify is inherited from superclass handle remove - remove data from an NDI.CACHE CACHE_OBJ = REMOVE ( CACHE_OBJ , KEY , TYPE , ... ) or CACHE_OBJ = REMOVE ( CACHE_OBJ , INDEX , [], ... ) Removes the data at table index INDEX or data with KEY and TYPE . INDEX can be a single entry or an array of entries . If the data entry to be removed is a handle , the handle will be deleted from memory unless the setting is altered with a NAME / VALUE pair . This function can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- leavehandle ( 0 ) | If the 'data' field of a cache entry is a handle , | leave it in memory . See also : vlt . data . namevaluepair set_replacement_rule - set the replacement rule for an CACHE object CACHE_OBJ = SET_REPLACEMENT_RULE ( CACHE_OBJ , RULE ) Sets the replacement rule for a vlt . data . cache object to be used when a new entry would exceed the allowed memory . The rule may be one of the following strings ( case is insensitive and will be stored lower case ) : Rule | Description --------------------------------------------------------- 'fifo' | First in , first out ; discard oldest entries first. 'lifo' | Last in , first out ; discard newest entries first. 'error' | Don 't discard anything, just produce an error saying cache is full","title":"vlt.data.cache"},{"location":"reference/%2Bvlt/%2Bdata/cache.m/#class-vltdatacache","text":"cache - Cache class","title":"CLASS vlt.data.cache"},{"location":"reference/%2Bvlt/%2Bdata/cache.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bdata/cache.m/#properties","text":"Property Description maxMemory The maximum memory, in bytes, that can be consumed by an CACHE before it is emptied replacement_rule The rule to be used to replace entries when memory is exceeded ('FIFO','LIFO','error', etc) table The variable that has the data and metadata for the cache","title":"Properties"},{"location":"reference/%2Bvlt/%2Bdata/cache.m/#methods","text":"Method Description add add data to an NDI.CACHE addlistener ADDLISTENER Add listener for event. bytes memory size of an NDI.CACHE object in bytes cache create a new NDI cache handle clear clear data from an NDI.CACHE delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. freebytes remove the lowest priority entries from the cache to free a certain amount of memory ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lookup retrieve the NDI.CACHE data table corresponding to KEY and TYPE lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. remove remove data from an NDI.CACHE set_replacement_rule set the replacement rule for an CACHE object","title":"Methods"},{"location":"reference/%2Bvlt/%2Bdata/cache.m/#methods-help","text":"add - add data to an NDI.CACHE CACHE_OBJ = ADD ( CACHE_OBJ , KEY , TYPE , DATA , [ PRIORITY ] ) Adds DATA to the CACHE_OBJ that is referenced by a KEY and TYPE . If desired , a PRIORITY can be added ; items with greatest PRIORITY will be deleted last . addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , VLT . DATA . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . data . cache / addlistener is inherited from superclass handle bytes - memory size of an NDI.CACHE object in bytes B = BYTES ( CACHE_OBJ ) Return the current memory that is occupied by the table of CACHE_OBJ . cache - create a new NDI cache handle CACHE_OBJ = vlt . data . cache ( ... ) Creates a new vlt . data . cache object . Additional arguments can be specified as name value pairs : Parameter ( default ) | Description ------------------------------------------------------------ maxMemory ( 100 e6 ) | Max memory for cache , in bytes ( 100 MB default ) replacement_rule ( 'fifo' ) | Replacement rule ( see CACHE / SET_REPLACEMENT_RULE Note that the cache is not 'secure' , any function can query the data added . See also : vlt . data . namevaluepair Documentation for vlt . data . cache / cache doc vlt . data . cache clear - clear data from an NDI.CACHE CACHE_OBJ = CLEAR(CACHE_OBJ) Clears all entries from the NDI.CACHE object CACHE_OBJ. delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also VLT . DATA . CACHE , VLT . DATA . CACHE / ISVALID , CLEAR Help for vlt . data . cache / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , VLT . DATA . CACHE Help for vlt . data . cache / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also VLT . DATA . CACHE , VLT . DATA . CACHE / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for vlt . data . cache / findprop is inherited from superclass handle freebytes - remove the lowest priority entries from the cache to free a certain amount of memory CACHE_OBJ = FREEBYTES ( CACHE_OBJ , FREEBYTES ) Remove entries to free at least FREEBYTES memory . Entries will be removed , first by PRIORITY and then by the replacement_rule parameter . See also : NDI . CACHE / ADD , NDI . CACHE / SET_REPLACEMENT_RULE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also VLT . DATA . CACHE , VLT . DATA . CACHE / DELETE Help for vlt . data . cache / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LT , VLT . DATA . CACHE / NE Help for vlt . data . cache / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , VLT . DATA . CACHE , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . data . cache / listener is inherited from superclass handle lookup - retrieve the NDI.CACHE data table corresponding to KEY and TYPE TABLEENTRY = LOOKUP(CACHE_OBJ, KEY, TYPE) Performs a case-sensitive lookup of the CACHE entry whose key and type match KEY and TYPE. The table entry is returned. The table has fields: Fieldname | Description ----------------------------------------------------- key | The key string type | The type string timestamp | The Matlab date stamp (serial date number, see NOW) when data was stored priority | The priority of maintaining the data (higher is better) bytes | The size of the data in this entry (bytes) data | The data stored lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / NE Help for vlt . data . cache / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . DATA . CACHE , VLT . DATA . CACHE / EQ , VLT . DATA . CACHE / GE , VLT . DATA . CACHE / GT , VLT . DATA . CACHE / LE , VLT . DATA . CACHE / LT Help for vlt . data . cache / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also VLT . DATA . CACHE , VLT . DATA . CACHE / ADDLISTENER , VLT . DATA . CACHE / LISTENER , EVENT . EVENTDATA , EVENTS Help for vlt . data . cache / notify is inherited from superclass handle remove - remove data from an NDI.CACHE CACHE_OBJ = REMOVE ( CACHE_OBJ , KEY , TYPE , ... ) or CACHE_OBJ = REMOVE ( CACHE_OBJ , INDEX , [], ... ) Removes the data at table index INDEX or data with KEY and TYPE . INDEX can be a single entry or an array of entries . If the data entry to be removed is a handle , the handle will be deleted from memory unless the setting is altered with a NAME / VALUE pair . This function can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- leavehandle ( 0 ) | If the 'data' field of a cache entry is a handle , | leave it in memory . See also : vlt . data . namevaluepair set_replacement_rule - set the replacement rule for an CACHE object CACHE_OBJ = SET_REPLACEMENT_RULE ( CACHE_OBJ , RULE ) Sets the replacement rule for a vlt . data . cache object to be used when a new entry would exceed the allowed memory . The rule may be one of the following strings ( case is insensitive and will be stored lower case ) : Rule | Description --------------------------------------------------------- 'fifo' | First in , first out ; discard oldest entries first. 'lifo' | Last in , first out ; discard newest entries first. 'error' | Don 't discard anything, just produce an error saying cache is full","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bdata/catCellStr.m/","text":"vlt.data.catCellStr \u00b6 STR = CATCELLSTR(CELLSTR) Concatenates a list into one long string separated by spaces. Note that the list must be one-dimensional and also be made up entirely of character strings.","title":"vlt.data.catCellStr"},{"location":"reference/%2Bvlt/%2Bdata/catCellStr.m/#vltdatacatcellstr","text":"STR = CATCELLSTR(CELLSTR) Concatenates a list into one long string separated by spaces. Note that the list must be one-dimensional and also be made up entirely of character strings.","title":"vlt.data.catCellStr"},{"location":"reference/%2Bvlt/%2Bdata/catstructfields.m/","text":"vlt.data.catstructfields \u00b6 CATSTRUCTFIELDS - Concatenate fields from structures with equal fields STRUCT_OUT = vlt . data . catstructfields ( STRUCT1 , STRUCT2 [ , DIMENSION ] ) This function concatenates the contents of the field values of STRUCT1 and STRUCT2 . STRUCT1 and STRUCT2 must have identical fieldnames . DIMENSION is the dimension over which the concatenation is performed . If DIMENSION is not provided , then the function uses the largest dimension of each field as the concatenation dimension . Example : a . field1 = [ 1 2 3 ] ; a . field2 = [ 1 2 3 ] ; b . field1 = [ 4 5 6 ] ; b . field2 = [ 4 5 6 ] ; c = vlt . data . catstructfields ( a , b ); c . field1 % is [ 1 2 3 4 5 6 ] c . field2 % is [ 1 2 3 4 5 6 ]","title":"vlt.data.catstructfields"},{"location":"reference/%2Bvlt/%2Bdata/catstructfields.m/#vltdatacatstructfields","text":"CATSTRUCTFIELDS - Concatenate fields from structures with equal fields STRUCT_OUT = vlt . data . catstructfields ( STRUCT1 , STRUCT2 [ , DIMENSION ] ) This function concatenates the contents of the field values of STRUCT1 and STRUCT2 . STRUCT1 and STRUCT2 must have identical fieldnames . DIMENSION is the dimension over which the concatenation is performed . If DIMENSION is not provided , then the function uses the largest dimension of each field as the concatenation dimension . Example : a . field1 = [ 1 2 3 ] ; a . field2 = [ 1 2 3 ] ; b . field1 = [ 4 5 6 ] ; b . field2 = [ 4 5 6 ] ; c = vlt . data . catstructfields ( a , b ); c . field1 % is [ 1 2 3 4 5 6 ] c . field2 % is [ 1 2 3 4 5 6 ]","title":"vlt.data.catstructfields"},{"location":"reference/%2Bvlt/%2Bdata/cell2group.m/","text":"vlt.data.cell2group \u00b6 CELL2GROUP - Turn cell data into a vector with group ID , as appropriate for ANOVA1 [ X , GROUP ] = vlt . data . cell2group ( INPUT_DATA ) Reorganize data that is stored in vectors in different cells of the cell array INPUT_DATA into a single vector variable X with the group identity of each variable in X indicated by the corresponding entry in GROUP . This is useful for preparing data for ANOVA1 . Example : a = { [ 1 2 3 ] ', [4 5 6]' , [ 7 8 9 ] ' }; [ x , group ] = vlt . data . cell2group ( a ) % x is [ 1 2 3 4 5 6 7 8 9 ] ' % group is [ 1 1 1 2 2 2 3 3 3 ] ' See also : ANOVA1","title":"vlt.data.cell2group"},{"location":"reference/%2Bvlt/%2Bdata/cell2group.m/#vltdatacell2group","text":"CELL2GROUP - Turn cell data into a vector with group ID , as appropriate for ANOVA1 [ X , GROUP ] = vlt . data . cell2group ( INPUT_DATA ) Reorganize data that is stored in vectors in different cells of the cell array INPUT_DATA into a single vector variable X with the group identity of each variable in X indicated by the corresponding entry in GROUP . This is useful for preparing data for ANOVA1 . Example : a = { [ 1 2 3 ] ', [4 5 6]' , [ 7 8 9 ] ' }; [ x , group ] = vlt . data . cell2group ( a ) % x is [ 1 2 3 4 5 6 7 8 9 ] ' % group is [ 1 1 1 2 2 2 3 3 3 ] ' See also : ANOVA1","title":"vlt.data.cell2group"},{"location":"reference/%2Bvlt/%2Bdata/cell2matn.m/","text":"vlt.data.cell2matn \u00b6 CELL2MATN - convert a cell matrix to a numeric matrix with NaN for empty M = CELL2MATN ( C ) Create a numeric matrix from a cell matrix C . Empty entries of C will be coded as NaN entries in M . C must contain only single numeric entries . Example : a { 1 , 1 } = 1 ; a { 1 , 2 } = 2 ; a { 2 , 1 } = 3 ; m = vlt . data . cell2matn ( a ); % m is [ 1 2 ; 3 NaN] See also : CELL2MAT , MAT2CELL","title":"vlt.data.cell2matn"},{"location":"reference/%2Bvlt/%2Bdata/cell2matn.m/#vltdatacell2matn","text":"CELL2MATN - convert a cell matrix to a numeric matrix with NaN for empty M = CELL2MATN ( C ) Create a numeric matrix from a cell matrix C . Empty entries of C will be coded as NaN entries in M . C must contain only single numeric entries . Example : a { 1 , 1 } = 1 ; a { 1 , 2 } = 2 ; a { 2 , 1 } = 3 ; m = vlt . data . cell2matn ( a ); % m is [ 1 2 ; 3 NaN] See also : CELL2MAT , MAT2CELL","title":"vlt.data.cell2matn"},{"location":"reference/%2Bvlt/%2Bdata/cell2mlstr.m/","text":"vlt.data.cell2mlstr \u00b6 CELL2MLSTR - Create a text string to fully characterize a cellure STR = vlt . data . cell2mlstr ( THECELL ) Produces a string representation of a cellure that can be passed to an external program to fully encapsulate the cellure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using vlt . data . cell2mlstr . Any other objects are written using the function DISP . The cellure is written in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > where X , Y , Z are the dimension of the cellure array , and data contains the data for each cell entry , inside < and >. Within each data , values for each field separated with < and > characters . / CELL ends the cellure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = vlt . data . cell2str ( THECELL , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - cellures ( default 5 ) Example : A = { 'test' , 5 , [ 3 4 5 ]} vlt . data . cell2mlstr ( A )","title":"vlt.data.cell2mlstr"},{"location":"reference/%2Bvlt/%2Bdata/cell2mlstr.m/#vltdatacell2mlstr","text":"CELL2MLSTR - Create a text string to fully characterize a cellure STR = vlt . data . cell2mlstr ( THECELL ) Produces a string representation of a cellure that can be passed to an external program to fully encapsulate the cellure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using vlt . data . cell2mlstr . Any other objects are written using the function DISP . The cellure is written in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > where X , Y , Z are the dimension of the cellure array , and data contains the data for each cell entry , inside < and >. Within each data , values for each field separated with < and > characters . / CELL ends the cellure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = vlt . data . cell2str ( THECELL , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - cellures ( default 5 ) Example : A = { 'test' , 5 , [ 3 4 5 ]} vlt . data . cell2mlstr ( A )","title":"vlt.data.cell2mlstr"},{"location":"reference/%2Bvlt/%2Bdata/cell2str.m/","text":"vlt.data.cell2str \u00b6 CELL2STR - Convert 1 - D cells to a string STR = vlt . data . cell2str ( THECELL ) Converts a 1 - D cell to a string representation that can be evaluated to reproduce the cell array . At present , this function works with 1 - dimensional cells only , and only chars and matrixes Example : A = { 'test' , 'test2' , 'test3' }; str = vlt . data . cell2str ( A ) % str = '{ 'test','test2','test3'}' B = eval ( str ); vlt . data . eqlen ( A , B ), % should return 1","title":"vlt.data.cell2str"},{"location":"reference/%2Bvlt/%2Bdata/cell2str.m/#vltdatacell2str","text":"CELL2STR - Convert 1 - D cells to a string STR = vlt . data . cell2str ( THECELL ) Converts a 1 - D cell to a string representation that can be evaluated to reproduce the cell array . At present , this function works with 1 - dimensional cells only , and only chars and matrixes Example : A = { 'test' , 'test2' , 'test3' }; str = vlt . data . cell2str ( A ) % str = '{ 'test','test2','test3'}' B = eval ( str ); vlt . data . eqlen ( A , B ), % should return 1","title":"vlt.data.cell2str"},{"location":"reference/%2Bvlt/%2Bdata/cellarray2mat.m/","text":"vlt.data.cellarray2mat \u00b6 CELLARRAY2MAT - convert cell arrays of vectors to a matrix , filling with NaN M = CELLARRAY2MAT ( C ) Convert a cell array of vectors to a matrix , filling in any non - present entries with NaN . The columns of M will be the entries of C { i }. Each entry C { i } must be a vector or empty . Example : c { 1 } = [ 1 2 3 ]; c { 2 } = [ 4 5 ]; m = vlt . data . cellarray2mat ( c ); % m == [ 1 4; 2 5; 3 NaN]","title":"vlt.data.cellarray2mat"},{"location":"reference/%2Bvlt/%2Bdata/cellarray2mat.m/#vltdatacellarray2mat","text":"CELLARRAY2MAT - convert cell arrays of vectors to a matrix , filling with NaN M = CELLARRAY2MAT ( C ) Convert a cell array of vectors to a matrix , filling in any non - present entries with NaN . The columns of M will be the entries of C { i }. Each entry C { i } must be a vector or empty . Example : c { 1 } = [ 1 2 3 ]; c { 2 } = [ 4 5 ]; m = vlt . data . cellarray2mat ( c ); % m == [ 1 4; 2 5; 3 NaN]","title":"vlt.data.cellarray2mat"},{"location":"reference/%2Bvlt/%2Bdata/celloritem.m/","text":"vlt.data.celloritem \u00b6 CELLORITEM - Returns the ith element of a cell list , or a single item ITEM = vlt . data . celloritem ( VAR , [ INDEX ] , [ USEINDEXFORVAR ] ) This function examines VAR : if VAR is a cell list , then it returns the INDEXth element of VAR ; if VAR is not a cell list , then it returns VAR , unless the user specifies that the INDEXth element of var should be returned ( USEINDEXFORVAR = 1 ). If INDEX is not provided , it is assumed to be 1. If USEINDEXFORVAR is not provided , it is assumed to be 0. This can be used to allow the user the option of providing a cell list or a single entry ( Example 1 ) or to pull an item that may be stored as a cell list or a struct ( Example 2 : , a JSON encoding / decoding into Matlab is underspecified and may result in either a cell array or a struct array ). Example 1 : mylist1 = { 'Joe' , 'Larry' , 'Curly' } ; mylist2 = 'Joe' ; for i = 1 : 3 , vlt . data . celloritem ( mylist1 , i ), vlt . data . celloritem ( mylist2 , i ), end ; Example 2 : myotherlist1 = [ 1 2 3 ] ; myotherlist2 = { [ 1 ] [ 2 ] [ 3 ] } ; for i = 1 : 3 , vlt . data . celloritem ( myotherlist1 , i , 1 ), vlt . data . celloritem ( myotherlist2 , i , 1 ), end","title":"vlt.data.celloritem"},{"location":"reference/%2Bvlt/%2Bdata/celloritem.m/#vltdatacelloritem","text":"CELLORITEM - Returns the ith element of a cell list , or a single item ITEM = vlt . data . celloritem ( VAR , [ INDEX ] , [ USEINDEXFORVAR ] ) This function examines VAR : if VAR is a cell list , then it returns the INDEXth element of VAR ; if VAR is not a cell list , then it returns VAR , unless the user specifies that the INDEXth element of var should be returned ( USEINDEXFORVAR = 1 ). If INDEX is not provided , it is assumed to be 1. If USEINDEXFORVAR is not provided , it is assumed to be 0. This can be used to allow the user the option of providing a cell list or a single entry ( Example 1 ) or to pull an item that may be stored as a cell list or a struct ( Example 2 : , a JSON encoding / decoding into Matlab is underspecified and may result in either a cell array or a struct array ). Example 1 : mylist1 = { 'Joe' , 'Larry' , 'Curly' } ; mylist2 = 'Joe' ; for i = 1 : 3 , vlt . data . celloritem ( mylist1 , i ), vlt . data . celloritem ( mylist2 , i ), end ; Example 2 : myotherlist1 = [ 1 2 3 ] ; myotherlist2 = { [ 1 ] [ 2 ] [ 3 ] } ; for i = 1 : 3 , vlt . data . celloritem ( myotherlist1 , i , 1 ), vlt . data . celloritem ( myotherlist2 , i , 1 ), end","title":"vlt.data.celloritem"},{"location":"reference/%2Bvlt/%2Bdata/celltable2struct.m/","text":"vlt.data.celltable2struct \u00b6 CELLTABLE2STRUCT - convert a table stored in a CELL datatype to a structure S = vlt . data . celltable2struct ( C ) Converts a table stored in the cell matrix C to a structure . It is assumed that the first row of C ( C { 1 }) has structure labels . If any of these labels are not valid Matlab variables , then they are converted to be . If rows of C { j } ( j > 1 ) have fewer entries than the header row , then all subsequent fields in the structure will have empty ([]) values . Example : % Read a tab - seperated - value file with truncated entries ( that is , %where each line ends prematurely if later fields are empty ) : o = vlt . file . read_tab_delimited_file ( filename ); s = vlt . data . celltable2struct ( o );","title":"vlt.data.celltable2struct"},{"location":"reference/%2Bvlt/%2Bdata/celltable2struct.m/#vltdatacelltable2struct","text":"CELLTABLE2STRUCT - convert a table stored in a CELL datatype to a structure S = vlt . data . celltable2struct ( C ) Converts a table stored in the cell matrix C to a structure . It is assumed that the first row of C ( C { 1 }) has structure labels . If any of these labels are not valid Matlab variables , then they are converted to be . If rows of C { j } ( j > 1 ) have fewer entries than the header row , then all subsequent fields in the structure will have empty ([]) values . Example : % Read a tab - seperated - value file with truncated entries ( that is , %where each line ends prematurely if later fields are empty ) : o = vlt . file . read_tab_delimited_file ( filename ); s = vlt . data . celltable2struct ( o );","title":"vlt.data.celltable2struct"},{"location":"reference/%2Bvlt/%2Bdata/columnize_struct.m/","text":"vlt.data.columnize_struct \u00b6 vlt . data . columize_struct - turn all vector substructures into columns S_OUT = COLUMNIZE_STRUCT ( S_IN ) Given a structure S_IN , that potentially has structures as fields , return an almost equivalent structure S_OUT where all of the structure vector arrays are organized in columns . This function is useful because , when converting a Matlab structure to and from JSON using JSONENCODE and JSONDECODE , sometimes the row / column ordering of structure vectors is altered .","title":"vlt.data.columnize_struct"},{"location":"reference/%2Bvlt/%2Bdata/columnize_struct.m/#vltdatacolumnize_struct","text":"vlt . data . columize_struct - turn all vector substructures into columns S_OUT = COLUMNIZE_STRUCT ( S_IN ) Given a structure S_IN , that potentially has structures as fields , return an almost equivalent structure S_OUT where all of the structure vector arrays are organized in columns . This function is useful because , when converting a Matlab structure to and from JSON using JSONENCODE and JSONDECODE , sometimes the row / column ordering of structure vectors is altered .","title":"vlt.data.columnize_struct"},{"location":"reference/%2Bvlt/%2Bdata/colvec.m/","text":"vlt.data.colvec \u00b6 COLVEC - return a matrix reshaped as a column vector Y = vlt . data . colvec ( X ) Returns the contents of the matrix X as a column vector Y that is 1 xM , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . vlt . data . colvec is equivalent to Y = X ( : ) ; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix . See also : vlt . data . rowvec Example : A = rand ( 5 , 5 ) Y = vlt . data . colvec ( A ( 1 : 3 , 1 : 2 )) % returns points in rows 1 : 3 , columns 1 : 2","title":"vlt.data.colvec"},{"location":"reference/%2Bvlt/%2Bdata/colvec.m/#vltdatacolvec","text":"COLVEC - return a matrix reshaped as a column vector Y = vlt . data . colvec ( X ) Returns the contents of the matrix X as a column vector Y that is 1 xM , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . vlt . data . colvec is equivalent to Y = X ( : ) ; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix . See also : vlt . data . rowvec Example : A = rand ( 5 , 5 ) Y = vlt . data . colvec ( A ( 1 : 3 , 1 : 2 )) % returns points in rows 1 : 3 , columns 1 : 2","title":"vlt.data.colvec"},{"location":"reference/%2Bvlt/%2Bdata/conditional.m/","text":"vlt.data.conditional \u00b6 CONDITIONAL - Return A or B depending on result of a true / false test C = vlt . data . conditional ( TEST , A , B ) If TEST is > 0 , then C = A . Otherwise , C = B . Same as in C language : C = ( TEST ) ? A : B ; See also : SIGN . In C language : C language ternary operator , ternary conditional operator , conditional operator Example : C = vlt . data . conditional ( 3 < 5 , 1 , 0 ) % C will be 1","title":"vlt.data.conditional"},{"location":"reference/%2Bvlt/%2Bdata/conditional.m/#vltdataconditional","text":"CONDITIONAL - Return A or B depending on result of a true / false test C = vlt . data . conditional ( TEST , A , B ) If TEST is > 0 , then C = A . Otherwise , C = B . Same as in C language : C = ( TEST ) ? A : B ; See also : SIGN . In C language : C language ternary operator , ternary conditional operator , conditional operator Example : C = vlt . data . conditional ( 3 < 5 , 1 , 0 ) % C will be 1","title":"vlt.data.conditional"},{"location":"reference/%2Bvlt/%2Bdata/conditiongroup2cell.m/","text":"vlt.data.conditiongroup2cell \u00b6 CONDITIONGROUP2VALUE - Convert a condition grouping matrix to a cell . [ DATA , EXPER_INDEXES ] = vlt . data . conditiongroup2cell ( VALUES , EXPERIMENT_INDEXES , CONDITION_INDEXES ) Given an array of values VALUES , and another array EXPERIMENT_INDEXES that describes ( with an index number ) the experiment number that produced each entry of VALUES , and another array CONDITION_INDEXES that describes ( with an index number ) the experimental condition of each observation in VALUES , this function produces DATA - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry has a matrix of VALUES from that condition . EXPER_INDEXES - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry EXPER_INDEXES { n } ( i ) describes the experiment index number that produced the observation DATA { n } ( i ) This function is useful for preparing data in the form expected by vlt . plot . median_within_between_plot The documentation is way longer than the code .","title":"vlt.data.conditiongroup2cell"},{"location":"reference/%2Bvlt/%2Bdata/conditiongroup2cell.m/#vltdataconditiongroup2cell","text":"CONDITIONGROUP2VALUE - Convert a condition grouping matrix to a cell . [ DATA , EXPER_INDEXES ] = vlt . data . conditiongroup2cell ( VALUES , EXPERIMENT_INDEXES , CONDITION_INDEXES ) Given an array of values VALUES , and another array EXPERIMENT_INDEXES that describes ( with an index number ) the experiment number that produced each entry of VALUES , and another array CONDITION_INDEXES that describes ( with an index number ) the experimental condition of each observation in VALUES , this function produces DATA - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry has a matrix of VALUES from that condition . EXPER_INDEXES - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry EXPER_INDEXES { n } ( i ) describes the experiment index number that produced the observation DATA { n } ( i ) This function is useful for preparing data in the form expected by vlt . plot . median_within_between_plot The documentation is way longer than the code .","title":"vlt.data.conditiongroup2cell"},{"location":"reference/%2Bvlt/%2Bdata/deleteallchildren.m/","text":"vlt.data.deleteallchildren \u00b6 vlt . data . deleteallchildren vlt . data . deleteallchildren ( H ) Loops over the children of H and , if they are valid handles , deletes them .","title":"vlt.data.deleteallchildren"},{"location":"reference/%2Bvlt/%2Bdata/deleteallchildren.m/#vltdatadeleteallchildren","text":"vlt . data . deleteallchildren vlt . data . deleteallchildren ( H ) Loops over the children of H and , if they are valid handles , deletes them .","title":"vlt.data.deleteallchildren"},{"location":"reference/%2Bvlt/%2Bdata/dropnan.m/","text":"vlt.data.dropnan \u00b6 DROPNAN - return a vector with NaN entries dropped B = vlt . data . dropnan ( A ) Given a vector A , this function will return a vector B , which will have all non - NaN entries of A but will exclude NaN entries .","title":"vlt.data.dropnan"},{"location":"reference/%2Bvlt/%2Bdata/dropnan.m/#vltdatadropnan","text":"DROPNAN - return a vector with NaN entries dropped B = vlt . data . dropnan ( A ) Given a vector A , this function will return a vector B , which will have all non - NaN entries of A but will exclude NaN entries .","title":"vlt.data.dropnan"},{"location":"reference/%2Bvlt/%2Bdata/dropzero.m/","text":"vlt.data.dropzero \u00b6 DROPZERO - return a vector with zeroentries dropped B = vlt . data . dropzero ( A ) Given a vector A , this function will return a vector B , which will have all non - zero entries of A but will exclude zero entries .","title":"vlt.data.dropzero"},{"location":"reference/%2Bvlt/%2Bdata/dropzero.m/#vltdatadropzero","text":"DROPZERO - return a vector with zeroentries dropped B = vlt . data . dropzero ( A ) Given a vector A , this function will return a vector B , which will have all non - zero entries of A but will exclude zero entries .","title":"vlt.data.dropzero"},{"location":"reference/%2Bvlt/%2Bdata/emptystruct.m/","text":"vlt.data.emptystruct \u00b6 EMPTYSTRUCT - Create a structure with given fieldnames that is empty S = vlt . data . emptystruct ( fieldname1 , fieldname2 , ... ); or S = vlt . data . emptystruct ({ fieldname1 , fieldname2 , ... }); Creates an empty structure with a given list of field names . This is sometimes useful for setting the fieldnames and establishing the order of the fieldnames for a structure array that will be filled later . Example : s = vlt . data . emptystruct ( 'field1' , 'field2' ); for i = 1 : 5 , s2 . field1 = rand ; s2 . field2 = rand ; s ( end + 1 ) = s2 ; end ; See also : vlt . data . var2struct","title":"vlt.data.emptystruct"},{"location":"reference/%2Bvlt/%2Bdata/emptystruct.m/#vltdataemptystruct","text":"EMPTYSTRUCT - Create a structure with given fieldnames that is empty S = vlt . data . emptystruct ( fieldname1 , fieldname2 , ... ); or S = vlt . data . emptystruct ({ fieldname1 , fieldname2 , ... }); Creates an empty structure with a given list of field names . This is sometimes useful for setting the fieldnames and establishing the order of the fieldnames for a structure array that will be filled later . Example : s = vlt . data . emptystruct ( 'field1' , 'field2' ); for i = 1 : 5 , s2 . field1 = rand ; s2 . field2 = rand ; s ( end + 1 ) = s2 ; end ; See also : vlt . data . var2struct","title":"vlt.data.emptystruct"},{"location":"reference/%2Bvlt/%2Bdata/eqemp.m/","text":"vlt.data.eqemp \u00b6 vlt . data . eqemp B = vlt . data . eqemp ( X , Y ) If both X and Y are not empty , returns X == Y . If both X and Y are empty , b = 1 . Otherwise , b = 0 ; Note that if X==Y is not defined, there will be an error. See also : EQ , vlt . data . eqtot , vlt . data . eqlen","title":"vlt.data.eqemp"},{"location":"reference/%2Bvlt/%2Bdata/eqemp.m/#vltdataeqemp","text":"vlt . data . eqemp B = vlt . data . eqemp ( X , Y ) If both X and Y are not empty , returns X == Y . If both X and Y are empty , b = 1 . Otherwise , b = 0 ; Note that if X==Y is not defined, there will be an error. See also : EQ , vlt . data . eqtot , vlt . data . eqlen","title":"vlt.data.eqemp"},{"location":"reference/%2Bvlt/%2Bdata/eqlen.m/","text":"vlt.data.eqlen \u00b6 vlt . data . eqlen Returns 1 if objects to compare are equal and have same size B = vlt . data . eqlen ( X , Y ) Returns 1 iff X and Y have the same length and all of the entries in X and Y are the same . Examples : vlt . data . eqlen ( [ 1 ],[ 1 1 ] ) = 0 , whereas [ 1 ] == [ 1 1 ] = [ 1 1 ], vlt . data . eqtot ( [ 1 ],[ 1 1 ] ) = 1 vlt . data . eqlen ( [ 1 1 ],[ 1 1 ] ) = 1 vlt . data . eqlen ( [],[] ) = 1 See also : vlt . data . eqtot , vlt . data . eqemp , EQ","title":"vlt.data.eqlen"},{"location":"reference/%2Bvlt/%2Bdata/eqlen.m/#vltdataeqlen","text":"vlt . data . eqlen Returns 1 if objects to compare are equal and have same size B = vlt . data . eqlen ( X , Y ) Returns 1 iff X and Y have the same length and all of the entries in X and Y are the same . Examples : vlt . data . eqlen ( [ 1 ],[ 1 1 ] ) = 0 , whereas [ 1 ] == [ 1 1 ] = [ 1 1 ], vlt . data . eqtot ( [ 1 ],[ 1 1 ] ) = 1 vlt . data . eqlen ( [ 1 1 ],[ 1 1 ] ) = 1 vlt . data . eqlen ( [],[] ) = 1 See also : vlt . data . eqtot , vlt . data . eqemp , EQ","title":"vlt.data.eqlen"},{"location":"reference/%2Bvlt/%2Bdata/eqtot.m/","text":"vlt.data.eqtot \u00b6 vlt . data . eqtot B = vlt . data . eqtot ( X , Y ) Returns vlt . data . eqemp ( X , Y ) , except that if the result is an array of boolean values , the logical AND of all the results is returned . Example : vlt . data . eqtot ( [ 4 4 4 ],[ 4 4 4 ] ) = 1 , vlt . data . eqtot ( [ 1 ],[ 1 1 ] ) = 1 See also : vlt . data . eqemp , EQ","title":"vlt.data.eqtot"},{"location":"reference/%2Bvlt/%2Bdata/eqtot.m/#vltdataeqtot","text":"vlt . data . eqtot B = vlt . data . eqtot ( X , Y ) Returns vlt . data . eqemp ( X , Y ) , except that if the result is an array of boolean values , the logical AND of all the results is returned . Example : vlt . data . eqtot ( [ 4 4 4 ],[ 4 4 4 ] ) = 1 , vlt . data . eqtot ( [ 1 ],[ 1 1 ] ) = 1 See also : vlt . data . eqemp , EQ","title":"vlt.data.eqtot"},{"location":"reference/%2Bvlt/%2Bdata/equnique.m/","text":"vlt.data.equnique \u00b6 EQUNIQUE - Return unique elements of an arbitrary class using EQ OUT = vlt . data . equnique ( IN ) Returns the unique elements of an object array IN as a column OUT . Uses EQ to test for equality . This function is a little more general than Matlab 's UNIQUE in that it can operate on any object that implements an EQ function, not just CELL arrays. It performs no sorting, and has no requirement that elements are ordered or sortable. Example: A=struct(' A ',5,' B ' , 6 ); A = [ A A A ] ; B = vlt . data . equnique ( A ); % B == A ( 1 ) See also : UNIQUE","title":"vlt.data.equnique"},{"location":"reference/%2Bvlt/%2Bdata/equnique.m/#vltdataequnique","text":"EQUNIQUE - Return unique elements of an arbitrary class using EQ OUT = vlt . data . equnique ( IN ) Returns the unique elements of an object array IN as a column OUT . Uses EQ to test for equality . This function is a little more general than Matlab 's UNIQUE in that it can operate on any object that implements an EQ function, not just CELL arrays. It performs no sorting, and has no requirement that elements are ordered or sortable. Example: A=struct(' A ',5,' B ' , 6 ); A = [ A A A ] ; B = vlt . data . equnique ( A ); % B == A ( 1 ) See also : UNIQUE","title":"vlt.data.equnique"},{"location":"reference/%2Bvlt/%2Bdata/fieldsearch.m/","text":"vlt.data.fieldsearch \u00b6 FIELDSEARCH - Search a structure to determine if it matches a search structure B = vlt . data . fieldsearch ( A , SEARCHSTRUCT ) Determines if a structure A matches the search structure SEARCHSTRUCT . SEARCHSTRUCT should be a structure array with the following fields : Field : | Description ---------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields 'param1' and 'param2' . ------------------------| | 'regexp' - are there any regular expression matches between | the field value and 'param1' ? | 'exact_string' - is the field value an exact string match for 'param1' ? | 'exact_string_anycase' - is the field value an exact string match for 'param1' ( case insensitive ) ? | 'contains_string' - is the field value a char array that contains 'param1' ? | 'exact_number' - is the field value exactly 'param1' ( same size and values ) ? | 'lessthan' - is the field value less than 'param1' ( and comparable size ) | 'lessthaneq' - is the field value less than or equal to 'param1' ( and comparable size ) | 'greaterthan' - is the field value greater than 'param1' ( and comparable size ) | 'greaterthaneq' - is the field value greater than or equal to 'param1' ( and comparable size ) | 'hassize' - does the field value have the size as indicated in 'param1' [ x y z ... ] | 'hasmember' - does the field value have the member indicated in 'param1' ? | 'hasfield' - is the field present ? ( no role for 'param1' or 'param2' ) | 'partial_struct' - is the field value a structure that has all the fields of 'param1' with the same values ? | ( note that it may have additional fields not found in the structure in param1 ) | 'hasanysubfield_contains_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that contains the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'hasanysubfield_exact_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that exactly matches the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'or' - are the searchstruct elements specified in 'param1' OR 'param2' true ? | '~' - NOT of any operator , such as ~ regexp , negates the outcome of the search -----------------------| param1 | Search parameter 1. Meaning depends on 'operation' ( see above ) . param2 | Search parameter 2. Meaning depends on 'operation' ( see above ) . A 'comparable' size means the 2 variables can be compared . [ 1 2 3 ] >= 1 is comparable . [ 1 2 3 ] >= [ 0 0 0 ] is comparable . [ 1 2 3 ] > [ 1 2 ] is an error . Examples : A = struct ( 'a' , 'string_test' , 'b' ,[ 1 2 3 ]) b1 = vlt . data . fieldsearch ( A , struct ( 'field' , 'a' , 'operation' , 'contains_string' , 'param1' , 'test' , 'param2' , '' )) b2 = vlt . data . fieldsearch ( A , struct ( 'field' , 'b' , 'operation' , 'greaterthaneq' , 'param1' , 1 , 'param2' , '' )) B = struct ( 'values' , A ); b3 = vlt . data . fieldsearch ( B , struct ( 'field' , 'values' , 'operation' , 'hasanysubfield_contains_string' , 'param1' , 'a' , 'param2' , 'string_test' )) b4 = vlt . data . fieldsearch ( A , struct ( 'field' , '' , 'operation' , 'or' , ... 'param1' , struct ( 'field' , 'b' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ), ... 'param2' , struct ( 'field' , 'c' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ) ))","title":"vlt.data.fieldsearch"},{"location":"reference/%2Bvlt/%2Bdata/fieldsearch.m/#vltdatafieldsearch","text":"FIELDSEARCH - Search a structure to determine if it matches a search structure B = vlt . data . fieldsearch ( A , SEARCHSTRUCT ) Determines if a structure A matches the search structure SEARCHSTRUCT . SEARCHSTRUCT should be a structure array with the following fields : Field : | Description ---------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields 'param1' and 'param2' . ------------------------| | 'regexp' - are there any regular expression matches between | the field value and 'param1' ? | 'exact_string' - is the field value an exact string match for 'param1' ? | 'exact_string_anycase' - is the field value an exact string match for 'param1' ( case insensitive ) ? | 'contains_string' - is the field value a char array that contains 'param1' ? | 'exact_number' - is the field value exactly 'param1' ( same size and values ) ? | 'lessthan' - is the field value less than 'param1' ( and comparable size ) | 'lessthaneq' - is the field value less than or equal to 'param1' ( and comparable size ) | 'greaterthan' - is the field value greater than 'param1' ( and comparable size ) | 'greaterthaneq' - is the field value greater than or equal to 'param1' ( and comparable size ) | 'hassize' - does the field value have the size as indicated in 'param1' [ x y z ... ] | 'hasmember' - does the field value have the member indicated in 'param1' ? | 'hasfield' - is the field present ? ( no role for 'param1' or 'param2' ) | 'partial_struct' - is the field value a structure that has all the fields of 'param1' with the same values ? | ( note that it may have additional fields not found in the structure in param1 ) | 'hasanysubfield_contains_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that contains the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'hasanysubfield_exact_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that exactly matches the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'or' - are the searchstruct elements specified in 'param1' OR 'param2' true ? | '~' - NOT of any operator , such as ~ regexp , negates the outcome of the search -----------------------| param1 | Search parameter 1. Meaning depends on 'operation' ( see above ) . param2 | Search parameter 2. Meaning depends on 'operation' ( see above ) . A 'comparable' size means the 2 variables can be compared . [ 1 2 3 ] >= 1 is comparable . [ 1 2 3 ] >= [ 0 0 0 ] is comparable . [ 1 2 3 ] > [ 1 2 ] is an error . Examples : A = struct ( 'a' , 'string_test' , 'b' ,[ 1 2 3 ]) b1 = vlt . data . fieldsearch ( A , struct ( 'field' , 'a' , 'operation' , 'contains_string' , 'param1' , 'test' , 'param2' , '' )) b2 = vlt . data . fieldsearch ( A , struct ( 'field' , 'b' , 'operation' , 'greaterthaneq' , 'param1' , 1 , 'param2' , '' )) B = struct ( 'values' , A ); b3 = vlt . data . fieldsearch ( B , struct ( 'field' , 'values' , 'operation' , 'hasanysubfield_contains_string' , 'param1' , 'a' , 'param2' , 'string_test' )) b4 = vlt . data . fieldsearch ( A , struct ( 'field' , '' , 'operation' , 'or' , ... 'param1' , struct ( 'field' , 'b' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ), ... 'param2' , struct ( 'field' , 'c' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ) ))","title":"vlt.data.fieldsearch"},{"location":"reference/%2Bvlt/%2Bdata/findclosest.m/","text":"vlt.data.findclosest \u00b6 FINDCLOSEST - Find closest value in an array ( using absolute value ) [ I , V ] = vlt . data . findclosest ( ARRAY , VALUE ) Finds the index to the closest member of ARRAY to VALUE in absolute value . It returns the index in I and the value in V . If ARRAY is empty , so are I and V . If there are multiple occurrences of VALUE within ARRAY , only the first is returned in I . See also : FIND","title":"vlt.data.findclosest"},{"location":"reference/%2Bvlt/%2Bdata/findclosest.m/#vltdatafindclosest","text":"FINDCLOSEST - Find closest value in an array ( using absolute value ) [ I , V ] = vlt . data . findclosest ( ARRAY , VALUE ) Finds the index to the closest member of ARRAY to VALUE in absolute value . It returns the index in I and the value in V . If ARRAY is empty , so are I and V . If there are multiple occurrences of VALUE within ARRAY , only the first is returned in I . See also : FIND","title":"vlt.data.findclosest"},{"location":"reference/%2Bvlt/%2Bdata/findclosestpoint.m/","text":"vlt.data.findclosestpoint \u00b6 FINDCLOSESTPOINT - Find the closest corresponding point in a list [ I , POINTC ] = vlt . data . findclosestpoint ( POINTLIST , POINT ) Finds the index and value to the closest member of POINTLIST to POINT in Euclidean distance . POINTLIST should be a list of points , with 1 row per point . It returns the index in I and the value in POINTC . If ARRAY is empointy , so are I and POINTC . If there are multiple occurances of POINT within POINTLIST , only the first is returned in I . See also : FIND , vlt . data . findclosest","title":"vlt.data.findclosestpoint"},{"location":"reference/%2Bvlt/%2Bdata/findclosestpoint.m/#vltdatafindclosestpoint","text":"FINDCLOSESTPOINT - Find the closest corresponding point in a list [ I , POINTC ] = vlt . data . findclosestpoint ( POINTLIST , POINT ) Finds the index and value to the closest member of POINTLIST to POINT in Euclidean distance . POINTLIST should be a list of points , with 1 row per point . It returns the index in I and the value in POINTC . If ARRAY is empointy , so are I and POINTC . If there are multiple occurances of POINT within POINTLIST , only the first is returned in I . See also : FIND , vlt . data . findclosest","title":"vlt.data.findclosestpoint"},{"location":"reference/%2Bvlt/%2Bdata/findrowvec.m/","text":"vlt.data.findrowvec \u00b6 FINDROWVEC - finds the occurrence of a complete row in a matrix I = vlt.data.findrowvec(A,B) Given a row vector B and a matrix A that has the same number of columns as B, I will be all rows such that all elements of A(i,:) equal those of B.","title":"vlt.data.findrowvec"},{"location":"reference/%2Bvlt/%2Bdata/findrowvec.m/#vltdatafindrowvec","text":"FINDROWVEC - finds the occurrence of a complete row in a matrix I = vlt.data.findrowvec(A,B) Given a row vector B and a matrix A that has the same number of columns as B, I will be all rows such that all elements of A(i,:) equal those of B.","title":"vlt.data.findrowvec"},{"location":"reference/%2Bvlt/%2Bdata/hasAllFields.m/","text":"vlt.data.hasAllFields \u00b6 Part of the NewStim package [ GOOD , ERRORMSG ] = vlt . data . hasAllFields ( VARIABLE , FIELDNAMES , FIELDSIZES ) Checks to see if VARIABLE has all of the fieldnames in the cellstr FIELDNAMES and also checks to see if the values of those names match the dimensions given in the cell array FIELDSIZES . If you don 't care to analyze one dimension, pass -1 for that dimension. For example, r = struct ( 'test1' , 5 , 'test2' ,[ 6 1 ] ) ; s = struct ( 'test1' , 5 , 'test3' ,[ 6 1 ] ) ; [ g , e ] = vlt . data . hasAllFields ( r ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 1 , e = '' . [ g , e ] = vlt . data . hasAllFields ( s ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 0 , e = [ '''test2''' not present . '] If you didn 't care how many columns the test2 field of r was, then you could pass [ 1 - 1 ] instead of [ 1 2 ], or if you didn 't care what size it was at all then you could pass [-1 -1]. Note: At present, this function does not work on arrays of structs, only structs. As a work-around, pass the first element of a struct array to see if it is good.","title":"vlt.data.hasAllFields"},{"location":"reference/%2Bvlt/%2Bdata/hasAllFields.m/#vltdatahasallfields","text":"Part of the NewStim package [ GOOD , ERRORMSG ] = vlt . data . hasAllFields ( VARIABLE , FIELDNAMES , FIELDSIZES ) Checks to see if VARIABLE has all of the fieldnames in the cellstr FIELDNAMES and also checks to see if the values of those names match the dimensions given in the cell array FIELDSIZES . If you don 't care to analyze one dimension, pass -1 for that dimension. For example, r = struct ( 'test1' , 5 , 'test2' ,[ 6 1 ] ) ; s = struct ( 'test1' , 5 , 'test3' ,[ 6 1 ] ) ; [ g , e ] = vlt . data . hasAllFields ( r ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 1 , e = '' . [ g , e ] = vlt . data . hasAllFields ( s ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 0 , e = [ '''test2''' not present . '] If you didn 't care how many columns the test2 field of r was, then you could pass [ 1 - 1 ] instead of [ 1 2 ], or if you didn 't care what size it was at all then you could pass [-1 -1]. Note: At present, this function does not work on arrays of structs, only structs. As a work-around, pass the first element of a struct array to see if it is good.","title":"vlt.data.hasAllFields"},{"location":"reference/%2Bvlt/%2Bdata/hashmatlabvariable.m/","text":"vlt.data.hashmatlabvariable \u00b6 HASHMATLABVARIABLE - create a hashed version of a Matlab variable in memory H = vlt . data . hashmatlabvariable ( D ) Creates a hashed value based on the binary data in the variable D . Depending upon the algorithm , the output H may vary ( see below ) . This function can be modified by name / value pairs : Parameter ( default ) | Description ------------------------------------------------------------- algorithm ( 'DataHash/MD5' ) | Algorithm to be used , a string : | 'DataHash/MD5' : | Uses the third party tool DataHash , | to obtain the MD5 checksum of | getByteStreamFromArray ( D ) . | Returns a hexidecimal string . | 'pm_hash/crc' : | Uses the Matlab function PM_HASH . | Returns a 32 bit integer ( uint32 ) . | Requires Simulink and SimScape toolboxes . Warning : For many years , PM_HASH produced the same numbers across platforms and across versions . New versions ( Matlab 2019 a for instance ) now seems to produce PM_HASH numbers that differ from earlier versions . See https : // undocumentedmatlab . com / articles / serializing - deserializing - matlab - data for information about the undocumented function getByteStreamFromArray function , upon which the default algorithm relies . See also : DataHash Example : A = randn ( 5 , 3 , 2 ); % a random number h = vlt . data . hashmatlabvariable ( A ) % generate a hash , a hexidecimal string h2 = vlt . data . hashmatlabvariable ( A , 'algorithm' , 'pm_hash/crc' ) % require Simulink / SimScape ; returns uint32","title":"vlt.data.hashmatlabvariable"},{"location":"reference/%2Bvlt/%2Bdata/hashmatlabvariable.m/#vltdatahashmatlabvariable","text":"HASHMATLABVARIABLE - create a hashed version of a Matlab variable in memory H = vlt . data . hashmatlabvariable ( D ) Creates a hashed value based on the binary data in the variable D . Depending upon the algorithm , the output H may vary ( see below ) . This function can be modified by name / value pairs : Parameter ( default ) | Description ------------------------------------------------------------- algorithm ( 'DataHash/MD5' ) | Algorithm to be used , a string : | 'DataHash/MD5' : | Uses the third party tool DataHash , | to obtain the MD5 checksum of | getByteStreamFromArray ( D ) . | Returns a hexidecimal string . | 'pm_hash/crc' : | Uses the Matlab function PM_HASH . | Returns a 32 bit integer ( uint32 ) . | Requires Simulink and SimScape toolboxes . Warning : For many years , PM_HASH produced the same numbers across platforms and across versions . New versions ( Matlab 2019 a for instance ) now seems to produce PM_HASH numbers that differ from earlier versions . See https : // undocumentedmatlab . com / articles / serializing - deserializing - matlab - data for information about the undocumented function getByteStreamFromArray function , upon which the default algorithm relies . See also : DataHash Example : A = randn ( 5 , 3 , 2 ); % a random number h = vlt . data . hashmatlabvariable ( A ) % generate a hash , a hexidecimal string h2 = vlt . data . hashmatlabvariable ( A , 'algorithm' , 'pm_hash/crc' ) % require Simulink / SimScape ; returns uint32","title":"vlt.data.hashmatlabvariable"},{"location":"reference/%2Bvlt/%2Bdata/isboolean.m/","text":"vlt.data.isboolean \u00b6 B = vlt.data.isboolean(X) Returns 1 iff X is a matrix of 0's and 1's.","title":"vlt.data.isboolean"},{"location":"reference/%2Bvlt/%2Bdata/isboolean.m/#vltdataisboolean","text":"B = vlt.data.isboolean(X) Returns 1 iff X is a matrix of 0's and 1's.","title":"vlt.data.isboolean"},{"location":"reference/%2Bvlt/%2Bdata/isempty_cell.m/","text":"vlt.data.isempty_cell \u00b6 ISEMPTY_CELL - Returns elements of a cell variable that are empty / not empty B = ISEMPTY ( THECELL ) Returns a logical array the same size as THECELL . Each entry of the array B is 1 if the contents of the cell is empty , and 0 otherwise . Example : A = { 'test' , [] ; [] 'more text' } B = vlt . data . isempty_cell ( A ) B = 0 1 1 0","title":"vlt.data.isempty_cell"},{"location":"reference/%2Bvlt/%2Bdata/isempty_cell.m/#vltdataisempty_cell","text":"ISEMPTY_CELL - Returns elements of a cell variable that are empty / not empty B = ISEMPTY ( THECELL ) Returns a logical array the same size as THECELL . Each entry of the array B is 1 if the contents of the cell is empty , and 0 otherwise . Example : A = { 'test' , [] ; [] 'more text' } B = vlt . data . isempty_cell ( A ) B = 0 1 1 0","title":"vlt.data.isempty_cell"},{"location":"reference/%2Bvlt/%2Bdata/isfullfield.m/","text":"vlt.data.isfullfield \u00b6 ISFULLFIELD - is there a field ( or field and subfield ) of a structure with a given name ? [ B , VALUE ] = vlt . data . isfullfield ( A , FIELD ) Examines the structure A to see if A . FIELD can be evaluated . If so , B is 1 and the VALUE is returned in VALUE . Otherwise , B is 0 . If B is 0 , then VALUE is empty . See also : vlt . data . fieldsearch Example : A = struct ( 'a' , struct ( 'sub1' , 1 , 'sub2' , 2 ), 'b' , 5 ); [ b , value ] = vlt . data . isfullfield ( A , 'a.sub1' ) % returns b == 1 and value == 1 [ b2 , value2 ] = vlt . data . isfullfield ( A , 'a.sub3' ) % returns b == 0 and value == []","title":"vlt.data.isfullfield"},{"location":"reference/%2Bvlt/%2Bdata/isfullfield.m/#vltdataisfullfield","text":"ISFULLFIELD - is there a field ( or field and subfield ) of a structure with a given name ? [ B , VALUE ] = vlt . data . isfullfield ( A , FIELD ) Examines the structure A to see if A . FIELD can be evaluated . If so , B is 1 and the VALUE is returned in VALUE . Otherwise , B is 0 . If B is 0 , then VALUE is empty . See also : vlt . data . fieldsearch Example : A = struct ( 'a' , struct ( 'sub1' , 1 , 'sub2' , 2 ), 'b' , 5 ); [ b , value ] = vlt . data . isfullfield ( A , 'a.sub1' ) % returns b == 1 and value == 1 [ b2 , value2 ] = vlt . data . isfullfield ( A , 'a.sub3' ) % returns b == 0 and value == []","title":"vlt.data.isfullfield"},{"location":"reference/%2Bvlt/%2Bdata/isint.m/","text":"vlt.data.isint \u00b6 B = vlt.data.isint(X) B = 1 iff X is a matrix of integers.","title":"vlt.data.isint"},{"location":"reference/%2Bvlt/%2Bdata/isint.m/#vltdataisint","text":"B = vlt.data.isint(X) B = 1 iff X is a matrix of integers.","title":"vlt.data.isint"},{"location":"reference/%2Bvlt/%2Bdata/islikevarname.m/","text":"vlt.data.islikevarname \u00b6 ISLIKEVARNAME - Is a string like a Matlab variable name ( begin with letter ) ? [ B , ERRORMSG ] = vlt . data . islikevarname ( NAME ) Checks to see if NAME is a like a valid Matlab variable name . It must a ) begin with a letter b ) not have any whitespace Unlike real Matlab variables , NAME may be a Matlab keyword . B is 1 if NAME meets the criteria and is 0 otherwise . ERRORMSG is a text message describing the problem . See also : ISVARNAME , vlt . data . valid_varname","title":"vlt.data.islikevarname"},{"location":"reference/%2Bvlt/%2Bdata/islikevarname.m/#vltdataislikevarname","text":"ISLIKEVARNAME - Is a string like a Matlab variable name ( begin with letter ) ? [ B , ERRORMSG ] = vlt . data . islikevarname ( NAME ) Checks to see if NAME is a like a valid Matlab variable name . It must a ) begin with a letter b ) not have any whitespace Unlike real Matlab variables , NAME may be a Matlab keyword . B is 1 if NAME meets the criteria and is 0 otherwise . ERRORMSG is a text message describing the problem . See also : ISVARNAME , vlt . data . valid_varname","title":"vlt.data.islikevarname"},{"location":"reference/%2Bvlt/%2Bdata/ispos.m/","text":"vlt.data.ispos \u00b6 B = ISPOS(X) Returns 1 iff X is a matrix of positive numbers.","title":"vlt.data.ispos"},{"location":"reference/%2Bvlt/%2Bdata/ispos.m/#vltdataispos","text":"B = ISPOS(X) Returns 1 iff X is a matrix of positive numbers.","title":"vlt.data.ispos"},{"location":"reference/%2Bvlt/%2Bdata/isunix_sv.m/","text":"vlt.data.isunix_sv \u00b6 vlt . data . isunix_sv - Returns true if we are running a Unix system If Matlab version is greater than 5 , returns ISUNIX . Else , returns ISUNIX is computer is not a PC or Mac2 .","title":"vlt.data.isunix_sv"},{"location":"reference/%2Bvlt/%2Bdata/isunix_sv.m/#vltdataisunix_sv","text":"vlt . data . isunix_sv - Returns true if we are running a Unix system If Matlab version is greater than 5 , returns ISUNIX . Else , returns ISUNIX is computer is not a PC or Mac2 .","title":"vlt.data.isunix_sv"},{"location":"reference/%2Bvlt/%2Bdata/jsonencodenan.m/","text":"vlt.data.jsonencodenan \u00b6 JSONENCODENAN - encode a JSON object allowing Nan / Infinity T = vlt . data . jsonencodenan ( OBJ ) Encodes the Matlab variable OBJ into a JSON object in a manner that allows the use of NaN and - Inf and Inf . JSONENCODE is called with 1 argument or 2 ( Matlab 2018 b ) to ensure these numbers are allowed . See also : JSONENCODE","title":"vlt.data.jsonencodenan"},{"location":"reference/%2Bvlt/%2Bdata/jsonencodenan.m/#vltdatajsonencodenan","text":"JSONENCODENAN - encode a JSON object allowing Nan / Infinity T = vlt . data . jsonencodenan ( OBJ ) Encodes the Matlab variable OBJ into a JSON object in a manner that allows the use of NaN and - Inf and Inf . JSONENCODE is called with 1 argument or 2 ( Matlab 2018 b ) to ensure these numbers are allowed . See also : JSONENCODE","title":"vlt.data.jsonencodenan"},{"location":"reference/%2Bvlt/%2Bdata/listofvars.m/","text":"vlt.data.listofvars \u00b6 Part of the NewStim package VARLIST = vlt . data . listofvars ( CLASSNAME ) Returns a list of variables in the main workspace that are of type CLASSNAME . CLASSNAME should be a string like 'double' or 'stimulus' . 'ans' is never returned in this list . See also : LIST Questions to vanhoosr @ brandeis . edu","title":"vlt.data.listofvars"},{"location":"reference/%2Bvlt/%2Bdata/listofvars.m/#vltdatalistofvars","text":"Part of the NewStim package VARLIST = vlt . data . listofvars ( CLASSNAME ) Returns a list of variables in the main workspace that are of type CLASSNAME . CLASSNAME should be a string like 'double' or 'stimulus' . 'ans' is never returned in this list . See also : LIST Questions to vanhoosr @ brandeis . edu","title":"vlt.data.listofvars"},{"location":"reference/%2Bvlt/%2Bdata/matrow2cell.m/","text":"vlt.data.matrow2cell \u00b6 MATROW2CELL - Convert a matrix to a cell array with each row as a cell B = vlt . data . matrow2cell ( A ) Given a matrix A , a cell array B is created such that the entries of B { i } are the ith rows of A . If A is a cell array , then no action is taken and B = A . One might want to use this when using JSONDECODE , when regularly - sized items might be returned as a matrix instead of the more general cell array .","title":"vlt.data.matrow2cell"},{"location":"reference/%2Bvlt/%2Bdata/matrow2cell.m/#vltdatamatrow2cell","text":"MATROW2CELL - Convert a matrix to a cell array with each row as a cell B = vlt . data . matrow2cell ( A ) Given a matrix A , a cell array B is created such that the entries of B { i } are the ith rows of A . If A is a cell array , then no action is taken and B = A . One might want to use this when using JSONDECODE , when regularly - sized items might be returned as a matrix instead of the more general cell array .","title":"vlt.data.matrow2cell"},{"location":"reference/%2Bvlt/%2Bdata/mlstr2var.m/","text":"vlt.data.mlstr2var \u00b6 MLSTR2VAR - creates a Matlab variable from markup language strings ( STRUCT2MLSTR , CELL2MLSTR ) V = vlt . data . mlstr2var ( MLSTRING ) Given a markup language string representation of Matlab structures or cells , this function produces a Matlab variable v . Matlab STRUCT types are specified in the markup language in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > and Matlab CELL types are specified in the markup language in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > Consider also : JSONENCODE , JSONDECODE See also : vlt . data . cell2mlstr , vlt . data . struct2mlstr , JSONDECODE","title":"vlt.data.mlstr2var"},{"location":"reference/%2Bvlt/%2Bdata/mlstr2var.m/#vltdatamlstr2var","text":"MLSTR2VAR - creates a Matlab variable from markup language strings ( STRUCT2MLSTR , CELL2MLSTR ) V = vlt . data . mlstr2var ( MLSTRING ) Given a markup language string representation of Matlab structures or cells , this function produces a Matlab variable v . Matlab STRUCT types are specified in the markup language in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > and Matlab CELL types are specified in the markup language in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > Consider also : JSONENCODE , JSONDECODE See also : vlt . data . cell2mlstr , vlt . data . struct2mlstr , JSONDECODE","title":"vlt.data.mlstr2var"},{"location":"reference/%2Bvlt/%2Bdata/namevaluepair.m/","text":"vlt.data.namevaluepair \u00b6 NAMEVALUEPAIR - Describes the use of name / value pairs in Matlab functions In Matlab , functions often accept extra arguments in the form of NAME / VALUE pairs . For example , a function fun might accept two input arguments , and extra name / value pairs that alter the default behavior of the function . out = fun ( a , b ); % normal behavior out = fun ( a , b ,' gain ', 5 ) % set a parameter gain to 5 out = fun ( a , b ,' gain ', 5 ,' offset ', 3 ) % set additional parameters This capability is only available in functions that are built to accept name / value pairs ( it is not automatically available in any function ). See also: vlt . data . struct2namevaluepair , VARARGIN , vlt . data . assign","title":"vlt.data.namevaluepair"},{"location":"reference/%2Bvlt/%2Bdata/namevaluepair.m/#vltdatanamevaluepair","text":"NAMEVALUEPAIR - Describes the use of name / value pairs in Matlab functions In Matlab , functions often accept extra arguments in the form of NAME / VALUE pairs . For example , a function fun might accept two input arguments , and extra name / value pairs that alter the default behavior of the function . out = fun ( a , b ); % normal behavior out = fun ( a , b ,' gain ', 5 ) % set a parameter gain to 5 out = fun ( a , b ,' gain ', 5 ,' offset ', 3 ) % set additional parameters This capability is only available in functions that are built to accept name / value pairs ( it is not automatically available in any function ). See also: vlt . data . struct2namevaluepair , VARARGIN , vlt . data . assign","title":"vlt.data.namevaluepair"},{"location":"reference/%2Bvlt/%2Bdata/nanstderr.m/","text":"vlt.data.nanstderr \u00b6 STDERR - Standard error of a vector of data SE = vlt.data.nanstderr(DATA); Computes standard error of each column, ignoring NaN's. SE = nanstd(data)./sqrt(sum(1-[isnan(data)])); See also: STD, NANSTD","title":"vlt.data.nanstderr"},{"location":"reference/%2Bvlt/%2Bdata/nanstderr.m/#vltdatananstderr","text":"STDERR - Standard error of a vector of data SE = vlt.data.nanstderr(DATA); Computes standard error of each column, ignoring NaN's. SE = nanstd(data)./sqrt(sum(1-[isnan(data)])); See also: STD, NANSTD","title":"vlt.data.nanstderr"},{"location":"reference/%2Bvlt/%2Bdata/numornan.m/","text":"vlt.data.numornan \u00b6 NUMORNAN - Return a number , or a NaN if the number is empty N_OUT = vlt . data . numornan ( N_IN ) or N_OUT = vlt . data . numornan ( N_IN , DIMS ) If N_IN is not empty , then N_OUT is set to N_IN . If N_IN is empty , then a NaN is returned . If the optional input argument DIMS is provided , then the NaN matrix has dimension DIMS . If N_IN is smaller than DIMS , then N_OUT is padded to be filled with NaN .","title":"vlt.data.numornan"},{"location":"reference/%2Bvlt/%2Bdata/numornan.m/#vltdatanumornan","text":"NUMORNAN - Return a number , or a NaN if the number is empty N_OUT = vlt . data . numornan ( N_IN ) or N_OUT = vlt . data . numornan ( N_IN , DIMS ) If N_IN is not empty , then N_OUT is set to N_IN . If N_IN is empty , then a NaN is returned . If the optional input argument DIMS is provided , then the NaN matrix has dimension DIMS . If N_IN is smaller than DIMS , then N_OUT is padded to be filled with NaN .","title":"vlt.data.numornan"},{"location":"reference/%2Bvlt/%2Bdata/onoff.m/","text":"vlt.data.onoff \u00b6 vlt . data . onoff - Returns 'on' or 'off' STR = vlt . data . onoff ( B ) If B <= 0 , STR = 'off' , else , STR = 'on'","title":"vlt.data.onoff"},{"location":"reference/%2Bvlt/%2Bdata/onoff.m/#vltdataonoff","text":"vlt . data . onoff - Returns 'on' or 'off' STR = vlt . data . onoff ( B ) If B <= 0 , STR = 'off' , else , STR = 'on'","title":"vlt.data.onoff"},{"location":"reference/%2Bvlt/%2Bdata/prettyjson.m/","text":"vlt.data.prettyjson \u00b6 PRETTYJSON - use Java JSONObject to produce pretty JSON output PRETTY = vlt . data . prettyjson ( JSON_ENCODED_OBJECT , [ SPACESTOINDENTEACHLEVEL ] ) Given a JSON - encoded object ( that is , a JSON string ), this function produces a 'pretty' JSON output that is human - readable ( one line per item , for example ). SPACESTOINDENTEACHLEVEL indicates how many spaces should be used to indent each level . If it is not provided , 2 is used . This function calls JSONObject from Java , and requires the org . json . * Java classes . This library and its addition to the Java path is provided in http : // github . com / VH - Lab / vhlab - thirdparty - matlab . If you have this library you should be all set . Example : mystruct = struct ( 'a' , 5 , 'b' , 3 , 'c' , 1 ); j = vlt . data . jsonencodenan ( mystruct ) % produces single line j_pretty = vlt . data . prettyjson ( j ) % produces multiple lines % or a single line : j_pretty = vlt . data . prettyjson ( vlt . data . jsonencodenan ( mystruct ))","title":"vlt.data.prettyjson"},{"location":"reference/%2Bvlt/%2Bdata/prettyjson.m/#vltdataprettyjson","text":"PRETTYJSON - use Java JSONObject to produce pretty JSON output PRETTY = vlt . data . prettyjson ( JSON_ENCODED_OBJECT , [ SPACESTOINDENTEACHLEVEL ] ) Given a JSON - encoded object ( that is , a JSON string ), this function produces a 'pretty' JSON output that is human - readable ( one line per item , for example ). SPACESTOINDENTEACHLEVEL indicates how many spaces should be used to indent each level . If it is not provided , 2 is used . This function calls JSONObject from Java , and requires the org . json . * Java classes . This library and its addition to the Java path is provided in http : // github . com / VH - Lab / vhlab - thirdparty - matlab . If you have this library you should be all set . Example : mystruct = struct ( 'a' , 5 , 'b' , 3 , 'c' , 1 ); j = vlt . data . jsonencodenan ( mystruct ) % produces single line j_pretty = vlt . data . prettyjson ( j ) % produces multiple lines % or a single line : j_pretty = vlt . data . prettyjson ( vlt . data . jsonencodenan ( mystruct ))","title":"vlt.data.prettyjson"},{"location":"reference/%2Bvlt/%2Bdata/rowvec.m/","text":"vlt.data.rowvec \u00b6 ROWVEC - return a matrix reshaped as a row vector Y = vlt . data . rowvec ( X ) Returns the contents of the matrix X as a row vector Y that is Mx1 , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . vlt . data . rowvec is equivalent to Y = X ( : ) '; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: vlt.data.colvec Example: A = rand(5,5) Y = vlt.data.rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"vlt.data.rowvec"},{"location":"reference/%2Bvlt/%2Bdata/rowvec.m/#vltdatarowvec","text":"ROWVEC - return a matrix reshaped as a row vector Y = vlt . data . rowvec ( X ) Returns the contents of the matrix X as a row vector Y that is Mx1 , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . vlt . data . rowvec is equivalent to Y = X ( : ) '; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: vlt.data.colvec Example: A = rand(5,5) Y = vlt.data.rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"vlt.data.rowvec"},{"location":"reference/%2Bvlt/%2Bdata/savevar.m/","text":"vlt.data.savevar \u00b6 vlt . data . savevar - Saves variables in a Matlab file vlt . data . savevar ( FILENAME , VARIABLE , VARIABLENAME , OPTIONSTRING1 , OPTIONSTRING2 , ... ) Saves the variable VARIABLE to the file FILENAME . The name of the variable in the file will be VARIABLENAME . OPTIONS is a string of options passed to the MATLAB SAVE command . For example : vlt . data . savevar ( 'myfile' , 5 , 'myvariable' , '-append' , '-mat' ); See also : SAVE","title":"vlt.data.savevar"},{"location":"reference/%2Bvlt/%2Bdata/savevar.m/#vltdatasavevar","text":"vlt . data . savevar - Saves variables in a Matlab file vlt . data . savevar ( FILENAME , VARIABLE , VARIABLENAME , OPTIONSTRING1 , OPTIONSTRING2 , ... ) Saves the variable VARIABLE to the file FILENAME . The name of the variable in the file will be VARIABLENAME . OPTIONS is a string of options passed to the MATLAB SAVE command . For example : vlt . data . savevar ( 'myfile' , 5 , 'myvariable' , '-append' , '-mat' ); See also : SAVE","title":"vlt.data.savevar"},{"location":"reference/%2Bvlt/%2Bdata/simpletable.m/","text":"vlt.data.simpletable \u00b6 SIMPLETABLE - Simple X / Y numeric table [ NEWSIMPLETABLE , NEWCATEGORYLABELS ] = vlt . data . simpletable ( OLDSIMPLETABLE , ... OLDCATEGORIES , THIS_ENTRY , THIS_CATEGORIES ) Builds a simple row - based table of data values for specified numerical categories . The function takes an existing table ( OLDSIMPLETABLE ) with numeric categories listed in OLDCATEGORIES , and adds a row THIS_ENTRY with a possibly different set of numeric categories THIS_CATEGORIES . If the catogories being added do not exist , then these entries are added to NEWCATEGORYLABELS and the preceding entries are filled with NaN for that category . At the end of the function , the table is sorted in ascending order by NEWCATEGORYLABELS . Notes : OLDCATEGORIES and THIS_CATEGORIES must each contain no repeats ( the same number can appear in both variables , but cannot appear twice in either ) . Example : oldcategories = [ 0 : pi / 2 : 2 * pi ]; oldsimpletable = [ 1 : 5 ]; X2 = [ 0 : pi / 4 : 2 * pi ]; Y2 = [ 1 : 0.5 : 5 ] + 5 ; [ newtable , newcats ] = vlt . data . simpletable ( oldsimpletable , oldcategories , Y2 , X2 ), See also : TABLE","title":"vlt.data.simpletable"},{"location":"reference/%2Bvlt/%2Bdata/simpletable.m/#vltdatasimpletable","text":"SIMPLETABLE - Simple X / Y numeric table [ NEWSIMPLETABLE , NEWCATEGORYLABELS ] = vlt . data . simpletable ( OLDSIMPLETABLE , ... OLDCATEGORIES , THIS_ENTRY , THIS_CATEGORIES ) Builds a simple row - based table of data values for specified numerical categories . The function takes an existing table ( OLDSIMPLETABLE ) with numeric categories listed in OLDCATEGORIES , and adds a row THIS_ENTRY with a possibly different set of numeric categories THIS_CATEGORIES . If the catogories being added do not exist , then these entries are added to NEWCATEGORYLABELS and the preceding entries are filled with NaN for that category . At the end of the function , the table is sorted in ascending order by NEWCATEGORYLABELS . Notes : OLDCATEGORIES and THIS_CATEGORIES must each contain no repeats ( the same number can appear in both variables , but cannot appear twice in either ) . Example : oldcategories = [ 0 : pi / 2 : 2 * pi ]; oldsimpletable = [ 1 : 5 ]; X2 = [ 0 : pi / 4 : 2 * pi ]; Y2 = [ 1 : 0.5 : 5 ] + 5 ; [ newtable , newcats ] = vlt . data . simpletable ( oldsimpletable , oldcategories , Y2 , X2 ), See also : TABLE","title":"vlt.data.simpletable"},{"location":"reference/%2Bvlt/%2Bdata/sizeeq.m/","text":"vlt.data.sizeeq \u00b6 vlt . data . sizeeq Determines if size of two variables is same B = vlt . data . sizeeq ( X , Y ) Returns 1 if the size of X and Y are equal . Otherwise , returns 0.","title":"vlt.data.sizeeq"},{"location":"reference/%2Bvlt/%2Bdata/sizeeq.m/#vltdatasizeeq","text":"vlt . data . sizeeq Determines if size of two variables is same B = vlt . data . sizeeq ( X , Y ) Returns 1 if the size of X and Y are equal . Otherwise , returns 0.","title":"vlt.data.sizeeq"},{"location":"reference/%2Bvlt/%2Bdata/sortorder.m/","text":"vlt.data.sortorder \u00b6 SORTORDER - return the order of the sorted data I = vlt . data . sortorder ( [ inputs ] ) Returns the index order I of the call [ B,I ] = SORT ( [ inputs ] ) See also : SORT Example : A = [ 3 2 1 ] ; I = vlt . data . sortorder ( A ) % returns 3 2 1 A ( I ) % shows sorted values","title":"vlt.data.sortorder"},{"location":"reference/%2Bvlt/%2Bdata/sortorder.m/#vltdatasortorder","text":"SORTORDER - return the order of the sorted data I = vlt . data . sortorder ( [ inputs ] ) Returns the index order I of the call [ B,I ] = SORT ( [ inputs ] ) See also : SORT Example : A = [ 3 2 1 ] ; I = vlt . data . sortorder ( A ) % returns 3 2 1 A ( I ) % shows sorted values","title":"vlt.data.sortorder"},{"location":"reference/%2Bvlt/%2Bdata/sortstruct.m/","text":"vlt.data.sortstruct \u00b6 SORTSTRUCT - sort structure by fieldname values [ S_sorted , indexes ] = vlt . data . sortstruct ( S , 'sign_fieldname1' , 'sign_fieldname2' , ... ) Sorts the structure S according to the values in successive fieldnames . Given a structure S , S_sorted is the sorted version according to the values in fieldname1 , fieldname2 , etc . sign should either be + 1 or - 1 depending upon if the data are to be sorted in ascending or descending order . Example : s = struct ( 'test1' ,[ 1 ], 'test2' , 5 ); s ( 2 ) = struct ( 'test1' ,[ 1 ], 'test2' , 4 ); [ S_sorted , indexes ] = vlt . data . sortstruct ( s , '+test1' , '+test2' ); % indexes == [2;1] and S_sorted = s([2;1])","title":"vlt.data.sortstruct"},{"location":"reference/%2Bvlt/%2Bdata/sortstruct.m/#vltdatasortstruct","text":"SORTSTRUCT - sort structure by fieldname values [ S_sorted , indexes ] = vlt . data . sortstruct ( S , 'sign_fieldname1' , 'sign_fieldname2' , ... ) Sorts the structure S according to the values in successive fieldnames . Given a structure S , S_sorted is the sorted version according to the values in fieldname1 , fieldname2 , etc . sign should either be + 1 or - 1 depending upon if the data are to be sorted in ascending or descending order . Example : s = struct ( 'test1' ,[ 1 ], 'test2' , 5 ); s ( 2 ) = struct ( 'test1' ,[ 1 ], 'test2' , 4 ); [ S_sorted , indexes ] = vlt . data . sortstruct ( s , '+test1' , '+test2' ); % indexes == [2;1] and S_sorted = s([2;1])","title":"vlt.data.sortstruct"},{"location":"reference/%2Bvlt/%2Bdata/str2nume.m/","text":"vlt.data.str2nume \u00b6 vlt . data . str2nume - Str2num that returns empty given an empty input N = vlt . data . str2nume ( STR ) Returns [] if STR is empty , otherwise returns STR2NUM ( STR ) .","title":"vlt.data.str2nume"},{"location":"reference/%2Bvlt/%2Bdata/str2nume.m/#vltdatastr2nume","text":"vlt . data . str2nume - Str2num that returns empty given an empty input N = vlt . data . str2nume ( STR ) Returns [] if STR is empty , otherwise returns STR2NUM ( STR ) .","title":"vlt.data.str2nume"},{"location":"reference/%2Bvlt/%2Bdata/streq.m/","text":"vlt.data.streq \u00b6 vlt . data . streq ( S1 , S2 [, WC ] ) Returns 1 if S1 and S2 are equal , and 0 otherwise . The wildcard '*' may be used in S2 , and then vlt . data . streq will return 1 if S1 matches the wildcard criteria . If the user wants to use a different wildcard character other than '*' , a different wildcard character can be given in WC .","title":"vlt.data.streq"},{"location":"reference/%2Bvlt/%2Bdata/streq.m/#vltdatastreq","text":"vlt . data . streq ( S1 , S2 [, WC ] ) Returns 1 if S1 and S2 are equal , and 0 otherwise . The wildcard '*' may be used in S2 , and then vlt . data . streq will return 1 if S1 matches the wildcard criteria . If the user wants to use a different wildcard character other than '*' , a different wildcard character can be given in WC .","title":"vlt.data.streq"},{"location":"reference/%2Bvlt/%2Bdata/string2cell.m/","text":"vlt.data.string2cell \u00b6 STRING2CELL = Convert a delimited list to a cell array of strings C = vlt . data . string2cell ( STRING , SEPARATOR ) Converts a separator-delimited string list to a cell array of strings . STRING should be a separator-delimited list , such as 't00001, t00002, t00003' . SEPARATOR is the character that separates the items , such as ',' or ';' . Additional parameters can be provided as name / value pairs : vlt . data . string2cell ( STRING , SEPARATOR , 'NAME' , VALUE ) Parameter name : | Description : -------------------------- | ----------------------------------------- TRIMWS ( 0 / 1 , default 1 ) | Should we trim whitespace for these elements ? Example : string = 't00001, t00002, t00003, t00004' ; c = vlt . data . string2cell ( string , ',' ); c % display c , equals { 't00001','t00002','t00003','t00004' } See also : DLMREAD , TDFREAD","title":"vlt.data.string2cell"},{"location":"reference/%2Bvlt/%2Bdata/string2cell.m/#vltdatastring2cell","text":"STRING2CELL = Convert a delimited list to a cell array of strings C = vlt . data . string2cell ( STRING , SEPARATOR ) Converts a separator-delimited string list to a cell array of strings . STRING should be a separator-delimited list , such as 't00001, t00002, t00003' . SEPARATOR is the character that separates the items , such as ',' or ';' . Additional parameters can be provided as name / value pairs : vlt . data . string2cell ( STRING , SEPARATOR , 'NAME' , VALUE ) Parameter name : | Description : -------------------------- | ----------------------------------------- TRIMWS ( 0 / 1 , default 1 ) | Should we trim whitespace for these elements ? Example : string = 't00001, t00002, t00003, t00004' ; c = vlt . data . string2cell ( string , ',' ); c % display c , equals { 't00001','t00002','t00003','t00004' } See also : DLMREAD , TDFREAD","title":"vlt.data.string2cell"},{"location":"reference/%2Bvlt/%2Bdata/struct2mlstr.m/","text":"vlt.data.struct2mlstr \u00b6 STRUCT2MLSTR - Create a text string to fully characterize a structure STR = vlt . data . struct2mlstr ( THESTRUCT ) Produces a string representation of a structure that can be passed to an external program to fully encapsulate the structure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using vlt . data . cell2mlstr . Any other objects are written using the function DISP . The structure is written in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > where X , Y , Z are the dimension of the structure array fieldname1 , fieldname2 , etc . are the fieldnames of the structure , and data contains the data for each struct entry , inside < and >. Within each data , values for each field separated with < and > characters . / STRUCT ends the structure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = vlt . data . struct2mlstr ( THESTRUCT , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - structures ( default 5 ) Consider also : JSONENCODE , JSONDECODE See also : vlt . data . mlstr2var , vlt . data . cell2mlstr , vlt . data . struct2str , JSONENCODE","title":"vlt.data.struct2mlstr"},{"location":"reference/%2Bvlt/%2Bdata/struct2mlstr.m/#vltdatastruct2mlstr","text":"STRUCT2MLSTR - Create a text string to fully characterize a structure STR = vlt . data . struct2mlstr ( THESTRUCT ) Produces a string representation of a structure that can be passed to an external program to fully encapsulate the structure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using vlt . data . cell2mlstr . Any other objects are written using the function DISP . The structure is written in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > where X , Y , Z are the dimension of the structure array fieldname1 , fieldname2 , etc . are the fieldnames of the structure , and data contains the data for each struct entry , inside < and >. Within each data , values for each field separated with < and > characters . / STRUCT ends the structure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = vlt . data . struct2mlstr ( THESTRUCT , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - structures ( default 5 ) Consider also : JSONENCODE , JSONDECODE See also : vlt . data . mlstr2var , vlt . data . cell2mlstr , vlt . data . struct2str , JSONENCODE","title":"vlt.data.struct2mlstr"},{"location":"reference/%2Bvlt/%2Bdata/struct2namevaluepair.m/","text":"vlt.data.struct2namevaluepair \u00b6 STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name / value pairs NV = vlt . data . struct2namevaluepair ( THESTRUCT ) Convert a structure to a cell array of name / value pairs . This is useful for passing name / value pairs to functions that accept them as extra arguments . Each field name of the structure is used as the 'name' , and the value is used as the 'value' . Example : myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = vlt . data . struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also : VARARGIN , vlt . data . assign , STRUCT","title":"vlt.data.struct2namevaluepair"},{"location":"reference/%2Bvlt/%2Bdata/struct2namevaluepair.m/#vltdatastruct2namevaluepair","text":"STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name / value pairs NV = vlt . data . struct2namevaluepair ( THESTRUCT ) Convert a structure to a cell array of name / value pairs . This is useful for passing name / value pairs to functions that accept them as extra arguments . Each field name of the structure is used as the 'name' , and the value is used as the 'value' . Example : myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = vlt . data . struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also : VARARGIN , vlt . data . assign , STRUCT","title":"vlt.data.struct2namevaluepair"},{"location":"reference/%2Bvlt/%2Bdata/struct2str.m/","text":"vlt.data.struct2str \u00b6 STRUCT2STR - Create a short text string to summarize a structure STR = vlt . data . struct2str ( THESTRUCT ) Produces a string representation of a structure . Character strings are written directly , integers are written using INT2STR , and numbers are written using NUM2STR . Any other objects are written using the function DISP . If a single structure element is passed as THESTRUCT , then a single string is returned . If an array or matrix of structure elements is passed , then a cell array / matrix of strings is returned . One can force the routine to return a cell array in the case of a a single structure with the 'forcecell' option below . This is useful for displaying a structure in a listbox or for writing the structure to a file as text . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = vlt . data . struct2str ( THESTRUCT , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- separator | The separator between fields ( default ' : ' ) forcecell | Should STR be a cell array of strings even if | a single structure element is used as THESTRUCT | ( Default 0 , can be 1 ) headerrow | Should we have a header row ? ( Default 0 , can be 1 ) | In this case STR is always returned as a | cell array of strings precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) See also : STRUCT2CHAR , CHAR2STRUCT , vlt . data . mlstr2var","title":"vlt.data.struct2str"},{"location":"reference/%2Bvlt/%2Bdata/struct2str.m/#vltdatastruct2str","text":"STRUCT2STR - Create a short text string to summarize a structure STR = vlt . data . struct2str ( THESTRUCT ) Produces a string representation of a structure . Character strings are written directly , integers are written using INT2STR , and numbers are written using NUM2STR . Any other objects are written using the function DISP . If a single structure element is passed as THESTRUCT , then a single string is returned . If an array or matrix of structure elements is passed , then a cell array / matrix of strings is returned . One can force the routine to return a cell array in the case of a a single structure with the 'forcecell' option below . This is useful for displaying a structure in a listbox or for writing the structure to a file as text . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = vlt . data . struct2str ( THESTRUCT , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- separator | The separator between fields ( default ' : ' ) forcecell | Should STR be a cell array of strings even if | a single structure element is used as THESTRUCT | ( Default 0 , can be 1 ) headerrow | Should we have a header row ? ( Default 0 , can be 1 ) | In this case STR is always returned as a | cell array of strings precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) See also : STRUCT2CHAR , CHAR2STRUCT , vlt . data . mlstr2var","title":"vlt.data.struct2str"},{"location":"reference/%2Bvlt/%2Bdata/struct2tabstr.m/","text":"vlt.data.struct2tabstr \u00b6 STRUCT2TABSTR - convert a struct to a tab - delimited string S = vlt . data . struct2tabstr ( A ) Given a Matlab STRUCT variable A , this function creates a tab - delimited string with the values of the structure . Values are read from the FIELDNAMES of the structure in turn . If they are of type 'char' , then they are added to the string S directly . Otherwise , they are converted using MAT2STR . See also : vlt . file . loadStructArray , vlt . file . saveStructArray , vlt . data . tabstr2struct Example : a . fielda = 5 ; a . fieldb = 'my string data' ; s = vlt . data . struct2tabstr ( a ) % convert back a2 = vlt . data . tabstr2struct ( s , { 'fielda' , 'fieldb' } )","title":"vlt.data.struct2tabstr"},{"location":"reference/%2Bvlt/%2Bdata/struct2tabstr.m/#vltdatastruct2tabstr","text":"STRUCT2TABSTR - convert a struct to a tab - delimited string S = vlt . data . struct2tabstr ( A ) Given a Matlab STRUCT variable A , this function creates a tab - delimited string with the values of the structure . Values are read from the FIELDNAMES of the structure in turn . If they are of type 'char' , then they are added to the string S directly . Otherwise , they are converted using MAT2STR . See also : vlt . file . loadStructArray , vlt . file . saveStructArray , vlt . data . tabstr2struct Example : a . fielda = 5 ; a . fieldb = 'my string data' ; s = vlt . data . struct2tabstr ( a ) % convert back a2 = vlt . data . tabstr2struct ( s , { 'fielda' , 'fieldb' } )","title":"vlt.data.struct2tabstr"},{"location":"reference/%2Bvlt/%2Bdata/struct2var.m/","text":"vlt.data.struct2var \u00b6 STRUCT2VAR - Assign variables to the fieldnames and data values of a structure vlt . data . struct2var ( S ) Assigns variables to have the name of all the fieldnames of structure S with values equal to the corresponding value in structure S . If there are already variables with the given name , they are overwritten . Example : s . a = 5 ; s . b = 6 ; vlt . data . struct2var ( s ); a % now a = 5 b % now b = 6 See also : vlt . data . var2struct","title":"vlt.data.struct2var"},{"location":"reference/%2Bvlt/%2Bdata/struct2var.m/#vltdatastruct2var","text":"STRUCT2VAR - Assign variables to the fieldnames and data values of a structure vlt . data . struct2var ( S ) Assigns variables to have the name of all the fieldnames of structure S with values equal to the corresponding value in structure S . If there are already variables with the given name , they are overwritten . Example : s . a = 5 ; s . b = 6 ; vlt . data . struct2var ( s ); a % now a = 5 b % now b = 6 See also : vlt . data . var2struct","title":"vlt.data.struct2var"},{"location":"reference/%2Bvlt/%2Bdata/structdiff.m/","text":"vlt.data.structdiff \u00b6 vlt.data.structdiff is a function. c = vlt.data.structdiff(a, b)","title":"vlt.data.structdiff"},{"location":"reference/%2Bvlt/%2Bdata/structdiff.m/#vltdatastructdiff","text":"vlt.data.structdiff is a function. c = vlt.data.structdiff(a, b)","title":"vlt.data.structdiff"},{"location":"reference/%2Bvlt/%2Bdata/structfindfield.m/","text":"vlt.data.structfindfield \u00b6 STRUCTFINDFIELD - find structure entries in a cell list with a field equal to value INDEX = vlt.data.structfindfield(CELLLISTOFSTRUCTS, FIELD, VALUE) Examines a cell list of structures CELLLISTOFSTRUCTS and returns the index values of those that contain a field FIELD with value equal to VALUE.","title":"vlt.data.structfindfield"},{"location":"reference/%2Bvlt/%2Bdata/structfindfield.m/#vltdatastructfindfield","text":"STRUCTFINDFIELD - find structure entries in a cell list with a field equal to value INDEX = vlt.data.structfindfield(CELLLISTOFSTRUCTS, FIELD, VALUE) Examines a cell list of structures CELLLISTOFSTRUCTS and returns the index values of those that contain a field FIELD with value equal to VALUE.","title":"vlt.data.structfindfield"},{"location":"reference/%2Bvlt/%2Bdata/structfullfields.m/","text":"vlt.data.structfullfields \u00b6 STRUCTFULLFIELDS - return full field names for structures and substructures FN = vlt . data . structfullfields ( S ) Returns the field names of a structure S , including substructures . For example , if a structure A has fields AA and AB , and AA is a structure with fields AAA and AAB , then FN is { 'A.AA.AAA','A.AA.AAB','A.AB' } . Example : A = struct ( 'AA' , struct ( 'AAA' , 5 , 'AAB' , 7 ), 'AB' , 2 ); fn = vlt . data . structfullfields ( A );","title":"vlt.data.structfullfields"},{"location":"reference/%2Bvlt/%2Bdata/structfullfields.m/#vltdatastructfullfields","text":"STRUCTFULLFIELDS - return full field names for structures and substructures FN = vlt . data . structfullfields ( S ) Returns the field names of a structure S , including substructures . For example , if a structure A has fields AA and AB , and AA is a structure with fields AAA and AAB , then FN is { 'A.AA.AAA','A.AA.AAB','A.AB' } . Example : A = struct ( 'AA' , struct ( 'AAA' , 5 , 'AAB' , 7 ), 'AB' , 2 ); fn = vlt . data . structfullfields ( A );","title":"vlt.data.structfullfields"},{"location":"reference/%2Bvlt/%2Bdata/structmerge.m/","text":"vlt.data.structmerge \u00b6 STRUCTMERGE - Merge struct variables into a common struct S_OUT = vlt . data . structmerge ( S1 , S2 , ... ) Merges the structures S1 and S2 into a common structure S_OUT such that S_OUT has all of the fields of S1 and S2 . When S1 and S2 share the same fieldname , the value of S2 is taken . The fieldnames will be re - ordered to be in alphabetical order . The behavior of the function can be altered by passing additional arguments as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------ ErrorIfNewField ( 0 ) | ( 0 / 1 ) Is it an error if S2 contains a | field that is not present in S1 ? DoAlphabetical ( 1 ) | ( 0 / 1 ) Alphabetize the field names in the result See also : STRUCT","title":"vlt.data.structmerge"},{"location":"reference/%2Bvlt/%2Bdata/structmerge.m/#vltdatastructmerge","text":"STRUCTMERGE - Merge struct variables into a common struct S_OUT = vlt . data . structmerge ( S1 , S2 , ... ) Merges the structures S1 and S2 into a common structure S_OUT such that S_OUT has all of the fields of S1 and S2 . When S1 and S2 share the same fieldname , the value of S2 is taken . The fieldnames will be re - ordered to be in alphabetical order . The behavior of the function can be altered by passing additional arguments as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------ ErrorIfNewField ( 0 ) | ( 0 / 1 ) Is it an error if S2 contains a | field that is not present in S1 ? DoAlphabetical ( 1 ) | ( 0 / 1 ) Alphabetize the field names in the result See also : STRUCT","title":"vlt.data.structmerge"},{"location":"reference/%2Bvlt/%2Bdata/structpartialmatch.m/","text":"vlt.data.structpartialmatch \u00b6 STRUCTPARTIALMATCH - do the fields present in b match those in a ? C = vlt . data . structpartialmatch ( A , B ) Given a structure A and B , returns 1 if A has all of the fields of B and if the value of each matching field in B has the same value in A . Example : a = struct ( 'a' , 5 , 'b' , 6 ); b = struct ( 'b' , 6 ); c = vlt . data . structpartialmatch ( a , b ) % returns 1 b2 = struct ( 'b' , 1 ); c2 = vlt . data . structpartialmatch ( a , b2 ) % returns 0 b3 = struct ( 'alpha' , 5 ); c3 = vlt . data . structpartialmatch ( a , b3 ) % returns 0","title":"vlt.data.structpartialmatch"},{"location":"reference/%2Bvlt/%2Bdata/structpartialmatch.m/#vltdatastructpartialmatch","text":"STRUCTPARTIALMATCH - do the fields present in b match those in a ? C = vlt . data . structpartialmatch ( A , B ) Given a structure A and B , returns 1 if A has all of the fields of B and if the value of each matching field in B has the same value in A . Example : a = struct ( 'a' , 5 , 'b' , 6 ); b = struct ( 'b' , 6 ); c = vlt . data . structpartialmatch ( a , b ) % returns 1 b2 = struct ( 'b' , 1 ); c2 = vlt . data . structpartialmatch ( a , b2 ) % returns 0 b3 = struct ( 'alpha' , 5 ); c3 = vlt . data . structpartialmatch ( a , b3 ) % returns 0","title":"vlt.data.structpartialmatch"},{"location":"reference/%2Bvlt/%2Bdata/structwhatvaries.m/","text":"vlt.data.structwhatvaries \u00b6 STRUCTWHATVARIES - Identify what varies among a cell list of structure objects DESCR = vlt . data . structwhatvaries ( CELLLISTOFSTRUCTURES ) Given a cell list of structures , returns a list of the fieldnames that vary in value across the cell list .","title":"vlt.data.structwhatvaries"},{"location":"reference/%2Bvlt/%2Bdata/structwhatvaries.m/#vltdatastructwhatvaries","text":"STRUCTWHATVARIES - Identify what varies among a cell list of structure objects DESCR = vlt . data . structwhatvaries ( CELLLISTOFSTRUCTURES ) Given a cell list of structures , returns a list of the fieldnames that vary in value across the cell list .","title":"vlt.data.structwhatvaries"},{"location":"reference/%2Bvlt/%2Bdata/tabstr2struct.m/","text":"vlt.data.tabstr2struct \u00b6 TABSTR2STRUCT - convert a tab - separated set of strings to a STRUCT entry A = vlt . data . tabstr2struct ( S , FIELDS ) Given a cell array of strings FIELDS of field names , creates a STRUCT array where the values of each field are specified in a tab - delimited string . Each string is first examined to see if it is a number ( using STR2NUM ) . If so , then the value is stored as a double . Otherwise , the value is stored as a string . Exceptions : a ) If the string happens to have two '/' characters or has the form 'yyyy-dd-mm' , then it is assumed to be a date and is interpreted as a string . b ) If the string should happen to be correspond to a non - numeric object in Matlab , we assume the user wants to specify the string rather than an empty matlab type ( for example , STR2NUM ( 'struct' ) yields an empty structure ) . See also : vlt . file . loadStructArray , vlt . file . saveStructArray , DLMREAD , DLMWRITE , vlt . data . struct2tabstr Example : s = [ '5' char ( 9 ) 'my string data' ]; fn = { 'fielda' , 'fieldb' }; a = vlt . data . tabstr2struct ( s , fn )","title":"vlt.data.tabstr2struct"},{"location":"reference/%2Bvlt/%2Bdata/tabstr2struct.m/#vltdatatabstr2struct","text":"TABSTR2STRUCT - convert a tab - separated set of strings to a STRUCT entry A = vlt . data . tabstr2struct ( S , FIELDS ) Given a cell array of strings FIELDS of field names , creates a STRUCT array where the values of each field are specified in a tab - delimited string . Each string is first examined to see if it is a number ( using STR2NUM ) . If so , then the value is stored as a double . Otherwise , the value is stored as a string . Exceptions : a ) If the string happens to have two '/' characters or has the form 'yyyy-dd-mm' , then it is assumed to be a date and is interpreted as a string . b ) If the string should happen to be correspond to a non - numeric object in Matlab , we assume the user wants to specify the string rather than an empty matlab type ( for example , STR2NUM ( 'struct' ) yields an empty structure ) . See also : vlt . file . loadStructArray , vlt . file . saveStructArray , DLMREAD , DLMWRITE , vlt . data . struct2tabstr Example : s = [ '5' char ( 9 ) 'my string data' ]; fn = { 'fielda' , 'fieldb' }; a = vlt . data . tabstr2struct ( s , fn )","title":"vlt.data.tabstr2struct"},{"location":"reference/%2Bvlt/%2Bdata/text2struct.m/","text":"vlt.data.text2struct \u00b6 TEXT2STRUCT - Convert a text string to a structure S = vlt . data . text2struct ( STR ) Given a full , multi-line string , converts to Matlab structures . Each line of the text string STR should have a field name , a colon ( ':' ) and values following . If the user wishes to specify a substructure , provide a '<' following the name of the substructure . Multiple structures can be specified by leaving a blank line between structure descriptions . If there is more than 1 struct to convert , then S is a cell list of all of the structures described in STR . Note : At this time , this function does not handle cell lists , which is too bad . Someone should add this . Example input : eol = sprintf ( '\\n' ); % end of line character str = [ 'type: spiketimelistel' eol ... % indicates that the field type has a value of 'spiketimelistel' 'T: 0' eol ... % indicates that the field 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the field dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' 'spiketimelistel: <' eol ... % a substructure called spiketimelistel 'spiketimelist: 0.0001' eol ... % the field in the substructure '>' eol ... % indicate end of substructure eol ] ; % blank line ends the structure ( not necessary for last structure in list ) mystruct = vlt . data . text2struct ( str ); The function can be modified by the addition of name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- WarnOnBadField ( 0 ) | 0 / 1 Produce a warning when a field name | that cannot be a Matlab field name | is encountered . ErrorOnBadField ( 0 ) | 0 / 1 Produce an error when a field name | that cannot be a Matlab field name | is encountered ( otherwise that entry | is ignored ) BraceLeft ( '<' ) | The left brace character BraceRight ( '>' ) | The right brace character See also : CHAR2STRUCT","title":"vlt.data.text2struct"},{"location":"reference/%2Bvlt/%2Bdata/text2struct.m/#vltdatatext2struct","text":"TEXT2STRUCT - Convert a text string to a structure S = vlt . data . text2struct ( STR ) Given a full , multi-line string , converts to Matlab structures . Each line of the text string STR should have a field name , a colon ( ':' ) and values following . If the user wishes to specify a substructure , provide a '<' following the name of the substructure . Multiple structures can be specified by leaving a blank line between structure descriptions . If there is more than 1 struct to convert , then S is a cell list of all of the structures described in STR . Note : At this time , this function does not handle cell lists , which is too bad . Someone should add this . Example input : eol = sprintf ( '\\n' ); % end of line character str = [ 'type: spiketimelistel' eol ... % indicates that the field type has a value of 'spiketimelistel' 'T: 0' eol ... % indicates that the field 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the field dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' 'spiketimelistel: <' eol ... % a substructure called spiketimelistel 'spiketimelist: 0.0001' eol ... % the field in the substructure '>' eol ... % indicate end of substructure eol ] ; % blank line ends the structure ( not necessary for last structure in list ) mystruct = vlt . data . text2struct ( str ); The function can be modified by the addition of name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- WarnOnBadField ( 0 ) | 0 / 1 Produce a warning when a field name | that cannot be a Matlab field name | is encountered . ErrorOnBadField ( 0 ) | 0 / 1 Produce an error when a field name | that cannot be a Matlab field name | is encountered ( otherwise that entry | is ignored ) BraceLeft ( '<' ) | The left brace character BraceRight ( '>' ) | The right brace character See also : CHAR2STRUCT","title":"vlt.data.text2struct"},{"location":"reference/%2Bvlt/%2Bdata/uniq.m/","text":"vlt.data.uniq \u00b6 uniq - find the unique elements in a vector y = vlt.data.uniq (x) returns a vector shorter than x with all sequential occurances but the first of the same element eliminated. cf. the unix uniq command. Also see SORT.","title":"vlt.data.uniq"},{"location":"reference/%2Bvlt/%2Bdata/uniq.m/#vltdatauniq","text":"uniq - find the unique elements in a vector y = vlt.data.uniq (x) returns a vector shorter than x with all sequential occurances but the first of the same element eliminated. cf. the unix uniq command. Also see SORT.","title":"vlt.data.uniq"},{"location":"reference/%2Bvlt/%2Bdata/valid_varname.m/","text":"vlt.data.valid_varname \u00b6 Part of the NewStim package B = VALIDVARNAME ( VARNAME ) Returns 1 if VARNAME is a valid variable name in Matlab , or returns 0 otherwise . Note : There is now a Matlab function that does this : ISVARNAME See also : ISVARNAME , MATLAB . LANG . MAKEVALIDNAME","title":"vlt.data.valid_varname"},{"location":"reference/%2Bvlt/%2Bdata/valid_varname.m/#vltdatavalid_varname","text":"Part of the NewStim package B = VALIDVARNAME ( VARNAME ) Returns 1 if VARNAME is a valid variable name in Matlab , or returns 0 otherwise . Note : There is now a Matlab function that does this : ISVARNAME See also : ISVARNAME , MATLAB . LANG . MAKEVALIDNAME","title":"vlt.data.valid_varname"},{"location":"reference/%2Bvlt/%2Bdata/var2struct.m/","text":"vlt.data.var2struct \u00b6 VAR2STRUCT - Export variable ( s ) to a structure OUTPUT = vlt . data . var2struct ( 'NAME1' , 'NAME2' , ... ) Saves local workspace variables as a structure . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has 3 variables , A = 5 , B = 6 , C = 7 ; output = vlt . data . var2struct ( 'a' , 'b' ) produces output = a : 5 b : 6","title":"vlt.data.var2struct"},{"location":"reference/%2Bvlt/%2Bdata/var2struct.m/#vltdatavar2struct","text":"VAR2STRUCT - Export variable ( s ) to a structure OUTPUT = vlt . data . var2struct ( 'NAME1' , 'NAME2' , ... ) Saves local workspace variables as a structure . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has 3 variables , A = 5 , B = 6 , C = 7 ; output = vlt . data . var2struct ( 'a' , 'b' ) produces output = a : 5 b : 6","title":"vlt.data.var2struct"},{"location":"reference/%2Bvlt/%2Bdata/workspace2struct.m/","text":"vlt.data.workspace2struct \u00b6 vlt . data . workspace2struct - Export the current workspace to a structure OUTPUT = vlt . data . workspace2struct Saves the local workspace as a structure for easy export . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has one variable A , equal to 5. output = vlt . data . workspace2struct produces output = a : 5","title":"vlt.data.workspace2struct"},{"location":"reference/%2Bvlt/%2Bdata/workspace2struct.m/#vltdataworkspace2struct","text":"vlt . data . workspace2struct - Export the current workspace to a structure OUTPUT = vlt . data . workspace2struct Saves the local workspace as a structure for easy export . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has one variable A , equal to 5. output = vlt . data . workspace2struct produces output = a : 5","title":"vlt.data.workspace2struct"},{"location":"reference/%2Bvlt/%2Bdb/struct_name_value_search.m/","text":"vlt.db.struct_name_value_search \u00b6 vlt . db . struct_name_value_search - search a struct with fields 'name' and 'value' [ V,I ] = STRUCT_NAME_VALUE_SEARCH ( THESTRUCT , THENAME , [ MAKEERROR ] ) Searches a structure array THESTRUCT that is expected to have fields 'name' and 'value' . If there is a name matching THENAME , then the value of the 'value' field for that entry is returned in V . I is the index of the entry of THESTRUCT that had the match . If there was no match , I is empty . If there is more than one match , V will be the value of the first match . MAKEERROR is an optional argument ( default value 1 ) that determines whether or not the function will generate an error if THENAME is not found .","title":"vlt.db.struct_name_value_search"},{"location":"reference/%2Bvlt/%2Bdb/struct_name_value_search.m/#vltdbstruct_name_value_search","text":"vlt . db . struct_name_value_search - search a struct with fields 'name' and 'value' [ V,I ] = STRUCT_NAME_VALUE_SEARCH ( THESTRUCT , THENAME , [ MAKEERROR ] ) Searches a structure array THESTRUCT that is expected to have fields 'name' and 'value' . If there is a name matching THENAME , then the value of the 'value' field for that entry is returned in V . I is the index of the entry of THESTRUCT that had the match . If there was no match , I is empty . If there is more than one match , V will be the value of the first match . MAKEERROR is an optional argument ( default value 1 ) that determines whether or not the function will generate an error if THENAME is not found .","title":"vlt.db.struct_name_value_search"},{"location":"reference/%2Bvlt/%2Bdocs/build.m/","text":"vlt.docs.build \u00b6 vlt . docs . build - build the vlt markdown documentation from Matlab source Builds the vlt documentation locally in vlt - matlab - toolbox / docs and updates the mkdocs - yml file in the $ NDR - matlab directory . ** Example ** : vlt . docs . build ();","title":"vlt.docs.build"},{"location":"reference/%2Bvlt/%2Bdocs/build.m/#vltdocsbuild","text":"vlt . docs . build - build the vlt markdown documentation from Matlab source Builds the vlt documentation locally in vlt - matlab - toolbox / docs and updates the mkdocs - yml file in the $ NDR - matlab directory . ** Example ** : vlt . docs . build ();","title":"vlt.docs.build"},{"location":"reference/%2Bvlt/%2Bdocs/class2help.m/","text":"vlt.docs.class2help \u00b6 CLASS2HELP - get help information from a Matlab class . m file [ CLASSHELP , PROP_STRUCT , METHODS_STRUCT , SUPERCLASSES ] = CLASS2HELP ( FILENAME ) Returns the help string CLASSHELP , a list of properties and the 'doc' information for each property in PROP_STRUCT , and the name of each method and the help in a structure called METHODS_STRUCT . PROP_STRUCT has fields 'property' and 'doc' that contain each property and its 'doc' string . METHODS_STRUCT has fields 'method' , 'description' ( the first line from the documentation ) , and 'help' ( lines 2 .. n of the function 'help' ) . SUPERCLASSES is a list of all superclasses for the file .","title":"vlt.docs.class2help"},{"location":"reference/%2Bvlt/%2Bdocs/class2help.m/#vltdocsclass2help","text":"CLASS2HELP - get help information from a Matlab class . m file [ CLASSHELP , PROP_STRUCT , METHODS_STRUCT , SUPERCLASSES ] = CLASS2HELP ( FILENAME ) Returns the help string CLASSHELP , a list of properties and the 'doc' information for each property in PROP_STRUCT , and the name of each method and the help in a structure called METHODS_STRUCT . PROP_STRUCT has fields 'property' and 'doc' that contain each property and its 'doc' string . METHODS_STRUCT has fields 'method' , 'description' ( the first line from the documentation ) , and 'help' ( lines 2 .. n of the function 'help' ) . SUPERCLASSES is a list of all superclasses for the file .","title":"vlt.docs.class2help"},{"location":"reference/%2Bvlt/%2Bdocs/markdownoutput2objectstruct.m/","text":"vlt.docs.markdownoutput2objectstruct \u00b6 vlt . docs . markdownoutput2objectstruct - create a list of all objects and their paths for making mkdocs links OBJECTSTRUCT = vlt . docs . markdownoutput2objectstruct ( MARKDOWN_OUTPUT ) Given a MARKDOWN_OUTPUT structure returned from vlt . docs . matlab2markdown , creates a structure with fields 'object' and 'path' . 'object' has the name of each object , and 'path' has its absolute path .","title":"vlt.docs.markdownoutput2objectstruct"},{"location":"reference/%2Bvlt/%2Bdocs/markdownoutput2objectstruct.m/#vltdocsmarkdownoutput2objectstruct","text":"vlt . docs . markdownoutput2objectstruct - create a list of all objects and their paths for making mkdocs links OBJECTSTRUCT = vlt . docs . markdownoutput2objectstruct ( MARKDOWN_OUTPUT ) Given a MARKDOWN_OUTPUT structure returned from vlt . docs . matlab2markdown , creates a structure with fields 'object' and 'path' . 'object' has the name of each object , and 'path' has its absolute path .","title":"vlt.docs.markdownoutput2objectstruct"},{"location":"reference/%2Bvlt/%2Bdocs/matlab2markdown.m/","text":"vlt.docs.matlab2markdown \u00b6 MATLAB2MARKDOWN - convert Matlab documentation to markdown OUT = MATLAB2MARKDOWN(INPUT_PATH, OUTPUT_PATH, YMLPATH, OBJECTSTRUCT) Recursively converts Matlab documentation to Markdown format (.md) starting from an INPUT_PATH. The documentation is saved in subdirectories in OUTPUT_PATH and a yml index file is created. Optionally, one may pass an OBJECTSTRUCT with field 'object' that describes the full name of a code object (such as 'ndi.app') and field 'path' that describes the mkdoc yml path to that object. OUT is a structure record of the same data written to the OUTPUT_PATH. See also: vlt.docs.markdownoutput2objectstruct","title":"vlt.docs.matlab2markdown"},{"location":"reference/%2Bvlt/%2Bdocs/matlab2markdown.m/#vltdocsmatlab2markdown","text":"MATLAB2MARKDOWN - convert Matlab documentation to markdown OUT = MATLAB2MARKDOWN(INPUT_PATH, OUTPUT_PATH, YMLPATH, OBJECTSTRUCT) Recursively converts Matlab documentation to Markdown format (.md) starting from an INPUT_PATH. The documentation is saved in subdirectories in OUTPUT_PATH and a yml index file is created. Optionally, one may pass an OBJECTSTRUCT with field 'object' that describes the full name of a code object (such as 'ndi.app') and field 'path' that describes the mkdoc yml path to that object. OUT is a structure record of the same data written to the OUTPUT_PATH. See also: vlt.docs.markdownoutput2objectstruct","title":"vlt.docs.matlab2markdown"},{"location":"reference/%2Bvlt/%2Bdocs/mkdocsnavtext.m/","text":"vlt.docs.mkdocsnavtext \u00b6 MKDOCSNAVTEXT - create navigation text for mkdoc . yml file from output of vlt . docs . matlab2markdown T = MKDOCSNAVTEXT ( OUT , SPACES ) Given the output structure of vlt . docs . matlab2markdown , creates text to put in the navigation portion of the mkdoc . yml file . The number of SPACES to intent must be given ( often 2 ) .","title":"vlt.docs.mkdocsnavtext"},{"location":"reference/%2Bvlt/%2Bdocs/mkdocsnavtext.m/#vltdocsmkdocsnavtext","text":"MKDOCSNAVTEXT - create navigation text for mkdoc . yml file from output of vlt . docs . matlab2markdown T = MKDOCSNAVTEXT ( OUT , SPACES ) Given the output structure of vlt . docs . matlab2markdown , creates text to put in the navigation portion of the mkdoc . yml file . The number of SPACES to intent must be given ( often 2 ) .","title":"vlt.docs.mkdocsnavtext"},{"location":"reference/%2Bvlt/%2Bdocs/relative_url4object.m/","text":"vlt.docs.relative_url4object \u00b6 vlt . docs . relative_url4object - compute the relative url name for an object , relative to the current path S = vlt . docs . relative_url4object ( CURRENTPATH , OBJECTNAME ) Given the CURRENTPATH ( the current directory of a URL ), produce a relative URL S for the object OBJECTNAME . OBJECTNAME should have the form 'package1.package2.{etc}.object' with no '.m' appended to the end of the object . ** Example ** : currentPath = '+ndi/+app/' objectName = 'ndi.time.timereference' s = vlt . docs . relative_url4object ( currentPath , objectName ); % s = '../+time/timereference.m.md'","title":"vlt.docs.relative_url4object"},{"location":"reference/%2Bvlt/%2Bdocs/relative_url4object.m/#vltdocsrelative_url4object","text":"vlt . docs . relative_url4object - compute the relative url name for an object , relative to the current path S = vlt . docs . relative_url4object ( CURRENTPATH , OBJECTNAME ) Given the CURRENTPATH ( the current directory of a URL ), produce a relative URL S for the object OBJECTNAME . OBJECTNAME should have the form 'package1.package2.{etc}.object' with no '.m' appended to the end of the object . ** Example ** : currentPath = '+ndi/+app/' objectName = 'ndi.time.timereference' s = vlt . docs . relative_url4object ( currentPath , objectName ); % s = '../+time/timereference.m.md'","title":"vlt.docs.relative_url4object"},{"location":"reference/%2Bvlt/%2Bfile/addline.m/","text":"vlt.file.addline \u00b6 ADDLINE - add a line of text to a text file [ B , ERRORMSG ] = ADDLINE ( FILENAME , MESSAGE ) ADDLINE writes a message to the textfile FILENAME . If the FILENAME does not exist , then ADDLINE attempts to create it . ADDLINE first attempts to check out a lock file so that two programs do not write to the FILENAME simultaneously . A newline '\\n' and carriage return '\\r' is added to the end of the message . If the operation is successful , B is 1 and ERRORMSG is '' . Otherwise , B is 0 and ERRORMSG describes the error .","title":"vlt.file.addline"},{"location":"reference/%2Bvlt/%2Bfile/addline.m/#vltfileaddline","text":"ADDLINE - add a line of text to a text file [ B , ERRORMSG ] = ADDLINE ( FILENAME , MESSAGE ) ADDLINE writes a message to the textfile FILENAME . If the FILENAME does not exist , then ADDLINE attempts to create it . ADDLINE first attempts to check out a lock file so that two programs do not write to the FILENAME simultaneously . A newline '\\n' and carriage return '\\r' is added to the end of the message . If the operation is successful , B is 1 and ERRORMSG is '' . Otherwise , B is 0 and ERRORMSG describes the error .","title":"vlt.file.addline"},{"location":"reference/%2Bvlt/%2Bfile/arefilessame.m/","text":"vlt.file.arefilessame \u00b6 AREFILESSAME - are two files the same , byte for byte ? B = AREFILESSAME ( FILE1 , FILE2 ) Returns 1 if the binary contents of FILE1 and FILE2 are the same .","title":"vlt.file.arefilessame"},{"location":"reference/%2Bvlt/%2Bfile/arefilessame.m/#vltfilearefilessame","text":"AREFILESSAME - are two files the same , byte for byte ? B = AREFILESSAME ( FILE1 , FILE2 ) Returns 1 if the binary contents of FILE1 and FILE2 are the same .","title":"vlt.file.arefilessame"},{"location":"reference/%2Bvlt/%2Bfile/cellstr2text.m/","text":"vlt.file.cellstr2text \u00b6 CELLSTR2TEXT - Write a cell string to a text file vlt.file.cellstr2text(FILENAME, CS) Writes the cell array of strings CS to the new text file FILENAME. One entry is written per line.","title":"vlt.file.cellstr2text"},{"location":"reference/%2Bvlt/%2Bfile/cellstr2text.m/#vltfilecellstr2text","text":"CELLSTR2TEXT - Write a cell string to a text file vlt.file.cellstr2text(FILENAME, CS) Writes the cell array of strings CS to the new text file FILENAME. One entry is written per line.","title":"vlt.file.cellstr2text"},{"location":"reference/%2Bvlt/%2Bfile/checkout_lock_file.m/","text":"vlt.file.checkout_lock_file \u00b6 CHECKOUT_LOCK_FILE Try to establish control of a lock file [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME ) This function tries to check out the file FILENAME so that different programs do not perform some operation at the same time . This is a quick and dirty semaphore implementation ( see Wikipedia if unfamilar with semaphores ). The LOCKFILE will also EXPIRE in 1 hour unless otherwise specified below . A KEY is returned , which is necessary to pass to to vlt . file . release_lock_file . This function tries to create an empty file called FILENAME . If the file is NOT already present and the creation successful , the file will be created and FID will return the file ID ( see help fopen ). If instead the file already exists , the function will check every 1 second for 30 iterations to see if the file disappears . If the function is never able to create a new file because the old file exists , then the function will give up and return FID < 0. IMPORTANT : RESPONSIBLE CLEANUP : It is important that if the program that calls vlt . file . checkout_lock_file is able to create the file ( that is , FID > 0 ), then it should call vlt . file . release_lock_file to remove the lock file . IMPORANT : FILE CLOSURE : If 2 output arguments are given ( that is , KEY is examined ), then the lock file is closed before vlt . file . checkout_lock_file exits . If KEY is not requested in output , then the FID is left open for backwards compatibility . Depricated release instructions ( new code should not use ): 1 ) close the file with fclose ( FID ) and 2 ) delete the file FILENAME that is created with delete ( FILENAME ). If FID < 0 , then it should NOT delete the file FILENAME because it is checked out by some other program . The function can be called with additional output arguments : [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME , CHECKLOOPS ) Alters the number of times the function will check ( at 1 second intervals ) to see if FILENAME has disappeared . [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME , CHECKLOOPS , THROWERROR ) If THROWERROR is 1 , the function will return an error instead of returning FID < 0. [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME , CHECKLOOPS , THROWERROR , EXPIRATION_SECONDS ) This mode allows one to specifically set the expiration time in seconds . vlt . file . checkout_lock_file will examine the file for the expiration time and ignore and remove the lock file if it is \"expired\" . By default , EXPIRATION_SECONDS is 3600. Example : % I want to make sure only my program writes to myfile.txt. % All of my programs that write to myfile.txt will \"check out\" the % file by creating myfile.txt-lock. mylockfile = [ userpath filesep 'myfile.txt-lock' ]; [ lockfid , key ] = vlt . file . checkout_lock_file ( mylockfile ); if lockfid > 0 , % do something vlt . file . release_lock_file ( mylockfile , key ); else , error ([ 'Never got control of ' mylockfile '; it was busy.' ]); end ; See also: vlt.file.release_lock_file, FOPEN, DELETE","title":"vlt.file.checkout_lock_file"},{"location":"reference/%2Bvlt/%2Bfile/checkout_lock_file.m/#vltfilecheckout_lock_file","text":"CHECKOUT_LOCK_FILE Try to establish control of a lock file [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME ) This function tries to check out the file FILENAME so that different programs do not perform some operation at the same time . This is a quick and dirty semaphore implementation ( see Wikipedia if unfamilar with semaphores ). The LOCKFILE will also EXPIRE in 1 hour unless otherwise specified below . A KEY is returned , which is necessary to pass to to vlt . file . release_lock_file . This function tries to create an empty file called FILENAME . If the file is NOT already present and the creation successful , the file will be created and FID will return the file ID ( see help fopen ). If instead the file already exists , the function will check every 1 second for 30 iterations to see if the file disappears . If the function is never able to create a new file because the old file exists , then the function will give up and return FID < 0. IMPORTANT : RESPONSIBLE CLEANUP : It is important that if the program that calls vlt . file . checkout_lock_file is able to create the file ( that is , FID > 0 ), then it should call vlt . file . release_lock_file to remove the lock file . IMPORANT : FILE CLOSURE : If 2 output arguments are given ( that is , KEY is examined ), then the lock file is closed before vlt . file . checkout_lock_file exits . If KEY is not requested in output , then the FID is left open for backwards compatibility . Depricated release instructions ( new code should not use ): 1 ) close the file with fclose ( FID ) and 2 ) delete the file FILENAME that is created with delete ( FILENAME ). If FID < 0 , then it should NOT delete the file FILENAME because it is checked out by some other program . The function can be called with additional output arguments : [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME , CHECKLOOPS ) Alters the number of times the function will check ( at 1 second intervals ) to see if FILENAME has disappeared . [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME , CHECKLOOPS , THROWERROR ) If THROWERROR is 1 , the function will return an error instead of returning FID < 0. [ FID , KEY ] = vlt . file . checkout_lock_file ( FILENAME , CHECKLOOPS , THROWERROR , EXPIRATION_SECONDS ) This mode allows one to specifically set the expiration time in seconds . vlt . file . checkout_lock_file will examine the file for the expiration time and ignore and remove the lock file if it is \"expired\" . By default , EXPIRATION_SECONDS is 3600. Example : % I want to make sure only my program writes to myfile.txt. % All of my programs that write to myfile.txt will \"check out\" the % file by creating myfile.txt-lock. mylockfile = [ userpath filesep 'myfile.txt-lock' ]; [ lockfid , key ] = vlt . file . checkout_lock_file ( mylockfile ); if lockfid > 0 , % do something vlt . file . release_lock_file ( mylockfile , key ); else , error ([ 'Never got control of ' mylockfile '; it was busy.' ]); end ; See also: vlt.file.release_lock_file, FOPEN, DELETE","title":"vlt.file.checkout_lock_file"},{"location":"reference/%2Bvlt/%2Bfile/combinepdf.m/","text":"vlt.file.combinepdf \u00b6 COMBINEPDF - Merge PDF ( portable document format ) files on Mac OS X vlt . file . combinepdf ( MERGEFILENAME , FILE1 , FILE2 , ... ) On Mac OS X , this function calls the command line tool / System / Library / Automator / Combine PDF Pages . action / Contents / Resources / join . py to merge PDF files . INPUTS : MERGEFILENAME is the name of the merged file . If it exists , it will be deleted . The filenames to be merged ( FILE1 , FILE2 , ... ) are passed as additional arguments . The filenames should either be in full path format or should be in the local directory . This function will fail on platforms other than Mac OS X .","title":"vlt.file.combinepdf"},{"location":"reference/%2Bvlt/%2Bfile/combinepdf.m/#vltfilecombinepdf","text":"COMBINEPDF - Merge PDF ( portable document format ) files on Mac OS X vlt . file . combinepdf ( MERGEFILENAME , FILE1 , FILE2 , ... ) On Mac OS X , this function calls the command line tool / System / Library / Automator / Combine PDF Pages . action / Contents / Resources / join . py to merge PDF files . INPUTS : MERGEFILENAME is the name of the merged file . If it exists , it will be deleted . The filenames to be merged ( FILE1 , FILE2 , ... ) are passed as additional arguments . The filenames should either be in full path format or should be in the local directory . This function will fail on platforms other than Mac OS X .","title":"vlt.file.combinepdf"},{"location":"reference/%2Bvlt/%2Bfile/createpath.m/","text":"vlt.file.createpath \u00b6 CREATEPATH - create a directory path to a given file name , if necessary [ B , ERRORMSG ] = CREATEPATH ( FILENAME ) This function creates all directories that are necessary to store the file FILENAME , if they don 't already exist. If the directories already exist, no action is taken. If the function succeeds, B is 1 and ERRORMSG is empty. Otherwise, B is 0 and ERRORMSG contains the error.","title":"vlt.file.createpath"},{"location":"reference/%2Bvlt/%2Bfile/createpath.m/#vltfilecreatepath","text":"CREATEPATH - create a directory path to a given file name , if necessary [ B , ERRORMSG ] = CREATEPATH ( FILENAME ) This function creates all directories that are necessary to store the file FILENAME , if they don 't already exist. If the directories already exist, no action is taken. If the function succeeds, B is 1 and ERRORMSG is empty. Otherwise, B is 0 and ERRORMSG contains the error.","title":"vlt.file.createpath"},{"location":"reference/%2Bvlt/%2Bfile/dirlist_trimdots.m/","text":"vlt.file.dirlist_trimdots \u00b6 DIR_TRIMDOTS - Trim strings '.' or '..' from a list of directory strings DIRLIST = vlt . file . dirlist_trimdots ( DIRLIST_OR_DIRLISTSTRUCT , [ OUTPUT_STRUCT ] ) When one obtains output from the MATLAB DIR function , the list sometimes includes the POSIX directories '.' ( an abbreviation for the current directory ) and '..' ( an abbreviation for the parent directory ). This function trims those entries from the directory list ( a cell array of strings ) and returns all other entries . One can also pass the direct output from the MATLAB DIR function , and the directory list will be extracted . The function stops when it has found both '.' and '..' ; if these entries occur more than once they will not be removed . Also removes '.DS_Store' ( Apple desktop information ) and '.git' ( Git information ), '.svn' ( subversion information ) and '__pycache__' . If the argument OUTPUT_STRUCT is present and is 1 , and if DIRLIST_OR_DIRLISTSTRUCT is a structure returned from the function DIR , then the output will be a structure of the same type with the '.' and '..' ( and '.DS_Store' and '.git' and '.svn' and '__pycache__' ) removed . See also : DIR , vlt . file . dirstrip () Example : D = dir dirnumbers = find ( [ D.isdir ] ) % return indexes that correspond to directories % display all of these directories dirlist = { D ( dirnumbers ). name } % now trim dirlist = vlt . file . dirlist_trimdots ( dirlist )","title":"vlt.file.dirlist_trimdots"},{"location":"reference/%2Bvlt/%2Bfile/dirlist_trimdots.m/#vltfiledirlist_trimdots","text":"DIR_TRIMDOTS - Trim strings '.' or '..' from a list of directory strings DIRLIST = vlt . file . dirlist_trimdots ( DIRLIST_OR_DIRLISTSTRUCT , [ OUTPUT_STRUCT ] ) When one obtains output from the MATLAB DIR function , the list sometimes includes the POSIX directories '.' ( an abbreviation for the current directory ) and '..' ( an abbreviation for the parent directory ). This function trims those entries from the directory list ( a cell array of strings ) and returns all other entries . One can also pass the direct output from the MATLAB DIR function , and the directory list will be extracted . The function stops when it has found both '.' and '..' ; if these entries occur more than once they will not be removed . Also removes '.DS_Store' ( Apple desktop information ) and '.git' ( Git information ), '.svn' ( subversion information ) and '__pycache__' . If the argument OUTPUT_STRUCT is present and is 1 , and if DIRLIST_OR_DIRLISTSTRUCT is a structure returned from the function DIR , then the output will be a structure of the same type with the '.' and '..' ( and '.DS_Store' and '.git' and '.svn' and '__pycache__' ) removed . See also : DIR , vlt . file . dirstrip () Example : D = dir dirnumbers = find ( [ D.isdir ] ) % return indexes that correspond to directories % display all of these directories dirlist = { D ( dirnumbers ). name } % now trim dirlist = vlt . file . dirlist_trimdots ( dirlist )","title":"vlt.file.dirlist_trimdots"},{"location":"reference/%2Bvlt/%2Bfile/dirstrip.m/","text":"vlt.file.dirstrip \u00b6 D = vlt . file . dirstrip ( DS ) Removes '.' and '..' from a directory structure returned by the function \"DIR\" . Also removes '. DS_Store ' ( Apple desktop information ) and '. git ' ( GitHub ) from the list . This will return all file names , including regular files . To return only directories , see vlt . file . dirlist_trimdots (). See also: DIR , vlt . file . dirlist_trimdots ()","title":"vlt.file.dirstrip"},{"location":"reference/%2Bvlt/%2Bfile/dirstrip.m/#vltfiledirstrip","text":"D = vlt . file . dirstrip ( DS ) Removes '.' and '..' from a directory structure returned by the function \"DIR\" . Also removes '. DS_Store ' ( Apple desktop information ) and '. git ' ( GitHub ) from the list . This will return all file names , including regular files . To return only directories , see vlt . file . dirlist_trimdots (). See also: DIR , vlt . file . dirlist_trimdots ()","title":"vlt.file.dirstrip"},{"location":"reference/%2Bvlt/%2Bfile/drivepath.m/","text":"vlt.file.drivepath \u00b6 DRIVEPATH - What is the default name of the directory that contains drives / media / volumes ? P = vlt . file . drivepath Returns the name of the default name of the directory that contains drives or media or volumes on this operating system . If the platform ( returned in COMPUTER ) , then P is Platform string | P ---------------------------------------------------------- 'GLNXA64' | '/media' 'MACI64' | '/Volumes' 'PCWIN64' | '' See also : COMPUTER","title":"vlt.file.drivepath"},{"location":"reference/%2Bvlt/%2Bfile/drivepath.m/#vltfiledrivepath","text":"DRIVEPATH - What is the default name of the directory that contains drives / media / volumes ? P = vlt . file . drivepath Returns the name of the default name of the directory that contains drives or media or volumes on this operating system . If the platform ( returned in COMPUTER ) , then P is Platform string | P ---------------------------------------------------------- 'GLNXA64' | '/media' 'MACI64' | '/Volumes' 'PCWIN64' | '' See also : COMPUTER","title":"vlt.file.drivepath"},{"location":"reference/%2Bvlt/%2Bfile/dumbjsondb.m/","text":"CLASS vlt.file.dumbjsondb \u00b6 vlt . file . dumbjsondb - a very simple and slow JSON - based database with associated binary files DUMBJSONDB implements a very simple JSON - based document database . Each document is represented as a JSON file . Each document also has an associated binary file that can be read / written . The search capabilities of DUMBJSONDB are very rudimentory , and every document is read in for examination . Therefore , searching DUMBJSONDB will be very slow . Furthermore , as all of the documents are stored in a single directory , the database size will be limited to the number of files that are permitted in a single directory by the file system divided by 3 ( there is a . JSON file , a binary file , and a metadata file for each document ). Example : Create and test a DUMBJSONDB object in the current directory . % create a new db db = vlt . file . dumbjsondb ( 'new' , [ pwd filesep 'mydb.json' ] ); % add some new entries for i = 1 : 5 , a . id = 2000 + i ; a . value = i ; db . add ( a ); end ; % read latest version of all the entries ids = db . alldocids ; for i = 1 : numel ( ids ), db . read ( ids { i } ), % display the entry end % search for a document [ docs,doc_versions ] = db . search ( {} , { 'value' , 5 } ) % search for a document that doesn 't exist because ' 5 ' is a string [docs,doc_versions] = db.search({},{' value ',' 5 '}) % use the struct version of search [docs,doc_versions] = db.search({},struct(' field ',' value ',' operation ',' greaterthan ',' param1 ',1,' param2 ',[])) % remove an entry db.remove(2002); % update 2005 to new version, saving old version a.value = 20; db.add(a,' Overwrite ',2); % will automatically update version number % read first and latest version of all the entries ids = db.alldocids; for i=1:numel(ids), disp([' 0 th version : ']); db.read(ids{i},0), % display the 0th version disp([' Latest version : ']); db.read(ids{i}), % display the entry end % add binary information to binary file [fid,key] = db.openbinaryfile(2005); if fid>0, fwrite(fid,' this is a test ',' char '); [fid] = db.closebinaryfile(fid, key, 2005); end % read the binary file [fid, key] = db.openbinaryfile(2005); if fid>0, fseek(fid,0,' bof '); % go to beginning of file output=char(fread(fid,14,' char '))' , [ fid ] = db . closebinaryfile ( fid , key , 2005 ); end % remove all entries db . clear ( 'Yes' ); Superclasses \u00b6 none Properties \u00b6 Property Description paramfilename The full pathname of the parameter file dirname The directory name where files are stored (same directory as parameter file) unique_object_id_field The field of each object that indicates the unique ID for each database entry Methods \u00b6 Method Description add add a document to a DUMBJSONDB alldocids return all doc unique id numbers for a DUMBJSONDB clear remove/delete all records from a DUBMJSONDB closebinaryfile close and unlock the binary file associated with a DUMBJSONDB document docstats document stats including document version and whether or not the document has a binary file docversions find all document versions for a DUMBJSONDB dumbjsondb create a DUMBJSONDB object latestdocversion return most recent documnet version number openbinaryfile return the FID for the binary file associated with a DUMBJSONDB document read READ the JSON document corresponding to a particular document unique id remove REMOVE or delete the JSON document corresponding to a particular document unique id search perform a search of DUMBJSONDB documents Methods help \u00b6 add - add a document to a DUMBJSONDB DUMBJSONDB_OBJ = ADD ( DUMBJSONDB_OBJ , DOC_OBJECT , .... ) Add a document to the database DUMBJSONDB_OBJ . DOC_OBJECT should be a Matlab object . It will be encoded to a JSON representation and saved . This function also accepts name / value pairs that modify the adding behavior : Parameter ( default ) | Description --------------------------------------------------------------------------- 'Overwrite' ( 1 ) | Use 1 to overwrite current version | 0 to return an error instead of overwriting | 2 to add the document as a new version 'doc_version' ( latest ) | Use a specific number to write a specific version See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS alldocids - return all doc unique id numbers for a DUMBJSONDB DOC_UNIQUE_ID = ALLDOCIDS ( DUMBJSONDB_OBJ ) Return a cell array of all document unique ID ( s ) ( char strings ) for the DUMBJSONDB object DUMBJSONDB_OBJ . clear - remove/delete all records from a DUBMJSONDB CLEAR ( DUMBJSONDB_OBJ , [ AREYOUSURE ] ) Removes all documents from the DUMBJSONDB object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : DUMBJSONDB / REMOVE closebinaryfile - close and unlock the binary file associated with a DUMBJSONDB document [ FID ] = CLOSEBINARYFILE ( DUMBJSONDB_OBJ , FID , KEY , DOC_UNIQUE_ID , [ DOC_VERSION ] ) Closes the binary file associated with DUMBJSONDB that has file identifier FID , DOC_UNIQUE_ID and DOC_VERSION . If DOC_VERSION is not provided , the lastest will be used . This function closes the file and deletes the lock file . KEY is the key that is returned by OPENBINARYFILE , and is needed to release the lock on the binary file . FID is set to - 1 on exit . See also : DUMBJSONDB / OPENBINARYFILE , CHECKOUT_LOCK_FILE if the file is open , close it docstats - document stats including document version and whether or not the document has a binary file [ DOC_UNIQUE_ID , DOCBINARYFILE ] = DOCSTATS ( DUMBJSONDB_OBJ , DOCUMENT_OBJ ) Returns several pieces of information about the Matlab structure / object DOCUMENT_OBJ : DOC_UNIQUE_ID is the document unique id ( specified in the property 'document_unique_id' of DUMBJSONDB_OBJ ). DOCBINARYFILE is 1 if and only if DOC has the field specified in property 'hasbinaryfilefield' and the value is 1 ; otherwise DOCBINARYFILE is 0 . docversions - find all document versions for a DUMBJSONDB V = DOCVERSIONS ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return all version numbers for a given DUMBJSONDB and a DOC_UNIQUE_ID . Documents without version control that exist have version 0 . V will be an array of integers with all version numbers . If there are no documents that match DOC_UNIQUE_ID , then empty is returned . dumbjsondb - create a DUMBJSONDB object DUMBJSONDB_OBJ = DUMBJSONDB ( COMMAND , ... ) Create a DUMBJSONDB object via one of several routes . COMMAND options | Description ---------------------------------------------------------------------------------------- 'Load' | Second argument should be full path filename of the saved parameter file 'New' | Second argument should be full path filename of the saved parameter file , ( None ) | Creates an empty object . This file also accepts additional name / value pairs for arguments 3 .. end . Parameter ( default ) | Description ---------------------------------------------------------------------------------------- dirname ( '.dumbjsondb' ) | The directory name , relative to the parameter file unique_object_id_field ( 'id' ) | The field name in the database for the unique object identifier See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS Documentation for vlt . file . dumbjsondb / dumbjsondb doc vlt . file . dumbjsondb latestdocversion - return most recent documnet version number [ L , V ] = LATESTDOCVERSION ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return the latest version ( L ) of the document with the document unique ID equal to DOC_UNIQUE_ID . A full array of available version numbers V is also returned . If there are no versions , L is empty . See also : DUMBJSONDB / DOCVERSIONS openbinaryfile - return the FID for the binary file associated with a DUMBJSONDB document [ FID, KEY, DOC_VERSION ] = OPENBINARYFILE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [ , DOC_VERSION ] ) Attempts to obtain the lock and open the binary file associated with DOC_UNIQUE_ID and DOC_VERSION for reading / writing . If DOC_VERSION is not present , then the lastest version is used . All the binary files are in 'big-endian' format and are opened as such by OPENBINARYFILE . If there is no such file , an error is generated . If the file is locked by another program , then FID is - 1. File lock is achieved using CHECKOUT_LOCK_FILE . The lock file must be closed and deleted after FID is closed so that other programs can use the file . This service is performed by CLOSEBINARYFILE . KEY is a random key that is needed to close the file ( releases the lock ). Example : [ fid, key ]= mydb . openbinaryfile ( doc_unique_id ); if fid > 0 , try , % do something , e . g ., fwrite ( fid , 'my data' , 'char' ); [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); catch , [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); error ( [ 'Could not do what I wanted to do.' ] ) end end See also : DUMBJSONDB / CLOSEBINARYFILE , DUMBJSONDB / READ , CHECKOUT_LOCK_FILE , FREAD , FWRITE read - READ the JSON document corresponding to a particular document unique id [ DOCUMENT , VERSION ] = READ ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [, VERSION ] ) Reads and decodes the document corresponding to the document unique id DOC_UNIQUE_ID . If VERSION is provided , then the requested version is read . If it is not provided , then the latest version is provided . VERSION can be between 0 and hex2dec ( 'FFFFF' ) . DOCUMENT is the Matlab object generated by the decoded JSON file . VERSION is the actual version that was read . If there is no such document , then DOCUMENT and VERSION will be empty ( [] ) . See also : DUMBJSONDB , DUMBJSONDB / ADD , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS remove - REMOVE or delete the JSON document corresponding to a particular document unique id DUMBJSONDB_OBJ = REMOVE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID , VERSION ) Removes the document corresponding to the document unique id DOC_UNIQUE_ID and version VERSION . If VERSION is provided , then the requested version is removed . If it is not provided , or is equal to the string 'all' , then ALL versions are deleted . See also : DUMBJSONDB / CLEAR search - perform a search of DUMBJSONDB documents [ DOCS , DOC_VERSIONS ] = SEARCH ( DUMBJSONDB_OBJ , SCOPE , SEARCHPARAMS ) Performs a search of DUMBJSONDB_OBJ to find matching documents . SCOPE is a cell array of name / value pairs that modify the search scope: SCOPE parameter ( default ) : Description ---------------------------------------------------------------------- version (' latest ') : Which versions should be searched ? Can be : a specific number , ' latest ', or ' all ' SEARCHPARAMS should be either be {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... } or a search structure appropriate for FIELDSEARCH . The document parameters PARAM1 , PARAM2 are examined for matches . If VALUEN is a string , then a regular expression is evaluated to determine the match . If valueN is not a string , then the the items must match exactly . DOCS is a cell array of JSON - decoded documents . DOC_VERSIONS is an array of the corresponding document versions . Case is not considered . Examples: indexes = search ( mydb , ' type ',' nsd_spikedata '); indexes = search ( mydb , ' type ',' nsd_spike ( * .)'); See also: REGEXPI","title":"vlt.file.dumbjsondb"},{"location":"reference/%2Bvlt/%2Bfile/dumbjsondb.m/#class-vltfiledumbjsondb","text":"vlt . file . dumbjsondb - a very simple and slow JSON - based database with associated binary files DUMBJSONDB implements a very simple JSON - based document database . Each document is represented as a JSON file . Each document also has an associated binary file that can be read / written . The search capabilities of DUMBJSONDB are very rudimentory , and every document is read in for examination . Therefore , searching DUMBJSONDB will be very slow . Furthermore , as all of the documents are stored in a single directory , the database size will be limited to the number of files that are permitted in a single directory by the file system divided by 3 ( there is a . JSON file , a binary file , and a metadata file for each document ). Example : Create and test a DUMBJSONDB object in the current directory . % create a new db db = vlt . file . dumbjsondb ( 'new' , [ pwd filesep 'mydb.json' ] ); % add some new entries for i = 1 : 5 , a . id = 2000 + i ; a . value = i ; db . add ( a ); end ; % read latest version of all the entries ids = db . alldocids ; for i = 1 : numel ( ids ), db . read ( ids { i } ), % display the entry end % search for a document [ docs,doc_versions ] = db . search ( {} , { 'value' , 5 } ) % search for a document that doesn 't exist because ' 5 ' is a string [docs,doc_versions] = db.search({},{' value ',' 5 '}) % use the struct version of search [docs,doc_versions] = db.search({},struct(' field ',' value ',' operation ',' greaterthan ',' param1 ',1,' param2 ',[])) % remove an entry db.remove(2002); % update 2005 to new version, saving old version a.value = 20; db.add(a,' Overwrite ',2); % will automatically update version number % read first and latest version of all the entries ids = db.alldocids; for i=1:numel(ids), disp([' 0 th version : ']); db.read(ids{i},0), % display the 0th version disp([' Latest version : ']); db.read(ids{i}), % display the entry end % add binary information to binary file [fid,key] = db.openbinaryfile(2005); if fid>0, fwrite(fid,' this is a test ',' char '); [fid] = db.closebinaryfile(fid, key, 2005); end % read the binary file [fid, key] = db.openbinaryfile(2005); if fid>0, fseek(fid,0,' bof '); % go to beginning of file output=char(fread(fid,14,' char '))' , [ fid ] = db . closebinaryfile ( fid , key , 2005 ); end % remove all entries db . clear ( 'Yes' );","title":"CLASS vlt.file.dumbjsondb"},{"location":"reference/%2Bvlt/%2Bfile/dumbjsondb.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bfile/dumbjsondb.m/#properties","text":"Property Description paramfilename The full pathname of the parameter file dirname The directory name where files are stored (same directory as parameter file) unique_object_id_field The field of each object that indicates the unique ID for each database entry","title":"Properties"},{"location":"reference/%2Bvlt/%2Bfile/dumbjsondb.m/#methods","text":"Method Description add add a document to a DUMBJSONDB alldocids return all doc unique id numbers for a DUMBJSONDB clear remove/delete all records from a DUBMJSONDB closebinaryfile close and unlock the binary file associated with a DUMBJSONDB document docstats document stats including document version and whether or not the document has a binary file docversions find all document versions for a DUMBJSONDB dumbjsondb create a DUMBJSONDB object latestdocversion return most recent documnet version number openbinaryfile return the FID for the binary file associated with a DUMBJSONDB document read READ the JSON document corresponding to a particular document unique id remove REMOVE or delete the JSON document corresponding to a particular document unique id search perform a search of DUMBJSONDB documents","title":"Methods"},{"location":"reference/%2Bvlt/%2Bfile/dumbjsondb.m/#methods-help","text":"add - add a document to a DUMBJSONDB DUMBJSONDB_OBJ = ADD ( DUMBJSONDB_OBJ , DOC_OBJECT , .... ) Add a document to the database DUMBJSONDB_OBJ . DOC_OBJECT should be a Matlab object . It will be encoded to a JSON representation and saved . This function also accepts name / value pairs that modify the adding behavior : Parameter ( default ) | Description --------------------------------------------------------------------------- 'Overwrite' ( 1 ) | Use 1 to overwrite current version | 0 to return an error instead of overwriting | 2 to add the document as a new version 'doc_version' ( latest ) | Use a specific number to write a specific version See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS alldocids - return all doc unique id numbers for a DUMBJSONDB DOC_UNIQUE_ID = ALLDOCIDS ( DUMBJSONDB_OBJ ) Return a cell array of all document unique ID ( s ) ( char strings ) for the DUMBJSONDB object DUMBJSONDB_OBJ . clear - remove/delete all records from a DUBMJSONDB CLEAR ( DUMBJSONDB_OBJ , [ AREYOUSURE ] ) Removes all documents from the DUMBJSONDB object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : DUMBJSONDB / REMOVE closebinaryfile - close and unlock the binary file associated with a DUMBJSONDB document [ FID ] = CLOSEBINARYFILE ( DUMBJSONDB_OBJ , FID , KEY , DOC_UNIQUE_ID , [ DOC_VERSION ] ) Closes the binary file associated with DUMBJSONDB that has file identifier FID , DOC_UNIQUE_ID and DOC_VERSION . If DOC_VERSION is not provided , the lastest will be used . This function closes the file and deletes the lock file . KEY is the key that is returned by OPENBINARYFILE , and is needed to release the lock on the binary file . FID is set to - 1 on exit . See also : DUMBJSONDB / OPENBINARYFILE , CHECKOUT_LOCK_FILE if the file is open , close it docstats - document stats including document version and whether or not the document has a binary file [ DOC_UNIQUE_ID , DOCBINARYFILE ] = DOCSTATS ( DUMBJSONDB_OBJ , DOCUMENT_OBJ ) Returns several pieces of information about the Matlab structure / object DOCUMENT_OBJ : DOC_UNIQUE_ID is the document unique id ( specified in the property 'document_unique_id' of DUMBJSONDB_OBJ ). DOCBINARYFILE is 1 if and only if DOC has the field specified in property 'hasbinaryfilefield' and the value is 1 ; otherwise DOCBINARYFILE is 0 . docversions - find all document versions for a DUMBJSONDB V = DOCVERSIONS ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return all version numbers for a given DUMBJSONDB and a DOC_UNIQUE_ID . Documents without version control that exist have version 0 . V will be an array of integers with all version numbers . If there are no documents that match DOC_UNIQUE_ID , then empty is returned . dumbjsondb - create a DUMBJSONDB object DUMBJSONDB_OBJ = DUMBJSONDB ( COMMAND , ... ) Create a DUMBJSONDB object via one of several routes . COMMAND options | Description ---------------------------------------------------------------------------------------- 'Load' | Second argument should be full path filename of the saved parameter file 'New' | Second argument should be full path filename of the saved parameter file , ( None ) | Creates an empty object . This file also accepts additional name / value pairs for arguments 3 .. end . Parameter ( default ) | Description ---------------------------------------------------------------------------------------- dirname ( '.dumbjsondb' ) | The directory name , relative to the parameter file unique_object_id_field ( 'id' ) | The field name in the database for the unique object identifier See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS Documentation for vlt . file . dumbjsondb / dumbjsondb doc vlt . file . dumbjsondb latestdocversion - return most recent documnet version number [ L , V ] = LATESTDOCVERSION ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return the latest version ( L ) of the document with the document unique ID equal to DOC_UNIQUE_ID . A full array of available version numbers V is also returned . If there are no versions , L is empty . See also : DUMBJSONDB / DOCVERSIONS openbinaryfile - return the FID for the binary file associated with a DUMBJSONDB document [ FID, KEY, DOC_VERSION ] = OPENBINARYFILE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [ , DOC_VERSION ] ) Attempts to obtain the lock and open the binary file associated with DOC_UNIQUE_ID and DOC_VERSION for reading / writing . If DOC_VERSION is not present , then the lastest version is used . All the binary files are in 'big-endian' format and are opened as such by OPENBINARYFILE . If there is no such file , an error is generated . If the file is locked by another program , then FID is - 1. File lock is achieved using CHECKOUT_LOCK_FILE . The lock file must be closed and deleted after FID is closed so that other programs can use the file . This service is performed by CLOSEBINARYFILE . KEY is a random key that is needed to close the file ( releases the lock ). Example : [ fid, key ]= mydb . openbinaryfile ( doc_unique_id ); if fid > 0 , try , % do something , e . g ., fwrite ( fid , 'my data' , 'char' ); [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); catch , [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); error ( [ 'Could not do what I wanted to do.' ] ) end end See also : DUMBJSONDB / CLOSEBINARYFILE , DUMBJSONDB / READ , CHECKOUT_LOCK_FILE , FREAD , FWRITE read - READ the JSON document corresponding to a particular document unique id [ DOCUMENT , VERSION ] = READ ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [, VERSION ] ) Reads and decodes the document corresponding to the document unique id DOC_UNIQUE_ID . If VERSION is provided , then the requested version is read . If it is not provided , then the latest version is provided . VERSION can be between 0 and hex2dec ( 'FFFFF' ) . DOCUMENT is the Matlab object generated by the decoded JSON file . VERSION is the actual version that was read . If there is no such document , then DOCUMENT and VERSION will be empty ( [] ) . See also : DUMBJSONDB , DUMBJSONDB / ADD , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS remove - REMOVE or delete the JSON document corresponding to a particular document unique id DUMBJSONDB_OBJ = REMOVE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID , VERSION ) Removes the document corresponding to the document unique id DOC_UNIQUE_ID and version VERSION . If VERSION is provided , then the requested version is removed . If it is not provided , or is equal to the string 'all' , then ALL versions are deleted . See also : DUMBJSONDB / CLEAR search - perform a search of DUMBJSONDB documents [ DOCS , DOC_VERSIONS ] = SEARCH ( DUMBJSONDB_OBJ , SCOPE , SEARCHPARAMS ) Performs a search of DUMBJSONDB_OBJ to find matching documents . SCOPE is a cell array of name / value pairs that modify the search scope: SCOPE parameter ( default ) : Description ---------------------------------------------------------------------- version (' latest ') : Which versions should be searched ? Can be : a specific number , ' latest ', or ' all ' SEARCHPARAMS should be either be {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... } or a search structure appropriate for FIELDSEARCH . The document parameters PARAM1 , PARAM2 are examined for matches . If VALUEN is a string , then a regular expression is evaluated to determine the match . If valueN is not a string , then the the items must match exactly . DOCS is a cell array of JSON - decoded documents . DOC_VERSIONS is an array of the corresponding document versions . Case is not considered . Examples: indexes = search ( mydb , ' type ',' nsd_spikedata '); indexes = search ( mydb , ' type ',' nsd_spike ( * .)'); See also: REGEXPI","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bfile/filebackup.m/","text":"vlt.file.filebackup \u00b6 FILEBACKUP - Create a backup of a file BACKUPNAME = vlt . file . filebackup ( FNAME ) Creates a backup file of the file named FNAME ( full path ). The new file is named [ FNAME '_bkupNNN' EXT ] , where NNN is a number . The number NNN is chosen such that no file has that name ( for example , if there is a file 001 , then the new file created is 002 , etc ). The name of the backup file is BACKUPNAME . The behavior of the function can be modified with extra name / value pairs : PARAMETER NAME ( default ) | DESCRIPTION ----------------------------------------------------------------- DeleteOrig ( 0 ) | Delete the original file ? Digits ( 3 ) | Number of digits to use ErrorIfDigitsExceeded ( 1 ) | Produce an error if the number of digits | is exceeded . ( If no error is produced , then | no backup is made .) Example : fname = 'C:\\Users\\me\\mytest.txt' ; backupname = vlt . file . filebackup ( fname ); % will be 'C:\\Users\\me\\mytest_bkup001.txt'","title":"vlt.file.filebackup"},{"location":"reference/%2Bvlt/%2Bfile/filebackup.m/#vltfilefilebackup","text":"FILEBACKUP - Create a backup of a file BACKUPNAME = vlt . file . filebackup ( FNAME ) Creates a backup file of the file named FNAME ( full path ). The new file is named [ FNAME '_bkupNNN' EXT ] , where NNN is a number . The number NNN is chosen such that no file has that name ( for example , if there is a file 001 , then the new file created is 002 , etc ). The name of the backup file is BACKUPNAME . The behavior of the function can be modified with extra name / value pairs : PARAMETER NAME ( default ) | DESCRIPTION ----------------------------------------------------------------- DeleteOrig ( 0 ) | Delete the original file ? Digits ( 3 ) | Number of digits to use ErrorIfDigitsExceeded ( 1 ) | Produce an error if the number of digits | is exceeded . ( If no error is produced , then | no backup is made .) Example : fname = 'C:\\Users\\me\\mytest.txt' ; backupname = vlt . file . filebackup ( fname ); % will be 'C:\\Users\\me\\mytest_bkup001.txt'","title":"vlt.file.filebackup"},{"location":"reference/%2Bvlt/%2Bfile/filediff.m/","text":"vlt.file.filediff \u00b6 FILEDIFF - return the output of the system tool 'diff' [ B , D ] = vlt . file . filediff ( FILE1 , FILE2 ) Returns the output of the system tool [ 'diff file1 file2]' , if 'diff' exists . B is 0 if the files do not differ , and 1 if they do differ . The output of the function ( the text notes of the differences ) are returned in D .","title":"vlt.file.filediff"},{"location":"reference/%2Bvlt/%2Bfile/filediff.m/#vltfilefilediff","text":"FILEDIFF - return the output of the system tool 'diff' [ B , D ] = vlt . file . filediff ( FILE1 , FILE2 ) Returns the output of the system tool [ 'diff file1 file2]' , if 'diff' exists . B is 0 if the files do not differ , and 1 if they do differ . The output of the function ( the text notes of the differences ) are returned in D .","title":"vlt.file.filediff"},{"location":"reference/%2Bvlt/%2Bfile/fileid_value.m/","text":"vlt.file.fileid_value \u00b6 FILEID_VALUE - return the value of an FID whether it is an FID or inside a FILEOBJ FID = vlt . file . fileid_value ( FID_OR_FILEOBJ ) Given a value which may be a FID or a vlt . file . fileobj object , return either the FID or the FID field of the vlt . file . fileobj object . Allows one to test 'if vlt.file.fileid_value(f)<0' without knowing if f is a Matlab file identifier or a vlt . file . fileobj .","title":"vlt.file.fileid_value"},{"location":"reference/%2Bvlt/%2Bfile/fileid_value.m/#vltfilefileid_value","text":"FILEID_VALUE - return the value of an FID whether it is an FID or inside a FILEOBJ FID = vlt . file . fileid_value ( FID_OR_FILEOBJ ) Given a value which may be a FID or a vlt . file . fileobj object , return either the FID or the FID field of the vlt . file . fileobj object . Allows one to test 'if vlt.file.fileid_value(f)<0' without knowing if f is a Matlab file identifier or a vlt . file . fileobj .","title":"vlt.file.fileid_value"},{"location":"reference/%2Bvlt/%2Bfile/filename_value.m/","text":"vlt.file.filename_value \u00b6 FILENAME_VALUE - return the string of a filename whether it is a filename or inside a FILEOBJ FILENAME = vlt . file . filename_value ( FILENAME_OR_FILEOBJ ) Given a value which may be a FILENAME or a vlt . file . fileobj object , return either the FILENAME or the FULLPATHFILENAME field of the vlt . file . fileobj object .","title":"vlt.file.filename_value"},{"location":"reference/%2Bvlt/%2Bfile/filename_value.m/#vltfilefilename_value","text":"FILENAME_VALUE - return the string of a filename whether it is a filename or inside a FILEOBJ FILENAME = vlt . file . filename_value ( FILENAME_OR_FILEOBJ ) Given a value which may be a FILENAME or a vlt . file . fileobj object , return either the FILENAME or the FULLPATHFILENAME field of the vlt . file . fileobj object .","title":"vlt.file.filename_value"},{"location":"reference/%2Bvlt/%2Bfile/filenamesearchreplace.m/","text":"vlt.file.filenamesearchreplace \u00b6 FILENAMESEARCHREPLACE - Seach and replace filenames within a directory vlt . file . filenamesearchreplace ( DIRNAME , SEARCHSTRS , REPLACESTRS , ... ) This function searches all files in the directory DIRNAME for matches of any string in the cell array of strings SEARCHSTRS . If it finds a match , then it creates a new file with the search string replaced by the corresponding entry in the cell array of strings REPLACESTRS . This function also can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- deleteOriginals ( 0 ) | Should original file be deleted ? useOutputDir ( 0 ) | Should we write to a different output directory ? OutputDirPath ( DIRNAME ) | The parent path of the output directory OutputDir ( 'subfolder' ) | The name of the output directry in OutputDirPath | ( will be created if it doesn ' t exist ) noOp ( 0 ) | If 1 , this will not perform the operation but will | display its intended action recursive ( 0 ) | Should we call this recursively on subdirectories ? See also : vlt . data . namevaluepair Example : Suppose mydirname has a file '.ext1' . vlt . file . filenamesearchreplace ( mydirname ,{ '.ext1' },{ '.ext2' }, 'deleteOriginals' , 1 ) % renames any files with '.ext1' to have '.ext2', deleting old files","title":"vlt.file.filenamesearchreplace"},{"location":"reference/%2Bvlt/%2Bfile/filenamesearchreplace.m/#vltfilefilenamesearchreplace","text":"FILENAMESEARCHREPLACE - Seach and replace filenames within a directory vlt . file . filenamesearchreplace ( DIRNAME , SEARCHSTRS , REPLACESTRS , ... ) This function searches all files in the directory DIRNAME for matches of any string in the cell array of strings SEARCHSTRS . If it finds a match , then it creates a new file with the search string replaced by the corresponding entry in the cell array of strings REPLACESTRS . This function also can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- deleteOriginals ( 0 ) | Should original file be deleted ? useOutputDir ( 0 ) | Should we write to a different output directory ? OutputDirPath ( DIRNAME ) | The parent path of the output directory OutputDir ( 'subfolder' ) | The name of the output directry in OutputDirPath | ( will be created if it doesn ' t exist ) noOp ( 0 ) | If 1 , this will not perform the operation but will | display its intended action recursive ( 0 ) | Should we call this recursively on subdirectories ? See also : vlt . data . namevaluepair Example : Suppose mydirname has a file '.ext1' . vlt . file . filenamesearchreplace ( mydirname ,{ '.ext1' },{ '.ext2' }, 'deleteOriginals' , 1 ) % renames any files with '.ext1' to have '.ext2', deleting old files","title":"vlt.file.filenamesearchreplace"},{"location":"reference/%2Bvlt/%2Bfile/fileobj.m/","text":"CLASS vlt.file.fileobj \u00b6 vlt . file . fileobj - a Matlab binary file object ; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen , fread , fwrite , fseek , fclose , and ftell . Why do this ? One could imagine one day separating the process of reading and writing a data stream from the file system . For example , one could write to GRIDFS by overriding these functions , and the user 's code would never have to know. Superclasses \u00b6 handle Properties \u00b6 Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian' Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , VLT . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . file . fileobj / addlistener is inherited from superclass handle delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE ( FILEOBJ_OBJ ) Deletes the handle FILEOBJ_OBJ . If the file ( FILEOBJ_OBJ . fid ) is open , it is closed first . See also : HANDLE / DELETE , FILEOBJ / FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / eq is inherited from superclass handle fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE ( FILEOBJ_OBJ ) Close a file associated with a FILEOBJ . Attempt to close the file and then set FILEOBJ_OBJ . fid to - 1 . feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ ( ... ) Creates an empty FILEOBJ object . If FILENAME is provided , then the filename is stored . Documentation for vlt . file . fileobj / fileobj doc vlt . file . fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , VLT . FILE . FILEOBJ Help for vlt . file . fileobj / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for vlt . file . fileobj / findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be 'bof' or - 1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / DELETE Help for vlt . file . fileobj / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , VLT . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . file . fileobj / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT Help for vlt . file . fileobj / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / ADDLISTENER , VLT . FILE . FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for vlt . file . fileobj / notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' )","title":"vlt.file.fileobj"},{"location":"reference/%2Bvlt/%2Bfile/fileobj.m/#class-vltfilefileobj","text":"vlt . file . fileobj - a Matlab binary file object ; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen , fread , fwrite , fseek , fclose , and ftell . Why do this ? One could imagine one day separating the process of reading and writing a data stream from the file system . For example , one could write to GRIDFS by overriding these functions , and the user 's code would never have to know.","title":"CLASS vlt.file.fileobj"},{"location":"reference/%2Bvlt/%2Bfile/fileobj.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bfile/fileobj.m/#properties","text":"Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian'","title":"Properties"},{"location":"reference/%2Bvlt/%2Bfile/fileobj.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ","title":"Methods"},{"location":"reference/%2Bvlt/%2Bfile/fileobj.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , VLT . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . file . fileobj / addlistener is inherited from superclass handle delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE ( FILEOBJ_OBJ ) Deletes the handle FILEOBJ_OBJ . If the file ( FILEOBJ_OBJ . fid ) is open , it is closed first . See also : HANDLE / DELETE , FILEOBJ / FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / eq is inherited from superclass handle fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE ( FILEOBJ_OBJ ) Close a file associated with a FILEOBJ . Attempt to close the file and then set FILEOBJ_OBJ . fid to - 1 . feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ ( ... ) Creates an empty FILEOBJ object . If FILENAME is provided , then the filename is stored . Documentation for vlt . file . fileobj / fileobj doc vlt . file . fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , VLT . FILE . FILEOBJ Help for vlt . file . fileobj / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for vlt . file . fileobj / findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be 'bof' or - 1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / DELETE Help for vlt . file . fileobj / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LT , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , VLT . FILE . FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for vlt . file . fileobj / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / NE Help for vlt . file . fileobj / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / EQ , VLT . FILE . FILEOBJ / GE , VLT . FILE . FILEOBJ / GT , VLT . FILE . FILEOBJ / LE , VLT . FILE . FILEOBJ / LT Help for vlt . file . fileobj / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also VLT . FILE . FILEOBJ , VLT . FILE . FILEOBJ / ADDLISTENER , VLT . FILE . FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for vlt . file . fileobj / notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' )","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bfile/filesepconversion.m/","text":"vlt.file.filesepconversion \u00b6 FILESEPCONVERSION - convert from one FILESEP platform to another NEWFILESTRING = vlt . file . filesepconversion ( FILESTRING , ORIG_FILESEP , NEW_FILESEP ) Converts a file string from one filepath convention to another . FILESTRING is a file path string like 'myfolder/myfile.txt' . ORIG_FILESEP is the original file separator , like '/' NEW_FILESEP is the new file separator , like '\\' Right now this function just performs a substitution . It is unknown if they are situations with escape characters ( because '\\' is often used as an escape character ) that will fail with this function .","title":"vlt.file.filesepconversion"},{"location":"reference/%2Bvlt/%2Bfile/filesepconversion.m/#vltfilefilesepconversion","text":"FILESEPCONVERSION - convert from one FILESEP platform to another NEWFILESTRING = vlt . file . filesepconversion ( FILESTRING , ORIG_FILESEP , NEW_FILESEP ) Converts a file string from one filepath convention to another . FILESTRING is a file path string like 'myfolder/myfile.txt' . ORIG_FILESEP is the original file separator , like '/' NEW_FILESEP is the new file separator , like '\\' Right now this function just performs a substitution . It is unknown if they are situations with escape characters ( because '\\' is often used as an escape character ) that will fail with this function .","title":"vlt.file.filesepconversion"},{"location":"reference/%2Bvlt/%2Bfile/findfilegroups.m/","text":"vlt.file.findfilegroups \u00b6 FINDFILEGROUPS - Find a group of files based on parameters FILELIST = vlt . file . findfilegroups ( PARENTDIR , FILEPARAMETERS , ... ) Finds groups of files based on parameters . FILEPARAMETERS should be a cell list of file name search parameters . These parameters can include regular expresion wildcards ( '.*' ) and symbols that indicate that the same string needs to be present across files ( '#' ) . Searches will return matches of these groups of files in PARENTDIR and all of its subdirectories . FILELIST is a cell array of all of the instances of these file groups . That is , FILELIST { i } is the ith instance of these file groups . The full path file names are returned in the entries of FILELIST { i } . That is , FILELIST { i }{ j } is the jth file in the ith instance of the file groups . The parent directory is searched first for matches , and then all subdirectories are searched . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SameStringSearchSymbol ( '#' ) | The symbol to be used to indicate the the same | string across files UseSameStringSearchSymbol ( 1 ) | Should we use the same string search field ? UseLiteralCharacter ( 1 ) | Use the LiteralCharacter SearchParentFirst ( 1 ) | Should we search the parent before the subdirectories of the | parent ? Otherwise , subdirectories are searched first . SearchParent ( 1 ) | Should we search the parent ? SearchDepth ( Inf ) | How many directories 'deep' should we search ? | 0 means parent only , 1 means one folder in , ... Examples : ffg_prefix = [ userpath filesep 'tools' filesep 'vhlab-toolbox-matlab' ... filesep 'file' filesep 'test_dirs' filesep ]; % location of test directories % finds all files with '.ext' extension . fileparameters = { '.*\\.ext\\>' }; filelist = vlt . file . findfilegroups ([ ffg_prefix 'findfilegroupstest1' ], fileparameters ); % list all files to see which subset ( s ) was ( were ) selected : dir (([ ffg_prefix 'findfilegroupstest1' filesep '**/*' ])) % finds all sets of files 'myfile.ext1' and 'myfile.ext2' when these files % co - occur in the same subdirectory of PARENTDIR fileparameters = { 'myfile.ext1' , 'myfile.ext2' }; % finds all sets of files filelist = vlt . file . findfilegroups ([ ffg_prefix 'findfilegroupstest2' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest2' filesep '**/*' ])) % finds all sets of files 'myfile_#.ext1' and 'myfile_#.ext2' , where # is % the same string , and when these files co - occur in the same subdirectory . % For example , if the files 'stimtimes1.txt' and 'reference1.txt' were in the same % subdirectory , these would be returned together . fileparameters = { 'myfile_#.ext1' , 'myfile_#.ext2' } filelist = vlt . file . findfilegroups ([ ffg_prefix 'findfilegroupstest3' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest3' filesep '**/*' ])) See also : VLT . STRING . STRCMP_SUBSTITUTE","title":"vlt.file.findfilegroups"},{"location":"reference/%2Bvlt/%2Bfile/findfilegroups.m/#vltfilefindfilegroups","text":"FINDFILEGROUPS - Find a group of files based on parameters FILELIST = vlt . file . findfilegroups ( PARENTDIR , FILEPARAMETERS , ... ) Finds groups of files based on parameters . FILEPARAMETERS should be a cell list of file name search parameters . These parameters can include regular expresion wildcards ( '.*' ) and symbols that indicate that the same string needs to be present across files ( '#' ) . Searches will return matches of these groups of files in PARENTDIR and all of its subdirectories . FILELIST is a cell array of all of the instances of these file groups . That is , FILELIST { i } is the ith instance of these file groups . The full path file names are returned in the entries of FILELIST { i } . That is , FILELIST { i }{ j } is the jth file in the ith instance of the file groups . The parent directory is searched first for matches , and then all subdirectories are searched . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SameStringSearchSymbol ( '#' ) | The symbol to be used to indicate the the same | string across files UseSameStringSearchSymbol ( 1 ) | Should we use the same string search field ? UseLiteralCharacter ( 1 ) | Use the LiteralCharacter SearchParentFirst ( 1 ) | Should we search the parent before the subdirectories of the | parent ? Otherwise , subdirectories are searched first . SearchParent ( 1 ) | Should we search the parent ? SearchDepth ( Inf ) | How many directories 'deep' should we search ? | 0 means parent only , 1 means one folder in , ... Examples : ffg_prefix = [ userpath filesep 'tools' filesep 'vhlab-toolbox-matlab' ... filesep 'file' filesep 'test_dirs' filesep ]; % location of test directories % finds all files with '.ext' extension . fileparameters = { '.*\\.ext\\>' }; filelist = vlt . file . findfilegroups ([ ffg_prefix 'findfilegroupstest1' ], fileparameters ); % list all files to see which subset ( s ) was ( were ) selected : dir (([ ffg_prefix 'findfilegroupstest1' filesep '**/*' ])) % finds all sets of files 'myfile.ext1' and 'myfile.ext2' when these files % co - occur in the same subdirectory of PARENTDIR fileparameters = { 'myfile.ext1' , 'myfile.ext2' }; % finds all sets of files filelist = vlt . file . findfilegroups ([ ffg_prefix 'findfilegroupstest2' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest2' filesep '**/*' ])) % finds all sets of files 'myfile_#.ext1' and 'myfile_#.ext2' , where # is % the same string , and when these files co - occur in the same subdirectory . % For example , if the files 'stimtimes1.txt' and 'reference1.txt' were in the same % subdirectory , these would be returned together . fileparameters = { 'myfile_#.ext1' , 'myfile_#.ext2' } filelist = vlt . file . findfilegroups ([ ffg_prefix 'findfilegroupstest3' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest3' filesep '**/*' ])) See also : VLT . STRING . STRCMP_SUBSTITUTE","title":"vlt.file.findfilegroups"},{"location":"reference/%2Bvlt/%2Bfile/findfiletype.m/","text":"vlt.file.findfiletype \u00b6 FINDFILETYPE - Find all files of a given extension in a folder FILENAMES = vlt.file.findfiletype(PATHNAME, EXTENSION) Find all the files with a given extension in a folder PATHNAME, including subfolders of PATHNAME.","title":"vlt.file.findfiletype"},{"location":"reference/%2Bvlt/%2Bfile/findfiletype.m/#vltfilefindfiletype","text":"FINDFILETYPE - Find all files of a given extension in a folder FILENAMES = vlt.file.findfiletype(PATHNAME, EXTENSION) Find all the files with a given extension in a folder PATHNAME, including subfolders of PATHNAME.","title":"vlt.file.findfiletype"},{"location":"reference/%2Bvlt/%2Bfile/fixpath.m/","text":"vlt.file.fixpath \u00b6 PATHN = FIXPATH ( PATHSTR ) Checks the string PATHSTR to see if it ends in FILESEP ( '/' on the Unix platform , ':' on Macintosh OS9 , '\\' on Windows ) . PATHN is simply PATHSTR with a FILESEP attached at the end if necessary . See also : FILESEP","title":"vlt.file.fixpath"},{"location":"reference/%2Bvlt/%2Bfile/fixpath.m/#vltfilefixpath","text":"PATHN = FIXPATH ( PATHSTR ) Checks the string PATHSTR to see if it ends in FILESEP ( '/' on the Unix platform , ':' on Macintosh OS9 , '\\' on Windows ) . PATHN is simply PATHSTR with a FILESEP attached at the end if necessary . See also : FILESEP","title":"vlt.file.fixpath"},{"location":"reference/%2Bvlt/%2Bfile/fixtilde.m/","text":"vlt.file.fixtilde \u00b6 vlt . file . fixtilde - Removes ~ from filenames and replaces with user home directory NEWNAME = vlt . file . fixtilde ( FILENAME ) Removes '~' symbol for a user 's home directory in unix and replaces it with the actual path. e . g . vlt . file . fixtilde ( '~/myfile' ) returns '/home/username/myfile' If the tilde is not the leading character then no changes are made .","title":"vlt.file.fixtilde"},{"location":"reference/%2Bvlt/%2Bfile/fixtilde.m/#vltfilefixtilde","text":"vlt . file . fixtilde - Removes ~ from filenames and replaces with user home directory NEWNAME = vlt . file . fixtilde ( FILENAME ) Removes '~' symbol for a user 's home directory in unix and replaces it with the actual path. e . g . vlt . file . fixtilde ( '~/myfile' ) returns '/home/username/myfile' If the tilde is not the leading character then no changes are made .","title":"vlt.file.fixtilde"},{"location":"reference/%2Bvlt/%2Bfile/fullfilename.m/","text":"vlt.file.fullfilename \u00b6 FULLFILENAME - return the full path file name of a file FULLNAME = vlt . file . fullfilename ( FILENAME , [ USEWHICH ] ) Given either a full file name ( with path ) or just a filename ( without path ), returns the full path filename FULLNAME . If FILENAME does not exist in the present working directory , but is on the Matlab path , it is located using WHICH , unless the user passes USEWHICH = 0. See also : FILEPARTS , WHICH Example : vlt . file . fullfilename ( 'myfile.txt' ) % returns [ pwd filesep 'myfile.txt' ] vlt . file . fullfilename ( '/Users/me/myfile.txt' ) % returns [ '/Users/me/myfile.txt' ]","title":"vlt.file.fullfilename"},{"location":"reference/%2Bvlt/%2Bfile/fullfilename.m/#vltfilefullfilename","text":"FULLFILENAME - return the full path file name of a file FULLNAME = vlt . file . fullfilename ( FILENAME , [ USEWHICH ] ) Given either a full file name ( with path ) or just a filename ( without path ), returns the full path filename FULLNAME . If FILENAME does not exist in the present working directory , but is on the Matlab path , it is located using WHICH , unless the user passes USEWHICH = 0. See also : FILEPARTS , WHICH Example : vlt . file . fullfilename ( 'myfile.txt' ) % returns [ pwd filesep 'myfile.txt' ] vlt . file . fullfilename ( '/Users/me/myfile.txt' ) % returns [ '/Users/me/myfile.txt' ]","title":"vlt.file.fullfilename"},{"location":"reference/%2Bvlt/%2Bfile/getAllFiles.m/","text":"vlt.file.getAllFiles \u00b6 GETALLFILES - Get all files ( including those in subdirectories ) of a given directory FILELIST = vlt . file . getAllFiles ( DIRNAME ) Returns the full path file names of all files under the directory DIRNAME . Files '.' and '..' are not returned . See also : DIR By Ziqi Wang","title":"vlt.file.getAllFiles"},{"location":"reference/%2Bvlt/%2Bfile/getAllFiles.m/#vltfilegetallfiles","text":"GETALLFILES - Get all files ( including those in subdirectories ) of a given directory FILELIST = vlt . file . getAllFiles ( DIRNAME ) Returns the full path file names of all files under the directory DIRNAME . Files '.' and '..' are not returned . See also : DIR By Ziqi Wang","title":"vlt.file.getAllFiles"},{"location":"reference/%2Bvlt/%2Bfile/isfile.m/","text":"vlt.file.isfile \u00b6 ISFILE - Searches for a file with name filename within the existing path B = vlt . file . isfile ( FILENAME ) B is 1 if filename is a file located on the specified path or in the current folder , and 0 if no file is found . Note : isfile is a function found on Matlab versions R2017b and after . Function b uses exist ( filename , 'file' ) if this is the case Unless the absolute path for filename is specified , exist ( filename , 'file' ) will search all files and folders in the search path .","title":"vlt.file.isfile"},{"location":"reference/%2Bvlt/%2Bfile/isfile.m/#vltfileisfile","text":"ISFILE - Searches for a file with name filename within the existing path B = vlt . file . isfile ( FILENAME ) B is 1 if filename is a file located on the specified path or in the current folder , and 0 if no file is found . Note : isfile is a function found on Matlab versions R2017b and after . Function b uses exist ( filename , 'file' ) if this is the case Unless the absolute path for filename is specified , exist ( filename , 'file' ) will search all files and folders in the search path .","title":"vlt.file.isfile"},{"location":"reference/%2Bvlt/%2Bfile/isfilepathroot.m/","text":"vlt.file.isfilepathroot \u00b6 ISFILEPATHATROOT - determine if a file path is at the root or not B = vlt . file . isfilepathroot ( FILEPATH ) Determines if a FILEPATH is at the root of a drive or not . For computers for which ISPC is true , vlt . file . isfilepathroot is true if the FILEPATH begins with either '/' or '$:\\' . For computers for which ISUNIX is true , vlt . file . isfilepathroot is true if the FILEPATH is '/' . Note that the file path does not have to exist to specify a valid file path . It is just whether it has the structure of a full file path . See also : ISPC , ISUNIX Examples : % on unix vlt . file . isfilepathroot ( '/Volumes/test/mytestfile.txt' ) % true vlt . file . isfilepathroot ( 'myfile.txt' ) % false % on Windows vlt . file . isfilepathroot ( 'C:\\myfolder\\test' ) is true vlt . file . isfilepathroot ( '/C/myfolder/test' ) is true","title":"vlt.file.isfilepathroot"},{"location":"reference/%2Bvlt/%2Bfile/isfilepathroot.m/#vltfileisfilepathroot","text":"ISFILEPATHATROOT - determine if a file path is at the root or not B = vlt . file . isfilepathroot ( FILEPATH ) Determines if a FILEPATH is at the root of a drive or not . For computers for which ISPC is true , vlt . file . isfilepathroot is true if the FILEPATH begins with either '/' or '$:\\' . For computers for which ISUNIX is true , vlt . file . isfilepathroot is true if the FILEPATH is '/' . Note that the file path does not have to exist to specify a valid file path . It is just whether it has the structure of a full file path . See also : ISPC , ISUNIX Examples : % on unix vlt . file . isfilepathroot ( '/Volumes/test/mytestfile.txt' ) % true vlt . file . isfilepathroot ( 'myfile.txt' ) % false % on Windows vlt . file . isfilepathroot ( 'C:\\myfolder\\test' ) is true vlt . file . isfilepathroot ( '/C/myfolder/test' ) is true","title":"vlt.file.isfilepathroot"},{"location":"reference/%2Bvlt/%2Bfile/isfolder.m/","text":"vlt.file.isfolder \u00b6 ISFILE - Searches for a file with name foldername within the existing path B = vlt . file . isfolder ( foldername ) B is 1 if foldername is a folder located on the specified path or in the current folder , and 0 if no folder is found . Note : isfolder is a function found on Matlab versions R2017b and after . Function b uses exist ( foldername , 'file' ) if this is the case Unless the absolute path for foldername is specified , exist ( foldername , 'file' ) will search all files and folders in the search path .","title":"vlt.file.isfolder"},{"location":"reference/%2Bvlt/%2Bfile/isfolder.m/#vltfileisfolder","text":"ISFILE - Searches for a file with name foldername within the existing path B = vlt . file . isfolder ( foldername ) B is 1 if foldername is a folder located on the specified path or in the current folder , and 0 if no folder is found . Note : isfolder is a function found on Matlab versions R2017b and after . Function b uses exist ( foldername , 'file' ) if this is the case Unless the absolute path for foldername is specified , exist ( foldername , 'file' ) will search all files and folders in the search path .","title":"vlt.file.isfolder"},{"location":"reference/%2Bvlt/%2Bfile/isurl.m/","text":"vlt.file.isurl \u00b6 ISURL - Does this string point to a URL ? B = vlt . file . isurl ( INPUTSTRING ) Returns 1 if the string contains '://' . Returns 0 otherwise .","title":"vlt.file.isurl"},{"location":"reference/%2Bvlt/%2Bfile/isurl.m/#vltfileisurl","text":"ISURL - Does this string point to a URL ? B = vlt . file . isurl ( INPUTSTRING ) Returns 1 if the string contains '://' . Returns 0 otherwise .","title":"vlt.file.isurl"},{"location":"reference/%2Bvlt/%2Bfile/linpath2mac.m/","text":"vlt.file.linpath2mac \u00b6 vlt.file.linpath2mac Converts a Linux pathname to a Macintosh pathname. NEWPATH = vlt.file.linpath2mac(PATHNAME) Replaces all '/' characters with ':' characters.","title":"vlt.file.linpath2mac"},{"location":"reference/%2Bvlt/%2Bfile/linpath2mac.m/#vltfilelinpath2mac","text":"vlt.file.linpath2mac Converts a Linux pathname to a Macintosh pathname. NEWPATH = vlt.file.linpath2mac(PATHNAME) Replaces all '/' characters with ':' characters.","title":"vlt.file.linpath2mac"},{"location":"reference/%2Bvlt/%2Bfile/load2celllist.m/","text":"vlt.file.load2celllist \u00b6 vlt . file . load2celllist - Loads saved objects to a cell list [ OBJS , OBJNAMES ] = vlt . file . load2celllist ( FILENAME , ... ) Loads objects from a Matlab file FILENAME into a cell list . Additional arguments are passed on to the Matlab LOAD command . OBJS is a cell list of all variables matching the loading criteria Example : [ myobjs , mynames ] = vlt . file . load2celllist ( 'myfile' , 'cell*' , '-mat' ); If the file 'myfile' contains two variables named 'cell1' and 'cell2' , then mynames = { 'cell1' 'cell2' } and myobjs = { ( data of 'cell1' ) ( data of 'cell2' ) } See also : LOAD , READCELLSFROMEXPERIMENTLIST","title":"vlt.file.load2celllist"},{"location":"reference/%2Bvlt/%2Bfile/load2celllist.m/#vltfileload2celllist","text":"vlt . file . load2celllist - Loads saved objects to a cell list [ OBJS , OBJNAMES ] = vlt . file . load2celllist ( FILENAME , ... ) Loads objects from a Matlab file FILENAME into a cell list . Additional arguments are passed on to the Matlab LOAD command . OBJS is a cell list of all variables matching the loading criteria Example : [ myobjs , mynames ] = vlt . file . load2celllist ( 'myfile' , 'cell*' , '-mat' ); If the file 'myfile' contains two variables named 'cell1' and 'cell2' , then mynames = { 'cell1' 'cell2' } and myobjs = { ( data of 'cell1' ) ( data of 'cell2' ) } See also : LOAD , READCELLSFROMEXPERIMENTLIST","title":"vlt.file.load2celllist"},{"location":"reference/%2Bvlt/%2Bfile/loadIgor.m/","text":"vlt.file.loadIgor \u00b6 vlt . file . loadIgor Load Igor Binary file DATA = vlt . file . loadIgor ( FILENAME ) loads data from an Igor binary data file . The data is assumed to be one dimentional , and the file is assumed to be from a Macintosh computer ( that is , the byte ordering is assumed to be big - endian ); this function , however , should work on any computer . One may also use DATA = vlt . file . loadIgor ( FILENAME , START , STOP ) This will only load data between samples START and STOP . STOP may be Inf to indicate the end of the file . The first sample is numbered 1. Note : This program has only been tested with float data . Developer note : Who wrote this ? Was it Steve ? Ken Sugino ?","title":"vlt.file.loadIgor"},{"location":"reference/%2Bvlt/%2Bfile/loadIgor.m/#vltfileloadigor","text":"vlt . file . loadIgor Load Igor Binary file DATA = vlt . file . loadIgor ( FILENAME ) loads data from an Igor binary data file . The data is assumed to be one dimentional , and the file is assumed to be from a Macintosh computer ( that is , the byte ordering is assumed to be big - endian ); this function , however , should work on any computer . One may also use DATA = vlt . file . loadIgor ( FILENAME , START , STOP ) This will only load data between samples START and STOP . STOP may be Inf to indicate the end of the file . The first sample is numbered 1. Note : This program has only been tested with float data . Developer note : Who wrote this ? Was it Steve ? Ken Sugino ?","title":"vlt.file.loadIgor"},{"location":"reference/%2Bvlt/%2Bfile/loadStructArray.m/","text":"vlt.file.loadStructArray \u00b6 LOADSTRUCTARRAY - load a struct array from a tab - delimited file A = vlt . file . loadStructArray ( FNAME [, FIELDS ]) Reads tab - delimited text from the file FNAME to create an array of Matlab STRUCT objects . If FIELDS is not provided , then the field names are read from the first row of FNAME . If the header row contains strings that are not valid Matlab structure field names % ( because they have a space or begin with a number for example ), then they will be converted to valid variable names with MATLAB . LANG . MAKEVALIDNAME . Each subsequent row contains the values for each entry in the STRUCT array . See also : vlt . file . saveStructArray , vlt . data . tabstr2struct","title":"vlt.file.loadStructArray"},{"location":"reference/%2Bvlt/%2Bfile/loadStructArray.m/#vltfileloadstructarray","text":"LOADSTRUCTARRAY - load a struct array from a tab - delimited file A = vlt . file . loadStructArray ( FNAME [, FIELDS ]) Reads tab - delimited text from the file FNAME to create an array of Matlab STRUCT objects . If FIELDS is not provided , then the field names are read from the first row of FNAME . If the header row contains strings that are not valid Matlab structure field names % ( because they have a space or begin with a number for example ), then they will be converted to valid variable names with MATLAB . LANG . MAKEVALIDNAME . Each subsequent row contains the values for each entry in the STRUCT array . See also : vlt . file . saveStructArray , vlt . data . tabstr2struct","title":"vlt.file.loadStructArray"},{"location":"reference/%2Bvlt/%2Bfile/read_tab_delimited_file.m/","text":"vlt.file.read_tab_delimited_file \u00b6 vlt . file . read_tab_delimited_file - Reads data from a tab - delimited file ; tries to sort string / number data OUTPUT = READ_TAB_DELIMTED_FILE ( FILENAME ) Reads data from a tab - delimited text file . OUTPUT is a cell list . OUTPUT { i , j } is the value from the ith row and jth column in the tab - delimited file ; note that the rows and columns need not have the same number of entries . The function looks at each string . If it has two '/' anywhere in them , the value is assumed to be a date and is read as a string . Otherwise , this function tries to assign each value a number using the function STR2NUM . If this process fails , then the value is assumed to be a text string and is stored as such .","title":"vlt.file.read_tab_delimited_file"},{"location":"reference/%2Bvlt/%2Bfile/read_tab_delimited_file.m/#vltfileread_tab_delimited_file","text":"vlt . file . read_tab_delimited_file - Reads data from a tab - delimited file ; tries to sort string / number data OUTPUT = READ_TAB_DELIMTED_FILE ( FILENAME ) Reads data from a tab - delimited text file . OUTPUT is a cell list . OUTPUT { i , j } is the value from the ith row and jth column in the tab - delimited file ; note that the rows and columns need not have the same number of entries . The function looks at each string . If it has two '/' anywhere in them , the value is assumed to be a date and is read as a string . Otherwise , this function tries to assign each value a number using the function STR2NUM . If this process fails , then the value is assumed to be a text string and is stored as such .","title":"vlt.file.read_tab_delimited_file"},{"location":"reference/%2Bvlt/%2Bfile/readlabviewarray.m/","text":"vlt.file.readlabviewarray \u00b6 vlt . file . readlabviewarray - Reads a LabView array into Matlab A = vlt . file . readlabviewarray ( FNAME , DATASIZE , MACHINEFORMAT ) Reads in values from a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FREAD ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"vlt.file.readlabviewarray"},{"location":"reference/%2Bvlt/%2Bfile/readlabviewarray.m/#vltfilereadlabviewarray","text":"vlt . file . readlabviewarray - Reads a LabView array into Matlab A = vlt . file . readlabviewarray ( FNAME , DATASIZE , MACHINEFORMAT ) Reads in values from a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FREAD ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"vlt.file.readlabviewarray"},{"location":"reference/%2Bvlt/%2Bfile/readplainmat.m/","text":"vlt.file.readplainmat \u00b6 READPLAINMAT - read a simple binary matrix from disk MAT = vlt . file . readplainmat ( FID ) Reads a basic matrix written by vlt . file . writeplainmat . See vlt . file . writeplainmat for details of the file format . FID should be an open FID ( see FOPEN ) . For example , see vlt . file . writeplainmat .","title":"vlt.file.readplainmat"},{"location":"reference/%2Bvlt/%2Bfile/readplainmat.m/#vltfilereadplainmat","text":"READPLAINMAT - read a simple binary matrix from disk MAT = vlt . file . readplainmat ( FID ) Reads a basic matrix written by vlt . file . writeplainmat . See vlt . file . writeplainmat for details of the file format . FID should be an open FID ( see FOPEN ) . For example , see vlt . file . writeplainmat .","title":"vlt.file.readplainmat"},{"location":"reference/%2Bvlt/%2Bfile/relativeFilename.m/","text":"vlt.file.relativeFilename \u00b6 Find a relative file path relative to an absolute path RELFNAME = RELATIVEFILENAME ( ABS_PATH , ABS_FILENAME [, FILE_SEPARATOR ]) Return the relative path of an filename ABS_FILENAME relative to a path ( ABS_PATH ). ABS_FILENAME should be a full path file name , and ABS_PATH should be a full path directory . If FILE_SEPARATOR isn ' t specified , it is taken to be FILESEP , the file separator on the platform currently running Matlab . Examples : abs_path = '/Users/myusername/Documents/' ; abs_filename = '/Users/myusername/Documents/myfolder/myfile.txt' relFname = vlt . file . relativeFilename ( abs_path , abs_filename ) % relFname = 'myfolder/myfile.txt' abs_path = '/Users/myusername/Documents/' ; abs_filename = '/Users/myusername/myfolder/myfile.txt' relFname = vlt . file . relativeFilename ( abs_path , abs_filename ) % relFname = '../myfolder/myfile.txt'","title":"vlt.file.relativeFilename"},{"location":"reference/%2Bvlt/%2Bfile/relativeFilename.m/#vltfilerelativefilename","text":"Find a relative file path relative to an absolute path RELFNAME = RELATIVEFILENAME ( ABS_PATH , ABS_FILENAME [, FILE_SEPARATOR ]) Return the relative path of an filename ABS_FILENAME relative to a path ( ABS_PATH ). ABS_FILENAME should be a full path file name , and ABS_PATH should be a full path directory . If FILE_SEPARATOR isn ' t specified , it is taken to be FILESEP , the file separator on the platform currently running Matlab . Examples : abs_path = '/Users/myusername/Documents/' ; abs_filename = '/Users/myusername/Documents/myfolder/myfile.txt' relFname = vlt . file . relativeFilename ( abs_path , abs_filename ) % relFname = 'myfolder/myfile.txt' abs_path = '/Users/myusername/Documents/' ; abs_filename = '/Users/myusername/myfolder/myfile.txt' relFname = vlt . file . relativeFilename ( abs_path , abs_filename ) % relFname = '../myfolder/myfile.txt'","title":"vlt.file.relativeFilename"},{"location":"reference/%2Bvlt/%2Bfile/release_lock_file.m/","text":"vlt.file.release_lock_file \u00b6 RELEASE_LOCK_FILE - release a lock file with the key B = vlt . file . release_lock_file ( FID_OR_FILENAME , KEY ) Release a lock file given its FID or its FILENAME and the correct KEY that was issued by the function vlt . file . checkout_lock_file . Removes the file if the key matches . B is 1 if the lockfile is either not present or if it was removed successfully . B is 0 if the key does not match ( and the file is not removed . ) An error is triggered if the lock file does not have the expected contents ( an expiration time and a key ) . See also : vlt . file . checkout_lock_file For an example , see vlt . file . checkout_lock_file","title":"vlt.file.release_lock_file"},{"location":"reference/%2Bvlt/%2Bfile/release_lock_file.m/#vltfilerelease_lock_file","text":"RELEASE_LOCK_FILE - release a lock file with the key B = vlt . file . release_lock_file ( FID_OR_FILENAME , KEY ) Release a lock file given its FID or its FILENAME and the correct KEY that was issued by the function vlt . file . checkout_lock_file . Removes the file if the key matches . B is 1 if the lockfile is either not present or if it was removed successfully . B is 0 if the key does not match ( and the file is not removed . ) An error is triggered if the lock file does not have the expected contents ( an expiration time and a key ) . See also : vlt . file . checkout_lock_file For an example , see vlt . file . checkout_lock_file","title":"vlt.file.release_lock_file"},{"location":"reference/%2Bvlt/%2Bfile/rename_mfiles_functions.m/","text":"vlt.file.rename_mfiles_functions \u00b6 RENAME_MFILES_FUNCTIONS - Rename mfiles and function names vlt . file . rename_mfiles_functions ( MFILEDIRS , EDITMFILEDIRS , ... ) This function traverses the directory ( and all subdirectories ) MFILEDIRS and identifies all . m files . If any file name renaming parameters ( see below ) are specified , then the . m files are renamed , and any text within the files that refers to the filename is edited to match the new name . The function then traverses the directory EDITMFILEDIRS and any of its subdirectories , looking for text occurrences of the renamed functions , which are replaced with the new values . This file also accepts name / value pairs that specify file renaming parameters : Parameter ( default ) | Description --------------------------------------------------------------------------------- dirstrings_to_exclude | Directories whose name contains these strings will be ignored { '.git' , 'archived_code' } | See also : vlt . data . namevaluepair","title":"vlt.file.rename_mfiles_functions"},{"location":"reference/%2Bvlt/%2Bfile/rename_mfiles_functions.m/#vltfilerename_mfiles_functions","text":"RENAME_MFILES_FUNCTIONS - Rename mfiles and function names vlt . file . rename_mfiles_functions ( MFILEDIRS , EDITMFILEDIRS , ... ) This function traverses the directory ( and all subdirectories ) MFILEDIRS and identifies all . m files . If any file name renaming parameters ( see below ) are specified , then the . m files are renamed , and any text within the files that refers to the filename is edited to match the new name . The function then traverses the directory EDITMFILEDIRS and any of its subdirectories , looking for text occurrences of the renamed functions , which are replaced with the new values . This file also accepts name / value pairs that specify file renaming parameters : Parameter ( default ) | Description --------------------------------------------------------------------------------- dirstrings_to_exclude | Directories whose name contains these strings will be ignored { '.git' , 'archived_code' } | See also : vlt . data . namevaluepair","title":"vlt.file.rename_mfiles_functions"},{"location":"reference/%2Bvlt/%2Bfile/saveStructArray.m/","text":"vlt.file.saveStructArray \u00b6 SAVESTRUCTARRAY - Save a structure array into a text file vlt . file . saveStructArray ( FILENAME , STRUCTARRAY , [ HEADER ] ) Saves structure array data of type STRUCT into a text file . FILENAME is the name of the file to be written . STRUCTARRAY is the Matlab structure to be written ( of type STRUCT ). If HEADER is 1 , then a header row with tab - delimited field names is written ( recommended if the file is to be read back in with vlt . file . loadStructArray ). The input argument HEADER is optional ( and is 1 if not specified ). Any existing FILENAME is overwritten . Originally from Ken Sugino See also : vlt . file . loadStructArray , STRUCT , vlt . data . tabstr2struct","title":"vlt.file.saveStructArray"},{"location":"reference/%2Bvlt/%2Bfile/saveStructArray.m/#vltfilesavestructarray","text":"SAVESTRUCTARRAY - Save a structure array into a text file vlt . file . saveStructArray ( FILENAME , STRUCTARRAY , [ HEADER ] ) Saves structure array data of type STRUCT into a text file . FILENAME is the name of the file to be written . STRUCTARRAY is the Matlab structure to be written ( of type STRUCT ). If HEADER is 1 , then a header row with tab - delimited field names is written ( recommended if the file is to be read back in with vlt . file . loadStructArray ). The input argument HEADER is optional ( and is 1 if not specified ). Any existing FILENAME is overwritten . Originally from Ken Sugino See also : vlt . file . loadStructArray , STRUCT , vlt . data . tabstr2struct","title":"vlt.file.saveStructArray"},{"location":"reference/%2Bvlt/%2Bfile/saveasv73.m/","text":"vlt.file.saveasv73 \u00b6 SAVEASV73 - save a Matlab .mat file as a -v7.3 file vlt.file.saveasv73(FILENAME) Saves a Matlab .mat file with name FILENAME as a -v7.3 file. The original file is preserved as FILENAME_old.mat. See also: SAVE","title":"vlt.file.saveasv73"},{"location":"reference/%2Bvlt/%2Bfile/saveasv73.m/#vltfilesaveasv73","text":"SAVEASV73 - save a Matlab .mat file as a -v7.3 file vlt.file.saveasv73(FILENAME) Saves a Matlab .mat file with name FILENAME as a -v7.3 file. The original file is preserved as FILENAME_old.mat. See also: SAVE","title":"vlt.file.saveasv73"},{"location":"reference/%2Bvlt/%2Bfile/searchreplacefiles_shell.m/","text":"vlt.file.searchreplacefiles_shell \u00b6 SEARCHREPLACEFILES_SHELL - search and replace text in all files in a directory search vlt . file . searchreplacefiles_shell ( DIRSEARCH , FINDSTRING , REPLACESTRING ) Searches all of the files in the string DIRSEARCH ( examples : '*.m' , or '*/*.m' ) for occurrances of the string FINDSTRING and replaces those strings with REPLACESTRING . At present , this requires unix ( it calls the shell commands 'find' and 'sed' ) . The function prints its shell command before attempting to run .","title":"vlt.file.searchreplacefiles_shell"},{"location":"reference/%2Bvlt/%2Bfile/searchreplacefiles_shell.m/#vltfilesearchreplacefiles_shell","text":"SEARCHREPLACEFILES_SHELL - search and replace text in all files in a directory search vlt . file . searchreplacefiles_shell ( DIRSEARCH , FINDSTRING , REPLACESTRING ) Searches all of the files in the string DIRSEARCH ( examples : '*.m' , or '*/*.m' ) for occurrances of the string FINDSTRING and replaces those strings with REPLACESTRING . At present , this requires unix ( it calls the shell commands 'find' and 'sed' ) . The function prints its shell command before attempting to run .","title":"vlt.file.searchreplacefiles_shell"},{"location":"reference/%2Bvlt/%2Bfile/str2text.m/","text":"vlt.file.str2text \u00b6 STR2TEXT - Write a string to a text file vlt.file.str2text(FILENAME, str) Writes the strings to the new text file FILENAME.","title":"vlt.file.str2text"},{"location":"reference/%2Bvlt/%2Bfile/str2text.m/#vltfilestr2text","text":"STR2TEXT - Write a string to a text file vlt.file.str2text(FILENAME, str) Writes the strings to the new text file FILENAME.","title":"vlt.file.str2text"},{"location":"reference/%2Bvlt/%2Bfile/string2filestring.m/","text":"vlt.file.string2filestring \u00b6 STRING2FILESTRING - edit a string so it its suitable for use as part of a filename ( remove whitespace ) FS = vlt . file . string2filestring ( S ) Modifies the string S so that it is suitable for use as part of a filename . Removes any characters that are not letters ( 'A' - 'Z' , 'a' - 'z' ) or digits ( '0' - '9' ) and replaces them with '_' . Example : mystr = 'This is a variable name: 1234.' ; vlt . file . string2filestring ( mystr ) % returns 'This_is_a_variable_name__1234_'","title":"vlt.file.string2filestring"},{"location":"reference/%2Bvlt/%2Bfile/string2filestring.m/#vltfilestring2filestring","text":"STRING2FILESTRING - edit a string so it its suitable for use as part of a filename ( remove whitespace ) FS = vlt . file . string2filestring ( S ) Modifies the string S so that it is suitable for use as part of a filename . Removes any characters that are not letters ( 'A' - 'Z' , 'a' - 'z' ) or digits ( '0' - '9' ) and replaces them with '_' . Example : mystr = 'This is a variable name: 1234.' ; vlt . file . string2filestring ( mystr ) % returns 'This_is_a_variable_name__1234_'","title":"vlt.file.string2filestring"},{"location":"reference/%2Bvlt/%2Bfile/text2cellnum.m/","text":"vlt.file.text2cellnum \u00b6 TEXT2CELLNUM - Read each row of a text file as numeric data to produce array of cells C = vlt.file.text2cellnum(FILENAME) Reads a text file and imports each line as a numeric matrix entry in a cell array. See also: FGETL, vlt.file.text2cellstr, STR2NUM","title":"vlt.file.text2cellnum"},{"location":"reference/%2Bvlt/%2Bfile/text2cellnum.m/#vltfiletext2cellnum","text":"TEXT2CELLNUM - Read each row of a text file as numeric data to produce array of cells C = vlt.file.text2cellnum(FILENAME) Reads a text file and imports each line as a numeric matrix entry in a cell array. See also: FGETL, vlt.file.text2cellstr, STR2NUM","title":"vlt.file.text2cellnum"},{"location":"reference/%2Bvlt/%2Bfile/text2cellstr.m/","text":"vlt.file.text2cellstr \u00b6 TEXT2CELLSTR - Read a cell array of strings from a text file C = vlt.file.text2cellstr(FILENAME) Reads a text file and imports each line as an entry in a cell array of strings. See also: FGETL","title":"vlt.file.text2cellstr"},{"location":"reference/%2Bvlt/%2Bfile/text2cellstr.m/#vltfiletext2cellstr","text":"TEXT2CELLSTR - Read a cell array of strings from a text file C = vlt.file.text2cellstr(FILENAME) Reads a text file and imports each line as an entry in a cell array of strings. See also: FGETL","title":"vlt.file.text2cellstr"},{"location":"reference/%2Bvlt/%2Bfile/textfile2char.m/","text":"vlt.file.textfile2char \u00b6 TEXTFILE2CHAR - Read a text file into a character string STR = vlt.file.textfile2char(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"vlt.file.textfile2char"},{"location":"reference/%2Bvlt/%2Bfile/textfile2char.m/#vltfiletextfile2char","text":"TEXTFILE2CHAR - Read a text file into a character string STR = vlt.file.textfile2char(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"vlt.file.textfile2char"},{"location":"reference/%2Bvlt/%2Bfile/tidypathstring.m/","text":"vlt.file.tidypathstring \u00b6 TIDYPATHSTRING - clean up a path string , removing any double file separators P_STRING_OUT = TIDYPATHSTRING ( P_STRING [, FILE_SEPARATOR ]) Removes any double file separators . By default , the local machine architecture ' s FILESEP is used , but the user can pass a different FILE_SEPARATOR if desired . Any trailing file separator is also removed . If the string '://' is found , no text before or including this string will be edited . If the file separator is '\\' , then a leading '\\\\' is also not edited ( it is assumed that a Windows fileshare is intended ). Example : p_string = '/Users/Documents//my_data/' ; p_string_out = vlt . file . tidypathstring ( p_string , '/' ) % p_string_out = '/Users/Documents/my_data'","title":"vlt.file.tidypathstring"},{"location":"reference/%2Bvlt/%2Bfile/tidypathstring.m/#vltfiletidypathstring","text":"TIDYPATHSTRING - clean up a path string , removing any double file separators P_STRING_OUT = TIDYPATHSTRING ( P_STRING [, FILE_SEPARATOR ]) Removes any double file separators . By default , the local machine architecture ' s FILESEP is used , but the user can pass a different FILE_SEPARATOR if desired . Any trailing file separator is also removed . If the string '://' is found , no text before or including this string will be edited . If the file separator is '\\' , then a leading '\\\\' is also not edited ( it is assumed that a Windows fileshare is intended ). Example : p_string = '/Users/Documents//my_data/' ; p_string_out = vlt . file . tidypathstring ( p_string , '/' ) % p_string_out = '/Users/Documents/my_data'","title":"vlt.file.tidypathstring"},{"location":"reference/%2Bvlt/%2Bfile/touch.m/","text":"vlt.file.touch \u00b6 TOUCH - create a file ( empty ) if it does not already exist TOUCH ( FILENAME ) This function checks to see if FILENAME exists . If it does not exist , it creates a blank file and creates all necessary directories that may be required . If the file does not exist and cannot be created , an error is generated .","title":"vlt.file.touch"},{"location":"reference/%2Bvlt/%2Bfile/touch.m/#vltfiletouch","text":"TOUCH - create a file ( empty ) if it does not already exist TOUCH ( FILENAME ) This function checks to see if FILENAME exists . If it does not exist , it creates a blank file and creates all necessary directories that may be required . If the file does not exist and cannot be created , an error is generated .","title":"vlt.file.touch"},{"location":"reference/%2Bvlt/%2Bfile/vcard2mat.m/","text":"vlt.file.vcard2mat \u00b6 VCARD2STRUCT - read information from Vcard text file , return as Matlab struct V = VCARD2STRUCT ( VCARDFILE ) Reads entries from a VCARD text file . VCARDFILE can be a text filename or a FILEOBJ object . Entries that take more than one line ( like embedded photos ) are currently skipped . The file will be closed at the conclusion of reading it . developer note : assumes parameter names are 'type' , should read it need to look ahead to next line","title":"vlt.file.vcard2mat"},{"location":"reference/%2Bvlt/%2Bfile/vcard2mat.m/#vltfilevcard2mat","text":"VCARD2STRUCT - read information from Vcard text file , return as Matlab struct V = VCARD2STRUCT ( VCARDFILE ) Reads entries from a VCARD text file . VCARDFILE can be a text filename or a FILEOBJ object . Entries that take more than one line ( like embedded photos ) are currently skipped . The file will be closed at the conclusion of reading it . developer note : assumes parameter names are 'type' , should read it need to look ahead to next line","title":"vlt.file.vcard2mat"},{"location":"reference/%2Bvlt/%2Bfile/writelabviewarray.m/","text":"vlt.file.writelabviewarray \u00b6 vlt . file . writelabviewarray - Write a LabView array into Matlab vlt . file . writelabviewarray ( FNAME , A , DATASIZE , MACHINEFORMAT ) Write values in matrix A to a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FWRITE ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"vlt.file.writelabviewarray"},{"location":"reference/%2Bvlt/%2Bfile/writelabviewarray.m/#vltfilewritelabviewarray","text":"vlt . file . writelabviewarray - Write a LabView array into Matlab vlt . file . writelabviewarray ( FNAME , A , DATASIZE , MACHINEFORMAT ) Write values in matrix A to a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FWRITE ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"vlt.file.writelabviewarray"},{"location":"reference/%2Bvlt/%2Bfile/writeplainmat.m/","text":"vlt.file.writeplainmat \u00b6 WRITEPLAINVECTOR - write a simple binary matrix to disk vlt . file . writeplainmat ( FID , MAT ) Writes a basic matrix to disk such that it can be read easily . FID should be a Matlab file identifier ( see FOPEN ). The binary data is written using FID 's byte order. The first entry is a character string indicating the type of data to be stored. This is just class(mat) (see CLASS). The first entry is a uint8 DIM that indicates the dimension of MAT (see SIZE). Next, a 1xDIM vector in uint32 format describes the number of entries in each dimension. Finally, the entries of MAT are written as individual elements. Only classes that can be sent to FWRITE can be used here (such as ' char ', ' double ', ' uint8 ', etc; see FWRITE). See also: CLASS, SIZE, FWRITE. Example: data = rand(3,7), fid = fopen(' myfile . dat ',' w ',' b '); % write, big-endian vlt.file.writeplainmat(fid,data); fclose(fid); fid = fopen(' myfile . dat ',' r ',' b ' ); % read , big-endian mydata = vlt . file . readplainmat ( fid ); fclose ( fid ); mydata , % display mydata data-mydata , % display the difference","title":"vlt.file.writeplainmat"},{"location":"reference/%2Bvlt/%2Bfile/writeplainmat.m/#vltfilewriteplainmat","text":"WRITEPLAINVECTOR - write a simple binary matrix to disk vlt . file . writeplainmat ( FID , MAT ) Writes a basic matrix to disk such that it can be read easily . FID should be a Matlab file identifier ( see FOPEN ). The binary data is written using FID 's byte order. The first entry is a character string indicating the type of data to be stored. This is just class(mat) (see CLASS). The first entry is a uint8 DIM that indicates the dimension of MAT (see SIZE). Next, a 1xDIM vector in uint32 format describes the number of entries in each dimension. Finally, the entries of MAT are written as individual elements. Only classes that can be sent to FWRITE can be used here (such as ' char ', ' double ', ' uint8 ', etc; see FWRITE). See also: CLASS, SIZE, FWRITE. Example: data = rand(3,7), fid = fopen(' myfile . dat ',' w ',' b '); % write, big-endian vlt.file.writeplainmat(fid,data); fclose(fid); fid = fopen(' myfile . dat ',' r ',' b ' ); % read , big-endian mydata = vlt . file . readplainmat ( fid ); fclose ( fid ); mydata , % display mydata data-mydata , % display the difference","title":"vlt.file.writeplainmat"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/addroirawdatafile.m/","text":"vlt.file.custom_file_formats.addroirawdatafile \u00b6 ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file ****** NOT FUNCTIONAL YET ********* vlt . file . custom_file_formats . addvhlspikewaveformfile ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: vlt.file.custom_file_formats.newvhlspikewaveformfile","title":"vlt.file.custom_file_formats.addroirawdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/addroirawdatafile.m/#vltfilecustom_file_formatsaddroirawdatafile","text":"ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file ****** NOT FUNCTIONAL YET ********* vlt . file . custom_file_formats . addvhlspikewaveformfile ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: vlt.file.custom_file_formats.newvhlspikewaveformfile","title":"vlt.file.custom_file_formats.addroirawdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/addvhlspikewaveformfile.m/","text":"vlt.file.custom_file_formats.addvhlspikewaveformfile \u00b6 ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file vlt . file . custom_file_formats . addvhlspikewaveformfile ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: vlt.file.custom_file_formats.newvhlspikewaveformfile","title":"vlt.file.custom_file_formats.addvhlspikewaveformfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/addvhlspikewaveformfile.m/#vltfilecustom_file_formatsaddvhlspikewaveformfile","text":"ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file vlt . file . custom_file_formats . addvhlspikewaveformfile ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: vlt.file.custom_file_formats.newvhlspikewaveformfile","title":"vlt.file.custom_file_formats.addvhlspikewaveformfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/convertvhlvdatafile2integer.m/","text":"vlt.file.custom_file_formats.convertvhlvdatafile2integer \u00b6 CONVERTVHLVDATAFILE2INTEGER - Convert a VH LabView file to binary integer format vlt . file . custom_file_formats . convertvhlvdatafile2integer ( OLDFILENAME , HEADERSTRUCT , OUTPUTFILENAME , SCALE , PRECISION ) This function reads data from the multichannel VHLab LabView binary data file format and writes a new file with precision PRECISION , where PRECISION is 'int32' or 'int16' . HEADERSTRUCT is the header structure as returned from vlt . file . custom_file_formats . readvhlvheaderfile ( or use empty , [] , to open a file of the same name as OLDFILENAME with extension 'vlh' ). OUTPUTFILENAME is the name of the new file to be written ; a new header file with the same name as OUTPUTFILENAME and extension 'vlh' will be created . The data are divided by SCALE before writing . The output file will be saved with channel multiplexing . Example : vlt . file . custom_file_formats . convertvhlvdatafile2integer ( 'vhlvanaloginput.vld' , [] , 'vhlvanaloginput_int.vld' , 10 , 'int16' );","title":"vlt.file.custom_file_formats.convertvhlvdatafile2integer"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/convertvhlvdatafile2integer.m/#vltfilecustom_file_formatsconvertvhlvdatafile2integer","text":"CONVERTVHLVDATAFILE2INTEGER - Convert a VH LabView file to binary integer format vlt . file . custom_file_formats . convertvhlvdatafile2integer ( OLDFILENAME , HEADERSTRUCT , OUTPUTFILENAME , SCALE , PRECISION ) This function reads data from the multichannel VHLab LabView binary data file format and writes a new file with precision PRECISION , where PRECISION is 'int32' or 'int16' . HEADERSTRUCT is the header structure as returned from vlt . file . custom_file_formats . readvhlvheaderfile ( or use empty , [] , to open a file of the same name as OLDFILENAME with extension 'vlh' ). OUTPUTFILENAME is the name of the new file to be written ; a new header file with the same name as OUTPUTFILENAME and extension 'vlh' will be created . The data are divided by SCALE before writing . The output file will be saved with channel multiplexing . Example : vlt . file . custom_file_formats . convertvhlvdatafile2integer ( 'vhlvanaloginput.vld' , [] , 'vhlvanaloginput_int.vld' , 10 , 'int16' );","title":"vlt.file.custom_file_formats.convertvhlvdatafile2integer"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/newroirawdatafile.m/","text":"vlt.file.custom_file_formats.newroirawdatafile \u00b6 NEWROIRAWDATAFILE - Create a binary file for storing spike waveforms ********** NOT COMPLETE YET !!!!!!!!!!!************ FID = vlt . file . custom_file_formats . newroirawdatafile ( FILENAME , PARAMETERS ) Creates ( and leaves open ) a new binary file for storing raw data that is extracted from images . Optionally , one can also store the image index values that correspond to the roi pixels . This function creates the header portion that include the following parameters : NAME ( type ): DESCRIPTION ------------------------------------------------------------------------- parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . precision ( uint8 ) : The precision -- : 0 = uint16 : 1 = uint32 : 2 = float32 : 3 = float64 parameters . indexesincluded ( uint8 ): Are index values included ? : 0 = no : 1 = yes ( first 512 bytes are free for additional header use ) Each bit of data includes the ROI number ( 1 16 bit integer ) the frame number ( 1 32 bit integer ) N , the number of points falling in the roi on this frame ( 1 32 bit integer ) the N index values of these data points ( N 32 bit integers ), if parameters . precision is 1 the N values of these pixels ( N values of type parameters . precision ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function vlt . file . custom_file_formats . addroirawdatafile ( FID , roinum , framenum , indexes , pixelvalues , precision ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"vlt.file.custom_file_formats.newroirawdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/newroirawdatafile.m/#vltfilecustom_file_formatsnewroirawdatafile","text":"NEWROIRAWDATAFILE - Create a binary file for storing spike waveforms ********** NOT COMPLETE YET !!!!!!!!!!!************ FID = vlt . file . custom_file_formats . newroirawdatafile ( FILENAME , PARAMETERS ) Creates ( and leaves open ) a new binary file for storing raw data that is extracted from images . Optionally , one can also store the image index values that correspond to the roi pixels . This function creates the header portion that include the following parameters : NAME ( type ): DESCRIPTION ------------------------------------------------------------------------- parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . precision ( uint8 ) : The precision -- : 0 = uint16 : 1 = uint32 : 2 = float32 : 3 = float64 parameters . indexesincluded ( uint8 ): Are index values included ? : 0 = no : 1 = yes ( first 512 bytes are free for additional header use ) Each bit of data includes the ROI number ( 1 16 bit integer ) the frame number ( 1 32 bit integer ) N , the number of points falling in the roi on this frame ( 1 32 bit integer ) the N index values of these data points ( N 32 bit integers ), if parameters . precision is 1 the N values of these pixels ( N values of type parameters . precision ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function vlt . file . custom_file_formats . addroirawdatafile ( FID , roinum , framenum , indexes , pixelvalues , precision ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"vlt.file.custom_file_formats.newroirawdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/newvhlspikewaveformfile.m/","text":"vlt.file.custom_file_formats.newvhlspikewaveformfile \u00b6 NEWVHLSPIKEWAVEFORMFILE - Create a binary file for storing spike waveforms FID = vlt . file . custom_file_formats . newvhlspikewaveformfile ( FID_OR_FILENAME , PARAMETERS ) Creates ( or writes to ) a binary file for storing spike waveforms . Data is stored as single precision big endian binary if this function opens the file . This function creates the header file that include the following parameters : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- parameters . numchannels ( uint8 ) : Number of channels parameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) parameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . samplingrate : The sampling rate ( float32 ) ( first 512 bytes are free for additional header use ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function ADDVHSPIKEWAVEFORMFILE ( FID , WAVES ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"vlt.file.custom_file_formats.newvhlspikewaveformfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/newvhlspikewaveformfile.m/#vltfilecustom_file_formatsnewvhlspikewaveformfile","text":"NEWVHLSPIKEWAVEFORMFILE - Create a binary file for storing spike waveforms FID = vlt . file . custom_file_formats . newvhlspikewaveformfile ( FID_OR_FILENAME , PARAMETERS ) Creates ( or writes to ) a binary file for storing spike waveforms . Data is stored as single precision big endian binary if this function opens the file . This function creates the header file that include the following parameters : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- parameters . numchannels ( uint8 ) : Number of channels parameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) parameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . samplingrate : The sampling rate ( float32 ) ( first 512 bytes are free for additional header use ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function ADDVHSPIKEWAVEFORMFILE ( FID , WAVES ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"vlt.file.custom_file_formats.newvhlspikewaveformfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readcellvoyagertiffheader.m/","text":"vlt.file.custom_file_formats.readcellvoyagertiffheader \u00b6 READCELLVOYAGERHEADERFILE - Read header information from a CellVoyager tiff H = READCELLVOYAGERHEADERFILE ( FILENAME ) Reads the header 'ImageDescription' for all of the frames present in a TIFF file acquired by the CellVoyager system .","title":"vlt.file.custom_file_formats.readcellvoyagertiffheader"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readcellvoyagertiffheader.m/#vltfilecustom_file_formatsreadcellvoyagertiffheader","text":"READCELLVOYAGERHEADERFILE - Read header information from a CellVoyager tiff H = READCELLVOYAGERHEADERFILE ( FILENAME ) Reads the header 'ImageDescription' for all of the frames present in a TIFF file acquired by the CellVoyager system .","title":"vlt.file.custom_file_formats.readcellvoyagertiffheader"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readroirawdatafile.m/","text":"vlt.file.custom_file_formats.readroirawdatafile \u00b6 READROIRAWDATAFILE - Read spike waveforms from binary file ****** NOT FUNCTIONAL YET ********** [ ROIDATA , HEADER ] = vlt . file . custom_file_formats . readroirawdatafile ( FID_OR_FILENAME ) or [ ROIDATA , HEADER ] = vlt . file . custom_file_formats . readroirawdatafile ( FID_OR_FILENAME ,... ROI_START , ROI_END ) Attempts to read spikewaves from ROI_START to ROI_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . ROI_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so ROI_START needs to be at least 1 . If ROI_START and ROI_END are not provided , then all waves are read . If ROI_START is less than 1 , then only the header is read . The ROI data is returned in a structure list ROIDATA with the following fields : roi : the roi number ( integer ) frame : the roi frame number ( integer ) N : number of points in the image that overlapped the ROI ( integer ) indexes : the index values of these points ( if they were stored ) ( N integers ) data : the actual data values ( N doubles )","title":"vlt.file.custom_file_formats.readroirawdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readroirawdatafile.m/#vltfilecustom_file_formatsreadroirawdatafile","text":"READROIRAWDATAFILE - Read spike waveforms from binary file ****** NOT FUNCTIONAL YET ********** [ ROIDATA , HEADER ] = vlt . file . custom_file_formats . readroirawdatafile ( FID_OR_FILENAME ) or [ ROIDATA , HEADER ] = vlt . file . custom_file_formats . readroirawdatafile ( FID_OR_FILENAME ,... ROI_START , ROI_END ) Attempts to read spikewaves from ROI_START to ROI_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . ROI_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so ROI_START needs to be at least 1 . If ROI_START and ROI_END are not provided , then all waves are read . If ROI_START is less than 1 , then only the header is read . The ROI data is returned in a structure list ROIDATA with the following fields : roi : the roi number ( integer ) frame : the roi frame number ( integer ) N : number of points in the image that overlapped the ROI ( integer ) indexes : the index values of these points ( if they were stored ) ( N integers ) data : the actual data values ( N doubles )","title":"vlt.file.custom_file_formats.readroirawdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlspikewaveformfile.m/","text":"vlt.file.custom_file_formats.readvhlspikewaveformfile \u00b6 READVHLSPIKEWAVEFORMFILE - Read spike waveforms from binary file [ WAVEFORMS , HEADER ] = vlt . file . custom_file_formats . readvhlspikewaveformfile ( FID_OR_FILENAME ) or [ WAVEFORMS , HEADER ] = vlt . file . custom_file_formats . readvhlspikewaveformfile ( FID_OR_FILENAME ,... WAVE_START , WAVE_END ) Attempts to read spikewaves from WAVE_START to WAVE_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . WAVE_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so WAVE_START needs to be at least 1 . If WAVE_START and WAVE_END are not provided , then all waves are read . If WAVE_START is less than 1 , then only the header is read . The waveforms are output in the form NUM_SAMPLESxNUM_CHANNELSxNUM_WAVEFORMS","title":"vlt.file.custom_file_formats.readvhlspikewaveformfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlspikewaveformfile.m/#vltfilecustom_file_formatsreadvhlspikewaveformfile","text":"READVHLSPIKEWAVEFORMFILE - Read spike waveforms from binary file [ WAVEFORMS , HEADER ] = vlt . file . custom_file_formats . readvhlspikewaveformfile ( FID_OR_FILENAME ) or [ WAVEFORMS , HEADER ] = vlt . file . custom_file_formats . readvhlspikewaveformfile ( FID_OR_FILENAME ,... WAVE_START , WAVE_END ) Attempts to read spikewaves from WAVE_START to WAVE_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . WAVE_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so WAVE_START needs to be at least 1 . If WAVE_START and WAVE_END are not provided , then all waves are read . If WAVE_START is less than 1 , then only the header is read . The waveforms are output in the form NUM_SAMPLESxNUM_CHANNELSxNUM_WAVEFORMS","title":"vlt.file.custom_file_formats.readvhlspikewaveformfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlvdatafile.m/","text":"vlt.file.custom_file_formats.readvhlvdatafile \u00b6 READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = vlt . file . custom_file_formats . readvhlvdatafile ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from vlt . file . custom_file_formats . readvhlvheaderfile , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . Outputs : T is the time of each sample ( 1 row , NUMBER_OF_SAMPLES columns ) D is the data ( NUMBER OF SAMPLES row , NUMBER_OF_CHANNELS columns ) TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . One may pass additional arguments to READVHVLDATAFILE in the form of name / value pairs : Parameter name ( default value ): | Description : ------------------------------------------------------------------------------------- UseWaitBar ( 0 ) | Use a progress bar ( currently only implemented for | multiplexed data ) WaitBarMessage ([ 'Reading data ' ... | The message written to the progress bar. 'from LabView file...' ]) | | Example : myheader = vlt . file . custom_file_formats . readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = vlt . file . custom_file_formats . readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"vlt.file.custom_file_formats.readvhlvdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlvdatafile.m/#vltfilecustom_file_formatsreadvhlvdatafile","text":"READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = vlt . file . custom_file_formats . readvhlvdatafile ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from vlt . file . custom_file_formats . readvhlvheaderfile , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . Outputs : T is the time of each sample ( 1 row , NUMBER_OF_SAMPLES columns ) D is the data ( NUMBER OF SAMPLES row , NUMBER_OF_CHANNELS columns ) TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . One may pass additional arguments to READVHVLDATAFILE in the form of name / value pairs : Parameter name ( default value ): | Description : ------------------------------------------------------------------------------------- UseWaitBar ( 0 ) | Use a progress bar ( currently only implemented for | multiplexed data ) WaitBarMessage ([ 'Reading data ' ... | The message written to the progress bar. 'from LabView file...' ]) | | Example : myheader = vlt . file . custom_file_formats . readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = vlt . file . custom_file_formats . readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"vlt.file.custom_file_formats.readvhlvdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlvdatafile_orig.m/","text":"vlt.file.custom_file_formats.readvhlvdatafile_orig \u00b6 READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = vlt . file . custom_file_formats . readvhlvdatafile ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from vlt . file . custom_file_formats . readvhlvheaderfile , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . Example : myheader = vlt . file . custom_file_formats . readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = vlt . file . custom_file_formats . readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"vlt.file.custom_file_formats.readvhlvdatafile_orig"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlvdatafile_orig.m/#vltfilecustom_file_formatsreadvhlvdatafile_orig","text":"READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = vlt . file . custom_file_formats . readvhlvdatafile ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from vlt . file . custom_file_formats . readvhlvheaderfile , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . Example : myheader = vlt . file . custom_file_formats . readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = vlt . file . custom_file_formats . readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"vlt.file.custom_file_formats.readvhlvdatafile_orig"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlvheaderfile.m/","text":"vlt.file.custom_file_formats.readvhlvheaderfile \u00b6 READVHLVHEADERFILE - Read VHLV header file format HEADERSTRUCT = vlt . file . custom_file_formats . readvhlvheaderfile ( MYFILENAME ) Reads the header file format for the VHLAB LabView multichannel acquisition system . It expects MYFILENAME to be the name of a text file , where each line begins with a field name followed by a colon ':' and then a tab , followed by the value . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording . 'Multiplexed' indicates whether adjacent samples are from different channels ( 1 ) or if the channel data is loaded in groups of SamplesPerChunk ( 0 ) . The channel numbers correspond to the inputs described in 'ChannelString' . For example , if ChannelString is '/dev/ai0' , then there is just 1 channel and it corresponds to analog input 0 on the acquisition device . Use vlt . file . custom_file_formats . readvhlvdatafile to read the data . Example : headerstruct = vlt . file . custom_file_formats . readvhlvheaderfile ( 'vhlvanaloginput.vlh' ) headerstruct = ChannelString : [ 1 x26 char ] NumChans : 17 SamplingRate : 25000 SamplesPerChunk : 25000 Multiplexed : 0 See also STRUCT , vlt . file . custom_file_formats . readvhlvdatafile","title":"vlt.file.custom_file_formats.readvhlvheaderfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/readvhlvheaderfile.m/#vltfilecustom_file_formatsreadvhlvheaderfile","text":"READVHLVHEADERFILE - Read VHLV header file format HEADERSTRUCT = vlt . file . custom_file_formats . readvhlvheaderfile ( MYFILENAME ) Reads the header file format for the VHLAB LabView multichannel acquisition system . It expects MYFILENAME to be the name of a text file , where each line begins with a field name followed by a colon ':' and then a tab , followed by the value . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording . 'Multiplexed' indicates whether adjacent samples are from different channels ( 1 ) or if the channel data is loaded in groups of SamplesPerChunk ( 0 ) . The channel numbers correspond to the inputs described in 'ChannelString' . For example , if ChannelString is '/dev/ai0' , then there is just 1 channel and it corresponds to analog input 0 on the acquisition device . Use vlt . file . custom_file_formats . readvhlvdatafile to read the data . Example : headerstruct = vlt . file . custom_file_formats . readvhlvheaderfile ( 'vhlvanaloginput.vlh' ) headerstruct = ChannelString : [ 1 x26 char ] NumChans : 17 SamplingRate : 25000 SamplesPerChunk : 25000 Multiplexed : 0 See also STRUCT , vlt . file . custom_file_formats . readvhlvdatafile","title":"vlt.file.custom_file_formats.readvhlvheaderfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_read.m/","text":"vlt.file.custom_file_formats.vhsb_read \u00b6 VHSB_READ - write a VHLab series binary file [ Y , X ] = vlt . file . custom_file_formats . vhsb_read ( FO , X0 , X1 , OUT_OF_BOUNDS_ERR , ...) Read Y series data from a VH series binary file from closest X sample to value X0 to closest X sample to value X1 . Inputs : FO is the file description to write to ; it can be a filename or an object of type vlt . file . fileobj X0 is the value of X that indicates where to start reading . Can be -Inf to indicate the beginning of the samples in the file . X1 is the value of X that indicates where to stop reading . Can be Inf to indicate the end of the file . OUT_OF_BOUNDS_ERR indicates whether an error should be triggered if X0 or X1 are more than one half-sample away from a value of X that is actually in the dataset . If OUT_OF_BOUNDS_ERR is 1 , then an error is triggered ; otherwise , the closest sample is returned but no error is given . Outputs : X is NUMSAMPLESx1 , where NUMSAMPLES is the number of samples between X0 and X1 . Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample returned of X , and Y ( i ,:,:,...) is the ith sample returned of Y","title":"vlt.file.custom_file_formats.vhsb_read"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_read.m/#vltfilecustom_file_formatsvhsb_read","text":"VHSB_READ - write a VHLab series binary file [ Y , X ] = vlt . file . custom_file_formats . vhsb_read ( FO , X0 , X1 , OUT_OF_BOUNDS_ERR , ...) Read Y series data from a VH series binary file from closest X sample to value X0 to closest X sample to value X1 . Inputs : FO is the file description to write to ; it can be a filename or an object of type vlt . file . fileobj X0 is the value of X that indicates where to start reading . Can be -Inf to indicate the beginning of the samples in the file . X1 is the value of X that indicates where to stop reading . Can be Inf to indicate the end of the file . OUT_OF_BOUNDS_ERR indicates whether an error should be triggered if X0 or X1 are more than one half-sample away from a value of X that is actually in the dataset . If OUT_OF_BOUNDS_ERR is 1 , then an error is triggered ; otherwise , the closest sample is returned but no error is given . Outputs : X is NUMSAMPLESx1 , where NUMSAMPLES is the number of samples between X0 and X1 . Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample returned of X , and Y ( i ,:,:,...) is the ith sample returned of Y","title":"vlt.file.custom_file_formats.vhsb_read"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_readheader.m/","text":"vlt.file.custom_file_formats.vhsb_readheader \u00b6 VHSB_READHEADER - read a VH Lab Series Binary file header H = vlt . file . custom_file_formats . vhsb_writeheader ( FILE_OBJ_OR_FNAME , ... ) Reads the header portion of the vlt . file . fileobj or filename FILE_OBJ_OR_FNAME . At the conclusion of reading , the FILEOBJ or file is closed . This function returns a structure with the following fields ( default in parentheses ): ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 0 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info | headersize ( 1836 ) | The full header size in bytes num_samples ( variable ) | The calculated number of samples in the file . X_skip_bytes ( variable ) | Number of bytes to skip over when reading X samples Y_skip_bytes ( variable ) | Number of bytes to skip over when reading Y samples sample_size ( variable ) | The size of each ( x , y ) pair of samples in bytes filesize ( variable ) | The size of the file in bytes","title":"vlt.file.custom_file_formats.vhsb_readheader"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_readheader.m/#vltfilecustom_file_formatsvhsb_readheader","text":"VHSB_READHEADER - read a VH Lab Series Binary file header H = vlt . file . custom_file_formats . vhsb_writeheader ( FILE_OBJ_OR_FNAME , ... ) Reads the header portion of the vlt . file . fileobj or filename FILE_OBJ_OR_FNAME . At the conclusion of reading , the FILEOBJ or file is closed . This function returns a structure with the following fields ( default in parentheses ): ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 0 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info | headersize ( 1836 ) | The full header size in bytes num_samples ( variable ) | The calculated number of samples in the file . X_skip_bytes ( variable ) | Number of bytes to skip over when reading X samples Y_skip_bytes ( variable ) | Number of bytes to skip over when reading Y samples sample_size ( variable ) | The size of each ( x , y ) pair of samples in bytes filesize ( variable ) | The size of the file in bytes","title":"vlt.file.custom_file_formats.vhsb_readheader"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_sampletype2matlabfwritestring.m/","text":"vlt.file.custom_file_formats.vhsb_sampletype2matlabfwritestring \u00b6 VHSH_SAMPLETYPE2MATLABFWRITESTRING - return fwrite / fread string for sample type S = VHSB_SAMPLETypE2MATLABFWRITESTRING ( DATA_TYPE , DATASIZE ) Given the DATA_TYPE ( char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 )) and the DATA_SIZE in bytes , this function returns a format string appropriate for passing to FREAD or FWRITE . Example : s = vlt . file . custom_file_formats . vhsb_sampletype2matlabfwritestring ( 4 , 64 ) % s = 'float64'","title":"vlt.file.custom_file_formats.vhsb_sampletype2matlabfwritestring"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_sampletype2matlabfwritestring.m/#vltfilecustom_file_formatsvhsb_sampletype2matlabfwritestring","text":"VHSH_SAMPLETYPE2MATLABFWRITESTRING - return fwrite / fread string for sample type S = VHSB_SAMPLETypE2MATLABFWRITESTRING ( DATA_TYPE , DATASIZE ) Given the DATA_TYPE ( char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 )) and the DATA_SIZE in bytes , this function returns a format string appropriate for passing to FREAD or FWRITE . Example : s = vlt . file . custom_file_formats . vhsb_sampletype2matlabfwritestring ( 4 , 64 ) % s = 'float64'","title":"vlt.file.custom_file_formats.vhsb_sampletype2matlabfwritestring"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_write.m/","text":"vlt.file.custom_file_formats.vhsb_write \u00b6 VHSB_WRITE - write a VHLab series binary file B = vlt . file . custom_file_formats . vhsb_write ( FO , X , Y , ... ) Write series data to a VH series binary file . Inputs : FO is the file description to write to ; it can be a filename or an object of type FILEOBJ X is a NUMSAMPLESx1 dataset , usually the independent variable . X can be empty if an X_start and X_increment are provided Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample of X , and Y ( i ,:,:, ... ) is the ith sample of Y Outputs : B is 1 if the file was written successfully , 0 otherwise The function accepts parameters that modify the default functionality as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------------------------ use_filelock ( 1 ) | Lock the file with vlt . file . checkout_lock_file X_start ( X ( 1 )) | The value of X in the first sample X_increment ( 0 ) | The increment between subsequent values of X | ( needs only be non - zero if X_constantinterval is 1 ) X_stored ( 1 ) | Should values of X be stored ( 1 ), or computed from X_start | and X_increment ( 0 ) ? X_constantinterval ( 0 ) | Is there a constant interval between X samples ( 1 ) or not ( 0 ) or | not necessarily ( 0 ) ? X_units ( '' ) | The units of X ( a character string , up to 255 characters ) Y_units ( '' ) | The units of Y ( a character string , up to 255 characters ) X_data_size ( 64 ) | The resolution ( in bits ) for X X_data_type ( 'float' ) | The data type to be written for X ( 'char' , 'uint' , 'int' , 'float' ) Y_data_size ( 64 ) | The resolution ( in bits ) for Y Y_data_type ( 'float' ) | The data type to be written for Y ( 'char' , 'uint' , 'int' , 'float' ) X_usescale ( 0 ) | Scale the X data before writing to disk ( and after reading ) ? Y_usescale ( 0 ) | Scale the Y data before writing to disk ( and after reading ) ? X_scale ( 1 ) | The X scale factor to use to write samples to disk X_offset ( 0 ) | The X offset to use ( Xdisk = X / X_scale + X_offset ) Y_scale ( 1 ) | The Y scale factor to use Y_offset ( 0 ) | The Y offset to use ( Ydisk = Y / Y_scale + X_offset ) See also : vlt . data . namevaluepair","title":"vlt.file.custom_file_formats.vhsb_write"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_write.m/#vltfilecustom_file_formatsvhsb_write","text":"VHSB_WRITE - write a VHLab series binary file B = vlt . file . custom_file_formats . vhsb_write ( FO , X , Y , ... ) Write series data to a VH series binary file . Inputs : FO is the file description to write to ; it can be a filename or an object of type FILEOBJ X is a NUMSAMPLESx1 dataset , usually the independent variable . X can be empty if an X_start and X_increment are provided Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample of X , and Y ( i ,:,:, ... ) is the ith sample of Y Outputs : B is 1 if the file was written successfully , 0 otherwise The function accepts parameters that modify the default functionality as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------------------------ use_filelock ( 1 ) | Lock the file with vlt . file . checkout_lock_file X_start ( X ( 1 )) | The value of X in the first sample X_increment ( 0 ) | The increment between subsequent values of X | ( needs only be non - zero if X_constantinterval is 1 ) X_stored ( 1 ) | Should values of X be stored ( 1 ), or computed from X_start | and X_increment ( 0 ) ? X_constantinterval ( 0 ) | Is there a constant interval between X samples ( 1 ) or not ( 0 ) or | not necessarily ( 0 ) ? X_units ( '' ) | The units of X ( a character string , up to 255 characters ) Y_units ( '' ) | The units of Y ( a character string , up to 255 characters ) X_data_size ( 64 ) | The resolution ( in bits ) for X X_data_type ( 'float' ) | The data type to be written for X ( 'char' , 'uint' , 'int' , 'float' ) Y_data_size ( 64 ) | The resolution ( in bits ) for Y Y_data_type ( 'float' ) | The data type to be written for Y ( 'char' , 'uint' , 'int' , 'float' ) X_usescale ( 0 ) | Scale the X data before writing to disk ( and after reading ) ? Y_usescale ( 0 ) | Scale the Y data before writing to disk ( and after reading ) ? X_scale ( 1 ) | The X scale factor to use to write samples to disk X_offset ( 0 ) | The X offset to use ( Xdisk = X / X_scale + X_offset ) Y_scale ( 1 ) | The Y scale factor to use Y_offset ( 0 ) | The Y offset to use ( Ydisk = Y / Y_scale + X_offset ) See also : vlt . data . namevaluepair","title":"vlt.file.custom_file_formats.vhsb_write"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_writeheader.m/","text":"vlt.file.custom_file_formats.vhsb_writeheader \u00b6 VHSB_WRITEHEADER - write a VH Lab Series Binary file header H = vlt . file . custom_file_formats . vhsb_writeheader ( FILE_OBJ_OR_FNAME , 'PARAM1, VALUE1, ...) Writes or re - writes the header portion of the FILE_OBJ or filename FILE_OBJ_OR_FNAME according to the parameters provided . The file or file object is closed at the conclusion of writing the header . This function takes name / value pairs that override the default functionality : Parameter ( default ) | Description ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum ; can be up to 1 x100 Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 1 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info","title":"vlt.file.custom_file_formats.vhsb_writeheader"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/vhsb_writeheader.m/#vltfilecustom_file_formatsvhsb_writeheader","text":"VHSB_WRITEHEADER - write a VH Lab Series Binary file header H = vlt . file . custom_file_formats . vhsb_writeheader ( FILE_OBJ_OR_FNAME , 'PARAM1, VALUE1, ...) Writes or re - writes the header portion of the FILE_OBJ or filename FILE_OBJ_OR_FNAME according to the parameters provided . The file or file object is closed at the conclusion of writing the header . This function takes name / value pairs that override the default functionality : Parameter ( default ) | Description ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum ; can be up to 1 x100 Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 1 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info","title":"vlt.file.custom_file_formats.vhsb_writeheader"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/writevhlvdatafile.m/","text":"vlt.file.custom_file_formats.writevhlvdatafile \u00b6 WRITEVLHVDATAFILE - Write data to a VHLVDATAFILE vlt . file . custom_file_formats . writevhlvdatafile ( FILENAME , HEADER , DATA ) Write a VHLVDATAFILE file to filename FILENAME , in Multiplex format . This is the format used by the Van Hooser lab at Brandeis University for files acquired via a LabView program ( hence the abbreviation VHLV ) . DATA should be channel data ; each column should contain data from a single channel. If the header file in . vlh format does not exist , then it is written using the information in HEADER and FILENAME . The header field 'Multiplexed' is updated to be 1 . One can provide optional name / value pairs : PARAMETER ( default value ) | Description -------------------------------------------------------------------------- append ( 1 ) | Should we append to the end of the file ? | 0 - no , create a new file | 1 - yes , add to the end of the file See also : vlt . file . custom_file_formats . readvhlvdatafile","title":"vlt.file.custom_file_formats.writevhlvdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/writevhlvdatafile.m/#vltfilecustom_file_formatswritevhlvdatafile","text":"WRITEVLHVDATAFILE - Write data to a VHLVDATAFILE vlt . file . custom_file_formats . writevhlvdatafile ( FILENAME , HEADER , DATA ) Write a VHLVDATAFILE file to filename FILENAME , in Multiplex format . This is the format used by the Van Hooser lab at Brandeis University for files acquired via a LabView program ( hence the abbreviation VHLV ) . DATA should be channel data ; each column should contain data from a single channel. If the header file in . vlh format does not exist , then it is written using the information in HEADER and FILENAME . The header field 'Multiplexed' is updated to be 1 . One can provide optional name / value pairs : PARAMETER ( default value ) | Description -------------------------------------------------------------------------- append ( 1 ) | Should we append to the end of the file ? | 0 - no , create a new file | 1 - yes , add to the end of the file See also : vlt . file . custom_file_formats . readvhlvdatafile","title":"vlt.file.custom_file_formats.writevhlvdatafile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/writevhlvheaderfile.m/","text":"vlt.file.custom_file_formats.writevhlvheaderfile \u00b6 WRITEVHLVHEADERFILE - Write a VHLV header file vlt . file . custom_file_formats . writevhlvheaderfile ( HEADERSTRUCT , FILENAME ) Writes a header file for the VH LabView Multichannel binary file format . Should have an extension of '.vlh' . It expects HEADERSTRUCT to be the name of a Matlab structure . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording , 'precision' , which indicates the binary data type ( 'double' , 'single' , 'int16' , for example ) , and 'Scale' , which indicates any scale factor that should be applied to the data upon reading .","title":"vlt.file.custom_file_formats.writevhlvheaderfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/writevhlvheaderfile.m/#vltfilecustom_file_formatswritevhlvheaderfile","text":"WRITEVHLVHEADERFILE - Write a VHLV header file vlt . file . custom_file_formats . writevhlvheaderfile ( HEADERSTRUCT , FILENAME ) Writes a header file for the VH LabView Multichannel binary file format . Should have an extension of '.vlh' . It expects HEADERSTRUCT to be the name of a Matlab structure . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording , 'precision' , which indicates the binary data type ( 'double' , 'single' , 'int16' , for example ) , and 'Scale' , which indicates any scale factor that should be applied to the data upon reading .","title":"vlt.file.custom_file_formats.writevhlvheaderfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/writevhlvtestfile.m/","text":"vlt.file.custom_file_formats.writevhlvtestfile \u00b6 WRITEVLHVTESTFILE - Write a test data file in VHLV format . vlt . file . custom_file_formats . writevhlvtestfile ( FILENAME ) Write a test file that is 10 channels long , in Multiplex format . Channel 1 has values 1 : 1 . 2 in steps of 0 . 001 ; channel 2 is the same except that it runs from 2 : 2 . 2 ; channel 3 runs from 3 : 3 . 2 , and so on . vlt . file . custom_file_formats . writevhlvtestfile ( FILENAME , NUM_CHANNELS ) If NUM_CHANNELS is given , then the number of channels written is NUM_CHANNELS .","title":"vlt.file.custom_file_formats.writevhlvtestfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bcustom_file_formats/writevhlvtestfile.m/#vltfilecustom_file_formatswritevhlvtestfile","text":"WRITEVLHVTESTFILE - Write a test data file in VHLV format . vlt . file . custom_file_formats . writevhlvtestfile ( FILENAME ) Write a test file that is 10 channels long , in Multiplex format . Channel 1 has values 1 : 1 . 2 in steps of 0 . 001 ; channel 2 is the same except that it runs from 2 : 2 . 2 ; channel 3 runs from 3 : 3 . 2 , and so on . vlt . file . custom_file_formats . writevhlvtestfile ( FILENAME , NUM_CHANNELS ) If NUM_CHANNELS is given , then the number of channels written is NUM_CHANNELS .","title":"vlt.file.custom_file_formats.writevhlvtestfile"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/getXMLNodeText.m/","text":"vlt.file.xml.getXMLNodeText \u00b6 vlt . file . xml . getXMLNodeText - Read Node Text from XML VALUES = vlt . file . xml . getXMLNodeText ( XDOC , LISTITEM , SUBITEM , ISNUMBER ) Returns node text from the XML document XDOC . XDOC can be read from a file with the Matlab command XMLREAD . LISTITEM is a string corresponding to the list item ( s ) requested , and subitem is a strong corresponding to the subitem to be returned . VALUES is a cell list of returned data ( one cell element for each occurrence of LISTITEM in XDOC ) . If ISNUMBER is 0 , then string data is returned , but if ISNUMBER is 1 , then the strings are evaluated with EVAL and the result is returned . Developer note : Who wrote this ?? Was it Steve or Mark Mazurek ?","title":"vlt.file.xml.getXMLNodeText"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/getXMLNodeText.m/#vltfilexmlgetxmlnodetext","text":"vlt . file . xml . getXMLNodeText - Read Node Text from XML VALUES = vlt . file . xml . getXMLNodeText ( XDOC , LISTITEM , SUBITEM , ISNUMBER ) Returns node text from the XML document XDOC . XDOC can be read from a file with the Matlab command XMLREAD . LISTITEM is a string corresponding to the list item ( s ) requested , and subitem is a strong corresponding to the subitem to be returned . VALUES is a cell list of returned data ( one cell element for each occurrence of LISTITEM in XDOC ) . If ISNUMBER is 0 , then string data is returned , but if ISNUMBER is 1 , then the strings are evaluated with EVAL and the result is returned . Developer note : Who wrote this ?? Was it Steve or Mark Mazurek ?","title":"vlt.file.xml.getXMLNodeText"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/parseXML.m/","text":"vlt.file.xml.parseXML \u00b6 PARSEXML Convert XML file to a MATLAB structure. From MATHWORKS documentation (I believe) THESTRUCT = vlt.file.xml.parseXML(FILENAME) Converts an XML file that is read with the MATLAB function XMLREAD into a Matlab structure. Developer note: Who wrote this?","title":"vlt.file.xml.parseXML"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/parseXML.m/#vltfilexmlparsexml","text":"PARSEXML Convert XML file to a MATLAB structure. From MATHWORKS documentation (I believe) THESTRUCT = vlt.file.xml.parseXML(FILENAME) Converts an XML file that is read with the MATLAB function XMLREAD into a Matlab structure. Developer note: Who wrote this?","title":"vlt.file.xml.parseXML"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xml2struct_vhtools.m/","text":"vlt.file.xml.xml2struct_vhtools \u00b6 XML2STRUCT - An incomplete xml string to struct conversion program STC = XML2STRUCT(XMLSTR) Converst some XML strings into Matlab structures. Accepts items in the format: <word><CONTENTS </word > or <word param1= \"value 1\" param2= \"value 2\" WS param3= \"value 3\" /> or <WS word WS param1= \"value1\" WS param2= \"value2\" WS param3= \"value3\" WS ></word> STC is a struct with entries corresponding to the headings and parameters/values in the XML string. Note that this function will not process an arbitrary xml string but only files that use the three conventions described above.","title":"vlt.file.xml.xml2struct_vhtools"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xml2struct_vhtools.m/#vltfilexmlxml2struct_vhtools","text":"XML2STRUCT - An incomplete xml string to struct conversion program STC = XML2STRUCT(XMLSTR) Converst some XML strings into Matlab structures. Accepts items in the format: <word><CONTENTS </word > or <word param1= \"value 1\" param2= \"value 2\" WS param3= \"value 3\" /> or <WS word WS param1= \"value1\" WS param2= \"value2\" WS param3= \"value3\" WS ></word> STC is a struct with entries corresponding to the headings and parameters/values in the XML string. Note that this function will not process an arbitrary xml string but only files that use the three conventions described above.","title":"vlt.file.xml.xml2struct_vhtools"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstringinput.m/","text":"vlt.file.xml.xmlstringinput \u00b6 XMLSTRINGINPUT Determine whether a string is a file or URL RESULT = vlt . file . xml . xmlstringinput ( STRING ) will return STRING if it contains \"://\" , indicating that it is a URN . Otherwise , it will search the path for a file identified by STRING . RESULT = vlt . file . xml . xmlstringinput ( STRING , FULLSEARCH , RETURNFILE ) will process STRING to return a RESULT appropriate for passing to an XML process . STRING can be a URN , full path name , or file name . If STRING is a filename , FULLSEARCH will control how the full path is built . If TRUE , the vlt . file . xml . xmlstringinput will search the entire MATLAB path for the filename and return an error if the file can not be found . This is useful for source documents which are assumed to exist . If FALSE , only the current directory will be searched . This is useful for result documents which may not exist yet . FULLSEARCH is TRUE if omitted . If RETURNFILE is TRUE , RESULT returns as a java . io . File when STRING is a file . If RETURNFILE is FALSE , RESULT returns as a URN . RETURNFILE is TRUE if omitted . This utility is used by XSLT , XMLWRITE , and XMLREAD","title":"vlt.file.xml.xmlstringinput"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstringinput.m/#vltfilexmlxmlstringinput","text":"XMLSTRINGINPUT Determine whether a string is a file or URL RESULT = vlt . file . xml . xmlstringinput ( STRING ) will return STRING if it contains \"://\" , indicating that it is a URN . Otherwise , it will search the path for a file identified by STRING . RESULT = vlt . file . xml . xmlstringinput ( STRING , FULLSEARCH , RETURNFILE ) will process STRING to return a RESULT appropriate for passing to an XML process . STRING can be a URN , full path name , or file name . If STRING is a filename , FULLSEARCH will control how the full path is built . If TRUE , the vlt . file . xml . xmlstringinput will search the entire MATLAB path for the filename and return an error if the file can not be found . This is useful for source documents which are assumed to exist . If FALSE , only the current directory will be searched . This is useful for result documents which may not exist yet . FULLSEARCH is TRUE if omitted . If RETURNFILE is TRUE , RESULT returns as a java . io . File when STRING is a file . If RETURNFILE is FALSE , RESULT returns as a URN . RETURNFILE is TRUE if omitted . This utility is used by XSLT , XMLWRITE , and XMLREAD","title":"vlt.file.xml.xmlstringinput"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstruct_attributename2struct.m/","text":"vlt.file.xml.xmlstruct_attributename2struct \u00b6 XMLSTRUCT_ATTRIBUTE2STRUCT Convert an XMLSTRUCT Name/Attribute/Data structure to Matlab structure THESTRUCT = vlt.file.xml.xmlstruct_attributename2struct(XMLSTRUCT_INPUT) Creates a Matlab structure based on a Matlab XML structure XMLSTRUCT_INPUT such as that returnd by vlt.file.xml.parseXML. This function loops through all ATTRIBUTES of each entry of XMLSTRUCT_INPUT, and creates a field in the structure THESTRUCT with the name of the attribute and the 'Data' of the element. In the event that the 'Data' field is empty and there is a single child in the 'Children' field, the 'Data' field of the single child will be used. See also: vlt.file.xml.parseXML","title":"vlt.file.xml.xmlstruct_attributename2struct"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstruct_attributename2struct.m/#vltfilexmlxmlstruct_attributename2struct","text":"XMLSTRUCT_ATTRIBUTE2STRUCT Convert an XMLSTRUCT Name/Attribute/Data structure to Matlab structure THESTRUCT = vlt.file.xml.xmlstruct_attributename2struct(XMLSTRUCT_INPUT) Creates a Matlab structure based on a Matlab XML structure XMLSTRUCT_INPUT such as that returnd by vlt.file.xml.parseXML. This function loops through all ATTRIBUTES of each entry of XMLSTRUCT_INPUT, and creates a field in the structure THESTRUCT with the name of the attribute and the 'Data' of the element. In the event that the 'Data' field is empty and there is a single child in the 'Children' field, the 'Data' field of the single child will be used. See also: vlt.file.xml.parseXML","title":"vlt.file.xml.xmlstruct_attributename2struct"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstruct_findnode.m/","text":"vlt.file.xml.xmlstruct_findnode \u00b6 XMLSTRUCT_FINDNODE - Find a node in a Matlab struct based on XML NODE = vlt . file . xml . xmlstruct_findnode ( XML_STRUCT , NODENAME ) Recursively searches XML_STRUCT , an XML node tree returned from vlt . file . xml . parseXML , for the node with the name 'NODENAME' . It returns the node at that point ( including all of its children ) . XML_STRUCT should be a structure with the following fields : 'Name' , 'Attributes' , 'Data' , 'Children' . The 'Children' field should be a structure with the same fields . See also : vlt . file . xml . parseXML","title":"vlt.file.xml.xmlstruct_findnode"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstruct_findnode.m/#vltfilexmlxmlstruct_findnode","text":"XMLSTRUCT_FINDNODE - Find a node in a Matlab struct based on XML NODE = vlt . file . xml . xmlstruct_findnode ( XML_STRUCT , NODENAME ) Recursively searches XML_STRUCT , an XML node tree returned from vlt . file . xml . parseXML , for the node with the name 'NODENAME' . It returns the node at that point ( including all of its children ) . XML_STRUCT should be a structure with the following fields : 'Name' , 'Attributes' , 'Data' , 'Children' . The 'Children' field should be a structure with the same fields . See also : vlt . file . xml . parseXML","title":"vlt.file.xml.xmlstruct_findnode"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstruct_stripwhitespace.m/","text":"vlt.file.xml.xmlstruct_stripwhitespace \u00b6 XMLSTRUCT_STRIPTEXT - Strip nodes with name '#text' from xml structure XML_STRUCT = XMLSTRUCT_STRIPWHITESPACETEXT(XML_STRUCT) Recursively searches XML_STRUCT, an XML node tree returned from vlt.file.xml.parseXML, and strips out all nodes with name '#text'. These seem to correspond to whitespace. See also: vlt.file.xml.parseXML","title":"vlt.file.xml.xmlstruct_stripwhitespace"},{"location":"reference/%2Bvlt/%2Bfile/%2Bxml/xmlstruct_stripwhitespace.m/#vltfilexmlxmlstruct_stripwhitespace","text":"XMLSTRUCT_STRIPTEXT - Strip nodes with name '#text' from xml structure XML_STRUCT = XMLSTRUCT_STRIPWHITESPACETEXT(XML_STRUCT) Recursively searches XML_STRUCT, an XML node tree returned from vlt.file.xml.parseXML, and strips out all nodes with name '#text'. These seem to correspond to whitespace. See also: vlt.file.xml.parseXML","title":"vlt.file.xml.xmlstruct_stripwhitespace"},{"location":"reference/%2Bvlt/%2Bfile/testfiles/testfile_freadnskip.m/","text":"vlt.file/testfiles.testfile_freadnskip \u00b6 TESTFILE_FREADNSKIP - Demonstrates how to use FREAD with SKIP to read in arbitrary data DATA = vlt . file . testfiles . testfile_freadnskip ; Opens the file 'testfile_uint16.bin' for reading , and then reads in 2 unsigned 16 bit integers , skips 5 , and repeats , for 10 bouts . To read the code , use 'type vlt.file.testfiles.testfile_freadnskip'","title":"vlt.file/testfiles.testfile_freadnskip"},{"location":"reference/%2Bvlt/%2Bfile/testfiles/testfile_freadnskip.m/#vltfiletestfilestestfile_freadnskip","text":"TESTFILE_FREADNSKIP - Demonstrates how to use FREAD with SKIP to read in arbitrary data DATA = vlt . file . testfiles . testfile_freadnskip ; Opens the file 'testfile_uint16.bin' for reading , and then reads in 2 unsigned 16 bit integers , skips 5 , and repeats , for 10 bouts . To read the code , use 'type vlt.file.testfiles.testfile_freadnskip'","title":"vlt.file/testfiles.testfile_freadnskip"},{"location":"reference/%2Bvlt/%2Bfile/testfiles/testfile_uint16_bin.m/","text":"vlt.file/testfiles.testfile_uint16_bin \u00b6 TESTFILE_UINT16 . BIN - binary file with uint16 values from 0 ... 32000 . vlt . file . testfiles . testfile_uint16_bin This is documentation for the file 'testfile_uint16.bin' that is on the VHTOOLS path . This is a binary file with uint16 values in little endian format . The values start from 0 and run through 32000 . It is primarily useful for debugging file routines . The code for creating the file is commented in the . m file vlt . file . testfiles . testfile_uint16_bin . m See also : FREAD , UINT16","title":"vlt.file/testfiles.testfile_uint16_bin"},{"location":"reference/%2Bvlt/%2Bfile/testfiles/testfile_uint16_bin.m/#vltfiletestfilestestfile_uint16_bin","text":"TESTFILE_UINT16 . BIN - binary file with uint16 values from 0 ... 32000 . vlt . file . testfiles . testfile_uint16_bin This is documentation for the file 'testfile_uint16.bin' that is on the VHTOOLS path . This is a binary file with uint16 values in little endian format . The values start from 0 and run through 32000 . It is primarily useful for debugging file routines . The code for creating the file is commented in the . m file vlt . file . testfiles . testfile_uint16_bin . m See also : FREAD , UINT16","title":"vlt.file/testfiles.testfile_uint16_bin"},{"location":"reference/%2Bvlt/%2Bfit/dogfit.m/","text":"vlt.fit.dogfit \u00b6 DOGFIT - fit a difference of Gaussians to data [ P , SSE ] = vlt . fit . dogfit ( X , Y , ...) Fits the following function to the column vector data in X , Y : y ( x ) = a + b * exp ( - (( x-c ).^ 2 )/ d ^ 2 ) - e * exp ( - (( x-f ).^ 2 )/ g ^ 2 ) P is the parameters [ a b c d e f g ] and SSE is the summed squared error between the fit and the data ( y ). This function accepts name / value pairs that alter its default behavior : -------------------------------------------------------------- | Parameter ( default ) | | | ------------------------- | ---------------------------------- | | random_starts ( 10 ) | Number of random search starts | | a_low ( 0 ) | Low search limit for a | | a_high ( 0 ) | High search limit for a | | a_initial ( NaN ) | a initial guess ( NaN means choose | | | randomly between limits ) | | b_low ( 0 ) | Low search limit for b | | b_high ( 100 * max ( Y )) | High search limit for b | | b_initial ( NaN ) | b initial guess ( NaN means choose | | | randomly between limits ) | | c_low ( 0 ) | Low search limit for c | | c_high ( 0 ) | High search limit for c | | c_initial ( NaN ) | c initial guess ( NaN means choose | | | randomly between limits ) | | d_low ( 0 . 00001 ) | Low search limit for d | | d_high ( 2 * max ( X )) | High search limit for d | | d_initial ( NaN ) | d initial guess ( NaN means choose | | | randomly between limits ) | | e_low ( 0 ) | Low search limit for e | | e_high ( 100 * max ( Y )) | High search limit for e | | e_initial ( NaN ) | e initial guess ( NaN means choose | | | randomly between limits ) | | f_low ( 0 ) | Low search limit for f | | f_high ( 0 ) | High search limit for f | | f_initial ( NaN ) | f initial guess ( NaN means choose | | | randomly between limits ) | | g_low ( 0 . 00001 ) | Low search limit for g | | g_high ( 2 * max ( X )) | High search limit for g | | g_initial ( NaN ) | g initial guess ( NaN means choose | | ------------------------- | ---------------------------------- | Example : P = [ 0 10 0 3 2 0 1 ] ; x = logspace ( -3 , 1 , 100 ); y = vlt . math . dogfull ( x , P ); figure ; plot ( x , y ); ylabel ( 'y' ); xlabel ( 'x' ); [ P_fit , err ] = vlt . fit . dogfit ( x , y ); y_fit = vlt . math . dogfull ( x , P_fit ); hold on ; plot ( x , y_fit , 'g-' ); legend ( 'original' , 'fit' );","title":"vlt.fit.dogfit"},{"location":"reference/%2Bvlt/%2Bfit/dogfit.m/#vltfitdogfit","text":"DOGFIT - fit a difference of Gaussians to data [ P , SSE ] = vlt . fit . dogfit ( X , Y , ...) Fits the following function to the column vector data in X , Y : y ( x ) = a + b * exp ( - (( x-c ).^ 2 )/ d ^ 2 ) - e * exp ( - (( x-f ).^ 2 )/ g ^ 2 ) P is the parameters [ a b c d e f g ] and SSE is the summed squared error between the fit and the data ( y ). This function accepts name / value pairs that alter its default behavior : -------------------------------------------------------------- | Parameter ( default ) | | | ------------------------- | ---------------------------------- | | random_starts ( 10 ) | Number of random search starts | | a_low ( 0 ) | Low search limit for a | | a_high ( 0 ) | High search limit for a | | a_initial ( NaN ) | a initial guess ( NaN means choose | | | randomly between limits ) | | b_low ( 0 ) | Low search limit for b | | b_high ( 100 * max ( Y )) | High search limit for b | | b_initial ( NaN ) | b initial guess ( NaN means choose | | | randomly between limits ) | | c_low ( 0 ) | Low search limit for c | | c_high ( 0 ) | High search limit for c | | c_initial ( NaN ) | c initial guess ( NaN means choose | | | randomly between limits ) | | d_low ( 0 . 00001 ) | Low search limit for d | | d_high ( 2 * max ( X )) | High search limit for d | | d_initial ( NaN ) | d initial guess ( NaN means choose | | | randomly between limits ) | | e_low ( 0 ) | Low search limit for e | | e_high ( 100 * max ( Y )) | High search limit for e | | e_initial ( NaN ) | e initial guess ( NaN means choose | | | randomly between limits ) | | f_low ( 0 ) | Low search limit for f | | f_high ( 0 ) | High search limit for f | | f_initial ( NaN ) | f initial guess ( NaN means choose | | | randomly between limits ) | | g_low ( 0 . 00001 ) | Low search limit for g | | g_high ( 2 * max ( X )) | High search limit for g | | g_initial ( NaN ) | g initial guess ( NaN means choose | | ------------------------- | ---------------------------------- | Example : P = [ 0 10 0 3 2 0 1 ] ; x = logspace ( -3 , 1 , 100 ); y = vlt . math . dogfull ( x , P ); figure ; plot ( x , y ); ylabel ( 'y' ); xlabel ( 'x' ); [ P_fit , err ] = vlt . fit . dogfit ( x , y ); y_fit = vlt . math . dogfull ( x , P_fit ); hold on ; plot ( x , y_fit , 'g-' ); legend ( 'original' , 'fit' );","title":"vlt.fit.dogfit"},{"location":"reference/%2Bvlt/%2Bfit/double_gauss_DoG_fit.m/","text":"vlt.fit.double_gauss_DoG_fit \u00b6 double_gauss_Dog_fit - Fits a double gaussian modulated by a difference of gaussians to data [OFFSET, DOUBLE_GAUSS_PARAMS, DOG_PARAMS, RFIT, RSQUARE] = vlt.fit.double_gauss_DoG_fit(THETA, SF, R) (description of inputs/outputs here by Andrea)","title":"vlt.fit.double_gauss_DoG_fit"},{"location":"reference/%2Bvlt/%2Bfit/double_gauss_DoG_fit.m/#vltfitdouble_gauss_dog_fit","text":"double_gauss_Dog_fit - Fits a double gaussian modulated by a difference of gaussians to data [OFFSET, DOUBLE_GAUSS_PARAMS, DOG_PARAMS, RFIT, RSQUARE] = vlt.fit.double_gauss_DoG_fit(THETA, SF, R) (description of inputs/outputs here by Andrea)","title":"vlt.fit.double_gauss_DoG_fit"},{"location":"reference/%2Bvlt/%2Bfit/example_double_gauss_dog_data.m/","text":"vlt.fit.example_double_gauss_dog_data \u00b6 EXAMPLE_DOUBLE_GAUSS_DOG_DATA - generate a random set of data + parameters STARTING VALUES THAT MAKE FOR GOOD FIT dog_params = [ 0 1 0.5 0.4 1 ] ; double_gauss_params = [ 1 10 45 25 4 ] ; theta_range = [ 0 : 22.5 : 360 - 22.5 ] ; sf_range = [ 0.01 0.02 0.05 0.08 0.1 0.2 0.5 1.2 1.5 1.8 ] ; [ theta , sf ] = meshgrid ( theta_range , sf_range ); R = vlt . math . double_gauss_DoG ( theta , sf , double_gauss_params , dog_params );","title":"vlt.fit.example_double_gauss_dog_data"},{"location":"reference/%2Bvlt/%2Bfit/example_double_gauss_dog_data.m/#vltfitexample_double_gauss_dog_data","text":"EXAMPLE_DOUBLE_GAUSS_DOG_DATA - generate a random set of data + parameters STARTING VALUES THAT MAKE FOR GOOD FIT dog_params = [ 0 1 0.5 0.4 1 ] ; double_gauss_params = [ 1 10 45 25 4 ] ; theta_range = [ 0 : 22.5 : 360 - 22.5 ] ; sf_range = [ 0.01 0.02 0.05 0.08 0.1 0.2 0.5 1.2 1.5 1.8 ] ; [ theta , sf ] = meshgrid ( theta_range , sf_range ); R = vlt . math . double_gauss_DoG ( theta , sf , double_gauss_params , dog_params );","title":"vlt.fit.example_double_gauss_dog_data"},{"location":"reference/%2Bvlt/%2Bfit/exp_fit.m/","text":"vlt.fit.exp_fit \u00b6 EXP_FIT Exponential fit [ TAU , B , k , err , fit ] = vlt . fit . exp_fit ( T , DATA ) Finds the best fit to the exponential function y ( t ) = b + k * ( 1 - exp ( - T / tau )) where T is an increasing vector of timevalues , b is a constant offset , k is a scalar , and tau is the exponential time constant .","title":"vlt.fit.exp_fit"},{"location":"reference/%2Bvlt/%2Bfit/exp_fit.m/#vltfitexp_fit","text":"EXP_FIT Exponential fit [ TAU , B , k , err , fit ] = vlt . fit . exp_fit ( T , DATA ) Finds the best fit to the exponential function y ( t ) = b + k * ( 1 - exp ( - T / tau )) where T is an increasing vector of timevalues , b is a constant offset , k is a scalar , and tau is the exponential time constant .","title":"vlt.fit.exp_fit"},{"location":"reference/%2Bvlt/%2Bfit/exp_fit_err.m/","text":"vlt.fit.exp_fit_err \u00b6 EXP_FIT_ERR Exponential error function ERR=vlt.fit.exp_fit_err(P,T,DATA) P = [b tau k] returns mean squared error of y = b + k*(1-exp(-T/tau)), where T is a vector of timevalues to evaluate.","title":"vlt.fit.exp_fit_err"},{"location":"reference/%2Bvlt/%2Bfit/exp_fit_err.m/#vltfitexp_fit_err","text":"EXP_FIT_ERR Exponential error function ERR=vlt.fit.exp_fit_err(P,T,DATA) P = [b tau k] returns mean squared error of y = b + k*(1-exp(-T/tau)), where T is a vector of timevalues to evaluate.","title":"vlt.fit.exp_fit_err"},{"location":"reference/%2Bvlt/%2Bfit/fitsearchspace.m/","text":"vlt.fit.fitsearchspace \u00b6 FITSEARCHSPACE - return a set of vectors that span a range X0_VECTORS = vlt . fit . fitearchspace ( LOWER_BOUNDS , UPPER_BOUNDS , NSPACE ) Given a set of LOWER_BOUNDS = [ m1 m2 ... ] and UPPER_BOUNDS = [ n1 n2 ...], this function computes a set of vectors that tile this space in NSPACE steps ( using LINSPACE ) . The columns of X0_VECTORS are vector values ( NPOINTS x dimension of bounds ) . See also : LINSPACE , MESHGRID , NDGRID Example : X0_vectors = vlt . fit . fitearchspace ( [ 0 0 ],[ 1 1 ], 5 )","title":"vlt.fit.fitsearchspace"},{"location":"reference/%2Bvlt/%2Bfit/fitsearchspace.m/#vltfitfitsearchspace","text":"FITSEARCHSPACE - return a set of vectors that span a range X0_VECTORS = vlt . fit . fitearchspace ( LOWER_BOUNDS , UPPER_BOUNDS , NSPACE ) Given a set of LOWER_BOUNDS = [ m1 m2 ... ] and UPPER_BOUNDS = [ n1 n2 ...], this function computes a set of vectors that tile this space in NSPACE steps ( using LINSPACE ) . The columns of X0_VECTORS are vector values ( NPOINTS x dimension of bounds ) . See also : LINSPACE , MESHGRID , NDGRID Example : X0_vectors = vlt . fit . fitearchspace ( [ 0 0 ],[ 1 1 ], 5 )","title":"vlt.fit.fitsearchspace"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit.m/","text":"vlt.fit.gaussfit \u00b6 vlt . fit . gaussfit Fits data to a Gaussian [ Rsp , Rp , P , sigm , FITCURVE , ERR ] = vlt . fit . gaussfit ( VALUES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - P ) ^ 2 ) / ( 2 * sigm ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred value , P is the preferred value , sigm is the tuning width . VALUES are the values of X that are measured . DATA is the response for each value in VALUES . FITCURVE is the fit function at 1 value intervals min : max . ERR is the mean squared error .","title":"vlt.fit.gaussfit"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit.m/#vltfitgaussfit","text":"vlt . fit . gaussfit Fits data to a Gaussian [ Rsp , Rp , P , sigm , FITCURVE , ERR ] = vlt . fit . gaussfit ( VALUES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - P ) ^ 2 ) / ( 2 * sigm ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred value , P is the preferred value , sigm is the tuning width . VALUES are the values of X that are measured . DATA is the response for each value in VALUES . FITCURVE is the fit function at 1 value intervals min : max . ERR is the mean squared error .","title":"vlt.fit.gaussfit"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit_constraints.m/","text":"vlt.fit.gaussfit_constraints \u00b6 GAUSSFIT_CONSTRAINTS - gaussian fit with constraints [ P , GOF , FITCURVE ] = GAUSSFIT_CONSTRAINTS ( X , Y , ... ) Fits the data Y at positions X to : Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width The outputs are the parameters P = [ a b c d ] and the goodness - of - fit values GOF . FITCURVE is the fit value for all values of x . The user can pass initial guesses and constraints as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- a_hint ( 0 ) | Offset initial guess a_range ([ min ( y ) max ( y )]) | Offset allowed range b_hint ( max ( y )) | Height inital guess b_range [ 0 2 * max ( y )] | Height range c_hint ( vlt . math . center_of_mass ( x , y ) | Initial guess for peak location c_range ([ min ( x ) max ( x )]) | Peak location range d_hint ( 0.1 * ( max ( x ) - min ( x ))) | Initial guess of width d_range [ 0.01 * ( max ( x ) - min ( x )) ... | Width range [ 1 * ( max ( x ) - min ( x ))] |","title":"vlt.fit.gaussfit_constraints"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit_constraints.m/#vltfitgaussfit_constraints","text":"GAUSSFIT_CONSTRAINTS - gaussian fit with constraints [ P , GOF , FITCURVE ] = GAUSSFIT_CONSTRAINTS ( X , Y , ... ) Fits the data Y at positions X to : Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width The outputs are the parameters P = [ a b c d ] and the goodness - of - fit values GOF . FITCURVE is the fit value for all values of x . The user can pass initial guesses and constraints as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- a_hint ( 0 ) | Offset initial guess a_range ([ min ( y ) max ( y )]) | Offset allowed range b_hint ( max ( y )) | Height inital guess b_range [ 0 2 * max ( y )] | Height range c_hint ( vlt . math . center_of_mass ( x , y ) | Initial guess for peak location c_range ([ min ( x ) max ( x )]) | Peak location range d_hint ( 0.1 * ( max ( x ) - min ( x ))) | Initial guess of width d_range [ 0.01 * ( max ( x ) - min ( x )) ... | Width range [ 1 * ( max ( x ) - min ( x ))] |","title":"vlt.fit.gaussfit_constraints"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit_conv.m/","text":"vlt.fit.gaussfit_conv \u00b6 vlt . fit . otfit_carandini_conv Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = GUASSFIT_CONV ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . gaussfit .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : vlt . fit . gaussfit , vlt . fit . gaussfit_err , vlt . fit . otfit_carandini , vlt . fit . otfit_carandini_err","title":"vlt.fit.gaussfit_conv"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit_conv.m/#vltfitgaussfit_conv","text":"vlt . fit . otfit_carandini_conv Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = GUASSFIT_CONV ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . gaussfit .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : vlt . fit . gaussfit , vlt . fit . gaussfit_err , vlt . fit . otfit_carandini , vlt . fit . otfit_carandini_err","title":"vlt.fit.gaussfit_conv"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit_err.m/","text":"vlt.fit.gaussfit_err \u00b6 vlt . fit . gaussfit_err Computes error of gaussian fit [ ERR , RFIT ] = vlt . fit . gaussfit_err ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . gaussfit vlt . fit . otfit_carandini","title":"vlt.fit.gaussfit_err"},{"location":"reference/%2Bvlt/%2Bfit/gaussfit_err.m/#vltfitgaussfit_err","text":"vlt . fit . gaussfit_err Computes error of gaussian fit [ ERR , RFIT ] = vlt . fit . gaussfit_err ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . gaussfit vlt . fit . otfit_carandini","title":"vlt.fit.gaussfit_err"},{"location":"reference/%2Bvlt/%2Bfit/gausslogfit.m/","text":"vlt.fit.gausslogfit \u00b6 GAUSSLOGFIT - gaussian log fit with constraints [ P , GOF , FITCURVE ] = GAUSSLOGFIT ( X , Y , ... ) Fits the data Y at positions X to : Y = a + b * exp (( log10 ( x ) - log10 ( c )) .^ 2 / ( 2 * d ^ 2 )) a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The outputs are the parameters P = [ a b c d ] and the goodness - of - fit values GOF . FITCURVE is the fit value for all values of x ; the first row is all x values , the second row is the fit function values . See also : vlt . math . gausslog The user can pass initial guesses and constraints as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- a_hint ( 0 ) | Offset initial guess a_range ([ min ( y ) max ( y )]) | Offset allowed range b_hint ( max ( y )) | Height inital guess b_range [ 0 2 * max ( y )] | Height range c_hint ( vlt . math . center_of_mass ( x , y ) | Initial guess for peak location c_range ([ min ( x ) max ( x )]) | Peak location range d_hint ( 0.1 * ( max ( x ) - min ( x ))) | Initial guess of width d_range [ 0.01 * ( max ( x ) - min ( x )) ... | Width range [ 1 * ( max ( x ) - min ( x ))] |","title":"vlt.fit.gausslogfit"},{"location":"reference/%2Bvlt/%2Bfit/gausslogfit.m/#vltfitgausslogfit","text":"GAUSSLOGFIT - gaussian log fit with constraints [ P , GOF , FITCURVE ] = GAUSSLOGFIT ( X , Y , ... ) Fits the data Y at positions X to : Y = a + b * exp (( log10 ( x ) - log10 ( c )) .^ 2 / ( 2 * d ^ 2 )) a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The outputs are the parameters P = [ a b c d ] and the goodness - of - fit values GOF . FITCURVE is the fit value for all values of x ; the first row is all x values , the second row is the fit function values . See also : vlt . math . gausslog The user can pass initial guesses and constraints as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- a_hint ( 0 ) | Offset initial guess a_range ([ min ( y ) max ( y )]) | Offset allowed range b_hint ( max ( y )) | Height inital guess b_range [ 0 2 * max ( y )] | Height range c_hint ( vlt . math . center_of_mass ( x , y ) | Initial guess for peak location c_range ([ min ( x ) max ( x )]) | Peak location range d_hint ( 0.1 * ( max ( x ) - min ( x ))) | Initial guess of width d_range [ 0.01 * ( max ( x ) - min ( x )) ... | Width range [ 1 * ( max ( x ) - min ( x ))] |","title":"vlt.fit.gausslogfit"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit.m/","text":"vlt.fit.gaussspotfit \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit.m/#vltfitgaussspotfit","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_mod.m/","text":"vlt.fit.gaussspotfit_mod \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , MOD_AMP , MOD_SIGMA , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . MOD_AMP - The amplitude of the surround modulation ( multiplicative ) SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_mod"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_mod.m/#vltfitgaussspotfit_mod","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , MOD_AMP , MOD_SIGMA , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . MOD_AMP - The amplitude of the surround modulation ( multiplicative ) SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_mod"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_nk.m/","text":"vlt.fit.gaussspotfit_nk \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , C50 , N , FIT_RESPONSES ] = vlt . fit . gaussspotfit_nk ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions , with response amplitude modulated by the Naka - Rushton function . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter ( SV NOTE : Did I write this ?? Do I really mean diameter ? ) RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . C50 - 50 % point of Naka Rushton response N - N power of Naka Rushton response FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_nk"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_nk.m/#vltfitgaussspotfit_nk","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , C50 , N , FIT_RESPONSES ] = vlt . fit . gaussspotfit_nk ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions , with response amplitude modulated by the Naka - Rushton function . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter ( SV NOTE : Did I write this ?? Do I really mean diameter ? ) RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . C50 - 50 % point of Naka Rushton response N - N power of Naka Rushton response FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_nk"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_nopos_surr.m/","text":"vlt.fit.gaussspotfit_nopos_surr \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , B , FIT_RESPONSES , R_SQUARED ] = vlt . fit . gaussspotfit_nopos_surr ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF with modulation to responses to circle / aperture stimulation . The equation that is fit is STIMULUS ( r ) * AMP * G ( r , MU , SIGMA ) * ( 1 + B * r ) The first half is an integrated Gaussian function ( G ( r , MU , SIGMA )) The second half is a modulating factor that depends linearly on the stimulus diameter . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response B - The modulating factor FIT_RESPONSES - the fit responses R_SQUARED - The error of the fit normalized by the square of the data around its mean","title":"vlt.fit.gaussspotfit_nopos_surr"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_nopos_surr.m/#vltfitgaussspotfit_nopos_surr","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , B , FIT_RESPONSES , R_SQUARED ] = vlt . fit . gaussspotfit_nopos_surr ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF with modulation to responses to circle / aperture stimulation . The equation that is fit is STIMULUS ( r ) * AMP * G ( r , MU , SIGMA ) * ( 1 + B * r ) The first half is an integrated Gaussian function ( G ( r , MU , SIGMA )) The second half is a modulating factor that depends linearly on the stimulus diameter . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response B - The modulating factor FIT_RESPONSES - the fit responses R_SQUARED - The error of the fit normalized by the square of the data around its mean","title":"vlt.fit.gaussspotfit_nopos_surr"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_noposition.m/","text":"vlt.fit.gaussspotfit_noposition \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit_noposition ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle / aperture stimulation . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_noposition"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_noposition.m/#vltfitgaussspotfit_noposition","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit_noposition ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle / aperture stimulation . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_noposition"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_skew.m/","text":"vlt.fit.gaussspotfit_skew \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_skew"},{"location":"reference/%2Bvlt/%2Bfit/gaussspotfit_skew.m/#vltfitgaussspotfit_skew","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = vlt . fit . gaussspotfit ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"vlt.fit.gaussspotfit_skew"},{"location":"reference/%2Bvlt/%2Bfit/linepowerthreshold.m/","text":"vlt.fit.linepowerthreshold \u00b6 LINEPOWERTHRESHOLD - compute linepowerthreshold function for values of x [ CURVE ] = vlt . fit . linepowerthreshold ( X , SLOPE , OFFSET , THRESHOLD , EXPONENT ) Calculates CURVE = OFFSET + SLOPE * vlt . math . rectify ( X - THRESHOLD ). ^ EXPONENT See also : vlt . stats . quickregression ( simple linear fit ), vlt . fit . linepowerthresholdfit Jason Osik and Steve Van Hooser","title":"vlt.fit.linepowerthreshold"},{"location":"reference/%2Bvlt/%2Bfit/linepowerthreshold.m/#vltfitlinepowerthreshold","text":"LINEPOWERTHRESHOLD - compute linepowerthreshold function for values of x [ CURVE ] = vlt . fit . linepowerthreshold ( X , SLOPE , OFFSET , THRESHOLD , EXPONENT ) Calculates CURVE = OFFSET + SLOPE * vlt . math . rectify ( X - THRESHOLD ). ^ EXPONENT See also : vlt . stats . quickregression ( simple linear fit ), vlt . fit . linepowerthresholdfit Jason Osik and Steve Van Hooser","title":"vlt.fit.linepowerthreshold"},{"location":"reference/%2Bvlt/%2Bfit/linepowerthresholdfit.m/","text":"vlt.fit.linepowerthresholdfit \u00b6 LINEPOWERTHRESHOLDFIT - Fit a linear function , raised to a power , with a threshold [ SLOPE , OFFSET , THRESHOLD , EXPONENT , CURVE , GOF , FITINFO ] = vlt . fit . linepowerthresholdfit ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = OFFSET + SLOPE * vlt . math . rectify ( X - THRESHOLD ) .^ EXPONENT X and Y should be vectors with the same length . SLOPE , OFFSET , THRESHOLD , and EXPONENT are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit threshold_range [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from vlt . stats . quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range offset_start ( from vlt . stats . quickregression ) | Initial OFFSET starting point offset_range ([ - Inf Inf ]) | OFFSET parameter range exponent_start ( 1 ) | Initial EXPONENT start point exponent_range ([ - Inf Inf ]) | EXPONENT search space weights ([]) | Weigh the error at each point by a value Example : x = sort ( rand ( 20 , 1 )); y = vlt . fit . linepowerthreshold ( x , 3 , 0.3 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , offset , t , exponent , thefit ]= vlt . fit . linepowerthresholdfit ( x , y , 'exponent_start' , 1 , 'exponent_range' ,[ 1 1 ]); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx' ); box off ; See also: vlt.stats.quickregression (simple linear fit), FIT, vlt.fit.linepowerthreshold Jason Osik and Steve Van Hooser","title":"vlt.fit.linepowerthresholdfit"},{"location":"reference/%2Bvlt/%2Bfit/linepowerthresholdfit.m/#vltfitlinepowerthresholdfit","text":"LINEPOWERTHRESHOLDFIT - Fit a linear function , raised to a power , with a threshold [ SLOPE , OFFSET , THRESHOLD , EXPONENT , CURVE , GOF , FITINFO ] = vlt . fit . linepowerthresholdfit ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = OFFSET + SLOPE * vlt . math . rectify ( X - THRESHOLD ) .^ EXPONENT X and Y should be vectors with the same length . SLOPE , OFFSET , THRESHOLD , and EXPONENT are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit threshold_range [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from vlt . stats . quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range offset_start ( from vlt . stats . quickregression ) | Initial OFFSET starting point offset_range ([ - Inf Inf ]) | OFFSET parameter range exponent_start ( 1 ) | Initial EXPONENT start point exponent_range ([ - Inf Inf ]) | EXPONENT search space weights ([]) | Weigh the error at each point by a value Example : x = sort ( rand ( 20 , 1 )); y = vlt . fit . linepowerthreshold ( x , 3 , 0.3 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , offset , t , exponent , thefit ]= vlt . fit . linepowerthresholdfit ( x , y , 'exponent_start' , 1 , 'exponent_range' ,[ 1 1 ]); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx' ); box off ; See also: vlt.stats.quickregression (simple linear fit), FIT, vlt.fit.linepowerthreshold Jason Osik and Steve Van Hooser","title":"vlt.fit.linepowerthresholdfit"},{"location":"reference/%2Bvlt/%2Bfit/linethresholdfit.m/","text":"vlt.fit.linethresholdfit \u00b6 LINETHRESHOLDFIT - Fit a linear function with a threshold [ SLOPE , THRESHOLD , CURVE , GOF , FITINFO ] = vlt . fit . linethresholdfit ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = SLOPE * vlt . math . rectify ( X - THRESHOLD ) X and Y should be vectors with the same length . SLOPE and THRESHOLD are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit thresholdrange [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from vlt . stats . quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range Example : x = sort ( rand ( 20 , 1 )); y = vlt . fit . linepowerthreshold ( x , 3 , 0 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , t , thefit ]= vlt . fit . linethresholdfit ( x , y ); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx-' ); box off ; See also: vlt.stats.quickregression (simple linear fit), FIT, vlt.fit.linepowerthreshold, vlt.fit.linepowerthresholdfit Jason Osik and Steve Van Hooser","title":"vlt.fit.linethresholdfit"},{"location":"reference/%2Bvlt/%2Bfit/linethresholdfit.m/#vltfitlinethresholdfit","text":"LINETHRESHOLDFIT - Fit a linear function with a threshold [ SLOPE , THRESHOLD , CURVE , GOF , FITINFO ] = vlt . fit . linethresholdfit ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = SLOPE * vlt . math . rectify ( X - THRESHOLD ) X and Y should be vectors with the same length . SLOPE and THRESHOLD are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit thresholdrange [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from vlt . stats . quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range Example : x = sort ( rand ( 20 , 1 )); y = vlt . fit . linepowerthreshold ( x , 3 , 0 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , t , thefit ]= vlt . fit . linethresholdfit ( x , y ); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx-' ); box off ; See also: vlt.stats.quickregression (simple linear fit), FIT, vlt.fit.linepowerthreshold, vlt.fit.linepowerthresholdfit Jason Osik and Steve Van Hooser","title":"vlt.fit.linethresholdfit"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton.m/","text":"vlt.fit.naka_rushton \u00b6 NAKA_RUSHTON Naka - Rushton fit ( for contrast curves ) [ RM , B ] = vlt . fit . naka_rushton ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c / ( b + c ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N ] = vlt . fit . naka_rushton ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b + c ^ n ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N , S ] = vlt . fit . naka_rushton ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b ^ ( s * n ) + c ^ ( s * n )) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast , and s is a saturation factor . References : Naka_Rushton fit was first described in Naka , Rushton , J . Physiol . London 185 : 536 - 555 , 1966 and used to fit contrast data of cortical cells in Albrecht and Hamilton , J . Neurophys . 48 : 217 - 237 , 1982 The saturation form was described in Peirce 2007 J Vision","title":"vlt.fit.naka_rushton"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton.m/#vltfitnaka_rushton","text":"NAKA_RUSHTON Naka - Rushton fit ( for contrast curves ) [ RM , B ] = vlt . fit . naka_rushton ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c / ( b + c ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N ] = vlt . fit . naka_rushton ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b + c ^ n ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N , S ] = vlt . fit . naka_rushton ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b ^ ( s * n ) + c ^ ( s * n )) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast , and s is a saturation factor . References : Naka_Rushton fit was first described in Naka , Rushton , J . Physiol . London 185 : 536 - 555 , 1966 and used to fit contrast data of cortical cells in Albrecht and Hamilton , J . Neurophys . 48 : 217 - 237 , 1982 The saturation form was described in Peirce 2007 J Vision","title":"vlt.fit.naka_rushton"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton_err.m/","text":"vlt.fit.naka_rushton_err \u00b6 NAKA_RUSHTON_ERR Naka - Rushton function helper function for fitting ERR = vlt . fit . naka_rushton_err ( P , C , DATA ) P = [ rm b ] returns mean squared error of p ( 1 ) * c . / ( p ( 2 ) + c ) with data P = [ rm b n ] returns mean squared error of p ( 1 ) * cn . / ( p ( 2 ) ^ p ( 3 ) + cn ) with data where cn = c . ^ p ( 3 ) P = [ rm b n s ] returns mean squared error of p ( 1 ) * c ^ ( p3 ). / ( p ( 2 ) ^ ( p ( 3 ) * p ( 4 )) + c ^ ( p ( 3 ) * p ( 4 ))","title":"vlt.fit.naka_rushton_err"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton_err.m/#vltfitnaka_rushton_err","text":"NAKA_RUSHTON_ERR Naka - Rushton function helper function for fitting ERR = vlt . fit . naka_rushton_err ( P , C , DATA ) P = [ rm b ] returns mean squared error of p ( 1 ) * c . / ( p ( 2 ) + c ) with data P = [ rm b n ] returns mean squared error of p ( 1 ) * cn . / ( p ( 2 ) ^ p ( 3 ) + cn ) with data where cn = c . ^ p ( 3 ) P = [ rm b n s ] returns mean squared error of p ( 1 ) * c ^ ( p3 ). / ( p ( 2 ) ^ ( p ( 3 ) * p ( 4 )) + c ^ ( p ( 3 ) * p ( 4 ))","title":"vlt.fit.naka_rushton_err"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton_func.m/","text":"vlt.fit.naka_rushton_func \u00b6 vlt . fit . naka_rushton_func - Evaluate Naka Rushton function R = vlt . fit . naka_rushton_func ( C , C50 , N , S ) Returns Naka Rushton function : C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) If S is not specified , S is assumed to be 1. If C is negative , the result is negative .","title":"vlt.fit.naka_rushton_func"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton_func.m/#vltfitnaka_rushton_func","text":"vlt . fit . naka_rushton_func - Evaluate Naka Rushton function R = vlt . fit . naka_rushton_func ( C , C50 , N , S ) Returns Naka Rushton function : C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) If S is not specified , S is assumed to be 1. If C is negative , the result is negative .","title":"vlt.fit.naka_rushton_func"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton_slope.m/","text":"vlt.fit.naka_rushton_slope \u00b6 vlt . fit . naka_rushton_slope - Evaluate slope of Naka Rushton function R = vlt . fit . naka_rushton_slope ( C , C50 , N , S ) Returns the derivative of the Naka Rushton function : d [ C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) ] / dc . If S is not specified , S is assumed to be 1 . If C is negative , the result is negative .","title":"vlt.fit.naka_rushton_slope"},{"location":"reference/%2Bvlt/%2Bfit/naka_rushton_slope.m/#vltfitnaka_rushton_slope","text":"vlt . fit . naka_rushton_slope - Evaluate slope of Naka Rushton function R = vlt . fit . naka_rushton_slope ( C , C50 , N , S ) Returns the derivative of the Naka Rushton function : d [ C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) ] / dc . If S is not specified , S is assumed to be 1 . If C is negative , the result is negative .","title":"vlt.fit.naka_rushton_slope"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini.m/","text":"vlt.fit.otfit_carandini \u00b6 vlt.fit.otfit_carandini Fits orientation curves like Carandini/Ferster 2000 [Rsp,Rp,Op,sigm,Rn,FITCURVE,ERR]=vlt.fit.otfit_carandini(ANGLES,... SPONTHINT, MAXRESPHINT, OTPREFHINT, WIDTHHINT,'DATA',DATA) Finds the best fit to the function R=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) where R is the response, Rsp is the spontaneous response, Rp is the response at the preferred angle, Op is the preferred angle, sigm is the tuning width, Rn is the firing rate at 180+Op. FITCURVE is the fit function at 1 degree intervals (0:1:359).","title":"vlt.fit.otfit_carandini"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini.m/#vltfitotfit_carandini","text":"vlt.fit.otfit_carandini Fits orientation curves like Carandini/Ferster 2000 [Rsp,Rp,Op,sigm,Rn,FITCURVE,ERR]=vlt.fit.otfit_carandini(ANGLES,... SPONTHINT, MAXRESPHINT, OTPREFHINT, WIDTHHINT,'DATA',DATA) Finds the best fit to the function R=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) where R is the response, Rsp is the spontaneous response, Rp is the response at the preferred angle, Op is the preferred angle, sigm is the tuning width, Rn is the firing rate at 180+Op. FITCURVE is the fit function at 1 degree intervals (0:1:359).","title":"vlt.fit.otfit_carandini"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini0.m/","text":"vlt.fit.otfit_carandini0 \u00b6 vlt . fit . otfit_carandini0 Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , FITCURVE , ERR ] = vlt . fit . otfit_carandini0 ( ANGLES , ... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rp * EXP ( - ( X - Op + 180 ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sigm is the tuning width . This function differs from vlt . fit . otfit_carandini in that the response 180 degrees away from Op is constrained to be Rp . In vlt . fit . otfit_carandini , it can have its own value Rn . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"vlt.fit.otfit_carandini0"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini0.m/#vltfitotfit_carandini0","text":"vlt . fit . otfit_carandini0 Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , FITCURVE , ERR ] = vlt . fit . otfit_carandini0 ( ANGLES , ... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rp * EXP ( - ( X - Op + 180 ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sigm is the tuning width . This function differs from vlt . fit . otfit_carandini in that the response 180 degrees away from Op is constrained to be Rp . In vlt . fit . otfit_carandini , it can have its own value Rn . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"vlt.fit.otfit_carandini0"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini2.m/","text":"vlt.fit.otfit_carandini2 \u00b6 vlt . fit . otfit_carandini Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , Rn , OnOff , FITCURVE , ERR , R2 ] = vlt . fit . otfit_carandini ( ANGLES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ,... ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rn * EXP ( - ( X - On ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred angle , Op is the preferred angle , sigm is the tuning width , Rn is the firing rate at 180 + Op , OnOff is the offset of the null angle from the preferred . One can restrict the range of these parameters by providing descriptor / interval pairs as additional arguments ( e . g ., 'OnOffInt' ,[ 130 230 ] ) . See vlt . fit . otfit_carandini_conv2 for a list of interval names . ERR is the squared error between the fit and the data . R2 is the R ^ 2 value of the fit . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"vlt.fit.otfit_carandini2"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini2.m/#vltfitotfit_carandini2","text":"vlt . fit . otfit_carandini Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , Rn , OnOff , FITCURVE , ERR , R2 ] = vlt . fit . otfit_carandini ( ANGLES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ,... ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rn * EXP ( - ( X - On ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred angle , Op is the preferred angle , sigm is the tuning width , Rn is the firing rate at 180 + Op , OnOff is the offset of the null angle from the preferred . One can restrict the range of these parameters by providing descriptor / interval pairs as additional arguments ( e . g ., 'OnOffInt' ,[ 130 230 ] ) . See vlt . fit . otfit_carandini_conv2 for a list of interval names . ERR is the squared error between the fit and the data . R2 is the R ^ 2 value of the fit . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"vlt.fit.otfit_carandini2"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_conv.m/","text":"vlt.fit.otfit_carandini_conv \u00b6 vlt . fit . otfit_carandini_conv Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn ] = vlt . fit . otfit_carandini_conv ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . otfit_carandini .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : vlt . fit . otfit_carandini , vlt . fit . otfit_carandini_err","title":"vlt.fit.otfit_carandini_conv"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_conv.m/#vltfitotfit_carandini_conv","text":"vlt . fit . otfit_carandini_conv Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn ] = vlt . fit . otfit_carandini_conv ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . otfit_carandini .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : vlt . fit . otfit_carandini , vlt . fit . otfit_carandini_err","title":"vlt.fit.otfit_carandini_conv"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_conv0.m/","text":"vlt.fit.otfit_carandini_conv0 \u00b6 vlt . fit . otfit_carandini_conv0 Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = vlt . fit . otfit_carandini_conv0 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . otfit_carandini0 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : vlt . fit . otfit_carandini0 , vlt . fit . otfit_carandini_err0","title":"vlt.fit.otfit_carandini_conv0"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_conv0.m/#vltfitotfit_carandini_conv0","text":"vlt . fit . otfit_carandini_conv0 Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = vlt . fit . otfit_carandini_conv0 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . otfit_carandini0 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : vlt . fit . otfit_carandini0 , vlt . fit . otfit_carandini_err0","title":"vlt.fit.otfit_carandini_conv0"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_conv2.m/","text":"vlt.fit.otfit_carandini_conv2 \u00b6 vlt . fit . otfit_carandini_conv Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn , OnOff ] = vlt . fit . otfit_carandini_conv2 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . otfit_carandini2 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 maxdata ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 130 230 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) High and low value for this interval should be the same modulo 360 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : vlt . fit . otfit_carandini , vlt . fit . otfit_carandini_err","title":"vlt.fit.otfit_carandini_conv2"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_conv2.m/#vltfitotfit_carandini_conv2","text":"vlt . fit . otfit_carandini_conv Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn , OnOff ] = vlt . fit . otfit_carandini_conv2 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying vlt . fit . otfit_carandini2 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 maxdata ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 130 230 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) High and low value for this interval should be the same modulo 360 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : vlt . fit . otfit_carandini , vlt . fit . otfit_carandini_err","title":"vlt.fit.otfit_carandini_conv2"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err.m/","text":"vlt.fit.otfit_carandini_err \u00b6 vlt . fit . otfit_carandini_err Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = vlt . fit . otfit_carandini_err ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini","title":"vlt.fit.otfit_carandini_err"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err.m/#vltfitotfit_carandini_err","text":"vlt . fit . otfit_carandini_err Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = vlt . fit . otfit_carandini_err ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini","title":"vlt.fit.otfit_carandini_err"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err0.m/","text":"vlt.fit.otfit_carandini_err0 \u00b6 vlt . fit . otfit_carandini_err0 Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR0 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rp * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rp is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini0","title":"vlt.fit.otfit_carandini_err0"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err0.m/#vltfitotfit_carandini_err0","text":"vlt . fit . otfit_carandini_err0 Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR0 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rp * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rp is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini0","title":"vlt.fit.otfit_carandini_err0"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err2.m/","text":"vlt.fit.otfit_carandini_err2 \u00b6 vlt . fit . otfit_carandini_err Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR2 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 140 220 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn OnOff ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini","title":"vlt.fit.otfit_carandini_err2"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err2.m/#vltfitotfit_carandini_err2","text":"vlt . fit . otfit_carandini_err Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR2 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 140 220 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn OnOff ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini","title":"vlt.fit.otfit_carandini_err2"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err_joint.m/","text":"vlt.fit.otfit_carandini_err_joint \u00b6 vlt . fit . otfit_carandini_err Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = vlt . fit . otfit_carandini_err ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini","title":"vlt.fit.otfit_carandini_err_joint"},{"location":"reference/%2Bvlt/%2Bfit/otfit_carandini_err_joint.m/#vltfitotfit_carandini_err_joint","text":"vlt . fit . otfit_carandini_err Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = vlt . fit . otfit_carandini_err ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : vlt . fit . otfit_carandini","title":"vlt.fit.otfit_carandini_err_joint"},{"location":"reference/%2Bvlt/%2Bfit/seriesresfit.m/","text":"vlt.fit.seriesresfit \u00b6 EXP_FIT Exponential fit [ Re , taue , Rm , taum , err , fit ] = vlt . fit . exp_fit ( T , DATA , Iinj ) Finds the best fit to V ( t ) / Iinj = Re ( 1 - exp ( - t / taue )) + Rm ( 1 - exp ( - t / taum )) where T is an increasing vector of timevalues , Re is electrode resistance , taue is electrode time constant , Rm is membrane resistance , and taum is membrane time constant .","title":"vlt.fit.seriesresfit"},{"location":"reference/%2Bvlt/%2Bfit/seriesresfit.m/#vltfitseriesresfit","text":"EXP_FIT Exponential fit [ Re , taue , Rm , taum , err , fit ] = vlt . fit . exp_fit ( T , DATA , Iinj ) Finds the best fit to V ( t ) / Iinj = Re ( 1 - exp ( - t / taue )) + Rm ( 1 - exp ( - t / taum )) where T is an increasing vector of timevalues , Re is electrode resistance , taue is electrode time constant , Rm is membrane resistance , and taum is membrane time constant .","title":"vlt.fit.seriesresfit"},{"location":"reference/%2Bvlt/%2Bfit/seriesresfit_err.m/","text":"vlt.fit.seriesresfit_err \u00b6 SERIESRESFIT_ERR Series resistance error fit ERR=vlt.fit.seriesresfit_err(P,T,DATA) P = [ Re taue Rm taum ] returns mean squared error of V=Re[1-exp(-t/taue)]+Rm[1-exp(-t/taum)] where T is a vector of timevalues to evaluate.","title":"vlt.fit.seriesresfit_err"},{"location":"reference/%2Bvlt/%2Bfit/seriesresfit_err.m/#vltfitseriesresfit_err","text":"SERIESRESFIT_ERR Series resistance error fit ERR=vlt.fit.seriesresfit_err(P,T,DATA) P = [ Re taue Rm taum ] returns mean squared error of V=Re[1-exp(-t/taue)]+Rm[1-exp(-t/taum)] where T is a vector of timevalues to evaluate.","title":"vlt.fit.seriesresfit_err"},{"location":"reference/%2Bvlt/%2Bfit/sin4_fit.m/","text":"vlt.fit.sin4_fit \u00b6 SIN4_FIT - Fit a 4 term sine wave to data [ FITVALUES , COEFFS ] = vlt . fit . sin4_fit ( X , Y , MAXFREQUENCY , INCLUDECONSTANT ) Inputs : X - A vector of X values Y - A vector of Y values MAXFREQUENCY - The maximum frequency of the fit , in Hz ( can be Inf ) INCLUDECONSTANT - 0 / 1 should we include a constant term in the fit ? This constant is included by setting it to the signal mean . Outputs : FITVALUES - The fit values of Y for all values of the input X . COEFFS - The coefficients for the sine waves . These are [ a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 ] where the fit function is a1 * sin ( a2 * x + a3 ) + a4 * sin ( a5 * x + a6 ) + a7 * sin ( a8 * x + a9 ) + a10 * sin ( a11 * x + a12 ) + a13 a13 is only present if INCLUDECONSTANT is 1.","title":"vlt.fit.sin4_fit"},{"location":"reference/%2Bvlt/%2Bfit/sin4_fit.m/#vltfitsin4_fit","text":"SIN4_FIT - Fit a 4 term sine wave to data [ FITVALUES , COEFFS ] = vlt . fit . sin4_fit ( X , Y , MAXFREQUENCY , INCLUDECONSTANT ) Inputs : X - A vector of X values Y - A vector of Y values MAXFREQUENCY - The maximum frequency of the fit , in Hz ( can be Inf ) INCLUDECONSTANT - 0 / 1 should we include a constant term in the fit ? This constant is included by setting it to the signal mean . Outputs : FITVALUES - The fit values of Y for all values of the input X . COEFFS - The coefficients for the sine waves . These are [ a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 ] where the fit function is a1 * sin ( a2 * x + a3 ) + a4 * sin ( a5 * x + a6 ) + a7 * sin ( a8 * x + a9 ) + a10 * sin ( a11 * x + a12 ) + a13 a13 is only present if INCLUDECONSTANT is 1.","title":"vlt.fit.sin4_fit"},{"location":"reference/%2Bvlt/%2Bfit/skewgauss.m/","text":"vlt.fit.skewgauss \u00b6 SKEWGAUSS - calculate the skew gaussian function Y = SKEWGAUSS ( X , P ) Evaluates Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) * ( 1 + erf ( e * ( x - c ) / sqrt ( 2 ))); a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The parameters are specified in a vector P = [ a b c d e ] See also : vlt . fit . skewgaussfit_constraints","title":"vlt.fit.skewgauss"},{"location":"reference/%2Bvlt/%2Bfit/skewgauss.m/#vltfitskewgauss","text":"SKEWGAUSS - calculate the skew gaussian function Y = SKEWGAUSS ( X , P ) Evaluates Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) * ( 1 + erf ( e * ( x - c ) / sqrt ( 2 ))); a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The parameters are specified in a vector P = [ a b c d e ] See also : vlt . fit . skewgaussfit_constraints","title":"vlt.fit.skewgauss"},{"location":"reference/%2Bvlt/%2Bfit/skewgaussfit_constraints.m/","text":"vlt.fit.skewgaussfit_constraints \u00b6 SKEWGAUSSFIT_CONSTRAINTS - skewed gaussian fit with constraints [ P , GOF , FITCURVE ] = SKEWGAUSSFIT_CONSTRAINTS ( X , Y , ... ) Fits the data Y at positions X to : Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) .* ( 1 + erf ( e * ( x - c ) / sqrt ( 2 ))); a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The outputs are the parameters P = [ a b c d e ] and the goodness - of - fit values GOF . FITCURVE is the fit value for all values of x ; the first row is all x values , the second row is the fit function values . Inspired by the skew normal distribution : https : // en . wikipedia . org / wiki / Skew_normal_distribution ( But this is not normalized the same way ; in real skew normal , b must be 0.5 * 1 / ( sqrt ( 2 * pi ) * d )) See also : vlt . math . skewgauss The user can pass initial guesses and constraints as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- a_hint ( 0 ) | Offset initial guess a_range ([ min ( y ) max ( y )]) | Offset allowed range b_hint ( max ( y )) | Height inital guess b_range [ 0 2 * max ( y )] | Height range c_hint ( vlt . math . center_of_mass ( x , y ) | Initial guess for peak location c_range ([ min ( x ) max ( x )]) | Peak location range d_hint ( 0.1 * ( max ( x ) - min ( x ))) | Initial guess of width d_range [ 0.01 * ( max ( x ) - min ( x )) ... | Width range [ 1 * ( max ( x ) - min ( x ))] | e_hint ( 0 ) | Skew parameter hint e_range ([ - 1 1 ]) | Allows strong skewness but not infinitely strong","title":"vlt.fit.skewgaussfit_constraints"},{"location":"reference/%2Bvlt/%2Bfit/skewgaussfit_constraints.m/#vltfitskewgaussfit_constraints","text":"SKEWGAUSSFIT_CONSTRAINTS - skewed gaussian fit with constraints [ P , GOF , FITCURVE ] = SKEWGAUSSFIT_CONSTRAINTS ( X , Y , ... ) Fits the data Y at positions X to : Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) .* ( 1 + erf ( e * ( x - c ) / sqrt ( 2 ))); a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The outputs are the parameters P = [ a b c d e ] and the goodness - of - fit values GOF . FITCURVE is the fit value for all values of x ; the first row is all x values , the second row is the fit function values . Inspired by the skew normal distribution : https : // en . wikipedia . org / wiki / Skew_normal_distribution ( But this is not normalized the same way ; in real skew normal , b must be 0.5 * 1 / ( sqrt ( 2 * pi ) * d )) See also : vlt . math . skewgauss The user can pass initial guesses and constraints as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- a_hint ( 0 ) | Offset initial guess a_range ([ min ( y ) max ( y )]) | Offset allowed range b_hint ( max ( y )) | Height inital guess b_range [ 0 2 * max ( y )] | Height range c_hint ( vlt . math . center_of_mass ( x , y ) | Initial guess for peak location c_range ([ min ( x ) max ( x )]) | Peak location range d_hint ( 0.1 * ( max ( x ) - min ( x ))) | Initial guess of width d_range [ 0.01 * ( max ( x ) - min ( x )) ... | Width range [ 1 * ( max ( x ) - min ( x ))] | e_hint ( 0 ) | Skew parameter hint e_range ([ - 1 1 ]) | Allows strong skewness but not infinitely strong","title":"vlt.fit.skewgaussfit_constraints"},{"location":"reference/%2Bvlt/%2Bfit/tanhfit.m/","text":"vlt.fit.tanhfit \u00b6 TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = vlt . fit . tanhfit ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = a + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017 See also: FIT, FITTYPE","title":"vlt.fit.tanhfit"},{"location":"reference/%2Bvlt/%2Bfit/tanhfit.m/#vltfittanhfit","text":"TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = vlt . fit . tanhfit ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = a + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017 See also: FIT, FITTYPE","title":"vlt.fit.tanhfit"},{"location":"reference/%2Bvlt/%2Bfit/tanhfitoffset.m/","text":"vlt.fit.tanhfitoffset \u00b6 TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = vlt . fit . tanhfitoffset ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = ( a + b ) + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . In this equation , a is the offset of the equation from 0 at X = - Inf . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017, modified by SDV 2019 See also: FIT, FITTYPE, vlt.fit.tanhfit","title":"vlt.fit.tanhfitoffset"},{"location":"reference/%2Bvlt/%2Bfit/tanhfitoffset.m/#vltfittanhfitoffset","text":"TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = vlt . fit . tanhfitoffset ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = ( a + b ) + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . In this equation , a is the offset of the equation from 0 at X = - Inf . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017, modified by SDV 2019 See also: FIT, FITTYPE, vlt.fit.tanhfit","title":"vlt.fit.tanhfitoffset"},{"location":"reference/%2Bvlt/%2Bgit/git_assert.m/","text":"vlt.git.git_assert \u00b6 GIT_ASSERT - do we have command line git on this machine ? B = vlt . git . git_assert Tests for presence of 'git' using SYSTEM .","title":"vlt.git.git_assert"},{"location":"reference/%2Bvlt/%2Bgit/git_assert.m/#vltgitgit_assert","text":"GIT_ASSERT - do we have command line git on this machine ? B = vlt . git . git_assert Tests for presence of 'git' using SYSTEM .","title":"vlt.git.git_assert"},{"location":"reference/%2Bvlt/%2Bgit/git_clone.m/","text":"vlt.git.git_clone \u00b6 GIT_CLONE - clone a git repository onto the local computer B = vlt . git . git_clone ( REPOSITORY , LOCALPARENTDIR ) Clones a git repository REPOSITORY into the local directory LOCALPARENTDIR . If a folder containing the local repository already exists , an error is returned . B is 1 if the operation is successful .","title":"vlt.git.git_clone"},{"location":"reference/%2Bvlt/%2Bgit/git_clone.m/#vltgitgit_clone","text":"GIT_CLONE - clone a git repository onto the local computer B = vlt . git . git_clone ( REPOSITORY , LOCALPARENTDIR ) Clones a git repository REPOSITORY into the local directory LOCALPARENTDIR . If a folder containing the local repository already exists , an error is returned . B is 1 if the operation is successful .","title":"vlt.git.git_clone"},{"location":"reference/%2Bvlt/%2Bgit/git_install.m/","text":"vlt.git.git_install \u00b6 GIT_PULL - pull changes to a git repository B = vlt . git . git_pull ( DIRNAME , REPOSITORY ) 'Install' is our term for forcing the local directory DIRNAME to match the remote REPOSITORY , either by cloning or pulling the latest changes . Any files in the local directory DIRNAME that don 't match the remote REPOSITORY are deleted. If DIRNAME does not exist, then the repository is cloned. If DIRNAME exists and has local changes, the changes are stashed and the directory is updated by pulling. If the DIRNAME exists and has no local changes, the directory is updated by pulling. Note: if you have any local changes, vlt.git.git_install will stash them and warn the user. B is 1 if the operation is successful.","title":"vlt.git.git_install"},{"location":"reference/%2Bvlt/%2Bgit/git_install.m/#vltgitgit_install","text":"GIT_PULL - pull changes to a git repository B = vlt . git . git_pull ( DIRNAME , REPOSITORY ) 'Install' is our term for forcing the local directory DIRNAME to match the remote REPOSITORY , either by cloning or pulling the latest changes . Any files in the local directory DIRNAME that don 't match the remote REPOSITORY are deleted. If DIRNAME does not exist, then the repository is cloned. If DIRNAME exists and has local changes, the changes are stashed and the directory is updated by pulling. If the DIRNAME exists and has no local changes, the directory is updated by pulling. Note: if you have any local changes, vlt.git.git_install will stash them and warn the user. B is 1 if the operation is successful.","title":"vlt.git.git_install"},{"location":"reference/%2Bvlt/%2Bgit/git_isgitdirectory.m/","text":"vlt.git.git_isgitdirectory \u00b6 GIT_ISGITDIRECTORY - is a given directory a GIT directory ? B = vlt . git . git_isgitdirectory ( DIRNAME ) Examines whether DIRNAME is a GIT directory .","title":"vlt.git.git_isgitdirectory"},{"location":"reference/%2Bvlt/%2Bgit/git_isgitdirectory.m/#vltgitgit_isgitdirectory","text":"GIT_ISGITDIRECTORY - is a given directory a GIT directory ? B = vlt . git . git_isgitdirectory ( DIRNAME ) Examines whether DIRNAME is a GIT directory .","title":"vlt.git.git_isgitdirectory"},{"location":"reference/%2Bvlt/%2Bgit/git_pull.m/","text":"vlt.git.git_pull \u00b6 GIT_PULL - pull changes to a git repository B = vlt . git . git_pull ( DIRNAME ) Pulls the remote changes to a GIT repository into the local directory DIRNAME . If there are local changes to be committed , the operation may fail and B will be 0 .","title":"vlt.git.git_pull"},{"location":"reference/%2Bvlt/%2Bgit/git_pull.m/#vltgitgit_pull","text":"GIT_PULL - pull changes to a git repository B = vlt . git . git_pull ( DIRNAME ) Pulls the remote changes to a GIT repository into the local directory DIRNAME . If there are local changes to be committed , the operation may fail and B will be 0 .","title":"vlt.git.git_pull"},{"location":"reference/%2Bvlt/%2Bgit/git_repo_version.m/","text":"vlt.git.git_repo_version \u00b6 GIT_REPO_VERSION - return commit number and remote location of repository [ V , REMOTE ] = vlt . git . git_repo_version ( FILEPATH ) Uses command line 'git' to query the commit verison number ( V ) and the path of the REMOTE repository . If either query fails , an error is returned .","title":"vlt.git.git_repo_version"},{"location":"reference/%2Bvlt/%2Bgit/git_repo_version.m/#vltgitgit_repo_version","text":"GIT_REPO_VERSION - return commit number and remote location of repository [ V , REMOTE ] = vlt . git . git_repo_version ( FILEPATH ) Uses command line 'git' to query the commit verison number ( V ) and the path of the REMOTE repository . If either query fails , an error is returned .","title":"vlt.git.git_repo_version"},{"location":"reference/%2Bvlt/%2Bgit/git_stash.m/","text":"vlt.git.git_stash \u00b6 GIT_STASH - stash changes to a git repository B = vlt . git . git_stash ( DIRNAME ) Stash the local changes to a GIT repository in DIRNAME .","title":"vlt.git.git_stash"},{"location":"reference/%2Bvlt/%2Bgit/git_stash.m/#vltgitgit_stash","text":"GIT_STASH - stash changes to a git repository B = vlt . git . git_stash ( DIRNAME ) Stash the local changes to a GIT repository in DIRNAME .","title":"vlt.git.git_stash"},{"location":"reference/%2Bvlt/%2Bgit/git_status.m/","text":"vlt.git.git_status \u00b6 GIT_STATUS - return git working tree status [ UPTODATE , CHANGES , UNTRACKED_PRESENT ] = vlt . git . git_status ( DIRNAME ) Examines whether a git working tree is up to date with its current branch UPTODATE is 1 if the working tree is up - to - date , and 0 if not . CHANGES is 1 if the working tree has changes to be committed , and 0 if not . UNTRACKED_PRESENT is 1 if there are untracked files present , and 0 if not . An error is generated if DIRNAME is not a GIT directory . See also : vlt . git . git_isgitdirectory","title":"vlt.git.git_status"},{"location":"reference/%2Bvlt/%2Bgit/git_status.m/#vltgitgit_status","text":"GIT_STATUS - return git working tree status [ UPTODATE , CHANGES , UNTRACKED_PRESENT ] = vlt . git . git_status ( DIRNAME ) Examines whether a git working tree is up to date with its current branch UPTODATE is 1 if the working tree is up - to - date , and 0 if not . CHANGES is 1 if the working tree has changes to be committed , and 0 if not . UNTRACKED_PRESENT is 1 if there are untracked files present , and 0 if not . An error is generated if DIRNAME is not a GIT directory . See also : vlt . git . git_isgitdirectory","title":"vlt.git.git_status"},{"location":"reference/%2Bvlt/%2Bgraph/dependency_graph.m/","text":"vlt.graph.dependency_graph \u00b6 DEPENDENCY_GRAPH - create a directed graph that describes dependencies among strings [ NODES , G ] = vlt . graph . dependency_graph ( DEPENDENCY_STRUCT ) Given a DEPENDENCY_STRUCT with fields 'name' ( indicating the string name ) and a structure named 'dependencies' that has field names with other named strings , this function returns a set of nodes NODES with node names and a directed graph G indicating the dependencies .","title":"vlt.graph.dependency_graph"},{"location":"reference/%2Bvlt/%2Bgraph/dependency_graph.m/#vltgraphdependency_graph","text":"DEPENDENCY_GRAPH - create a directed graph that describes dependencies among strings [ NODES , G ] = vlt . graph . dependency_graph ( DEPENDENCY_STRUCT ) Given a DEPENDENCY_STRUCT with fields 'name' ( indicating the string name ) and a structure named 'dependencies' that has field names with other named strings , this function returns a set of nodes NODES with node names and a directed graph G indicating the dependencies .","title":"vlt.graph.dependency_graph"},{"location":"reference/%2Bvlt/%2Bgraph/mergegraph.m/","text":"vlt.graph.mergegraph \u00b6 MERGEGRAPH - merge adjacency matrixes of 2 graphs [ MERGED_GRAPH , INDEXES , NUMNEWNODES ] = vlt . graph . mergegraph ( G1 , G2 , NODENUMBERS2_1 ) Creates a merged graph from two overlapping adjacency matrixes G1 and G2 . G #(i,j) is the weight of the connection from node i to j for each graph . NODENUMBERS2_1 are the node index values of the nodes of G2 in G1 . If any entries of NODENUMBERS2_1 are greater than the number of nodes of G1 , then they are assumed to be nodes that are not present in G1 , but they will be added in the new graph . INDEXES is a structure array of the entries that make up the new panels of the merged adjacency matrix MERGED_GRAPH . The fields 'upper_right' , 'lower_left' , and 'lower_right' have the index values of G2 that are taken to fill out the graph . For 'lower_right' , the matrix is square and full , and the index values are the locations in G2 . For 'lower_left' and 'upper_right' , the matrixes may be sparse if there are nodes in G1 that are not in G2 . So the index values have two fields : 'merged' ( the index values of the panel in the merged matrix ) and 'G2' ( the corresponding index values in G2 ) . Any connection that is 'open' will have weight Inf . Note that in performing this merge , the connections among the nodes of G1 are NOT modified . So this function is not a means of providing additional information about the connectivity of those nodes . See also : DIGRAPH Example : G1 = [ 1 1 1 ; 0 1 0 ; 0 0 1 ]; G2 = [ 1 1 ; 0 1 ]; nodenumbers2_1 = [ 1 4 ]; [ G3 , indexes , numnewnodes ] = vlt . graph . mergegraph ( G1 , G2 , nodenumbers2_1 ); lower_right = G2 ( indexes . lower_right ); lower_left = inf ( numnewnodes , size ( G1 , 1 )); upper_right = inf ( size ( G1 , 1 ), numnewnodes ); lower_left ( indexes . lower_left . merged ) = G2 ( indexes . lower_left . G2 ); upper_right ( indexes . upper_right . merged ) = G2 ( indexes . upper_right . G2 ); G4 = [ G1 upper_right ; lower_left lower_right ]; G3 == G4 % it does","title":"vlt.graph.mergegraph"},{"location":"reference/%2Bvlt/%2Bgraph/mergegraph.m/#vltgraphmergegraph","text":"MERGEGRAPH - merge adjacency matrixes of 2 graphs [ MERGED_GRAPH , INDEXES , NUMNEWNODES ] = vlt . graph . mergegraph ( G1 , G2 , NODENUMBERS2_1 ) Creates a merged graph from two overlapping adjacency matrixes G1 and G2 . G #(i,j) is the weight of the connection from node i to j for each graph . NODENUMBERS2_1 are the node index values of the nodes of G2 in G1 . If any entries of NODENUMBERS2_1 are greater than the number of nodes of G1 , then they are assumed to be nodes that are not present in G1 , but they will be added in the new graph . INDEXES is a structure array of the entries that make up the new panels of the merged adjacency matrix MERGED_GRAPH . The fields 'upper_right' , 'lower_left' , and 'lower_right' have the index values of G2 that are taken to fill out the graph . For 'lower_right' , the matrix is square and full , and the index values are the locations in G2 . For 'lower_left' and 'upper_right' , the matrixes may be sparse if there are nodes in G1 that are not in G2 . So the index values have two fields : 'merged' ( the index values of the panel in the merged matrix ) and 'G2' ( the corresponding index values in G2 ) . Any connection that is 'open' will have weight Inf . Note that in performing this merge , the connections among the nodes of G1 are NOT modified . So this function is not a means of providing additional information about the connectivity of those nodes . See also : DIGRAPH Example : G1 = [ 1 1 1 ; 0 1 0 ; 0 0 1 ]; G2 = [ 1 1 ; 0 1 ]; nodenumbers2_1 = [ 1 4 ]; [ G3 , indexes , numnewnodes ] = vlt . graph . mergegraph ( G1 , G2 , nodenumbers2_1 ); lower_right = G2 ( indexes . lower_right ); lower_left = inf ( numnewnodes , size ( G1 , 1 )); upper_right = inf ( size ( G1 , 1 ), numnewnodes ); lower_left ( indexes . lower_left . merged ) = G2 ( indexes . lower_left . G2 ); upper_right ( indexes . upper_right . merged ) = G2 ( indexes . upper_right . G2 ); G4 = [ G1 upper_right ; lower_left lower_right ]; G3 == G4 % it does","title":"vlt.graph.mergegraph"},{"location":"reference/%2Bvlt/%2Bhtml/alumni_htmltable.m/","text":"vlt.html.alumni_htmltable \u00b6 FACEBOOK_HTMLTABLE - make a table of faces and names for VHlab website STR = UGALUMNI_HTMLTABLE(FACEINFO, ...) Takes as input a STRUCT FACEINFO that has fields 'imagefile' and 'name' and generates an html output table (in a cell array of strings) in STR. This function also takes name/value pairs that modify its behavior: Parameter (default value) | Description ---------------------------------------------------------------- Ncols (3) | Number of columns imagewidth (200) | Image width, in pixels nametablestylestring | Style of the name table entries ('style=\"text-align: center; vertical-align:top; width:200px;font-size:100%;\"') | nametableprefix | Prefix formatting for name table entries (' <font face= \"veranda, sans-serif\" ><b> ') | nametablepostfix | Postfix formatting for name table entries (' </b></font> ') | tableidstr ('') | If using a style, could be ' id=\"facebooktable\"' for example We use this to generate the undergraduate alumni portion of vhlab.org/people See also: vlt.file.cellstr2text, vlt.data.namevaluepair","title":"vlt.html.alumni_htmltable"},{"location":"reference/%2Bvlt/%2Bhtml/alumni_htmltable.m/#vlthtmlalumni_htmltable","text":"FACEBOOK_HTMLTABLE - make a table of faces and names for VHlab website STR = UGALUMNI_HTMLTABLE(FACEINFO, ...) Takes as input a STRUCT FACEINFO that has fields 'imagefile' and 'name' and generates an html output table (in a cell array of strings) in STR. This function also takes name/value pairs that modify its behavior: Parameter (default value) | Description ---------------------------------------------------------------- Ncols (3) | Number of columns imagewidth (200) | Image width, in pixels nametablestylestring | Style of the name table entries ('style=\"text-align: center; vertical-align:top; width:200px;font-size:100%;\"') | nametableprefix | Prefix formatting for name table entries (' <font face= \"veranda, sans-serif\" ><b> ') | nametablepostfix | Postfix formatting for name table entries (' </b></font> ') | tableidstr ('') | If using a style, could be ' id=\"facebooktable\"' for example We use this to generate the undergraduate alumni portion of vhlab.org/people See also: vlt.file.cellstr2text, vlt.data.namevaluepair","title":"vlt.html.alumni_htmltable"},{"location":"reference/%2Bvlt/%2Bhtml/vhlab_people_html.m/","text":"vlt.html.vhlab_people_html \u00b6 VHLAB_PEOPLE_HTML - Generate the VHLAB people page given a datebase of members vlt . html . vhlab_people_html ( DBTABLE_FILENAME , OUTPUT_FILENAME ) Generates the 'people' page for vhlab . org . Input : DBTABLE_FILENAME , the filename of a tab-delimited text structure file with first row field names and every other row comprised of values . The headers / fields of the table should be : Fieldname | Description -------------------------------------------------------- year | The year the person left the lab ( if they are gone ), empty otherwise lastname | The person 's last name (used for alphabetical sorting) name | The person' s name as it should appear on the page namelink | If not empty , a link that should be related to the person 's name alumni | 0/1; is the person an alum? (that is, have they left the lab?) Group | Employment category; ' UG ', ' STAFF ', ' GS ', ' PD ', ' PI ' title | Job title Years | String containing the years of service in the lab (e.g., ' 2010-2017 ') email | Email address string, person at brandeis dot edu paragraph | HTML string containing a paragraph(s) of research interests. Links | Any links (current personnel only) imagefile | Image link to the person' s picture","title":"vlt.html.vhlab_people_html"},{"location":"reference/%2Bvlt/%2Bhtml/vhlab_people_html.m/#vlthtmlvhlab_people_html","text":"VHLAB_PEOPLE_HTML - Generate the VHLAB people page given a datebase of members vlt . html . vhlab_people_html ( DBTABLE_FILENAME , OUTPUT_FILENAME ) Generates the 'people' page for vhlab . org . Input : DBTABLE_FILENAME , the filename of a tab-delimited text structure file with first row field names and every other row comprised of values . The headers / fields of the table should be : Fieldname | Description -------------------------------------------------------- year | The year the person left the lab ( if they are gone ), empty otherwise lastname | The person 's last name (used for alphabetical sorting) name | The person' s name as it should appear on the page namelink | If not empty , a link that should be related to the person 's name alumni | 0/1; is the person an alum? (that is, have they left the lab?) Group | Employment category; ' UG ', ' STAFF ', ' GS ', ' PD ', ' PI ' title | Job title Years | String containing the years of service in the lab (e.g., ' 2010-2017 ') email | Email address string, person at brandeis dot edu paragraph | HTML string containing a paragraph(s) of research interests. Links | Any links (current personnel only) imagefile | Image link to the person' s picture","title":"vlt.html.vhlab_people_html"},{"location":"reference/%2Bvlt/%2Bimage/circular_filter.m/","text":"vlt.image.circular_filter \u00b6 vlt . image . circular_filter - applies a circular filter around a pixel that blurs . IM_OUT = vlt . image . circular_filter ( IM , USEGAUSSIAN , RADIUS , FILTERSIZE ) Applies a circular convolutional filter to an image IM . If USEGAUSSIAN is 1 , then the filter is a gaussian with sigma equal to RADIUS . If USEGAUSSIAN is 0 , then the filter is a circle with RADIUS . The filter is normalized to sum to 1 . FILTERSIZE is the size of the filter ; it is recommended that FILTERSIZE be a few times larger than RADIUS for Gaussian filters and a little more than twice the RADIUS for circular filters . The image that is returned will be a double . Written by Sam Greene and Steve . Example : im = imread ( 'coins.png' ); im_out = vlt . image . circular_filter ( im , 1 , 10 , 100 ); vlt . plot . imagedisplay ( im ); vlt . plot . imagedisplay ( im_out );","title":"vlt.image.circular_filter"},{"location":"reference/%2Bvlt/%2Bimage/circular_filter.m/#vltimagecircular_filter","text":"vlt . image . circular_filter - applies a circular filter around a pixel that blurs . IM_OUT = vlt . image . circular_filter ( IM , USEGAUSSIAN , RADIUS , FILTERSIZE ) Applies a circular convolutional filter to an image IM . If USEGAUSSIAN is 1 , then the filter is a gaussian with sigma equal to RADIUS . If USEGAUSSIAN is 0 , then the filter is a circle with RADIUS . The filter is normalized to sum to 1 . FILTERSIZE is the size of the filter ; it is recommended that FILTERSIZE be a few times larger than RADIUS for Gaussian filters and a little more than twice the RADIUS for circular filters . The image that is returned will be a double . Written by Sam Greene and Steve . Example : im = imread ( 'coins.png' ); im_out = vlt . image . circular_filter ( im , 1 , 10 , 100 ); vlt . plot . imagedisplay ( im ); vlt . plot . imagedisplay ( im_out );","title":"vlt.image.circular_filter"},{"location":"reference/%2Bvlt/%2Bimage/doublethreshold.m/","text":"vlt.image.doublethreshold \u00b6 DOUBLETHRESHOLD - apply a double threshold to an image BIN = DOUBLETHRESHOLD ( IM , T1 , T2 , CONNECTIVITY ) Calculate a binary image based on 2 thresholds . First , binary images are calculated based on each threshold . Second , ROIs are discovered from each binary image using BWCONNCOMP . Then , ROIs generated from the lower threshold are examined to see if they overlap any part of an ROI from the higher threshold . Only objects that overlap the higher threshold will be retained . Finally , a binary image is created from the ROIs that remain and is returned in BIN .","title":"vlt.image.doublethreshold"},{"location":"reference/%2Bvlt/%2Bimage/doublethreshold.m/#vltimagedoublethreshold","text":"DOUBLETHRESHOLD - apply a double threshold to an image BIN = DOUBLETHRESHOLD ( IM , T1 , T2 , CONNECTIVITY ) Calculate a binary image based on 2 thresholds . First , binary images are calculated based on each threshold . Second , ROIs are discovered from each binary image using BWCONNCOMP . Then , ROIs generated from the lower threshold are examined to see if they overlap any part of an ROI from the higher threshold . Only objects that overlap the higher threshold will be retained . Finally , a binary image is created from the ROIs that remain and is returned in BIN .","title":"vlt.image.doublethreshold"},{"location":"reference/%2Bvlt/%2Bimage/doublethresholdresegment.m/","text":"vlt.image.doublethresholdresegment \u00b6 DOUBLETHRESHOLD - apply a double threshold to an image BIN = DOUBLETHRESHOLDRESEGMENT ( IM , T1 , T2 , CONNECTIVITY , RAW_IM , RESEGMENT_NAMEVALUEPAIRS ) Calculate a binary image based on 2 thresholds . First , binary images are calculated based on each threshold . Second , ROIs are discovered from each binary image using BWCONNCOMP . Then , ROIs generated from the lower threshold are examined to see if they overlap any part of an ROI from the higher threshold . Only objects that overlap the higher threshold will be retained . RESEGMENT_NAMEVALUEPAIRS are the name / value pairs to pass to ROI_resegment Finally , a binary image is created from the ROIs that remain and is returned in BIN . See also : vlt . image . roi . ROI_resegment_all","title":"vlt.image.doublethresholdresegment"},{"location":"reference/%2Bvlt/%2Bimage/doublethresholdresegment.m/#vltimagedoublethresholdresegment","text":"DOUBLETHRESHOLD - apply a double threshold to an image BIN = DOUBLETHRESHOLDRESEGMENT ( IM , T1 , T2 , CONNECTIVITY , RAW_IM , RESEGMENT_NAMEVALUEPAIRS ) Calculate a binary image based on 2 thresholds . First , binary images are calculated based on each threshold . Second , ROIs are discovered from each binary image using BWCONNCOMP . Then , ROIs generated from the lower threshold are examined to see if they overlap any part of an ROI from the higher threshold . Only objects that overlap the higher threshold will be retained . RESEGMENT_NAMEVALUEPAIRS are the name / value pairs to pass to ROI_resegment Finally , a binary image is created from the ROIs that remain and is returned in BIN . See also : vlt . image . roi . ROI_resegment_all","title":"vlt.image.doublethresholdresegment"},{"location":"reference/%2Bvlt/%2Bimage/driftcheck.m/","text":"vlt.image.driftcheck \u00b6 DRIFTCHECK - Checks for drift in image pair by correlation DR = DRIFTCHECK ( IM1 , IM2 , SEARCHX , SEARCHY ,...) Checks for drift over the specific offset ranges SEARCHX = [ x1 x2 x3 ] and SEARCHY = [ y1 y2 y3 ]. Positive shifts are rightward and upward with respect to the original . This function accepts additional parameter as name / value pairs . Parameter ( default value ) | Description ----------------------------------------------------------------- subtractmean ( 0 ) | ( 0 / 1 ) If 1 , subtract the mean of each image | before correcting brightnessartifact ( 100 ) | ( 0-100 ) Set all pixels above this percentile of | brightness to the mean of the image ( 100 means | no change ) darknessartifact ( 0 ) | ( 0-100 ) Set all pixels below this percentile of | brightness to the mean of the image ( 0 means | no change ) brightnesscorrect ( 1 ) | ( 0 / 1 ) If 1 , images are normalized | by their standard deviation before | correlating . This allows accurate correlation | where total image brightness has changed . roicorrect ( 1 ) | ( 0 / 1 ) If 1 , only the pixels above the ' mn ' | are considered in the correlation . The best offset , as determined by correlation , is returned in DR = [ OFFSET_X OFFSET_Y ]. This function calls the xcorr2dlag MEX file ; this function will produce an error if this function is not compiled for your platform .","title":"vlt.image.driftcheck"},{"location":"reference/%2Bvlt/%2Bimage/driftcheck.m/#vltimagedriftcheck","text":"DRIFTCHECK - Checks for drift in image pair by correlation DR = DRIFTCHECK ( IM1 , IM2 , SEARCHX , SEARCHY ,...) Checks for drift over the specific offset ranges SEARCHX = [ x1 x2 x3 ] and SEARCHY = [ y1 y2 y3 ]. Positive shifts are rightward and upward with respect to the original . This function accepts additional parameter as name / value pairs . Parameter ( default value ) | Description ----------------------------------------------------------------- subtractmean ( 0 ) | ( 0 / 1 ) If 1 , subtract the mean of each image | before correcting brightnessartifact ( 100 ) | ( 0-100 ) Set all pixels above this percentile of | brightness to the mean of the image ( 100 means | no change ) darknessartifact ( 0 ) | ( 0-100 ) Set all pixels below this percentile of | brightness to the mean of the image ( 0 means | no change ) brightnesscorrect ( 1 ) | ( 0 / 1 ) If 1 , images are normalized | by their standard deviation before | correlating . This allows accurate correlation | where total image brightness has changed . roicorrect ( 1 ) | ( 0 / 1 ) If 1 , only the pixels above the ' mn ' | are considered in the correlation . The best offset , as determined by correlation , is returned in DR = [ OFFSET_X OFFSET_Y ]. This function calls the xcorr2dlag MEX file ; this function will produce an error if this function is not compiled for your platform .","title":"vlt.image.driftcheck"},{"location":"reference/%2Bvlt/%2Bimage/findroiinlinescan.m/","text":"vlt.image.findroiinlinescan \u00b6 FINDROIINLINESCAN - Find a ROI defined in a raster image in a linescan [ LSINDEXES,ONs,OFFs ] = FINDROIINLINESCAN ( RASTERIMAGESIZE , LINESCANIMAGESIZE , LINESCANPOINTS ,... ROIRASTERINDEXES , [ DRIFT ] ) Given a list of index values of regions of interest ( a cell list ROIRASTERINDEXES ) that were defined within a raster image of size RASTERIMAGESIZE , this function determines the corresponding index values LSINDEXES where those pixels were scanned in the linescan LINESCANPOINTS ( y , x ) with image of size LINESCANIMAGESIZE .","title":"vlt.image.findroiinlinescan"},{"location":"reference/%2Bvlt/%2Bimage/findroiinlinescan.m/#vltimagefindroiinlinescan","text":"FINDROIINLINESCAN - Find a ROI defined in a raster image in a linescan [ LSINDEXES,ONs,OFFs ] = FINDROIINLINESCAN ( RASTERIMAGESIZE , LINESCANIMAGESIZE , LINESCANPOINTS ,... ROIRASTERINDEXES , [ DRIFT ] ) Given a list of index values of regions of interest ( a cell list ROIRASTERINDEXES ) that were defined within a raster image of size RASTERIMAGESIZE , this function determines the corresponding index values LSINDEXES where those pixels were scanned in the linescan LINESCANPOINTS ( y , x ) with image of size LINESCANIMAGESIZE .","title":"vlt.image.findroiinlinescan"},{"location":"reference/%2Bvlt/%2Bimage/image_samplepoints.m/","text":"vlt.image.image_samplepoints \u00b6 IMAGE_SAMPLEPOINTS - Sample points from an image file [ PTS , IMAGESIZE ] = IMAGE_SAMPLEPOINTS ( IMAGEFILE , N , METHOD ) This function samples N values from the image file in IMAGEFILE . METHOD can be ' random ' or ' sequential '. The image size is returned in IMAGESIZE . Note that IMAGESIZE corresponds to the number of samples [ HEIGHT WIDTH NUMBER_OF_IMAGES ], regardless of whether the samples are singles , triples ( RGB ), quads ( e . g ., CMYK ). The N samples are drawn with replacement ; it is possible the same value is drawn more than once . PTS is an NxDIM matrix of samples from the image . If the image is grayscale ( single channel ), then DIM is 1. If it is RGB , then DIM is 3 , etc . This function accepts additional parameters as name / value pairs: Parameter ( default ) | Description ---------------------------------------------------------------- info ([]) | Optionally , one can pass the output of | imfinfo as info ; it saves time beause | IMAGE_SAMPLEPOINTS doesn ' t need to read it","title":"vlt.image.image_samplepoints"},{"location":"reference/%2Bvlt/%2Bimage/image_samplepoints.m/#vltimageimage_samplepoints","text":"IMAGE_SAMPLEPOINTS - Sample points from an image file [ PTS , IMAGESIZE ] = IMAGE_SAMPLEPOINTS ( IMAGEFILE , N , METHOD ) This function samples N values from the image file in IMAGEFILE . METHOD can be ' random ' or ' sequential '. The image size is returned in IMAGESIZE . Note that IMAGESIZE corresponds to the number of samples [ HEIGHT WIDTH NUMBER_OF_IMAGES ], regardless of whether the samples are singles , triples ( RGB ), quads ( e . g ., CMYK ). The N samples are drawn with replacement ; it is possible the same value is drawn more than once . PTS is an NxDIM matrix of samples from the image . If the image is grayscale ( single channel ), then DIM is 1. If it is RGB , then DIM is 3 , etc . This function accepts additional parameters as name / value pairs: Parameter ( default ) | Description ---------------------------------------------------------------- info ([]) | Optionally , one can pass the output of | imfinfo as info ; it saves time beause | IMAGE_SAMPLEPOINTS doesn ' t need to read it","title":"vlt.image.image_samplepoints"},{"location":"reference/%2Bvlt/%2Bimage/image_samplerange.m/","text":"vlt.image.image_samplerange \u00b6 IMAGE_SAMPLERANGE - return the range of values in an image file [ RANGE , IMSIZE , IMFILEINFO ] = IMAGE_SAMPLERANGE ( IMAGEFILE , ...) Reads in the image in IMAGEFILE and returns the range of sample values . RANGE is an Nx2 vector that contains the range of values ( column 1 is minimum , column 2 is maximum ) for each dimension of the image ( e . g ., 3 for an RGB image , 1 for a gray scale image ). If IMAGEFILE describes an image with multiple frames , all frames are read to find the maximum and minimum values . IMFILEINFO is the information returned from IMFINFO . This function can also be modified by name / value pairs : Parameter ( default value ) | Description ------------------------------------------------------------------ UseRawData ( 1 ) | Find the minimum and maximum from | the raw data of the image . | If this is 0 , then the minimum and maximum | are derived from the format of the data . | ( For example , for uint16 , min is 0 and max is | 2 ^ 15-1 .) imfileinfo ( [] ) | Optionally , one can pass the output | of the Matlab function IMFINFO | if that data has already been read ; | this will save the time of re-reading it See also : IMAGE , IMFINFO , NAMEVALUEPAIR","title":"vlt.image.image_samplerange"},{"location":"reference/%2Bvlt/%2Bimage/image_samplerange.m/#vltimageimage_samplerange","text":"IMAGE_SAMPLERANGE - return the range of values in an image file [ RANGE , IMSIZE , IMFILEINFO ] = IMAGE_SAMPLERANGE ( IMAGEFILE , ...) Reads in the image in IMAGEFILE and returns the range of sample values . RANGE is an Nx2 vector that contains the range of values ( column 1 is minimum , column 2 is maximum ) for each dimension of the image ( e . g ., 3 for an RGB image , 1 for a gray scale image ). If IMAGEFILE describes an image with multiple frames , all frames are read to find the maximum and minimum values . IMFILEINFO is the information returned from IMFINFO . This function can also be modified by name / value pairs : Parameter ( default value ) | Description ------------------------------------------------------------------ UseRawData ( 1 ) | Find the minimum and maximum from | the raw data of the image . | If this is 0 , then the minimum and maximum | are derived from the format of the data . | ( For example , for uint16 , min is 0 and max is | 2 ^ 15-1 .) imfileinfo ( [] ) | Optionally , one can pass the output | of the Matlab function IMFINFO | if that data has already been read ; | this will save the time of re-reading it See also : IMAGE , IMFINFO , NAMEVALUEPAIR","title":"vlt.image.image_samplerange"},{"location":"reference/%2Bvlt/%2Bimage/image_viewer_gui.m/","text":"vlt.image.image_viewer_gui \u00b6 IMAGE_VIEWER_GUI - Manage the view of a multi-frame image in a Matlab GUI IMAGE_VIEWER_GUI Creates and manages an image viewer appropriate for multi-frame image viewing in a Matlab GUI . Features a slider to move between frames and a zoom and pan button . To create a viewer , call IMAGE_VIEWER_GUI ( NAME , 'command' , 'init' ) where NAME is a unique name on your figure ( you can have more than one viewer per figure if you use different names ). You can pass additional name / value pairs that govern the behavior of the GUI . Commands and parameters are not case sensitive . Name IS case sensitive . Parameter ( default value ) | Description --------------------------------------------------------------------------- fig ( gcf ) | Figure number where the viewer is located Units ( 'pixels' ) | The units we will use LowerLeftPoint ([ 0 0 ]) | The lower left point to use in drawing , in units of \"units\" UpperRightPoint ([ 500 500 ]) | The upper right point to use in drawing , in units of \"units\" imagemodifierfunc ( '' ) | A string of a function that can modify the image . It should | return an image . It can operate on 'im' , a variable with the | unmodified image . drawcompletionfunc ( '' ) | A string that is evaluated upon drawing completition . ImageVGUIAxesParams | A structure with modifications to default axes parameters | ( such as position , units , etc ). The 'tag' field cannot be | modified . All other fields of the axes can be modified . ImageVGUIHistAxesParams | A structure with modifications to default histogram axes parameters ( same as above ) ImageVGUISliderParams | Same for frame-selection slider ImageScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to scale each channel of the image . By default , | ImageScaleParams . Min = [ 0 0 0 0 ] and ImageScaleParams . Max = [ 255 255 255 255 ] ImageDisplayScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to which the image should be scaled for display . | Right now these must be ImageDisplayScaleParams . Min = [ 0 0 0 0 ] and | ImageDisplayScaleParams . Max = [ 255 255 255 255 ] One can also query the internal variables by calling IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Vars' ) Or obtain the uicontrol and axes handles by using: IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Handles' )","title":"vlt.image.image_viewer_gui"},{"location":"reference/%2Bvlt/%2Bimage/image_viewer_gui.m/#vltimageimage_viewer_gui","text":"IMAGE_VIEWER_GUI - Manage the view of a multi-frame image in a Matlab GUI IMAGE_VIEWER_GUI Creates and manages an image viewer appropriate for multi-frame image viewing in a Matlab GUI . Features a slider to move between frames and a zoom and pan button . To create a viewer , call IMAGE_VIEWER_GUI ( NAME , 'command' , 'init' ) where NAME is a unique name on your figure ( you can have more than one viewer per figure if you use different names ). You can pass additional name / value pairs that govern the behavior of the GUI . Commands and parameters are not case sensitive . Name IS case sensitive . Parameter ( default value ) | Description --------------------------------------------------------------------------- fig ( gcf ) | Figure number where the viewer is located Units ( 'pixels' ) | The units we will use LowerLeftPoint ([ 0 0 ]) | The lower left point to use in drawing , in units of \"units\" UpperRightPoint ([ 500 500 ]) | The upper right point to use in drawing , in units of \"units\" imagemodifierfunc ( '' ) | A string of a function that can modify the image . It should | return an image . It can operate on 'im' , a variable with the | unmodified image . drawcompletionfunc ( '' ) | A string that is evaluated upon drawing completition . ImageVGUIAxesParams | A structure with modifications to default axes parameters | ( such as position , units , etc ). The 'tag' field cannot be | modified . All other fields of the axes can be modified . ImageVGUIHistAxesParams | A structure with modifications to default histogram axes parameters ( same as above ) ImageVGUISliderParams | Same for frame-selection slider ImageScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to scale each channel of the image . By default , | ImageScaleParams . Min = [ 0 0 0 0 ] and ImageScaleParams . Max = [ 255 255 255 255 ] ImageDisplayScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to which the image should be scaled for display . | Right now these must be ImageDisplayScaleParams . Min = [ 0 0 0 0 ] and | ImageDisplayScaleParams . Max = [ 255 255 255 255 ] One can also query the internal variables by calling IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Vars' ) Or obtain the uicontrol and axes handles by using: IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Handles' )","title":"vlt.image.image_viewer_gui"},{"location":"reference/%2Bvlt/%2Bimage/imshift.m/","text":"vlt.image.imshift \u00b6 IMSHIFT - Shift an image , maintaining image size IM_OUT = IMSHIFT ( IM , SHIFT ) Shifts a 2 - dimensional image IM by SHIFT pixels SHIFT should be a vector with elements [ SHIFT_ROWS SHIFT_COLUMNS ] SHIFT_COLUMNS is the number of pixels to shift the pixels to the right ( can be negative to shift left ); SHIFT_ROWS is the number of pixels to shift down ( can be negative to shift up ). Note that with images , the 'X' axis typically corresponds to columns , and the 'Y' axis typically corresponds to rows , so consider the order of the shift parameters for your application . One can pass additional arguments as name / value pairs : Name ( default value ) : | Description : --------------------------------------------------------- ' PadValue ' ( 0 ) | Value for pixels used to pad the | edges of the shifted image so as | to maintain the original image size .","title":"vlt.image.imshift"},{"location":"reference/%2Bvlt/%2Bimage/imshift.m/#vltimageimshift","text":"IMSHIFT - Shift an image , maintaining image size IM_OUT = IMSHIFT ( IM , SHIFT ) Shifts a 2 - dimensional image IM by SHIFT pixels SHIFT should be a vector with elements [ SHIFT_ROWS SHIFT_COLUMNS ] SHIFT_COLUMNS is the number of pixels to shift the pixels to the right ( can be negative to shift left ); SHIFT_ROWS is the number of pixels to shift down ( can be negative to shift up ). Note that with images , the 'X' axis typically corresponds to columns , and the 'Y' axis typically corresponds to rows , so consider the order of the shift parameters for your application . One can pass additional arguments as name / value pairs : Name ( default value ) : | Description : --------------------------------------------------------- ' PadValue ' ( 0 ) | Value for pixels used to pad the | edges of the shifted image so as | to maintain the original image size .","title":"vlt.image.imshift"},{"location":"reference/%2Bvlt/%2Bimage/inside_ellipse.m/","text":"vlt.image.inside_ellipse \u00b6 INSIDE_ELLIPSE - Return 1 when a point is inside of an ellipse Z = INSIDE_ELLIPSE ( X , Y , X_CTR , Y_CTR , A , B , THETA ) Returns 1 when the point X ( i ) , Y ( i ) is inside the ellipse with center at X_CTR , Y_CTR , with X axis vertex A and Y axis vertex B , rotated at an angle THETA ( in radians ) , where angles increase according to a compass reference See also : INPOLYGON , CARTESIAN2COMPASS , COMPASS2CARTESIAN , DEG2RAD","title":"vlt.image.inside_ellipse"},{"location":"reference/%2Bvlt/%2Bimage/inside_ellipse.m/#vltimageinside_ellipse","text":"INSIDE_ELLIPSE - Return 1 when a point is inside of an ellipse Z = INSIDE_ELLIPSE ( X , Y , X_CTR , Y_CTR , A , B , THETA ) Returns 1 when the point X ( i ) , Y ( i ) is inside the ellipse with center at X_CTR , Y_CTR , with X axis vertex A and Y axis vertex B , rotated at an angle THETA ( in radians ) , where angles increase according to a compass reference See also : INPOLYGON , CARTESIAN2COMPASS , COMPASS2CARTESIAN , DEG2RAD","title":"vlt.image.inside_ellipse"},{"location":"reference/%2Bvlt/%2Bimage/inside_rect.m/","text":"vlt.image.inside_rect \u00b6 INSIDE_RECT - is a point ( or set of points ) inside a rectangle ? B = INSIDE_RECT ( RECT , POINT ) Given a RECT = [ TOP LEFT BOTTOM RIGHT ], return a 1 if POINT = [ PX PY ] is inside the rectangle and 0 otherwise . POINT can be a single row vector or a matrix of row vectors Nx2 . If POINT is a row vector , then B will be a vector with 0 / 1 for each entry in POINT .","title":"vlt.image.inside_rect"},{"location":"reference/%2Bvlt/%2Bimage/inside_rect.m/#vltimageinside_rect","text":"INSIDE_RECT - is a point ( or set of points ) inside a rectangle ? B = INSIDE_RECT ( RECT , POINT ) Given a RECT = [ TOP LEFT BOTTOM RIGHT ], return a 1 if POINT = [ PX PY ] is inside the rectangle and 0 otherwise . POINT can be a single row vector or a matrix of row vectors Nx2 . If POINT is a row vector , then B will be a vector with 0 / 1 for each entry in POINT .","title":"vlt.image.inside_rect"},{"location":"reference/%2Bvlt/%2Bimage/invertcolors.m/","text":"vlt.image.invertcolors \u00b6 Invert colors in an RGB image ** UNTESTED ** RGB_OUT = INVERTCOLORS ( RGB_IN ) Inverts an RGB image RGB_IN so that black becomes white and white becomes black . The output is returned in RGB_OUT . RGB_OUT = INVERTCOLORS ( RGB_IN , C1 , C2 ) One can specify the axis of reversal by providing 2 colors and the midpoint . For example , with the default conversion , C1 = [ 0 0 0 ] and C2 = [ 1 1 1 ]. ** COMPLETELY UNTESTED ; TEST AND FIX BEFORE USE** ** BUG , fails color [ 0 0 1 ] start development there **","title":"vlt.image.invertcolors"},{"location":"reference/%2Bvlt/%2Bimage/invertcolors.m/#vltimageinvertcolors","text":"Invert colors in an RGB image ** UNTESTED ** RGB_OUT = INVERTCOLORS ( RGB_IN ) Inverts an RGB image RGB_IN so that black becomes white and white becomes black . The output is returned in RGB_OUT . RGB_OUT = INVERTCOLORS ( RGB_IN , C1 , C2 ) One can specify the axis of reversal by providing 2 colors and the midpoint . For example , with the default conversion , C1 = [ 0 0 0 ] and C2 = [ 1 1 1 ]. ** COMPLETELY UNTESTED ; TEST AND FIX BEFORE USE** ** BUG , fails color [ 0 0 1 ] start development there **","title":"vlt.image.invertcolors"},{"location":"reference/%2Bvlt/%2Bimage/linescan2rasterindex.m/","text":"vlt.image.linescan2rasterindex \u00b6 LINESCAN2RASTERINDEX - Determine index values within a raster that correspond to points visited by a linescan INDS = LINESCAN2RASTERINDEX ( IMSIZE , LINESCANPOINTS ) Calculates the index values within a raster image of size IMSIZE that correspond to points on the linescan LINESCANPOINTS . LINESCANPOINTS should be an N x 2 vector of points in units of pixels ; column 1 corresponds to Y pixels and column 2 corresponds to X pixels . INDS is a list of index values such that RASTERIMAGE ( INDS ( n )) corresponds to the nth pixel in the linescan . If the linescan is \"out of bounds\" at point i , then then INDS ( i ) is NaN .","title":"vlt.image.linescan2rasterindex"},{"location":"reference/%2Bvlt/%2Bimage/linescan2rasterindex.m/#vltimagelinescan2rasterindex","text":"LINESCAN2RASTERINDEX - Determine index values within a raster that correspond to points visited by a linescan INDS = LINESCAN2RASTERINDEX ( IMSIZE , LINESCANPOINTS ) Calculates the index values within a raster image of size IMSIZE that correspond to points on the linescan LINESCANPOINTS . LINESCANPOINTS should be an N x 2 vector of points in units of pixels ; column 1 corresponds to Y pixels and column 2 corresponds to X pixels . INDS is a list of index values such that RASTERIMAGE ( INDS ( n )) corresponds to the nth pixel in the linescan . If the linescan is \"out of bounds\" at point i , then then INDS ( i ) is NaN .","title":"vlt.image.linescan2rasterindex"},{"location":"reference/%2Bvlt/%2Bimage/medfilt_phase.m/","text":"vlt.image.medfilt_phase \u00b6 MEDFILT_PHASE - perform median filter for phase of complex image MFI = MEDFILT_PHASE ( IMG , NX , NY ) Given a complex image IMG , this function performs a median filter with width NX and NY that returns , for each pixel , the median phase . The median phase is computed with CIRC_MEDIAN from the Circular Statistics Toolbox . This function is not nearly as fast a traditional median filter .","title":"vlt.image.medfilt_phase"},{"location":"reference/%2Bvlt/%2Bimage/medfilt_phase.m/#vltimagemedfilt_phase","text":"MEDFILT_PHASE - perform median filter for phase of complex image MFI = MEDFILT_PHASE ( IMG , NX , NY ) Given a complex image IMG , this function performs a median filter with width NX and NY that returns , for each pixel , the median phase . The median phase is computed with CIRC_MEDIAN from the Circular Statistics Toolbox . This function is not nearly as fast a traditional median filter .","title":"vlt.image.medfilt_phase"},{"location":"reference/%2Bvlt/%2Bimage/mergeluts.m/","text":"vlt.image.mergeluts \u00b6 MERGELUTS Merge color look up tables NEWLUT = MERGELUTS ( ORIGINAL_LUT , LUT_TO_BE_MERGED ) ORIGINAL_LUT will be overwritten with the first entries of LUT_TO_BE_MERGED . In the event that ORIGINAL_LUT is larger than LUT_TO_BE_MERGED , either in depth or number of elements , then ORIGINAL_LUT 's values will be preserved. In this way, NEWLUT will have size identical to ORIGINAL_LUT.","title":"vlt.image.mergeluts"},{"location":"reference/%2Bvlt/%2Bimage/mergeluts.m/#vltimagemergeluts","text":"MERGELUTS Merge color look up tables NEWLUT = MERGELUTS ( ORIGINAL_LUT , LUT_TO_BE_MERGED ) ORIGINAL_LUT will be overwritten with the first entries of LUT_TO_BE_MERGED . In the event that ORIGINAL_LUT is larger than LUT_TO_BE_MERGED , either in depth or number of elements , then ORIGINAL_LUT 's values will be preserved. In this way, NEWLUT will have size identical to ORIGINAL_LUT.","title":"vlt.image.mergeluts"},{"location":"reference/%2Bvlt/%2Bimage/neighborindexes.m/","text":"vlt.image.neighborindexes \u00b6 NEIGHBORINDEXES - identify pixel index values that border a pixel INDEXES = NEIGHBORINDEXES ( IMSIZE , INDEX , [ CONN ] ) Returns the index values of all pixels that neighbor a pixel specified by the index value INDEX in an image of size IMSIZE . CONN is the connectivity to be used . If CONN is not specified and if IMSIZE is 2 - dimensional , then CONN is 8 , indicating all horizontal , vertical , and oblique neighbors . If CONN is not specified and if IMSIZE is 3 - dimensional , then CONN is 26 , indicating all horizontal , vertical , above , below , and all obliques are considered neighbors . Currently , other modes for CONN are not supported ( but feel free to add any of these and send a pull request ). Note that INDEXES may have fewer elements than 26 or 8 if the pixel described by INDEX is on a border . Example : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 3 , 2 )) A ( sub2ind ( size ( A ), 3 , 3 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 2 : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 1 , 2 )) A ( sub2ind ( size ( A ), 3 , 1 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 3 : A = zeros ( 5 , 5 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 2 , 1 )) A ( sub2ind ( size ( A ), 2 , 1 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed","title":"vlt.image.neighborindexes"},{"location":"reference/%2Bvlt/%2Bimage/neighborindexes.m/#vltimageneighborindexes","text":"NEIGHBORINDEXES - identify pixel index values that border a pixel INDEXES = NEIGHBORINDEXES ( IMSIZE , INDEX , [ CONN ] ) Returns the index values of all pixels that neighbor a pixel specified by the index value INDEX in an image of size IMSIZE . CONN is the connectivity to be used . If CONN is not specified and if IMSIZE is 2 - dimensional , then CONN is 8 , indicating all horizontal , vertical , and oblique neighbors . If CONN is not specified and if IMSIZE is 3 - dimensional , then CONN is 26 , indicating all horizontal , vertical , above , below , and all obliques are considered neighbors . Currently , other modes for CONN are not supported ( but feel free to add any of these and send a pull request ). Note that INDEXES may have fewer elements than 26 or 8 if the pixel described by INDEX is on a border . Example : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 3 , 2 )) A ( sub2ind ( size ( A ), 3 , 3 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 2 : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 1 , 2 )) A ( sub2ind ( size ( A ), 3 , 1 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 3 : A = zeros ( 5 , 5 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 2 , 1 )) A ( sub2ind ( size ( A ), 2 , 1 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed","title":"vlt.image.neighborindexes"},{"location":"reference/%2Bvlt/%2Bimage/padimage.m/","text":"vlt.image.padimage \u00b6 PADIMAGE - Add a border to an image IM_OUT = PADIMAGE ( IM_IN , N , PAD ) Adds a border to an image IM_IN . The border pixels have value PAD . IM_IN can be either a 2 - D set of points or can be a 3 - D set of points , in which case it is assumed that IM_IN is an RGB or CMYK image . PAD should have dimension 1 in the case of a 2 D image , or 3 or 4 dimensions in case of a 3 - dimensional image . N can be a single integer if the number of pixels to add to all borders is the same in X and Y . Or , N can be a vector [ Nx1 Nx2 Ny1 Ny2 ] that indicates that Nx1 points of value PAD should be added before the first dimension of IM_IN , and that Nx2 points of value PAD should be added after the first dimension , etc . The result is returned in IM_OUT .","title":"vlt.image.padimage"},{"location":"reference/%2Bvlt/%2Bimage/padimage.m/#vltimagepadimage","text":"PADIMAGE - Add a border to an image IM_OUT = PADIMAGE ( IM_IN , N , PAD ) Adds a border to an image IM_IN . The border pixels have value PAD . IM_IN can be either a 2 - D set of points or can be a 3 - D set of points , in which case it is assumed that IM_IN is an RGB or CMYK image . PAD should have dimension 1 in the case of a 2 D image , or 3 or 4 dimensions in case of a 3 - dimensional image . N can be a single integer if the number of pixels to add to all borders is the same in X and Y . Or , N can be a vector [ Nx1 Nx2 Ny1 Ny2 ] that indicates that Nx1 points of value PAD should be added before the first dimension of IM_IN , and that Nx2 points of value PAD should be added after the first dimension , etc . The result is returned in IM_OUT .","title":"vlt.image.padimage"},{"location":"reference/%2Bvlt/%2Bimage/plotrasterroionlinescan.m/","text":"vlt.image.plotrasterroionlinescan \u00b6 PLOTRASTERROIONLINESCAN - Plot an ROI defined in an raster image on a linescan image [ H ] = PLOTRASTERROIONLINESCAN ( LINESCANIMAGE , RASTERIMSIZE , ROIINDS ,... LINESCANPOINTS , [ DR ] ,...); Inputs : LINESCANIMAGE - An NxM image of a linescan recording , where N is the number of lines and M is the number of data points per line RASTERIMSIZE - Raster image size NxM ROIINDS - Index values corresponding to the ROI LINESCANPOINTS - the points of the linescan on the raster image DR - any drift that might have occurred over the recording Extra arguments can be given as name / value pairs : CONTOURS | Plot contours around ROIs ( default 1 ) INDEXES | Fill index values of ROI ( default 0 )","title":"vlt.image.plotrasterroionlinescan"},{"location":"reference/%2Bvlt/%2Bimage/plotrasterroionlinescan.m/#vltimageplotrasterroionlinescan","text":"PLOTRASTERROIONLINESCAN - Plot an ROI defined in an raster image on a linescan image [ H ] = PLOTRASTERROIONLINESCAN ( LINESCANIMAGE , RASTERIMSIZE , ROIINDS ,... LINESCANPOINTS , [ DR ] ,...); Inputs : LINESCANIMAGE - An NxM image of a linescan recording , where N is the number of lines and M is the number of data points per line RASTERIMSIZE - Raster image size NxM ROIINDS - Index values corresponding to the ROI LINESCANPOINTS - the points of the linescan on the raster image DR - any drift that might have occurred over the recording Extra arguments can be given as name / value pairs : CONTOURS | Plot contours around ROIs ( default 1 ) INDEXES | Fill index values of ROI ( default 0 )","title":"vlt.image.plotrasterroionlinescan"},{"location":"reference/%2Bvlt/%2Bimage/polyflare.m/","text":"vlt.image.polyflare \u00b6 POLYFLARE - Flare out a polygon by N units PNEW = POLYFLARE ( P , N ) This function enlarges a polygon by a fixed unit on all vertices . At each point , the polygon is stretched in both X and Y directions by N . The directions that causes the area to increase are chosen for the new polygon . Example : x = [ 63 186 54 190 63 ] ' ; y = [ 60 60 209 204 60 ] ' ; figure ; plot ( x , y , 'o' ); polynew = polyflare ([ x y ], 0.5 ); hold on ; plot ( polynew ( : , 1 ), polynew ( : , 2 ), ' go ' ); See also : INSIDE , ROIPOLY , POLYAREA","title":"vlt.image.polyflare"},{"location":"reference/%2Bvlt/%2Bimage/polyflare.m/#vltimagepolyflare","text":"POLYFLARE - Flare out a polygon by N units PNEW = POLYFLARE ( P , N ) This function enlarges a polygon by a fixed unit on all vertices . At each point , the polygon is stretched in both X and Y directions by N . The directions that causes the area to increase are chosen for the new polygon . Example : x = [ 63 186 54 190 63 ] ' ; y = [ 60 60 209 204 60 ] ' ; figure ; plot ( x , y , 'o' ); polynew = polyflare ([ x y ], 0.5 ); hold on ; plot ( polynew ( : , 1 ), polynew ( : , 2 ), ' go ' ); See also : INSIDE , ROIPOLY , POLYAREA","title":"vlt.image.polyflare"},{"location":"reference/%2Bvlt/%2Bimage/prevailing_orientation.m/","text":"vlt.image.prevailing_orientation \u00b6 PREVAILING_ORIENTATION - determine the prevailing orientation ( strongest oriented sinwave signal ) of an image [ THETA , IM_OUT ] = PREVAILING_ORIENTATION ( IM ) Performs a 2 D fourier transform on the image IM and identifies the prevailing image orientation by finding the peak non - DC sinusoidal component . THETA is the orientation in radians . This function will likely work poorly on data that is not a simple sinusoid or that lacks a dominant sinusoid . If 2 output arguments are specified , a rotated version of the image is returned using IMROTATE and bilinear interpolation . Developer 's note: this function takes the peak in the 2-d fourier space as evidence of the phase . This results in a small error for some low spatial frequencies . The function could be improved . See also : FFT2 , IMROTATE Example : [ x , y ] = meshgrid ([ - 100 : 100 ],[ - 100 : 100 ]); im = sin ( 0.3 * x + 0.1 * y ); [ theta , im_out ] = vlt . image . prevailing_orientation ( im ); figure ; subplot ( 2 , 2 , 1 ); imagesc ( im ); subplot ( 2 , 2 , 2 ); imagesc ( im_out );","title":"vlt.image.prevailing_orientation"},{"location":"reference/%2Bvlt/%2Bimage/prevailing_orientation.m/#vltimageprevailing_orientation","text":"PREVAILING_ORIENTATION - determine the prevailing orientation ( strongest oriented sinwave signal ) of an image [ THETA , IM_OUT ] = PREVAILING_ORIENTATION ( IM ) Performs a 2 D fourier transform on the image IM and identifies the prevailing image orientation by finding the peak non - DC sinusoidal component . THETA is the orientation in radians . This function will likely work poorly on data that is not a simple sinusoid or that lacks a dominant sinusoid . If 2 output arguments are specified , a rotated version of the image is returned using IMROTATE and bilinear interpolation . Developer 's note: this function takes the peak in the 2-d fourier space as evidence of the phase . This results in a small error for some low spatial frequencies . The function could be improved . See also : FFT2 , IMROTATE Example : [ x , y ] = meshgrid ([ - 100 : 100 ],[ - 100 : 100 ]); im = sin ( 0.3 * x + 0.1 * y ); [ theta , im_out ] = vlt . image . prevailing_orientation ( im ); figure ; subplot ( 2 , 2 , 1 ); imagesc ( im ); subplot ( 2 , 2 , 2 ); imagesc ( im_out );","title":"vlt.image.prevailing_orientation"},{"location":"reference/%2Bvlt/%2Bimage/regionprops_circularity.m/","text":"vlt.image.regionprops_circularity \u00b6 REGIONPROPS_CIRCULARITY - Calculates circularity of regions of interests NEWSTATS = REGIONPROPS_CIRCULARITY ( STATS ) Calculates circularity for regions of interest that have been returned by the IMAGES toolbox routines BWLABEL , BWBOUNDARIES , etc . STATS must be a structure of stats returned by the function REGIONPROPS that includes that parameters 'Area' and 'Perimeter' ( see 'help regionprops' ) . NEWSTATS is a structure that has all of the fields of STATS plus the additional field 'Circularity' . Circularity is defined as 4 * pi ( area / perimeter ^ 2 ) Inspired from a plugin for ImageJ contributed by Wayne Rasband","title":"vlt.image.regionprops_circularity"},{"location":"reference/%2Bvlt/%2Bimage/regionprops_circularity.m/#vltimageregionprops_circularity","text":"REGIONPROPS_CIRCULARITY - Calculates circularity of regions of interests NEWSTATS = REGIONPROPS_CIRCULARITY ( STATS ) Calculates circularity for regions of interest that have been returned by the IMAGES toolbox routines BWLABEL , BWBOUNDARIES , etc . STATS must be a structure of stats returned by the function REGIONPROPS that includes that parameters 'Area' and 'Perimeter' ( see 'help regionprops' ) . NEWSTATS is a structure that has all of the fields of STATS plus the additional field 'Circularity' . Circularity is defined as 4 * pi ( area / perimeter ^ 2 ) Inspired from a plugin for ImageJ contributed by Wayne Rasband","title":"vlt.image.regionprops_circularity"},{"location":"reference/%2Bvlt/%2Bimage/saturation_image.m/","text":"vlt.image.saturation_image \u00b6 SATURATION_IMAGE - Scale an image to allow a saturation plot IM_OUT = SATURATION_IMAGE ( IM_IN , ...) Scales the image to be in the range 2 ... ColorMapSize-1 so that color map entries 1 and ColorMapSize can be used for saturation values . If HighSaturation is Inf , then , at the high edge , the image is scaled from its empirical max to ColorMapSize-1 . Otherwise , the image is scaled from the value HighSaturation onto ColorMapSize-1 . If LowSaturation is -Inf , then the image is scaled from its empirical min to 2 . Otherwise , the image is scaled from LowSaturation to 2 . Example : myData = 40 * membrane ( 1 , 25 ); % MathWorks logo myImage = saturation_image ( myData , 'LowSaturation' , 0 , 'HighSaturation' , 20 ); myColorMap = [ 0 0 0 ; jet ( 254 ); 1 1 1 ] ; figure ; image ( myImage ); colormap ( myColorMap ); This function also takes name / value pairs that modifies its behavior : Parameter ( default ) | Description --------------------------------------------------------------------- ColorMapSize ( 256 ) | Size of the colormap ; also , value used for the high | saturation index value HighSaturation ( Inf ) | Value which , if exceeded , is set to be saturating | on the high side LowSaturation ( -Inf ) | Value , which , if not achieved , is set to be | saturating on the low side . LowSaturationValue ( 1 )| Value used for the low saturation value NaNSaturation ( 1 ) | Should NaN entries be set to Low ( -1 ), High ( 1 ), or | be left alone ( 0 ) ?","title":"vlt.image.saturation_image"},{"location":"reference/%2Bvlt/%2Bimage/saturation_image.m/#vltimagesaturation_image","text":"SATURATION_IMAGE - Scale an image to allow a saturation plot IM_OUT = SATURATION_IMAGE ( IM_IN , ...) Scales the image to be in the range 2 ... ColorMapSize-1 so that color map entries 1 and ColorMapSize can be used for saturation values . If HighSaturation is Inf , then , at the high edge , the image is scaled from its empirical max to ColorMapSize-1 . Otherwise , the image is scaled from the value HighSaturation onto ColorMapSize-1 . If LowSaturation is -Inf , then the image is scaled from its empirical min to 2 . Otherwise , the image is scaled from LowSaturation to 2 . Example : myData = 40 * membrane ( 1 , 25 ); % MathWorks logo myImage = saturation_image ( myData , 'LowSaturation' , 0 , 'HighSaturation' , 20 ); myColorMap = [ 0 0 0 ; jet ( 254 ); 1 1 1 ] ; figure ; image ( myImage ); colormap ( myColorMap ); This function also takes name / value pairs that modifies its behavior : Parameter ( default ) | Description --------------------------------------------------------------------- ColorMapSize ( 256 ) | Size of the colormap ; also , value used for the high | saturation index value HighSaturation ( Inf ) | Value which , if exceeded , is set to be saturating | on the high side LowSaturation ( -Inf ) | Value , which , if not achieved , is set to be | saturating on the low side . LowSaturationValue ( 1 )| Value used for the low saturation value NaNSaturation ( 1 ) | Should NaN entries be set to Low ( -1 ), High ( 1 ), or | be left alone ( 0 ) ?","title":"vlt.image.saturation_image"},{"location":"reference/%2Bvlt/%2Bimage/scramblepixels_movie.m/","text":"vlt.image.scramblepixels_movie \u00b6 SCRAMBLEPIXELS_MOVIE - Scramble the pixels within a movie INDEXES = SCRAMBLEPIXELS_MOVIE ( INFILE , OUTFILE ) Scramble the pixels within a movie to illustrate the power of the mammalian visual system The INFILE is opened with the Matlab VIDEOREADER . A random permutation of the pixel indexes is determined and returned in INDEXES . The pixels in INFILE are shuffled by this permutation to create a new video OUTFILE .","title":"vlt.image.scramblepixels_movie"},{"location":"reference/%2Bvlt/%2Bimage/scramblepixels_movie.m/#vltimagescramblepixels_movie","text":"SCRAMBLEPIXELS_MOVIE - Scramble the pixels within a movie INDEXES = SCRAMBLEPIXELS_MOVIE ( INFILE , OUTFILE ) Scramble the pixels within a movie to illustrate the power of the mammalian visual system The INFILE is opened with the Matlab VIDEOREADER . A random permutation of the pixel indexes is determined and returned in INDEXES . The pixels in INFILE are shuffled by this permutation to create a new video OUTFILE .","title":"vlt.image.scramblepixels_movie"},{"location":"reference/%2Bvlt/%2Bimage/selectsubimage.m/","text":"vlt.image.selectsubimage \u00b6 SELECTSUBIMAGE - select a rectangle from an image , padding out - of - bounds pixels [ IM_SUB ] = SELECTSUBIMAGE ( IM , TOP , LEFT , BOTTOM , RIGHT , [ PAD ] ) Inputs : IM a YxX image TOP the top pixel location in Y direction to select . The first index in the image starts at 1. TOP can be negative , and out - of - bounds values will be filled with PAD . LEFT the left pixel location to select in X . The first pixel is 1. LEFT can be less than 1 , and out - of - bounds values will be filled with PAD . BOTTOM the bottom pixel location in Y . Can exceed the number of Y pixels , and out - of - bounds values will be filled with PAD . RIGHT the right - ost pixel to select in X . Can exceed the number of X pixels , and out - of - bounds values will be filled with PAD . PAD the padding value ; if not provided , it will be NaN OUTPUT : IM_SUB , the selected portion of the image .","title":"vlt.image.selectsubimage"},{"location":"reference/%2Bvlt/%2Bimage/selectsubimage.m/#vltimageselectsubimage","text":"SELECTSUBIMAGE - select a rectangle from an image , padding out - of - bounds pixels [ IM_SUB ] = SELECTSUBIMAGE ( IM , TOP , LEFT , BOTTOM , RIGHT , [ PAD ] ) Inputs : IM a YxX image TOP the top pixel location in Y direction to select . The first index in the image starts at 1. TOP can be negative , and out - of - bounds values will be filled with PAD . LEFT the left pixel location to select in X . The first pixel is 1. LEFT can be less than 1 , and out - of - bounds values will be filled with PAD . BOTTOM the bottom pixel location in Y . Can exceed the number of Y pixels , and out - of - bounds values will be filled with PAD . RIGHT the right - ost pixel to select in X . Can exceed the number of X pixels , and out - of - bounds values will be filled with PAD . PAD the padding value ; if not provided , it will be NaN OUTPUT : IM_SUB , the selected portion of the image .","title":"vlt.image.selectsubimage"},{"location":"reference/%2Bvlt/%2Bimage/stack2tile.m/","text":"vlt.image.stack2tile \u00b6 vlt . image . stack2tile - write a 3 D stack of images to a 2 D tiled image set [ IM_OUT , STACK_COORDS_IN_TILE ] = STACK2TILE ( IM_IN , M , N ) Takes a stack of images of size XxYxZ and creates a set of tiled images . The Z planes are distributed from left to right in the tiled image and then top to bottom , in an M rows x N columns arrangement . If there are more Z planes than M * N , then additional tiles are made . The tiles are returned as a cell array of 2 D matrixes in IM_OUT . Note that the tle arrangement order is the same as the Matlab SUBPLOT command . If the stack does not exactly cover the last M x N tiled image , then that part of the image is filled with zeros . STACK_COORDS_IN_TILE is a matrix of row vectors . Each row j contains the TILE_NUMBER , X_TOP , X_BOTTOM , Y_LEFT , Y_RIGHT coordinates of the stack in the tile . Example : IM_IN = zeros ( 3 , 4 ); IM_IN (:,:, 2 ) = 64 * ones ( 3 , 4 ); IM_IN (:,:, 3 ) = 128 * ones ( 3 , 4 ); IM_IN (:,:, 4 ) = 255 * ones ( 3 , 4 ); IM_OUT = vlt . image . stack2tile ( IM_IN , 1 , 4 ); % compare with 2,2 % creates a 1x4 tile of the images % compare with 2,2 figure ; image ( IM_OUT { 1 }); colormap ( gray ( 256 ));","title":"vlt.image.stack2tile"},{"location":"reference/%2Bvlt/%2Bimage/stack2tile.m/#vltimagestack2tile","text":"vlt . image . stack2tile - write a 3 D stack of images to a 2 D tiled image set [ IM_OUT , STACK_COORDS_IN_TILE ] = STACK2TILE ( IM_IN , M , N ) Takes a stack of images of size XxYxZ and creates a set of tiled images . The Z planes are distributed from left to right in the tiled image and then top to bottom , in an M rows x N columns arrangement . If there are more Z planes than M * N , then additional tiles are made . The tiles are returned as a cell array of 2 D matrixes in IM_OUT . Note that the tle arrangement order is the same as the Matlab SUBPLOT command . If the stack does not exactly cover the last M x N tiled image , then that part of the image is filled with zeros . STACK_COORDS_IN_TILE is a matrix of row vectors . Each row j contains the TILE_NUMBER , X_TOP , X_BOTTOM , Y_LEFT , Y_RIGHT coordinates of the stack in the tile . Example : IM_IN = zeros ( 3 , 4 ); IM_IN (:,:, 2 ) = 64 * ones ( 3 , 4 ); IM_IN (:,:, 3 ) = 128 * ones ( 3 , 4 ); IM_IN (:,:, 4 ) = 255 * ones ( 3 , 4 ); IM_OUT = vlt . image . stack2tile ( IM_IN , 1 , 4 ); % compare with 2,2 % creates a 1x4 tile of the images % compare with 2,2 figure ; image ( IM_OUT { 1 }); colormap ( gray ( 256 ));","title":"vlt.image.stack2tile"},{"location":"reference/%2Bvlt/%2Bimage/tiff16bit28bit.m/","text":"vlt.image.tiff16bit28bit \u00b6 TIFF16BIT28BIT Convert 16 bit TIFF to 8 - bit [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME ) or [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME , WRITEIT ) Opens the TIFF file with name FILENAME . The file is assumed to be grayscale . The original image is returned in IMG1 . The image is then scaled between 0 and 255 and returned as IMG2 . If 'WRITEIT' is provided , then the image is saved as FILENAME_8bit . TIFF . If the file is not a grayscale image then an error is generated .","title":"vlt.image.tiff16bit28bit"},{"location":"reference/%2Bvlt/%2Bimage/tiff16bit28bit.m/#vltimagetiff16bit28bit","text":"TIFF16BIT28BIT Convert 16 bit TIFF to 8 - bit [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME ) or [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME , WRITEIT ) Opens the TIFF file with name FILENAME . The file is assumed to be grayscale . The original image is returned in IMG1 . The image is then scaled between 0 and 255 and returned as IMG2 . If 'WRITEIT' is provided , then the image is saved as FILENAME_8bit . TIFF . If the file is not a grayscale image then an error is generated .","title":"vlt.image.tiff16bit28bit"},{"location":"reference/%2Bvlt/%2Bimage/writetif.m/","text":"vlt.image.writetif \u00b6 WRITETIF - write a TIF file after scaling and converting to integer WRITETIF ( A , FILENAME , CMAP , SCALEFROM , SCALETO , BIT ) Write an 8 - bit or 16 - bit tiff of the image A to FILENAME , using colormap CMAP . The image is scaled ( from a min of SCALEFROM ( 1 ) and a max of SCALEFROM ( 2 ) to a new min of SCALETO ( 1 ) and a new max of SCALETO ( 2 )) . If SCALEFROM is empty , it is assumed to be the min and max of the data of A . If SCALETO is empty , then the range is [ 0 2 ^ ( BIT ) - 1 ] FILENAME should end in '.tif' or '.tiff' . BIT should be 8 or 16 , depending upon whether 8 - or 16 - bit output is desired .","title":"vlt.image.writetif"},{"location":"reference/%2Bvlt/%2Bimage/writetif.m/#vltimagewritetif","text":"WRITETIF - write a TIF file after scaling and converting to integer WRITETIF ( A , FILENAME , CMAP , SCALEFROM , SCALETO , BIT ) Write an 8 - bit or 16 - bit tiff of the image A to FILENAME , using colormap CMAP . The image is scaled ( from a min of SCALEFROM ( 1 ) and a max of SCALEFROM ( 2 ) to a new min of SCALETO ( 1 ) and a new max of SCALETO ( 2 )) . If SCALEFROM is empty , it is assumed to be the min and max of the data of A . If SCALETO is empty , then the range is [ 0 2 ^ ( BIT ) - 1 ] FILENAME should end in '.tif' or '.tiff' . BIT should be 8 or 16 , depending upon whether 8 - or 16 - bit output is desired .","title":"vlt.image.writetif"},{"location":"reference/%2Bvlt/%2Bimage/xcorr2dlag.m/","text":"vlt.image.xcorr2dlag \u00b6 XCORR2DLAG - 2 - d cross - correlation computed at specified lags XC = XCORR2DLAG ( W1 , W2 , XLAGS , YLAGS ) Computes cross - correlation of two - dimensional matricies W1 and W2 at the specified lags in x ( XLAGS ) and in y ( YLAGS ) . On most platforms this function runs a MEX file written for speed and therefore there is no error checking to make sure W1 and W2 are the same size and that XLAGS and YLAGS are in bounds . XC is a matrix LENGTH ( YLAGS ) xLENGTH ( XLAGS ) .","title":"vlt.image.xcorr2dlag"},{"location":"reference/%2Bvlt/%2Bimage/xcorr2dlag.m/#vltimagexcorr2dlag","text":"XCORR2DLAG - 2 - d cross - correlation computed at specified lags XC = XCORR2DLAG ( W1 , W2 , XLAGS , YLAGS ) Computes cross - correlation of two - dimensional matricies W1 and W2 at the specified lags in x ( XLAGS ) and in y ( YLAGS ) . On most platforms this function runs a MEX file written for speed and therefore there is no error checking to make sure W1 and W2 are the same size and that XLAGS and YLAGS are in bounds . XC is a matrix LENGTH ( YLAGS ) xLENGTH ( XLAGS ) .","title":"vlt.image.xcorr2dlag"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d2dprojection.m/","text":"vlt.image.roi.ROI_3d2dprojection \u00b6 ROI_3D2DPROJECTION - Project a 3 D ROI onto a 2 D projection [ INDEXES2D , PERIMETER2D ] = ROI3D2DPROJECTION ( INDEXES3D , ... IMAGESIZE , ZDIM ) Identifies the 2 D projection of a 3 - dimensional ROI with index values in 3 D space called INDEXES3D . The INDEXES3D describe the values within a 3 D image of size IMAGESIZE = [ NX NY NZ ] . The projection is made onto the Z dimension ZDIM , which can vary from 1 to NZ . PERIMETER2D is a list of perimeter values around all pieces of the 3 d ROI in the 2 d representation . It is a a cell list because the object can exist in multiple distinct pieces within the 2 d view .","title":"vlt.image.roi.ROI_3d2dprojection"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d2dprojection.m/#vltimageroiroi_3d2dprojection","text":"ROI_3D2DPROJECTION - Project a 3 D ROI onto a 2 D projection [ INDEXES2D , PERIMETER2D ] = ROI3D2DPROJECTION ( INDEXES3D , ... IMAGESIZE , ZDIM ) Identifies the 2 D projection of a 3 - dimensional ROI with index values in 3 D space called INDEXES3D . The INDEXES3D describe the values within a 3 D image of size IMAGESIZE = [ NX NY NZ ] . The projection is made onto the Z dimension ZDIM , which can vary from 1 to NZ . PERIMETER2D is a list of perimeter values around all pieces of the 3 d ROI in the 2 d representation . It is a a cell list because the object can exist in multiple distinct pieces within the 2 d view .","title":"vlt.image.roi.ROI_3d2dprojection"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_2dsummary.m/","text":"vlt.image.roi.ROI_3d_2dsummary \u00b6 ROI_3D_2DSUMMARY - return the 2 d XY projection of 3 d ROIs CC2 = ROI_3D_2DSUMMARY ( CC3 , IMAGESIZE ) Given a set of index values that describe 3 D ROIs ( such as those returned by BWCONNCOMP ) , this function returns the 2 D projection of these ROIs onto the first 2 dimensions ( X and Y ) .","title":"vlt.image.roi.ROI_3d_2dsummary"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_2dsummary.m/#vltimageroiroi_3d_2dsummary","text":"ROI_3D_2DSUMMARY - return the 2 d XY projection of 3 d ROIs CC2 = ROI_3D_2DSUMMARY ( CC3 , IMAGESIZE ) Given a set of index values that describe 3 D ROIs ( such as those returned by BWCONNCOMP ) , this function returns the 2 D projection of these ROIs onto the first 2 dimensions ( X and Y ) .","title":"vlt.image.roi.ROI_3d_2dsummary"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_all_overlaps.m/","text":"vlt.image.roi.ROI_3d_all_overlaps \u00b6 ROIS_3D_ALL_OVERLAPS - Compute overlaps between sets of 3 D ROIs [ OVERLAP_AB , OVERLAP_BA ] = ROI_3D_ALL_OVERLAPS ( ROIS3D_A , LA , ... ROIS3D_B , LB , XRANGE , YRANGE , ZRANGE , ... ) ; For 2 sets of ROIS , calculate the overlap of each ROI in A onto each ROI in B , and vice - versa . Inputs : ROIS3D_A and ROIS3D_B are structures returned from a function like BWBOUNDARIES with fields 'ImageSize' [ 1 x3 ] : the dimensions of the original image 'NumObjects' [ 1 x1 ] : the number of objects N 'PixelIdxList' { 1 xN } : a cell array of index values for each ROI LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL XRANGE , YRANGE , ZRANGE : calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . Outputs : OVERLAP_AB : The maximum percentage overlap of each ROI in A onto B . OVERLAP_AB ( i , j ) is the maximum amount of the ith ROI in A that overlaps the jth ROI in B , for all XRANGE , YRANGE , and ZRANGE shifts . OVERLAP_BA : The maximum percentage overlap of each ROI in B onto A . OVERLAP_BA ( i , j ) is the maximum amount of the ith ROI in B that overlaps the jth ROI in A , for all XRANGE , YRANGE , and ZRANGE shifts . This function also accepts extra name / value pairs that modify the default behavior of the function : Parameter name ( default ) : Description --------------------------------------------------------------- ShowGraphicalProgress ( 1 ) : 0 / 1 Should we show a progress bar ? Flare MAX ( MAX ( ABS ( XRANGE )) ,: Integer How much should we flare out each MAX ( MAX ( ABS ( YRANGE )) , : ROI in A to check for overlaps in B ? MAX ( ABS ( ZRANGE )) )) : ( The flare expands the ROI in all directions : to allow us to look for overlapping ROIs . )","title":"vlt.image.roi.ROI_3d_all_overlaps"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_all_overlaps.m/#vltimageroiroi_3d_all_overlaps","text":"ROIS_3D_ALL_OVERLAPS - Compute overlaps between sets of 3 D ROIs [ OVERLAP_AB , OVERLAP_BA ] = ROI_3D_ALL_OVERLAPS ( ROIS3D_A , LA , ... ROIS3D_B , LB , XRANGE , YRANGE , ZRANGE , ... ) ; For 2 sets of ROIS , calculate the overlap of each ROI in A onto each ROI in B , and vice - versa . Inputs : ROIS3D_A and ROIS3D_B are structures returned from a function like BWBOUNDARIES with fields 'ImageSize' [ 1 x3 ] : the dimensions of the original image 'NumObjects' [ 1 x1 ] : the number of objects N 'PixelIdxList' { 1 xN } : a cell array of index values for each ROI LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL XRANGE , YRANGE , ZRANGE : calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . Outputs : OVERLAP_AB : The maximum percentage overlap of each ROI in A onto B . OVERLAP_AB ( i , j ) is the maximum amount of the ith ROI in A that overlaps the jth ROI in B , for all XRANGE , YRANGE , and ZRANGE shifts . OVERLAP_BA : The maximum percentage overlap of each ROI in B onto A . OVERLAP_BA ( i , j ) is the maximum amount of the ith ROI in B that overlaps the jth ROI in A , for all XRANGE , YRANGE , and ZRANGE shifts . This function also accepts extra name / value pairs that modify the default behavior of the function : Parameter name ( default ) : Description --------------------------------------------------------------- ShowGraphicalProgress ( 1 ) : 0 / 1 Should we show a progress bar ? Flare MAX ( MAX ( ABS ( XRANGE )) ,: Integer How much should we flare out each MAX ( MAX ( ABS ( YRANGE )) , : ROI in A to check for overlaps in B ? MAX ( ABS ( ZRANGE )) )) : ( The flare expands the ROI in all directions : to allow us to look for overlapping ROIs . )","title":"vlt.image.roi.ROI_3d_all_overlaps"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_max_xy_size.m/","text":"vlt.image.roi.ROI_3d_max_xy_size \u00b6 ROI_3D_MAX_XY_SIZE - compute the maximum X / Y size of a 3 - d ROI MAX_XY_SIZE = ROI_3D_MAX_XY_SIZE ( CC , ... ) Given a structure of regions - of - interest such as that returned by BWCONNCOMP , with fields 'ImageSize' and 'PixelIdxList' , this function examines all Z planes and computes the area ( in pixels ) of each ROI in X and Y ( dimensions 1 and 2 ). The maximum such value is returned in MAX_XY_SIZE ( i ), for each ROI in CC ( i goes from 1 .. numel ( CC . PixelIdxList )). This function also takes NAME / VALUE pairs that modify the behavior : Parameter ( default ) | Description -------------------------------------------------------------------- UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : % make a simple image A = zeros ( 3 , 11 ); A ( 1 ,:) = 1 ; A ( 2 , 1 ) = 1 ; A (:,:, 2 ) = 0 * A (:,:, 1 ); A ( 1 , 1 , 2 ) = 1 ; A , % view A CC = bwconncomp ( A ); max_xy_size = ROI_3d_max_xy_size ( CC )","title":"vlt.image.roi.ROI_3d_max_xy_size"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_max_xy_size.m/#vltimageroiroi_3d_max_xy_size","text":"ROI_3D_MAX_XY_SIZE - compute the maximum X / Y size of a 3 - d ROI MAX_XY_SIZE = ROI_3D_MAX_XY_SIZE ( CC , ... ) Given a structure of regions - of - interest such as that returned by BWCONNCOMP , with fields 'ImageSize' and 'PixelIdxList' , this function examines all Z planes and computes the area ( in pixels ) of each ROI in X and Y ( dimensions 1 and 2 ). The maximum such value is returned in MAX_XY_SIZE ( i ), for each ROI in CC ( i goes from 1 .. numel ( CC . PixelIdxList )). This function also takes NAME / VALUE pairs that modify the behavior : Parameter ( default ) | Description -------------------------------------------------------------------- UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : % make a simple image A = zeros ( 3 , 11 ); A ( 1 ,:) = 1 ; A ( 2 , 1 ) = 1 ; A (:,:, 2 ) = 0 * A (:,:, 1 ); A ( 1 , 1 , 2 ) = 1 ; A , % view A CC = bwconncomp ( A ); max_xy_size = ROI_3d_max_xy_size ( CC )","title":"vlt.image.roi.ROI_3d_max_xy_size"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_overlap.m/","text":"vlt.image.roi.ROI_3d_overlap \u00b6 ROI_3D_OVERLAP - Computes overlap between 3 D ROIS in 3 D space for different shifts [ OVERLAPA , OVERLAPB ] = ROI_3D_OVERLAP ( ROIS3D1 , ROIS3D2 , XRANGE , YRANGE ,... ZRANGE , IMSIZE ) Inputs : ROIS3D1 , ROIS3D2 are indexes SPOTDETECTOR3 . It has the following fields : XRANGE , YRANGE , ZRANGE : we will calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . IMSIZE - The image size in pixels [ NX NY NZ ] Outputs : OVERLAPA ( x , y , z ) is the fraction of roi3d1 that overlaps roi3d2 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels OVERLAPB ( x , y , z ) is the fraction of roi3d2 that overlaps roi3d1 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels See also : ROI_3D_ALL_OVERLAPS","title":"vlt.image.roi.ROI_3d_overlap"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3d_overlap.m/#vltimageroiroi_3d_overlap","text":"ROI_3D_OVERLAP - Computes overlap between 3 D ROIS in 3 D space for different shifts [ OVERLAPA , OVERLAPB ] = ROI_3D_OVERLAP ( ROIS3D1 , ROIS3D2 , XRANGE , YRANGE ,... ZRANGE , IMSIZE ) Inputs : ROIS3D1 , ROIS3D2 are indexes SPOTDETECTOR3 . It has the following fields : XRANGE , YRANGE , ZRANGE : we will calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . IMSIZE - The image size in pixels [ NX NY NZ ] Outputs : OVERLAPA ( x , y , z ) is the fraction of roi3d1 that overlaps roi3d2 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels OVERLAPB ( x , y , z ) is the fraction of roi3d2 that overlaps roi3d1 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels See also : ROI_3D_ALL_OVERLAPS","title":"vlt.image.roi.ROI_3d_overlap"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3dplot2d.m/","text":"vlt.image.roi.ROI_3dplot2d \u00b6 ROI_3DPLOT2D - Plot 3 d ROIs on a 2 - d image [ H_LINES , H_TEXT ] = ROI_3DPLOT2D ( CC , TEXTSIZE , COLOR , LINE_TAG , TEXT_TAG , ZDIM ) Inputs : CC - An array of ROIS returned in CC by BWCONNCOMP TEXTSIZE - The size font that should be used to label the numbers ( 0 for none ) COLOR - The color that should be used , in [ R G B ] format ( 0 ... 1 ) LINE_TAG - A text string that is used to tag the line plots TEXT_TAG - A text string that is used to tag the text Outputs : H_LINES - Handle array of line plots H_TEXT - Handle array of text plots","title":"vlt.image.roi.ROI_3dplot2d"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_3dplot2d.m/#vltimageroiroi_3dplot2d","text":"ROI_3DPLOT2D - Plot 3 d ROIs on a 2 - d image [ H_LINES , H_TEXT ] = ROI_3DPLOT2D ( CC , TEXTSIZE , COLOR , LINE_TAG , TEXT_TAG , ZDIM ) Inputs : CC - An array of ROIS returned in CC by BWCONNCOMP TEXTSIZE - The size font that should be used to label the numbers ( 0 for none ) COLOR - The color that should be used , in [ R G B ] format ( 0 ... 1 ) LINE_TAG - A text string that is used to tag the line plots TEXT_TAG - A text string that is used to tag the text Outputs : H_LINES - Handle array of line plots H_TEXT - Handle array of text plots","title":"vlt.image.roi.ROI_3dplot2d"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_assignneighbors.m/","text":"vlt.image.roi.ROI_assignneighbors \u00b6 ROI_3D_ASSIGNNEIGHBORS - assign neighbors to adjacent ROIs L_OUT = ROI_ASSIGNNEIGHBORS ( L , IM , INDEXES_TO_SEARCH ) Searches the labeled ROI matrix L for unlabeled pixels ( in INDEXES_TO_SEARCH ), and assigns these pixels be part of an immediately neighboring ROI . The brightest neighboring pixel in IM is used to determine which ROI will be assigned . This function is useful after WATERSHED resegmentation , which leaves a 1 pixel boundary between the resegmented ROIs . Example : A = zeros ( 6 , 6 ); A ( 3 , 2 ) = 2 ; A ( 3 , 3 ) = 1 ; A ( 3 , 4 ) = 3 ; L = bwlabel ( A ) indexes_to_search = find ( L ); L2 = L ; L2 ( 3 , 3 ) = 0 ; L2 ( 3 , 2 ) = 2 % segment the initial ROI into 2 with a 1 pixel border % might mimic output of WATERSHED L_out = ROI_assignneighbors ( L2 , A , indexes_to_search )","title":"vlt.image.roi.ROI_assignneighbors"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_assignneighbors.m/#vltimageroiroi_assignneighbors","text":"ROI_3D_ASSIGNNEIGHBORS - assign neighbors to adjacent ROIs L_OUT = ROI_ASSIGNNEIGHBORS ( L , IM , INDEXES_TO_SEARCH ) Searches the labeled ROI matrix L for unlabeled pixels ( in INDEXES_TO_SEARCH ), and assigns these pixels be part of an immediately neighboring ROI . The brightest neighboring pixel in IM is used to determine which ROI will be assigned . This function is useful after WATERSHED resegmentation , which leaves a 1 pixel boundary between the resegmented ROIs . Example : A = zeros ( 6 , 6 ); A ( 3 , 2 ) = 2 ; A ( 3 , 3 ) = 1 ; A ( 3 , 4 ) = 3 ; L = bwlabel ( A ) indexes_to_search = find ( L ); L2 = L ; L2 ( 3 , 3 ) = 0 ; L2 ( 3 , 2 ) = 2 % segment the initial ROI into 2 with a 1 pixel border % might mimic output of WATERSHED L_out = ROI_assignneighbors ( L2 , A , indexes_to_search )","title":"vlt.image.roi.ROI_assignneighbors"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_bestcolocalization.m/","text":"vlt.image.roi.ROI_bestcolocalization \u00b6 ROI_BESTCOLALIZATION - find the best colocalization match for an ROI BC = ROI_BESTCOLOCALIZATION ( OVERLAPS_BA , OVERLAP_THRESHOLD , ... [ PROPERTY_A , PROPERTY_B ] ) Identifies the best localization match for each ROI in set B onto set A , assuming the overlap exceeds a threshold . The \"best match\" is determined by the largest OVERLAP , unless an array of properties for ROI set A PROPERTY_A and ROI set B PROPERTY_B , in which case the closest match ( smallest difference ) .","title":"vlt.image.roi.ROI_bestcolocalization"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_bestcolocalization.m/#vltimageroiroi_bestcolocalization","text":"ROI_BESTCOLALIZATION - find the best colocalization match for an ROI BC = ROI_BESTCOLOCALIZATION ( OVERLAPS_BA , OVERLAP_THRESHOLD , ... [ PROPERTY_A , PROPERTY_B ] ) Identifies the best localization match for each ROI in set B onto set A , assuming the overlap exceeds a threshold . The \"best match\" is determined by the largest OVERLAP , unless an array of properties for ROI set A PROPERTY_A and ROI set B PROPERTY_B , in which case the closest match ( smallest difference ) .","title":"vlt.image.roi.ROI_bestcolocalization"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_centerofmassdistance.m/","text":"vlt.image.roi.ROI_centerofmassdistance \u00b6 ROI_CENTEROFMASSDISTANCE - Compute center - of - mass distances between sets of ROIs [ COMD ] = ROI_CENTEROFMASSDISTANCE ( ROI_COM_A , LA , ROI_COM_B , LB , ... DISTANCE_MAX , DISTANCE_MIN , ...); For 2 sets of ROIS , calculate the center - of - mass distances for all ROIs closer than DISTANCE_MAX . Inputs : ROI_COM_A and ROI_COM_B are NUM_ROIS x DIM_ROI matrixes with the center of mass coordinates in each row . LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL DISTANCE_MAX the maximum distance over which to search for center - of - mass distance . This is important because if the number of ROIs in A and B are large , then a full matrix describing ROI overlaps would require several hundred GB of memory and is usually not worth counting . DISTANCE_MIN If any distance is 0 , it will be set to DISTANCE_MIN . 0 is reserved for too - long distances beyond DISTANCE_MAX so that COMD can be sparse ( mostly 0 s ).","title":"vlt.image.roi.ROI_centerofmassdistance"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_centerofmassdistance.m/#vltimageroiroi_centerofmassdistance","text":"ROI_CENTEROFMASSDISTANCE - Compute center - of - mass distances between sets of ROIs [ COMD ] = ROI_CENTEROFMASSDISTANCE ( ROI_COM_A , LA , ROI_COM_B , LB , ... DISTANCE_MAX , DISTANCE_MIN , ...); For 2 sets of ROIS , calculate the center - of - mass distances for all ROIs closer than DISTANCE_MAX . Inputs : ROI_COM_A and ROI_COM_B are NUM_ROIS x DIM_ROI matrixes with the center of mass coordinates in each row . LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL DISTANCE_MAX the maximum distance over which to search for center - of - mass distance . This is important because if the number of ROIs in A and B are large , then a full matrix describing ROI overlaps would require several hundred GB of memory and is usually not worth counting . DISTANCE_MIN If any distance is 0 , it will be set to DISTANCE_MIN . 0 is reserved for too - long distances beyond DISTANCE_MAX so that COMD can be sparse ( mostly 0 s ).","title":"vlt.image.roi.ROI_centerofmassdistance"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_flare_indexes.m/","text":"vlt.image.roi.ROI_flare_indexes \u00b6 ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"vlt.image.roi.ROI_flare_indexes"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_flare_indexes.m/#vltimageroiroi_flare_indexes","text":"ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"vlt.image.roi.ROI_flare_indexes"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_flare_indexes_buggy.m/","text":"vlt.image.roi.ROI_flare_indexes_buggy \u00b6 ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"vlt.image.roi.ROI_flare_indexes_buggy"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_flare_indexes_buggy.m/#vltimageroiroi_flare_indexes_buggy","text":"ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"vlt.image.roi.ROI_flare_indexes_buggy"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_imageexample.m/","text":"vlt.image.roi.ROI_imageexample \u00b6 ROI_imageexample - return an example image for experimenting with ROI functions IM = ROI_IMAGEEXAMPLE ; Returns an image with 3 overlapping Gaussian balls for ROI functions Example : im = ROI_imageexample ; imshow ( im );","title":"vlt.image.roi.ROI_imageexample"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_imageexample.m/#vltimageroiroi_imageexample","text":"ROI_imageexample - return an example image for experimenting with ROI functions IM = ROI_IMAGEEXAMPLE ; Returns an image with 3 overlapping Gaussian balls for ROI functions Example : im = ROI_imageexample ; imshow ( im );","title":"vlt.image.roi.ROI_imageexample"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_isolate.m/","text":"vlt.image.roi.ROI_isolate \u00b6 ROI_ISOLATE - Return the index values within an ROI of of an isolated cube that encompasses ROI [ ISOLATE_INDEXES , ISOLATE_INDEXES_IN_ROI ] = ROI_ISOLATE ( IMSIZE , INDEXESND ) Given an ROI in an image of size IMSIZE with indexes INDEXESND , return the index values in an isolated N - D cube that correspond to index values in the original image . Inputs : IMSIZE should be the size of the image [ SZ1 SZ2 ... SZN] INDEXESND are the index values of the ROI in the image Outputs : ISOLATE_INDEXES are a mapping between the minimum N - D cube that can contain the ROI and the ROI ' s indexes in the image . ORIG_IM ( ISOLATE_INDEXES ) = MINCUBE . ISOLATE_INDEXES have the shape of the minimum cube . ISOLATE_INDEXES_IN_ROI is a 0 - 1 vector the same size as ISOLATE_INDEXES . Entries are 1 if the voxel is contained in the ROI specified by INDEXESND Example : imsize = [ 3 3 3 ]; indexesnd = [ 14 15 17 18 23 24 26 ]; % this is an ROI in the bottom right corner of a 3x3x3 cube except the edge point % to see where this is, use reshape(1:27,3,3,3) [ isolate_indexes , isolate_indexes_in_roi ] = ROI_isolate ( imsize , indexesnd )","title":"vlt.image.roi.ROI_isolate"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_isolate.m/#vltimageroiroi_isolate","text":"ROI_ISOLATE - Return the index values within an ROI of of an isolated cube that encompasses ROI [ ISOLATE_INDEXES , ISOLATE_INDEXES_IN_ROI ] = ROI_ISOLATE ( IMSIZE , INDEXESND ) Given an ROI in an image of size IMSIZE with indexes INDEXESND , return the index values in an isolated N - D cube that correspond to index values in the original image . Inputs : IMSIZE should be the size of the image [ SZ1 SZ2 ... SZN] INDEXESND are the index values of the ROI in the image Outputs : ISOLATE_INDEXES are a mapping between the minimum N - D cube that can contain the ROI and the ROI ' s indexes in the image . ORIG_IM ( ISOLATE_INDEXES ) = MINCUBE . ISOLATE_INDEXES have the shape of the minimum cube . ISOLATE_INDEXES_IN_ROI is a 0 - 1 vector the same size as ISOLATE_INDEXES . Entries are 1 if the voxel is contained in the ROI specified by INDEXESND Example : imsize = [ 3 3 3 ]; indexesnd = [ 14 15 17 18 23 24 26 ]; % this is an ROI in the bottom right corner of a 3x3x3 cube except the edge point % to see where this is, use reshape(1:27,3,3,3) [ isolate_indexes , isolate_indexes_in_roi ] = ROI_isolate ( imsize , indexesnd )","title":"vlt.image.roi.ROI_isolate"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_resegment.m/","text":"vlt.image.roi.ROI_resegment \u00b6 ROI_RESEGMENT - resegment an ROI using an algorithm like WATERSHED [ CC ] = ROI_RESEGMENT ( IM , INDEXESND , ...) Given pixel index values of an ROI in an image IM , ROI_RESEGMENT re - evalutes the ROI using a segmenting function like WATERSHED . It returns a structure of new ROIs CC with fields as follows : Field | Description -------------------------------------------------------------- 'Connectivity' | The connectivity used ( see name / value pairs ) 'ImageSize' | size ( IM ) 'NumObjects' | The number of resegmented ROIs found 'PixelIdxList' | A cell array of pixel index values of the resegmented ROIs This function also takes name / value pairs that modify its operation : Parameter ( default ) | Description ------------------------------------------------------------------- 'resegment_algorithm' ( 'watershed' ) | Function that is called to resegment . 'values_outside_roi' ( 0 ) | What should values outside INDEXESND be set to ? | Use NaN to use the values from IM ( even though | they are outside ROI ) 'use_bwdist' ( 0 ) | Should we use the binary distance transform for | the ROI data ( 1 ), or the raw data from IM ( 0 ) ? 'connectivity' | The connectivity to use with the resegment algorithm . ( CONNDEF ( NDIMS ( IM ), 'maximal' )) | ( See HELP WATERSHED ). If 0 is given , default is used . 'invert' ( 1 ) | If using raw data , multiply the image by - 1 'assign_neighbors_to_roi' ( 1 ) | Resegmentation algorithms often leave a 1 pixel border | between ROIs . If 'assign_neighbors_to_roi' is 1 , then | these pixels are assigned to their brightest immediately | neighboring pixels .","title":"vlt.image.roi.ROI_resegment"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_resegment.m/#vltimageroiroi_resegment","text":"ROI_RESEGMENT - resegment an ROI using an algorithm like WATERSHED [ CC ] = ROI_RESEGMENT ( IM , INDEXESND , ...) Given pixel index values of an ROI in an image IM , ROI_RESEGMENT re - evalutes the ROI using a segmenting function like WATERSHED . It returns a structure of new ROIs CC with fields as follows : Field | Description -------------------------------------------------------------- 'Connectivity' | The connectivity used ( see name / value pairs ) 'ImageSize' | size ( IM ) 'NumObjects' | The number of resegmented ROIs found 'PixelIdxList' | A cell array of pixel index values of the resegmented ROIs This function also takes name / value pairs that modify its operation : Parameter ( default ) | Description ------------------------------------------------------------------- 'resegment_algorithm' ( 'watershed' ) | Function that is called to resegment . 'values_outside_roi' ( 0 ) | What should values outside INDEXESND be set to ? | Use NaN to use the values from IM ( even though | they are outside ROI ) 'use_bwdist' ( 0 ) | Should we use the binary distance transform for | the ROI data ( 1 ), or the raw data from IM ( 0 ) ? 'connectivity' | The connectivity to use with the resegment algorithm . ( CONNDEF ( NDIMS ( IM ), 'maximal' )) | ( See HELP WATERSHED ). If 0 is given , default is used . 'invert' ( 1 ) | If using raw data , multiply the image by - 1 'assign_neighbors_to_roi' ( 1 ) | Resegmentation algorithms often leave a 1 pixel border | between ROIs . If 'assign_neighbors_to_roi' is 1 , then | these pixels are assigned to their brightest immediately | neighboring pixels .","title":"vlt.image.roi.ROI_resegment"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_resegment_all.m/","text":"vlt.image.roi.ROI_resegment_all \u00b6 ROI_RESEGMENT_ALL - resegment ROIs from an image ( such as with WATERSHED ), updating ROIs and labeled image [ CC , L ] = ROI_RESEGMENT_ALL ( CC , L , IM , ...) Returns a modified set of ROIs given a labeled image L , a list of ROIs returned from BWCONNCOMP ( CC ) and the original image IM . This function takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------ resegment_namevaluepairs ( {} ) | Name / value pairs to pass to ROI_resegment | ( see HELP ROI_RESEGMENT ) rois_to_update ( [ 1 : CC.NumObjects ] ) | Index values of ROIs to update ( can be a subset ) UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : myimg = ROI_imageexample ; imagedisplay ( myimg ); BW = myimg > 1e-3 ; CC_orig = bwconncomp ( BW ); L_orig = labelmatrix ( CC_orig ); figure , imshow ( label2rgb ( L_orig )); [ CC_new , L_new ] = ROI_resegment_all ( CC_orig , L_orig , myimg ); figure , imshow ( label2rgb ( L_new ));","title":"vlt.image.roi.ROI_resegment_all"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_resegment_all.m/#vltimageroiroi_resegment_all","text":"ROI_RESEGMENT_ALL - resegment ROIs from an image ( such as with WATERSHED ), updating ROIs and labeled image [ CC , L ] = ROI_RESEGMENT_ALL ( CC , L , IM , ...) Returns a modified set of ROIs given a labeled image L , a list of ROIs returned from BWCONNCOMP ( CC ) and the original image IM . This function takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------ resegment_namevaluepairs ( {} ) | Name / value pairs to pass to ROI_resegment | ( see HELP ROI_RESEGMENT ) rois_to_update ( [ 1 : CC.NumObjects ] ) | Index values of ROIs to update ( can be a subset ) UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : myimg = ROI_imageexample ; imagedisplay ( myimg ); BW = myimg > 1e-3 ; CC_orig = bwconncomp ( BW ); L_orig = labelmatrix ( CC_orig ); figure , imshow ( label2rgb ( L_orig )); [ CC_new , L_new ] = ROI_resegment_all ( CC_orig , L_orig , myimg ); figure , imshow ( label2rgb ( L_new ));","title":"vlt.image.roi.ROI_resegment_all"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_subset.m/","text":"vlt.image.roi.ROI_subset \u00b6 ROI_subset - return a subset of ROIs in a structure CC CCSUBSET = ROI_SUBSET ( CC , INDEXES ) Creates a new ROI structure CCSUBSET from one in CC with subfields 'Connectivity' , 'NumObjects' , 'ImageSize' , and 'PixelIdxList' entries such as those returned from BWCONNCOMP . The field 'NumObjects' is set to the number of elements of INDEXES and PixelIdxList will have only those entries in INDEXES .","title":"vlt.image.roi.ROI_subset"},{"location":"reference/%2Bvlt/%2Bimage/%2Broi/ROI_subset.m/#vltimageroiroi_subset","text":"ROI_subset - return a subset of ROIs in a structure CC CCSUBSET = ROI_SUBSET ( CC , INDEXES ) Creates a new ROI structure CCSUBSET from one in CC with subfields 'Connectivity' , 'NumObjects' , 'ImageSize' , and 'PixelIdxList' entries such as those returned from BWCONNCOMP . The field 'NumObjects' is set to the number of elements of INDEXES and PixelIdxList will have only those entries in INDEXES .","title":"vlt.image.roi.ROI_subset"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq.m/","text":"CLASS vlt.image/imseq.imseq \u00b6 IMSEQ - an image class that delivers frames from recording epochs of image sequences Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 none","title":"vlt.image/imseq.imseq"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq.m/#class-vltimageimseqimseq","text":"IMSEQ - an image class that delivers frames from recording epochs of image sequences","title":"CLASS vlt.image/imseq.imseq"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq.m/#methods","text":"none","title":"Methods"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq_matlab.m/","text":"CLASS vlt.image/imseq.imseq_matlab \u00b6 IMSEQ_MATLAB - turn image files that can be read by Matlab ' s IMREAD into an IMSEQ object See the reference page . Examples : ims = imseq_matlab ( 'ngc6543a.jpg' ) ims . imsize ims . numframes d = ims . frame ( 1 , 1 ); figure ; image ( d ); % suppose you have a multi-frame TIFF in myfile.tif ims = imseq_matlab ( 'myfile.tif' ); Superclasses \u00b6 none Properties \u00b6 none Methods \u00b6 none","title":"vlt.image/imseq.imseq_matlab"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq_matlab.m/#class-vltimageimseqimseq_matlab","text":"IMSEQ_MATLAB - turn image files that can be read by Matlab ' s IMREAD into an IMSEQ object See the reference page . Examples : ims = imseq_matlab ( 'ngc6543a.jpg' ) ims . imsize ims . numframes d = ims . frame ( 1 , 1 ); figure ; image ( d ); % suppose you have a multi-frame TIFF in myfile.tif ims = imseq_matlab ( 'myfile.tif' );","title":"CLASS vlt.image/imseq.imseq_matlab"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq_matlab.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq_matlab.m/#properties","text":"none","title":"Properties"},{"location":"reference/%2Bvlt/%2Bimage/imseq/imseq_matlab.m/#methods","text":"none","title":"Methods"},{"location":"reference/%2Bvlt/%2Bmath/angdiff.m/","text":"vlt.math.angdiff \u00b6 vlt . math . angdiff - Angular difference in 0 .. 360 D = vlt . math . angdiff ( A ) Computes the angular difference in 0 .. 360 . Answer is returned in degrees . If A is a vector of inputs , D will also be a vector with the same orientation ( a column or a row ) . Returns min ( abs ( [ A ;A+360;A-360])); Examples : vlt . math . angdiff ( 0 - 90 ) == 90 % there is a 90 degree angular difference between 0 and 90 vlt . math . angdiff ( 90 - 0 ) == 90 % there is a 90 degree angular difference between 90 and 0 vlt . math . angdiff ( 10 - 359 ) == 11 % there is an 11 degree angular difference between 10 and 359 vlt . math . angdiff ( 10 - 360 ) == 10 % there is a 10 degree angular difference between 10 and 360 See also : vlt . math . angdiffwrap , vlt . math . angdiffwrapsign , vlt . math . dangdiffwrap","title":"vlt.math.angdiff"},{"location":"reference/%2Bvlt/%2Bmath/angdiff.m/#vltmathangdiff","text":"vlt . math . angdiff - Angular difference in 0 .. 360 D = vlt . math . angdiff ( A ) Computes the angular difference in 0 .. 360 . Answer is returned in degrees . If A is a vector of inputs , D will also be a vector with the same orientation ( a column or a row ) . Returns min ( abs ( [ A ;A+360;A-360])); Examples : vlt . math . angdiff ( 0 - 90 ) == 90 % there is a 90 degree angular difference between 0 and 90 vlt . math . angdiff ( 90 - 0 ) == 90 % there is a 90 degree angular difference between 90 and 0 vlt . math . angdiff ( 10 - 359 ) == 11 % there is an 11 degree angular difference between 10 and 359 vlt . math . angdiff ( 10 - 360 ) == 10 % there is a 10 degree angular difference between 10 and 360 See also : vlt . math . angdiffwrap , vlt . math . angdiffwrapsign , vlt . math . dangdiffwrap","title":"vlt.math.angdiff"},{"location":"reference/%2Bvlt/%2Bmath/angdiffwrap.m/","text":"vlt.math.angdiffwrap \u00b6 vlt.math.angdiff - Angular difference in 0..WRAP D = vlt.math.angdiff(A,WRAP) Returns min([A;A+WRAP;A-WRAP]); See also: vlt.math.angdiff, vlt.math.angdiffwrapsign, vlt.math.dangdiffwrap","title":"vlt.math.angdiffwrap"},{"location":"reference/%2Bvlt/%2Bmath/angdiffwrap.m/#vltmathangdiffwrap","text":"vlt.math.angdiff - Angular difference in 0..WRAP D = vlt.math.angdiff(A,WRAP) Returns min([A;A+WRAP;A-WRAP]); See also: vlt.math.angdiff, vlt.math.angdiffwrapsign, vlt.math.dangdiffwrap","title":"vlt.math.angdiffwrap"},{"location":"reference/%2Bvlt/%2Bmath/angdiffwrapsign.m/","text":"vlt.math.angdiffwrapsign \u00b6 ANGDIFFWRAPSIGN - Angular difference in 0..WRAP D = vlt.math.angdiffwrapsign(A,WRAP) Similar to vlt.math.angdiffwrap except sign is preserved. See also: ANGDIGG, vlt.math.angdiffwrap, vlt.math.dangdiffwrap","title":"vlt.math.angdiffwrapsign"},{"location":"reference/%2Bvlt/%2Bmath/angdiffwrapsign.m/#vltmathangdiffwrapsign","text":"ANGDIFFWRAPSIGN - Angular difference in 0..WRAP D = vlt.math.angdiffwrapsign(A,WRAP) Similar to vlt.math.angdiffwrap except sign is preserved. See also: ANGDIGG, vlt.math.angdiffwrap, vlt.math.dangdiffwrap","title":"vlt.math.angdiffwrapsign"},{"location":"reference/%2Bvlt/%2Bmath/angles2nsew.m/","text":"vlt.math.angles2nsew \u00b6 ANGLES2NSEW - how many angles are pointing north , south , east , west ( bins ) ? D = vlt . math . angles2nsew ( ANGLES ) Given ANGLES in degrees in compass coordinates ( 0..360 ), assign each angle a character 'n' , 's' , 'e' , or 'w' depending upon the angle: 'n' : angles in [ 0..45 ) and [ 315. . .360 ] 'e' : angles in [ 45. . .135 ) 's' : angles in [ 135..225 ) 'w' : angles in [ 225..315 ) If any ANGLES are less than 0 or greater than 360 , the modulus is taken around 360 before calculating the major direction . See also: vlt . math . cartesian2compass , vlt . math . rad2deg Example: angles = [ 0 90 180 270 ]; d = vlt . math . angles2nsew ( angles ) % ' nesw '","title":"vlt.math.angles2nsew"},{"location":"reference/%2Bvlt/%2Bmath/angles2nsew.m/#vltmathangles2nsew","text":"ANGLES2NSEW - how many angles are pointing north , south , east , west ( bins ) ? D = vlt . math . angles2nsew ( ANGLES ) Given ANGLES in degrees in compass coordinates ( 0..360 ), assign each angle a character 'n' , 's' , 'e' , or 'w' depending upon the angle: 'n' : angles in [ 0..45 ) and [ 315. . .360 ] 'e' : angles in [ 45. . .135 ) 's' : angles in [ 135..225 ) 'w' : angles in [ 225..315 ) If any ANGLES are less than 0 or greater than 360 , the modulus is taken around 360 before calculating the major direction . See also: vlt . math . cartesian2compass , vlt . math . rad2deg Example: angles = [ 0 90 180 270 ]; d = vlt . math . angles2nsew ( angles ) % ' nesw '","title":"vlt.math.angles2nsew"},{"location":"reference/%2Bvlt/%2Bmath/asymmetric_gaussian.m/","text":"vlt.math.asymmetric_gaussian \u00b6 ASYMMETRIC_GAUSSIAN - Compute an assymmetric gaussian curve Y = vlt.math.asymmetric_gaussian(X, a, b, c, d, e) where X are the values of X at which to evaluate the function, and a b c d e are the parameters of the function: 'a+b*exp(-((x-c).^2)/((heaviside(x-c)*(2*d^2)+(1-heaviside(x-c))*(2*(d^2)*e))))' This function with no input arguments returns the string above.","title":"vlt.math.asymmetric_gaussian"},{"location":"reference/%2Bvlt/%2Bmath/asymmetric_gaussian.m/#vltmathasymmetric_gaussian","text":"ASYMMETRIC_GAUSSIAN - Compute an assymmetric gaussian curve Y = vlt.math.asymmetric_gaussian(X, a, b, c, d, e) where X are the values of X at which to evaluate the function, and a b c d e are the parameters of the function: 'a+b*exp(-((x-c).^2)/((heaviside(x-c)*(2*d^2)+(1-heaviside(x-c))*(2*(d^2)*e))))' This function with no input arguments returns the string above.","title":"vlt.math.asymmetric_gaussian"},{"location":"reference/%2Bvlt/%2Bmath/bandwidth.m/","text":"vlt.math.bandwidth \u00b6 BANDWIDTH - calculate the bandwidth between two frequencies BW = BANDWIDTH ( LOW , HIGH ) Calculates bandwidth as log2 ( HIGH / LOW ) . If LOW is NaN or +/- Inf , BW is Inf ; If HIGH is NaN or +/ Inf , BW is Inf . Otherwise , BW is log2 ( HIGH / LOW ) .","title":"vlt.math.bandwidth"},{"location":"reference/%2Bvlt/%2Bmath/bandwidth.m/#vltmathbandwidth","text":"BANDWIDTH - calculate the bandwidth between two frequencies BW = BANDWIDTH ( LOW , HIGH ) Calculates bandwidth as log2 ( HIGH / LOW ) . If LOW is NaN or +/- Inf , BW is Inf ; If HIGH is NaN or +/ Inf , BW is Inf . Otherwise , BW is log2 ( HIGH / LOW ) .","title":"vlt.math.bandwidth"},{"location":"reference/%2Bvlt/%2Bmath/cartesian2compass.m/","text":"vlt.math.cartesian2compass \u00b6 CARTESIAN2COMPASS - Convert angles from cartiesian to compass C = vlt . math . cartesian2compass ( R , USERADIANS ) Converts angles from cartesian format to compass . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"vlt.math.cartesian2compass"},{"location":"reference/%2Bvlt/%2Bmath/cartesian2compass.m/#vltmathcartesian2compass","text":"CARTESIAN2COMPASS - Convert angles from cartiesian to compass C = vlt . math . cartesian2compass ( R , USERADIANS ) Converts angles from cartesian format to compass . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"vlt.math.cartesian2compass"},{"location":"reference/%2Bvlt/%2Bmath/cas.m/","text":"vlt.math.cas \u00b6 CAS - Cosine(x) plus sin(x) Y = vlt.math.cas(X) Returns the abbreviated CAS function where CAS(X) = COS(X) + SIN(X)","title":"vlt.math.cas"},{"location":"reference/%2Bvlt/%2Bmath/cas.m/#vltmathcas","text":"CAS - Cosine(x) plus sin(x) Y = vlt.math.cas(X) Returns the abbreviated CAS function where CAS(X) = COS(X) + SIN(X)","title":"vlt.math.cas"},{"location":"reference/%2Bvlt/%2Bmath/center_of_mass.m/","text":"vlt.math.center_of_mass \u00b6 vlt . math . center_of_mass Compute center of mass of points POS = vlt . math . center_of_mass ( POINTS , [ WEIGHTS ] ) Computes the center of mass of a group of points . Each row should contain a separate point in N - space . If a weights vector is provided , then each point is weighted by the corresponding weight .","title":"vlt.math.center_of_mass"},{"location":"reference/%2Bvlt/%2Bmath/center_of_mass.m/#vltmathcenter_of_mass","text":"vlt . math . center_of_mass Compute center of mass of points POS = vlt . math . center_of_mass ( POINTS , [ WEIGHTS ] ) Computes the center of mass of a group of points . Each row should contain a separate point in N - space . If a weights vector is provided , then each point is weighted by the corresponding weight .","title":"vlt.math.center_of_mass"},{"location":"reference/%2Bvlt/%2Bmath/clip.m/","text":"vlt.math.clip \u00b6 CLIP - Clip values between a low and a high limit B = vlt . math . clip ( A , [ LOW HIGH ]) Return a variable B , the same size as A , except that all values of A that are below LOW are set to the value LOW , and all values that are above HIGH are set to HIGH . See also : vlt . math . rectify Example : b = vlt . math . clip ([ - Inf 0 1 2 3 Inf ],[ 1 2 ]) % returns b = [ 1 1 1 2 2 2 ]","title":"vlt.math.clip"},{"location":"reference/%2Bvlt/%2Bmath/clip.m/#vltmathclip","text":"CLIP - Clip values between a low and a high limit B = vlt . math . clip ( A , [ LOW HIGH ]) Return a variable B , the same size as A , except that all values of A that are below LOW are set to the value LOW , and all values that are above HIGH are set to HIGH . See also : vlt . math . rectify Example : b = vlt . math . clip ([ - Inf 0 1 2 3 Inf ],[ 1 2 ]) % returns b = [ 1 1 1 2 2 2 ]","title":"vlt.math.clip"},{"location":"reference/%2Bvlt/%2Bmath/cluster_points_gui.m/","text":"vlt.math.cluster_points_gui \u00b6 CLUSTER_POINTS_GUI - Cluster points into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = vlt . math . cluster_points_gui ( 'POINTS' , POINTS ) Brings up a graphical user interface to allow the user to cluster POINTS ( a structure with field names and 1 - D values ) using several algorithms . POINTS should be a structure with fieldnames equal to the variable names ( e . g . , 'x' , 'y' , etc ), and the value in each field name should be 1 - dimensional . Additional parameters can be adjusted by passing name / value pairs at the end of the function : 'clusterids' : preliminary cluster ids 'ColorOrder' : Color order for cluster drawings ; defaults : to axes color order 'UnclassifiedColor' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] 'RandomSubset' : Do we plot a random subset of spikes ? Default 1 'RandomSubsetSize' : How many ? Default 200 'ForceQualityAssessment' : Should we force the user to choose cluster quality : before closing ? Default 1 'EnableClusterEditing' : Should we enable cluster editing ? Default 1 'AskBeforeDone' : Ask user to confirm they are really done Default 1 'MarkerSize' : MarkerSize for plotting ; default 10 'FigureName' : Name of the figure ; default \"Cluster Points\" . 'IsModal' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values .","title":"vlt.math.cluster_points_gui"},{"location":"reference/%2Bvlt/%2Bmath/cluster_points_gui.m/#vltmathcluster_points_gui","text":"CLUSTER_POINTS_GUI - Cluster points into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = vlt . math . cluster_points_gui ( 'POINTS' , POINTS ) Brings up a graphical user interface to allow the user to cluster POINTS ( a structure with field names and 1 - D values ) using several algorithms . POINTS should be a structure with fieldnames equal to the variable names ( e . g . , 'x' , 'y' , etc ), and the value in each field name should be 1 - dimensional . Additional parameters can be adjusted by passing name / value pairs at the end of the function : 'clusterids' : preliminary cluster ids 'ColorOrder' : Color order for cluster drawings ; defaults : to axes color order 'UnclassifiedColor' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] 'RandomSubset' : Do we plot a random subset of spikes ? Default 1 'RandomSubsetSize' : How many ? Default 200 'ForceQualityAssessment' : Should we force the user to choose cluster quality : before closing ? Default 1 'EnableClusterEditing' : Should we enable cluster editing ? Default 1 'AskBeforeDone' : Ask user to confirm they are really done Default 1 'MarkerSize' : MarkerSize for plotting ; default 10 'FigureName' : Name of the figure ; default \"Cluster Points\" . 'IsModal' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values .","title":"vlt.math.cluster_points_gui"},{"location":"reference/%2Bvlt/%2Bmath/compass2cartesian.m/","text":"vlt.math.compass2cartesian \u00b6 vlt . math . compass2cartesian - Convert angles from compass to cartesian R = vlt . math . compass2cartesian ( C , USERADIANS ) Converts angles from compass format to cartesian . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"vlt.math.compass2cartesian"},{"location":"reference/%2Bvlt/%2Bmath/compass2cartesian.m/#vltmathcompass2cartesian","text":"vlt . math . compass2cartesian - Convert angles from compass to cartesian R = vlt . math . compass2cartesian ( C , USERADIANS ) Converts angles from compass format to cartesian . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"vlt.math.compass2cartesian"},{"location":"reference/%2Bvlt/%2Bmath/complex2vector.m/","text":"vlt.math.complex2vector \u00b6 vlt . math . complex2vector - Convert a complex variable into a 2 D vector V = vlt . math . complex2vector ( C ) Converts a complex quantity C = A + sqrt ( -1 ) * B into a vector V = [ A B ].","title":"vlt.math.complex2vector"},{"location":"reference/%2Bvlt/%2Bmath/complex2vector.m/#vltmathcomplex2vector","text":"vlt . math . complex2vector - Convert a complex variable into a 2 D vector V = vlt . math . complex2vector ( C ) Converts a complex quantity C = A + sqrt ( -1 ) * B into a vector V = [ A B ].","title":"vlt.math.complex2vector"},{"location":"reference/%2Bvlt/%2Bmath/cov_of_cloud.m/","text":"vlt.math.cov_of_cloud \u00b6 COV_OF_CLOUD - generate a cloud of gaussian points and compute covariance matrix [ C , PTS ] = vlt . math . cov_of_cloud ( STD1 , STD2 , ROTATION , NUMPOINTS ) Sometimes you just want to generate a cloud of gaussian points , rotate them , and compute the covariance matrix . You know you should be able to directly calculate the covariance matrix , but you have a grant due , and you 've got to move fast . Example : [ c , pts ] = vlt . math . cov_of_cloud ( 2 , 0.04 , 1 , 1000 ); figure ; subplot ( 2 , 2 , 1 ); plot ( pts (:, 1 ), pts (:, 2 ), 'o' ); subplot ( 2 , 2 , 2 ); [ X , T ] = meshgrid ([ 0 : 0.1 : 10 ],[ 0 : 0.001 : 0.3 ]); Z = X * 0 ; Z = Z + reshape ( mvnpdf ([ X (:) T (:)], mu , sigma { i }), size ( X , 1 ), size ( X , 2 )); pcolor ( X , T , Z ); colormap jet ; caxis ([ - max ( Z (:)) max ( Z (:))]); shading flat","title":"vlt.math.cov_of_cloud"},{"location":"reference/%2Bvlt/%2Bmath/cov_of_cloud.m/#vltmathcov_of_cloud","text":"COV_OF_CLOUD - generate a cloud of gaussian points and compute covariance matrix [ C , PTS ] = vlt . math . cov_of_cloud ( STD1 , STD2 , ROTATION , NUMPOINTS ) Sometimes you just want to generate a cloud of gaussian points , rotate them , and compute the covariance matrix . You know you should be able to directly calculate the covariance matrix , but you have a grant due , and you 've got to move fast . Example : [ c , pts ] = vlt . math . cov_of_cloud ( 2 , 0.04 , 1 , 1000 ); figure ; subplot ( 2 , 2 , 1 ); plot ( pts (:, 1 ), pts (:, 2 ), 'o' ); subplot ( 2 , 2 , 2 ); [ X , T ] = meshgrid ([ 0 : 0.1 : 10 ],[ 0 : 0.001 : 0.3 ]); Z = X * 0 ; Z = Z + reshape ( mvnpdf ([ X (:) T (:)], mu , sigma { i }), size ( X , 1 ), size ( X , 2 )); pcolor ( X , T , Z ); colormap jet ; caxis ([ - max ( Z (:)) max ( Z (:))]); shading flat","title":"vlt.math.cov_of_cloud"},{"location":"reference/%2Bvlt/%2Bmath/dangdiffwrap.m/","text":"vlt.math.dangdiffwrap \u00b6 DANGDIFF - Derivative of angular difference in 0..WRAP DD = DANGDIFF(A,WRAP) Returns numerical derivative of angular difference in 0..wrap Value is always -1, 0, or 1","title":"vlt.math.dangdiffwrap"},{"location":"reference/%2Bvlt/%2Bmath/dangdiffwrap.m/#vltmathdangdiffwrap","text":"DANGDIFF - Derivative of angular difference in 0..WRAP DD = DANGDIFF(A,WRAP) Returns numerical derivative of angular difference in 0..wrap Value is always -1, 0, or 1","title":"vlt.math.dangdiffwrap"},{"location":"reference/%2Bvlt/%2Bmath/deg2rad.m/","text":"vlt.math.deg2rad \u00b6 vlt.math.deg2rad R = vlt.math.deg2rad(D) Converts degrees to radians. R = D / (180/pi);","title":"vlt.math.deg2rad"},{"location":"reference/%2Bvlt/%2Bmath/deg2rad.m/#vltmathdeg2rad","text":"vlt.math.deg2rad R = vlt.math.deg2rad(D) Converts degrees to radians. R = D / (180/pi);","title":"vlt.math.deg2rad"},{"location":"reference/%2Bvlt/%2Bmath/dist2line.m/","text":"vlt.math.dist2line \u00b6 DIST2LINE - Computes distance between point and line , and closest point [ D , X1 , Y1 ] = DIST2ILNE ( M , B , Z ) Computes the distance D from a point Z = [ X0 Y0 ] to a line defined by Y = M * X + B . The point [ X1 Y1 ] is the closest point on line Y to point Z = [ X0 Y0 ]. If M is Inf then B is assumed to be X location of the line .","title":"vlt.math.dist2line"},{"location":"reference/%2Bvlt/%2Bmath/dist2line.m/#vltmathdist2line","text":"DIST2LINE - Computes distance between point and line , and closest point [ D , X1 , Y1 ] = DIST2ILNE ( M , B , Z ) Computes the distance D from a point Z = [ X0 Y0 ] to a line defined by Y = M * X + B . The point [ X1 Y1 ] is the closest point on line Y to point Z = [ X0 Y0 ]. If M is Inf then B is assumed to be X location of the line .","title":"vlt.math.dist2line"},{"location":"reference/%2Bvlt/%2Bmath/divide_nozero.m/","text":"vlt.math.divide_nozero \u00b6 vlt.math.divide_nozero - performs division such that 0/0 = 0 Z = vlt.math.divide_nozero(X,Y) Performs an element-by-element divison of X and Y in the usual way except that 0/0 is 0 instead of NaN. n/0, where n is any number except zero, will still be inf. See also: RDIVIDE, LDIVIDE","title":"vlt.math.divide_nozero"},{"location":"reference/%2Bvlt/%2Bmath/divide_nozero.m/#vltmathdivide_nozero","text":"vlt.math.divide_nozero - performs division such that 0/0 = 0 Z = vlt.math.divide_nozero(X,Y) Performs an element-by-element divison of X and Y in the usual way except that 0/0 is 0 instead of NaN. n/0, where n is any number except zero, will still be inf. See also: RDIVIDE, LDIVIDE","title":"vlt.math.divide_nozero"},{"location":"reference/%2Bvlt/%2Bmath/dog.m/","text":"vlt.math.dog \u00b6 vlt . math . dog - difference of gaussians Y = vlt . math . dog ( X , P_DOG ) Given parameters for a difference of gaussians function : P_DOG = [ a1 b1 a2 b2 ], returns vlt . math . dog ( X , P_DOG ) = [ a1 * exp ( - X . ^ 2 / ( 2 * b1 ^ 2 ) - a2 * exp ( - X . ^ 2 / ( 2 * b2 ^ 2 )) ] See also : vlt . math . dog2dogf","title":"vlt.math.dog"},{"location":"reference/%2Bvlt/%2Bmath/dog.m/#vltmathdog","text":"vlt . math . dog - difference of gaussians Y = vlt . math . dog ( X , P_DOG ) Given parameters for a difference of gaussians function : P_DOG = [ a1 b1 a2 b2 ], returns vlt . math . dog ( X , P_DOG ) = [ a1 * exp ( - X . ^ 2 / ( 2 * b1 ^ 2 ) - a2 * exp ( - X . ^ 2 / ( 2 * b2 ^ 2 )) ] See also : vlt . math . dog2dogf","title":"vlt.math.dog"},{"location":"reference/%2Bvlt/%2Bmath/dog2dogf.m/","text":"vlt.math.dog2dogf \u00b6 vlt . math . dog2dogf - convert difference of gaussian parameters to difference of gaussian Fourier transform parameters P_DOGF = vlt . math . dog2dogf ( P_DOG ) Given parameters for a difference of gaussians function : P_DOG = [ a1 b1 a2 b2 ], where vlt . math . dog ( X , P_DOG ) = [ a1 * exp ( - X .^ 2 / ( 2 * b1 ^ 2 ) - a2 * exp ( - X .^ 2 / ( 2 * b2 ^ 2 )) ], this function computes the parameters for calculating the curve in frequency space ( in cycles / unit x ). The Fourier transform of vlt . math . dog ( X , P_DOG ) is sqrt ( 2 * pi ) * [ a1 * b1 * exp ( - 0.5 * b1 ^ 2 * ( 2 * pi ) ^ 2 * f ^ 2 ) - a1 * b2 * exp ( - 0.5 * b2 ^ 2 * ( 2 * pi ) ^ 2 * f ^ 2 )] This function is itself a difference of gaussian function . Therefore , to express these values in terms of the original P_DOG , the parameters are converted to be P_DOGF = [ sqrt ( 2 * pi ) * a1 * b1 1 / ( 2 * pi * b1 ) sqrt ( 2 * pi ) * a2 * b2 1 / ( 2 * pi * b2 )] Through the miracle of math , this function is also it ' s own inverse : p_dog = vlt . math . dog2dofg ( vlt . math . dog2dogf ( p_dog )) See also : vlt . math . dog Example : x = - 50 : 0.1 : 50 ; % space, in degrees of visual angle p_dog = [ 1 5 0.5 10 ] y = vlt . math . dog ( x , p_dog ); figure ; subplot ( 2 , 2 , 1 ); plot ( x , y ); xlabel ( 'Space (degrees)' ); ylabel ( 'Response (sp/s)' ); box off ; subplot ( 2 , 2 , 2 ); % plot the actual Fourier transform [ Y , f ] = vlt . math . fouriercoeffs ( y (:), x ( 2 ) - x ( 1 )); plot ( f , abs ( Y ), 'bx-' ); xlabel ( 'Frequency (cycles/deg)' ); ylabel ( 'Abs response (sp/s)' ); box off ; set ( gca , 'xlim' ,[ 0 0.25 ]); % plot the calculated version p_dogf = vlt . math . dog2dogf ( p_dog ); Y2 = vlt . math . dog ( f , p_dogf ); % convert from radial frequency to cycles Y2 = [ Y2 ( 1 ) 2 * Y2 ( 2 : end )] / ( x ( end ) - x ( 1 )); % convert to same units as fourier_coeffs hold on ; plot ( f , Y2 , 'go-' );","title":"vlt.math.dog2dogf"},{"location":"reference/%2Bvlt/%2Bmath/dog2dogf.m/#vltmathdog2dogf","text":"vlt . math . dog2dogf - convert difference of gaussian parameters to difference of gaussian Fourier transform parameters P_DOGF = vlt . math . dog2dogf ( P_DOG ) Given parameters for a difference of gaussians function : P_DOG = [ a1 b1 a2 b2 ], where vlt . math . dog ( X , P_DOG ) = [ a1 * exp ( - X .^ 2 / ( 2 * b1 ^ 2 ) - a2 * exp ( - X .^ 2 / ( 2 * b2 ^ 2 )) ], this function computes the parameters for calculating the curve in frequency space ( in cycles / unit x ). The Fourier transform of vlt . math . dog ( X , P_DOG ) is sqrt ( 2 * pi ) * [ a1 * b1 * exp ( - 0.5 * b1 ^ 2 * ( 2 * pi ) ^ 2 * f ^ 2 ) - a1 * b2 * exp ( - 0.5 * b2 ^ 2 * ( 2 * pi ) ^ 2 * f ^ 2 )] This function is itself a difference of gaussian function . Therefore , to express these values in terms of the original P_DOG , the parameters are converted to be P_DOGF = [ sqrt ( 2 * pi ) * a1 * b1 1 / ( 2 * pi * b1 ) sqrt ( 2 * pi ) * a2 * b2 1 / ( 2 * pi * b2 )] Through the miracle of math , this function is also it ' s own inverse : p_dog = vlt . math . dog2dofg ( vlt . math . dog2dogf ( p_dog )) See also : vlt . math . dog Example : x = - 50 : 0.1 : 50 ; % space, in degrees of visual angle p_dog = [ 1 5 0.5 10 ] y = vlt . math . dog ( x , p_dog ); figure ; subplot ( 2 , 2 , 1 ); plot ( x , y ); xlabel ( 'Space (degrees)' ); ylabel ( 'Response (sp/s)' ); box off ; subplot ( 2 , 2 , 2 ); % plot the actual Fourier transform [ Y , f ] = vlt . math . fouriercoeffs ( y (:), x ( 2 ) - x ( 1 )); plot ( f , abs ( Y ), 'bx-' ); xlabel ( 'Frequency (cycles/deg)' ); ylabel ( 'Abs response (sp/s)' ); box off ; set ( gca , 'xlim' ,[ 0 0.25 ]); % plot the calculated version p_dogf = vlt . math . dog2dogf ( p_dog ); Y2 = vlt . math . dog ( f , p_dogf ); % convert from radial frequency to cycles Y2 = [ Y2 ( 1 ) 2 * Y2 ( 2 : end )] / ( x ( end ) - x ( 1 )); % convert to same units as fourier_coeffs hold on ; plot ( f , Y2 , 'go-' );","title":"vlt.math.dog2dogf"},{"location":"reference/%2Bvlt/%2Bmath/dogf2dog.m/","text":"vlt.math.dogf2dog \u00b6 vlt . math . dogf2dog - convert difference of gaussian parameters in frequency space to real space P_DOG = vlt . math . dogf2dog ( P_DOGF ) Given parameters for a difference of gaussians function in frequency space , where f is cycles / units P_DOGF = [ a1 b1 a2 b2 ], where vlt . math . dog ( F , P_DOG ) = [ a1 * exp ( - f . ^ 2 / ( 2 * b1 ^ 2 )) - a2 * exp ( - f . ^ 2 / ( 2 * b2 ^ 2 )) ], this function computes the parameters for calculating the curve in real space ( 1 / f units ) which is sqrt ( 2 * pi ) * [ a1 * b1 * exp ( - 0 . 5 * b1 ^ 2 * x ^ 2 ) - a1 * b2 * exp ( - 0 . 5 * b2 ^ 2 * x ^ 2 ) This function is itself a difference of gaussian function . Therefore , to express these values in terms of the original P_DOG , the parameters are converted to be P_DOGF = [ sqrt ( 2 * pi ) * a1 * b1 1 / ( 2 * pi * b1 ) sqrt ( 2 * pi ) * a2 * b2 1 / ( 2 * pi * b2 ) ] Through the miracle of math , this function is also it 's own inverse: p_dog = vlt.math.dog2dofg(vlt.math.dog2dogf(p_dog)) This function just calls vlt.math.dog2dogf, as it is its own inverse. See also: vlt.math.dog, vlt.math.dog2dogf","title":"vlt.math.dogf2dog"},{"location":"reference/%2Bvlt/%2Bmath/dogf2dog.m/#vltmathdogf2dog","text":"vlt . math . dogf2dog - convert difference of gaussian parameters in frequency space to real space P_DOG = vlt . math . dogf2dog ( P_DOGF ) Given parameters for a difference of gaussians function in frequency space , where f is cycles / units P_DOGF = [ a1 b1 a2 b2 ], where vlt . math . dog ( F , P_DOG ) = [ a1 * exp ( - f . ^ 2 / ( 2 * b1 ^ 2 )) - a2 * exp ( - f . ^ 2 / ( 2 * b2 ^ 2 )) ], this function computes the parameters for calculating the curve in real space ( 1 / f units ) which is sqrt ( 2 * pi ) * [ a1 * b1 * exp ( - 0 . 5 * b1 ^ 2 * x ^ 2 ) - a1 * b2 * exp ( - 0 . 5 * b2 ^ 2 * x ^ 2 ) This function is itself a difference of gaussian function . Therefore , to express these values in terms of the original P_DOG , the parameters are converted to be P_DOGF = [ sqrt ( 2 * pi ) * a1 * b1 1 / ( 2 * pi * b1 ) sqrt ( 2 * pi ) * a2 * b2 1 / ( 2 * pi * b2 ) ] Through the miracle of math , this function is also it 's own inverse: p_dog = vlt.math.dog2dofg(vlt.math.dog2dogf(p_dog)) This function just calls vlt.math.dog2dogf, as it is its own inverse. See also: vlt.math.dog, vlt.math.dog2dogf","title":"vlt.math.dogf2dog"},{"location":"reference/%2Bvlt/%2Bmath/dogfull.m/","text":"vlt.math.dogfull \u00b6 vlt . math . dog - Difference of gaussian function evaluation Y = vlt . math . dogfull ( X , [ A B C D E F G ] ) Evalutes the full difference of gaussian function for the given values of X : Y ( X ) = A + B * exp ( - (( X-C ).^ 2 )/ D ^ 2 ) - E * exp ( - (( X-F ).^ 2 )/ G ^ 2 ) Differs from vlt . math . dog in that nonzero values of C and F are permitted . ( C and F are not parameters in vlt . math . dog ; they must be 0 .)","title":"vlt.math.dogfull"},{"location":"reference/%2Bvlt/%2Bmath/dogfull.m/#vltmathdogfull","text":"vlt . math . dog - Difference of gaussian function evaluation Y = vlt . math . dogfull ( X , [ A B C D E F G ] ) Evalutes the full difference of gaussian function for the given values of X : Y ( X ) = A + B * exp ( - (( X-C ).^ 2 )/ D ^ 2 ) - E * exp ( - (( X-F ).^ 2 )/ G ^ 2 ) Differs from vlt . math . dog in that nonzero values of C and F are permitted . ( C and F are not parameters in vlt . math . dog ; they must be 0 .)","title":"vlt.math.dogfull"},{"location":"reference/%2Bvlt/%2Bmath/double_exp.m/","text":"vlt.math.double_exp \u00b6 vlt . math . double_exp - Double exponential G = vlt . math . double_exp ( T , TAU1 , TAU2 ) Returns (( TAU1 * TAU2 ) / ( TAU1 - TAU2 )) * ( EXP ( - T / TAU1 ) - EXP ( - T / TAU2 )) Roughly speaking , if TAU1 and TAU2 are very different , then TAU1 is an onset time constant and TAU2 is an offset constant Time to peak is ( TAU1 * TAU2 / ( TAU1 - TAU2 )) * LOG ( TAU1 / TAU2 )","title":"vlt.math.double_exp"},{"location":"reference/%2Bvlt/%2Bmath/double_exp.m/#vltmathdouble_exp","text":"vlt . math . double_exp - Double exponential G = vlt . math . double_exp ( T , TAU1 , TAU2 ) Returns (( TAU1 * TAU2 ) / ( TAU1 - TAU2 )) * ( EXP ( - T / TAU1 ) - EXP ( - T / TAU2 )) Roughly speaking , if TAU1 and TAU2 are very different , then TAU1 is an onset time constant and TAU2 is an offset constant Time to peak is ( TAU1 * TAU2 / ( TAU1 - TAU2 )) * LOG ( TAU1 / TAU2 )","title":"vlt.math.double_exp"},{"location":"reference/%2Bvlt/%2Bmath/double_gauss_180.m/","text":"vlt.math.double_gauss_180 \u00b6 DOUBLE_GAUSS - Double gaussian function Computes a double gaussian function DG = DOUBLE_GAUSS(X, PARAMETERS) DG=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) PARAMETERS = [Rsp Rp Op sig Rn] parameters correspond to Carrandini fit parameters where Rsp=offset,Rp=peak parameter of first gaussian, 0p=location of first peak, sig=width parameter, Rn=peak parameter of second gaussian and takes the angle difference between the first peak and second peak","title":"vlt.math.double_gauss_180"},{"location":"reference/%2Bvlt/%2Bmath/double_gauss_180.m/#vltmathdouble_gauss_180","text":"DOUBLE_GAUSS - Double gaussian function Computes a double gaussian function DG = DOUBLE_GAUSS(X, PARAMETERS) DG=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) PARAMETERS = [Rsp Rp Op sig Rn] parameters correspond to Carrandini fit parameters where Rsp=offset,Rp=peak parameter of first gaussian, 0p=location of first peak, sig=width parameter, Rn=peak parameter of second gaussian and takes the angle difference between the first peak and second peak","title":"vlt.math.double_gauss_180"},{"location":"reference/%2Bvlt/%2Bmath/double_gauss_DoG.m/","text":"vlt.math.double_gauss_DoG \u00b6 DOUBLE_GAUSS_DOG - computes a double-gaussian function that is modulated by a difference of gaussians Z = vlt.math.double_gauss_DoG(THETA, SF, DOUBLE_GAUSS_PARAMS, DOG_PARAMS) THETA corresponds to angle SF corresponds to spatial frequency DOUBLE_GAUSS_PARAMS = [a b c d e] DOG_PARAMS = [0 a2 b2 c2 d2] See also: vlt.math.double_gauss_180, DOG","title":"vlt.math.double_gauss_DoG"},{"location":"reference/%2Bvlt/%2Bmath/double_gauss_DoG.m/#vltmathdouble_gauss_dog","text":"DOUBLE_GAUSS_DOG - computes a double-gaussian function that is modulated by a difference of gaussians Z = vlt.math.double_gauss_DoG(THETA, SF, DOUBLE_GAUSS_PARAMS, DOG_PARAMS) THETA corresponds to angle SF corresponds to spatial frequency DOUBLE_GAUSS_PARAMS = [a b c d e] DOG_PARAMS = [0 a2 b2 c2 d2] See also: vlt.math.double_gauss_180, DOG","title":"vlt.math.double_gauss_DoG"},{"location":"reference/%2Bvlt/%2Bmath/double_gauss_dog_plot.m/","text":"vlt.math.double_gauss_dog_plot \u00b6 DOUBLE_GAUSS_DOG_PLOT(R, THETA, SF) Plots a surface figure in the current axes in the current figure of R (response), theta (angle), sf (spatial frequency)","title":"vlt.math.double_gauss_dog_plot"},{"location":"reference/%2Bvlt/%2Bmath/double_gauss_dog_plot.m/#vltmathdouble_gauss_dog_plot","text":"DOUBLE_GAUSS_DOG_PLOT(R, THETA, SF) Plots a surface figure in the current axes in the current figure of R (response), theta (angle), sf (spatial frequency)","title":"vlt.math.double_gauss_dog_plot"},{"location":"reference/%2Bvlt/%2Bmath/double_gaussian_plot.m/","text":"vlt.math.double_gaussian_plot \u00b6 DOUBLE_GAUSSIAN_PLOT - calculate a double gaussian Computes responses to a double gaussian curve Z = vlt.math.double_gaussian_plot(P, XI, WRAP), where P = parameters = [offset Rp Op Sigm Rn angle_offset] XI are the angles to be evaluated and WRAP is the wrap to be performed by vlt.math.angdiffwrap (usually 360) The curve is Z = offset + Rp*exp(-(vlt.math.angdiffwrap(xi-Op,wrap).^2)/(2*Sigm*Sigm))+... Rn*exp(-(vlt.math.angdiffwrap(xi-(Op+angle_offset),wrap)/(2*Sigm*Sigm)))","title":"vlt.math.double_gaussian_plot"},{"location":"reference/%2Bvlt/%2Bmath/double_gaussian_plot.m/#vltmathdouble_gaussian_plot","text":"DOUBLE_GAUSSIAN_PLOT - calculate a double gaussian Computes responses to a double gaussian curve Z = vlt.math.double_gaussian_plot(P, XI, WRAP), where P = parameters = [offset Rp Op Sigm Rn angle_offset] XI are the angles to be evaluated and WRAP is the wrap to be performed by vlt.math.angdiffwrap (usually 360) The curve is Z = offset + Rp*exp(-(vlt.math.angdiffwrap(xi-Op,wrap).^2)/(2*Sigm*Sigm))+... Rn*exp(-(vlt.math.angdiffwrap(xi-(Op+angle_offset),wrap)/(2*Sigm*Sigm)))","title":"vlt.math.double_gaussian_plot"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf.m/","text":"vlt.math.ellipse_on_mvnpdf \u00b6 ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse ( or elliptical aperture ) on multivariate normal Y = vlt . math . ellipse_on_mvnpdf ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse ( or an elliptical aperature ) on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) The sixth row is optional ; if it is 0 , then the ellipse is a filled ellipse . If it is - N , then the ellipse describes the aperature of stimulation . The aperture is taken to be carved out of a larger circle of diameter N . MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) Note that the PDF is scaled by the step size of the mesh ; it is assumed that the mesh step size is constant . Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf.m/#vltmathellipse_on_mvnpdf","text":"ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse ( or elliptical aperture ) on multivariate normal Y = vlt . math . ellipse_on_mvnpdf ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse ( or an elliptical aperature ) on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) The sixth row is optional ; if it is 0 , then the ellipse is a filled ellipse . If it is - N , then the ellipse describes the aperature of stimulation . The aperture is taken to be carved out of a larger circle of diameter N . MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) Note that the PDF is scaled by the step size of the mesh ; it is assumed that the mesh step size is constant . Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_nk_x0.m/","text":"vlt.math.ellipse_on_mvnpdf_nk_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal - Naka - Rushton response Y = vlt . math . ellipse_on_mvnpdf_nk_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor NAKA_RUSHTON_C50 = X0 ( 7 ) NAKA_RUSHTON_N = X0 ( 8 ) ( see vlt . fit . naka_rushton_func ) ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF , vlt . fit . naka_rushton_func","title":"vlt.math.ellipse_on_mvnpdf_nk_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_nk_x0.m/#vltmathellipse_on_mvnpdf_nk_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal - Naka - Rushton response Y = vlt . math . ellipse_on_mvnpdf_nk_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor NAKA_RUSHTON_C50 = X0 ( 7 ) NAKA_RUSHTON_N = X0 ( 8 ) ( see vlt . fit . naka_rushton_func ) ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF , vlt . fit . naka_rushton_func","title":"vlt.math.ellipse_on_mvnpdf_nk_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_nopos_surr_x0.m/","text":"vlt.math.ellipse_on_mvnpdf_nopos_surr_x0 \u00b6 ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position , linear modulation Y = ELLIPSE_ON_MVNPDF_NOPOSITION_SURR_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor B = X0 ( 3 ) - A scale factor for the modulation component ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or N ( if the stimulus is an aperture on an ellipse of N pixels ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf_nopos_surr_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_nopos_surr_x0.m/#vltmathellipse_on_mvnpdf_nopos_surr_x0","text":"ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position , linear modulation Y = ELLIPSE_ON_MVNPDF_NOPOSITION_SURR_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor B = X0 ( 3 ) - A scale factor for the modulation component ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or N ( if the stimulus is an aperture on an ellipse of N pixels ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf_nopos_surr_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_noposition_x0.m/","text":"vlt.math.ellipse_on_mvnpdf_noposition_x0 \u00b6 ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position Y = vlt . math . ellipse_on_mvnpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or 1 ( if the stimulus is an aperture ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf_noposition_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_noposition_x0.m/#vltmathellipse_on_mvnpdf_noposition_x0","text":"ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position Y = vlt . math . ellipse_on_mvnpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or 1 ( if the stimulus is an aperture ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf_noposition_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_x0.m/","text":"vlt.math.ellipse_on_mvnpdf_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = vlt . math . ellipse_on_mvnpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnpdf_x0.m/#vltmathellipse_on_mvnpdf_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = vlt . math . ellipse_on_mvnpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.ellipse_on_mvnpdf_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnskewpdf.m/","text":"vlt.math.ellipse_on_mvnskewpdf \u00b6 ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on skewed multivariate normal Y = vlt . math . ellipse_on_mvnpdf ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA , ALPHA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) ALPHA - 1 x2 , the skewness parameter ( see vlt . math . mvnskewpdf ) Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , vlt . math . mvnskewpdf","title":"vlt.math.ellipse_on_mvnskewpdf"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnskewpdf.m/#vltmathellipse_on_mvnskewpdf","text":"ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on skewed multivariate normal Y = vlt . math . ellipse_on_mvnpdf ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA , ALPHA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) ALPHA - 1 x2 , the skewness parameter ( see vlt . math . mvnskewpdf ) Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , vlt . math . mvnskewpdf","title":"vlt.math.ellipse_on_mvnskewpdf"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnskewpdf_x0.m/","text":"vlt.math.ellipse_on_mvnskewpdf_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = vlt . math . ellipse_on_mvnskewpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf A = X0 ( 6 ) - scale factor ALPHA = X0 ([ 7 8 ]) the skewness factors ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , vlt . math . mvnskewpdf","title":"vlt.math.ellipse_on_mvnskewpdf_x0"},{"location":"reference/%2Bvlt/%2Bmath/ellipse_on_mvnskewpdf_x0.m/#vltmathellipse_on_mvnskewpdf_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = vlt . math . ellipse_on_mvnskewpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf A = X0 ( 6 ) - scale factor ALPHA = X0 ([ 7 8 ]) the skewness factors ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , vlt . math . mvnskewpdf","title":"vlt.math.ellipse_on_mvnskewpdf_x0"},{"location":"reference/%2Bvlt/%2Bmath/eucnorm.m/","text":"vlt.math.eucnorm \u00b6 EUCNORM ( X ) d = vlt . math . eucnorm ( X ) Returns the Euclidean norm for each column in X .","title":"vlt.math.eucnorm"},{"location":"reference/%2Bvlt/%2Bmath/eucnorm.m/#vltmatheucnorm","text":"EUCNORM ( X ) d = vlt . math . eucnorm ( X ) Returns the Euclidean norm for each column in X .","title":"vlt.math.eucnorm"},{"location":"reference/%2Bvlt/%2Bmath/floorfloor.m/","text":"vlt.math.floorfloor \u00b6 FLOORFLOOR Rounds (i,i+1] to i B = vlt.math.floorfloor(X)","title":"vlt.math.floorfloor"},{"location":"reference/%2Bvlt/%2Bmath/floorfloor.m/#vltmathfloorfloor","text":"FLOORFLOOR Rounds (i,i+1] to i B = vlt.math.floorfloor(X)","title":"vlt.math.floorfloor"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs.m/","text":"vlt.math.fouriercoeffs \u00b6 vlt . math . fouriercoeffs - find Fourier coefficients for data Uses FFT to compute the Fourier coefficients for a vector of data . [ FC , FREQS ] = vlt . math . fouriercoeffs ( DATA , SI ) where DATA is a vector of data and SI is the sampling interval ( in seconds ), returns FC the Fourier coefficients and FREQS , the frequency of each coefficient . The Fourier coefficients are defined [ 1 ] to be : B0 = ( 1 / T ) * sum ( data ) ( returned in FC ( 1 )) Bn = ( 2 / T ) * integral ( 0 , T , data .* cos ( 2 * pi * n / T )) ( returned in real ( FC ( n + 1 ))) An = ( 2 / T ) * integral ( 0 , T , data .* sin ( 2 * pi * n / T )) ( returned in imag ( FC ( n + 1 ))) Each entry of FC is the sum of Bn + An * sqrt ( -1 ) so that Bn = real ( FC ( n + 1 )) and An = imag ( FC ( n + 1 )) Note that these Fourier cofficients are normalized differently than those returned by the Matlab function FFT . [ 1 ] : _Waves_ , Berkeley Physics Course Volume 3 , Crawford , 1968 See also : FFT Example : t = 0 : 0 . 001 : 3 ; f = 4 ; % 4 Hz phase = pi / 3 ; s = 2 + 0 . 5 * sin ( 2 * pi * f * t + phase ); % sinusoidal function with amplitude 0 . 5 [ fc , freqs ] = fouriercoeffs ( s , 0 . 001 ); figure ; subplot ( 2 , 1 , 1 ); plot ( t , s ); xlabel ( 'Time(s)' ); ylabel ( 'Signal(a.u.)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( freqs , abs ( fc ), 'o' ); A = axis ; axis ( [ 0 10 0 3 ] ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Magnitude of Fourier coefficient' ); box off ;","title":"vlt.math.fouriercoeffs"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs.m/#vltmathfouriercoeffs","text":"vlt . math . fouriercoeffs - find Fourier coefficients for data Uses FFT to compute the Fourier coefficients for a vector of data . [ FC , FREQS ] = vlt . math . fouriercoeffs ( DATA , SI ) where DATA is a vector of data and SI is the sampling interval ( in seconds ), returns FC the Fourier coefficients and FREQS , the frequency of each coefficient . The Fourier coefficients are defined [ 1 ] to be : B0 = ( 1 / T ) * sum ( data ) ( returned in FC ( 1 )) Bn = ( 2 / T ) * integral ( 0 , T , data .* cos ( 2 * pi * n / T )) ( returned in real ( FC ( n + 1 ))) An = ( 2 / T ) * integral ( 0 , T , data .* sin ( 2 * pi * n / T )) ( returned in imag ( FC ( n + 1 ))) Each entry of FC is the sum of Bn + An * sqrt ( -1 ) so that Bn = real ( FC ( n + 1 )) and An = imag ( FC ( n + 1 )) Note that these Fourier cofficients are normalized differently than those returned by the Matlab function FFT . [ 1 ] : _Waves_ , Berkeley Physics Course Volume 3 , Crawford , 1968 See also : FFT Example : t = 0 : 0 . 001 : 3 ; f = 4 ; % 4 Hz phase = pi / 3 ; s = 2 + 0 . 5 * sin ( 2 * pi * f * t + phase ); % sinusoidal function with amplitude 0 . 5 [ fc , freqs ] = fouriercoeffs ( s , 0 . 001 ); figure ; subplot ( 2 , 1 , 1 ); plot ( t , s ); xlabel ( 'Time(s)' ); ylabel ( 'Signal(a.u.)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( freqs , abs ( fc ), 'o' ); A = axis ; axis ( [ 0 10 0 3 ] ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Magnitude of Fourier coefficient' ); box off ;","title":"vlt.math.fouriercoeffs"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_2d.m/","text":"vlt.math.fouriercoeffs_2d \u00b6 FOURIERCOEFFS_2D - calculate Fourier coeffients for 2 - d fourier analysis [ Y , FX , FY , R , FR ] = vlt . math . fouriercoeffs_2d ( X , PIXELSIZE ) Given a 2 - dimensional signal X ( such as an image ) and the pixel size in meters ( PIXELSIZE ), then the following are computed : Y = shifted discrete 2 d fourier transform of X ( shifted with fftshift ) These coefficients are normalized so that a * exp ( - sqrt ( - 1 ) * 2 * pi * n / T )) has coefficient of a This differs from the default normalization ( none ) of the discrete 2 d fourier transform FX - the frequencies examined in the first dimension ( shifted ) FY - the frequencies examined in the second dimension ( shifted ) R - the Fourier cofficients at fixed radii FR - the Fourier frequencies at fixed radii A progress bar is shown during radial averaging . Example : % a grating X_1 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter X_2 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter f1 = 3 ; % 3 cycles per meter f2 = 10 ; % 10 cycles per meter f3 = 5 ; % 5 cycles per meter [ X1 , X2 ] = meshgrid ( X_1 , X_2 ); X = 1 + 0.5 * sin ( 2 * pi * f1 * X1 ); vlt . plot . imagedisplay ( X ); X_ = 1 + 0.5 * sin ( 2 * pi * f2 * X2 + 2 * pi * f3 * X1 ) + X ; vlt . plot . imagedisplay ( X_ ); [ Y , FX , FY , R , FR ] = vlt . math . fouriercoeffs_2d ( X , 0.001 ); [ Y_ , FX_ , FY_ , R_ , FR_ ] = vlt . math . fouriercoeffs_2d ( X_ , 0.001 ); figure ; plot ( FR , abs ( R ), 'mo' ); % average spatial frequency tuning across all directions hold on ; plot ( FR_ , abs ( R_ ), 'bo' ); % average spatial frequency tuning across all directions xlabel ( 'Spatial frequency (cycles/unit)' ); ylabel ( 'Magnitude' );","title":"vlt.math.fouriercoeffs_2d"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_2d.m/#vltmathfouriercoeffs_2d","text":"FOURIERCOEFFS_2D - calculate Fourier coeffients for 2 - d fourier analysis [ Y , FX , FY , R , FR ] = vlt . math . fouriercoeffs_2d ( X , PIXELSIZE ) Given a 2 - dimensional signal X ( such as an image ) and the pixel size in meters ( PIXELSIZE ), then the following are computed : Y = shifted discrete 2 d fourier transform of X ( shifted with fftshift ) These coefficients are normalized so that a * exp ( - sqrt ( - 1 ) * 2 * pi * n / T )) has coefficient of a This differs from the default normalization ( none ) of the discrete 2 d fourier transform FX - the frequencies examined in the first dimension ( shifted ) FY - the frequencies examined in the second dimension ( shifted ) R - the Fourier cofficients at fixed radii FR - the Fourier frequencies at fixed radii A progress bar is shown during radial averaging . Example : % a grating X_1 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter X_2 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter f1 = 3 ; % 3 cycles per meter f2 = 10 ; % 10 cycles per meter f3 = 5 ; % 5 cycles per meter [ X1 , X2 ] = meshgrid ( X_1 , X_2 ); X = 1 + 0.5 * sin ( 2 * pi * f1 * X1 ); vlt . plot . imagedisplay ( X ); X_ = 1 + 0.5 * sin ( 2 * pi * f2 * X2 + 2 * pi * f3 * X1 ) + X ; vlt . plot . imagedisplay ( X_ ); [ Y , FX , FY , R , FR ] = vlt . math . fouriercoeffs_2d ( X , 0.001 ); [ Y_ , FX_ , FY_ , R_ , FR_ ] = vlt . math . fouriercoeffs_2d ( X_ , 0.001 ); figure ; plot ( FR , abs ( R ), 'mo' ); % average spatial frequency tuning across all directions hold on ; plot ( FR_ , abs ( R_ ), 'bo' ); % average spatial frequency tuning across all directions xlabel ( 'Spatial frequency (cycles/unit)' ); ylabel ( 'Magnitude' );","title":"vlt.math.fouriercoeffs_2d"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_tf.m/","text":"vlt.math.fouriercoeffs_tf \u00b6 FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . Only the data within an integer number of periods are considered . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"vlt.math.fouriercoeffs_tf"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_tf.m/#vltmathfouriercoeffs_tf","text":"FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . Only the data within an integer number of periods are considered . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"vlt.math.fouriercoeffs_tf"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_tf2.m/","text":"vlt.math.fouriercoeffs_tf2 \u00b6 FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"vlt.math.fouriercoeffs_tf2"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_tf2.m/#vltmathfouriercoeffs_tf2","text":"FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"vlt.math.fouriercoeffs_tf2"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_tf_spikes.m/","text":"vlt.math.fouriercoeffs_tf_spikes \u00b6 FOURIERCOEFFS_TF_SPIKES Fourier Transform of a spike train at a particular frequency . F = vlt . math . fouriercoeffs_tf_spikes ( SPIKETIMES , TF , DURATION ) This function returns the normalized fourier coefficient of a spike train that is defined by an array of SPIKETIMES with a duration DURATION . The function calculates ( 2 / DURATION ) * exp ( - 2 * pi * sqrt ( - 1 ) * tf ) . If tf is zero it returns the number of spikes times divided by the duration . Modified from Sooyoung Chung , from Matteo Carandini , by Steve Van Hooser","title":"vlt.math.fouriercoeffs_tf_spikes"},{"location":"reference/%2Bvlt/%2Bmath/fouriercoeffs_tf_spikes.m/#vltmathfouriercoeffs_tf_spikes","text":"FOURIERCOEFFS_TF_SPIKES Fourier Transform of a spike train at a particular frequency . F = vlt . math . fouriercoeffs_tf_spikes ( SPIKETIMES , TF , DURATION ) This function returns the normalized fourier coefficient of a spike train that is defined by an array of SPIKETIMES with a duration DURATION . The function calculates ( 2 / DURATION ) * exp ( - 2 * pi * sqrt ( - 1 ) * tf ) . If tf is zero it returns the number of spikes times divided by the duration . Modified from Sooyoung Chung , from Matteo Carandini , by Steve Van Hooser","title":"vlt.math.fouriercoeffs_tf_spikes"},{"location":"reference/%2Bvlt/%2Bmath/gauss2d_ellipse.m/","text":"vlt.math.gauss2d_ellipse \u00b6 GAUSS2D_ELLIPSE Compute a fullwidth at half - weight ellipse from a 2 d gaussian ELLIPSE_OUT = vlt . math . gauss2d_ellipse ( MU , C , [ N ] ) Given a 2 - d multivariate normal that is described with a mean MU and covariance matrix C , return the size of the major and minor axes at half - height and points for an ellipse that circles the mean at the location of the half - height contour . The equation of the half max ellipse is : ( x - mu ( 1 )) ^ 2 / a ^ 2 + ( y - mu ( 2 )) ^ 2 ) / b ^ 2 == 1 N is an optional argument ( default 10 ) that determines the number of points to include in each branch of the ellipse graph . ( The total number of points will be 2 * N .) The structure ELLIPSE_OUT contains the parameters of the ellipse : Fieldname | Description ----------------------------------------------------------------- plot_ellipse | Ellipse plot points ( 2 by 2 * N ); the first | row are the X points , the second rows are | the Y points a | The value of a in the ellipse equation b | The value of b in the ellipse equation major | max ( a , b ) - the major axis minor | min ( a , b ) - the minor axis w / contribution by Shen Wang","title":"vlt.math.gauss2d_ellipse"},{"location":"reference/%2Bvlt/%2Bmath/gauss2d_ellipse.m/#vltmathgauss2d_ellipse","text":"GAUSS2D_ELLIPSE Compute a fullwidth at half - weight ellipse from a 2 d gaussian ELLIPSE_OUT = vlt . math . gauss2d_ellipse ( MU , C , [ N ] ) Given a 2 - d multivariate normal that is described with a mean MU and covariance matrix C , return the size of the major and minor axes at half - height and points for an ellipse that circles the mean at the location of the half - height contour . The equation of the half max ellipse is : ( x - mu ( 1 )) ^ 2 / a ^ 2 + ( y - mu ( 2 )) ^ 2 ) / b ^ 2 == 1 N is an optional argument ( default 10 ) that determines the number of points to include in each branch of the ellipse graph . ( The total number of points will be 2 * N .) The structure ELLIPSE_OUT contains the parameters of the ellipse : Fieldname | Description ----------------------------------------------------------------- plot_ellipse | Ellipse plot points ( 2 by 2 * N ); the first | row are the X points , the second rows are | the Y points a | The value of a in the ellipse equation b | The value of b in the ellipse equation major | max ( a , b ) - the major axis minor | min ( a , b ) - the minor axis w / contribution by Shen Wang","title":"vlt.math.gauss2d_ellipse"},{"location":"reference/%2Bvlt/%2Bmath/gausslog.m/","text":"vlt.math.gausslog \u00b6 GAUSSLOG - calculate the gaussian log function Y = GAUSSLOG(X, P) Evaluates Y = a+b*exp((log10(x)-log10(c)).^2/(2*d^2)) a is an offset parameter; b is a height parameter above the offset; c is the peak location; d is the width; e is the degree of skewness (0 is none) The parameters are specified in a vector P = [a b c d] See also: vlt.fit.gausslogfit","title":"vlt.math.gausslog"},{"location":"reference/%2Bvlt/%2Bmath/gausslog.m/#vltmathgausslog","text":"GAUSSLOG - calculate the gaussian log function Y = GAUSSLOG(X, P) Evaluates Y = a+b*exp((log10(x)-log10(c)).^2/(2*d^2)) a is an offset parameter; b is a height parameter above the offset; c is the peak location; d is the width; e is the degree of skewness (0 is none) The parameters are specified in a vector P = [a b c d] See also: vlt.fit.gausslogfit","title":"vlt.math.gausslog"},{"location":"reference/%2Bvlt/%2Bmath/generate_random_data.m/","text":"vlt.math.generate_random_data \u00b6 GENERATE_RANDOM_DATA Produce data from different distributions DATA = vlt . math . generate_random_data ( N , DIST , PARAM1 , PARAM2 , ...) Generates data from different distributions . Inputs : N - the number of data points to produce . DIST - the distribution string ; see HELP ICDF Examples : 'Normal' , 'Uniform' PARAM1 - The first parameter of the distribution PARAM2 - The second parameter of the distribution ( see HELP ICDF ) Outputs : DATA - N data points from the distribution .","title":"vlt.math.generate_random_data"},{"location":"reference/%2Bvlt/%2Bmath/generate_random_data.m/#vltmathgenerate_random_data","text":"GENERATE_RANDOM_DATA Produce data from different distributions DATA = vlt . math . generate_random_data ( N , DIST , PARAM1 , PARAM2 , ...) Generates data from different distributions . Inputs : N - the number of data points to produce . DIST - the distribution string ; see HELP ICDF Examples : 'Normal' , 'Uniform' PARAM1 - The first parameter of the distribution PARAM2 - The second parameter of the distribution ( see HELP ICDF ) Outputs : DATA - N data points from the distribution .","title":"vlt.math.generate_random_data"},{"location":"reference/%2Bvlt/%2Bmath/group_enumeration.m/","text":"vlt.math.group_enumeration \u00b6 GROUP_ENUMERATION - enumerate combinations of groups [ G , MAX_N ] = vlt . math . group_enumeration ( M , N ) Identifies members of multiple groups with a single number . For example , suppose we have a group of 3 , a group of 2 , and another group of 2. We want to enumerate all ways in which one member of all 3 groups can be combined . We assign [ 1 1 1 ] the number 1 , [ 1 1 2 ] the number 2 , [ 1 2 1 ] the number 3 , and so on . M is a vector with the number of members of each group . N is the group enumeration number to select . G is the group selection for group enumeration N , and MAX_N is the maximum number of group enumerations possible . ( Same as PROD ( M ) . ) Example : m = [ 1 3 1 ]; % 3 digit number , second digit can be 1 , 2 , or 3 ; others all 1 n = 2 ; [ g , max_n ] = vlt . math . count_irregular_base ( m , n , 2 ); % g is [ 1 2 1 ]; max_n = 3","title":"vlt.math.group_enumeration"},{"location":"reference/%2Bvlt/%2Bmath/group_enumeration.m/#vltmathgroup_enumeration","text":"GROUP_ENUMERATION - enumerate combinations of groups [ G , MAX_N ] = vlt . math . group_enumeration ( M , N ) Identifies members of multiple groups with a single number . For example , suppose we have a group of 3 , a group of 2 , and another group of 2. We want to enumerate all ways in which one member of all 3 groups can be combined . We assign [ 1 1 1 ] the number 1 , [ 1 1 2 ] the number 2 , [ 1 2 1 ] the number 3 , and so on . M is a vector with the number of members of each group . N is the group enumeration number to select . G is the group selection for group enumeration N , and MAX_N is the maximum number of group enumerations possible . ( Same as PROD ( M ) . ) Example : m = [ 1 3 1 ]; % 3 digit number , second digit can be 1 , 2 , or 3 ; others all 1 n = 2 ; [ g , max_n ] = vlt . math . count_irregular_base ( m , n , 2 ); % g is [ 1 2 1 ]; max_n = 3","title":"vlt.math.group_enumeration"},{"location":"reference/%2Bvlt/%2Bmath/inside.m/","text":"vlt.math.inside \u00b6 vlt . math . inside Points inside a polygonal region in the plane . k = vlt . math . inside ( z , w ) is a vector of indices . The points z ( k ) are strictly inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = vlt . math . inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) Developer note: This is an old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"vlt.math.inside"},{"location":"reference/%2Bvlt/%2Bmath/inside.m/#vltmathinside","text":"vlt . math . inside Points inside a polygonal region in the plane . k = vlt . math . inside ( z , w ) is a vector of indices . The points z ( k ) are strictly inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = vlt . math . inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) Developer note: This is an old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"vlt.math.inside"},{"location":"reference/%2Bvlt/%2Bmath/insideorborder.m/","text":"vlt.math.insideorborder \u00b6 vlt . math . insideorborder Points inside a polygonal region in the plane . k = vlt . math . insideborder ( z , w , eps ) is a vector of indices . The points z ( k ) are inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = vlt . math . inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) On border adaptation includes points on the border , within eps . Developer note: This is a modified old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"vlt.math.insideorborder"},{"location":"reference/%2Bvlt/%2Bmath/insideorborder.m/#vltmathinsideorborder","text":"vlt . math . insideorborder Points inside a polygonal region in the plane . k = vlt . math . insideborder ( z , w , eps ) is a vector of indices . The points z ( k ) are inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = vlt . math . inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) On border adaptation includes points on the border , within eps . Developer note: This is a modified old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"vlt.math.insideorborder"},{"location":"reference/%2Bvlt/%2Bmath/interval2continuous.m/","text":"vlt.math.interval2continuous \u00b6 INTERVAL2CONTINUOUS - transform a discrete interval to continuous time at timesteps [ DATA , T ] = vlt . math . interval2continuous ( TIMESTAMPS , DATAPOINTS , TRES ) Transforms a discrete interval function to continuous time . The function is expressed as a set of TIMESTAMPS and values ( DATAPOINTS ), where the function takes the value DATAPOINT ( i ) from TIMESTAMP ( i ) to TIMESTAMP ( i + 1 ) . Thus , length ( TIMESTAMPS ) = length ( DATAPOINT ) + 1. The data are sampled continuously with sample difference TRES . The data and sample times are returned in DATA and T , respectively . Note : The function vlt . math . stepfunc does the same thing and is easier to understand . See also : vlt . math . stepfunc","title":"vlt.math.interval2continuous"},{"location":"reference/%2Bvlt/%2Bmath/interval2continuous.m/#vltmathinterval2continuous","text":"INTERVAL2CONTINUOUS - transform a discrete interval to continuous time at timesteps [ DATA , T ] = vlt . math . interval2continuous ( TIMESTAMPS , DATAPOINTS , TRES ) Transforms a discrete interval function to continuous time . The function is expressed as a set of TIMESTAMPS and values ( DATAPOINTS ), where the function takes the value DATAPOINT ( i ) from TIMESTAMP ( i ) to TIMESTAMP ( i + 1 ) . Thus , length ( TIMESTAMPS ) = length ( DATAPOINT ) + 1. The data are sampled continuously with sample difference TRES . The data and sample times are returned in DATA and T , respectively . Note : The function vlt . math . stepfunc does the same thing and is easier to understand . See also : vlt . math . stepfunc","title":"vlt.math.interval2continuous"},{"location":"reference/%2Bvlt/%2Bmath/interval_add.m/","text":"vlt.math.interval_add \u00b6 INTERVAL_ADD - add intervals I_OUT = vlt . math . interval_add ( I_IN , I_ADD ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that includes the interval I_ADD = [ S0 S1 ]. I_IN can be empty . Examples : i_out = vlt . math . interval_add ([ 0 3 ],[ 3 6 ]) % yields [ 0 6 ] i_out = vlt . math . interval_add ([ 0 2 ],[ 3 4 ]) % yields [ 0 2 ; 3 4 ] i_out = vlt . math . interval_add ([ 0 10 ],[ 0 2 ]) % yields [ 0 10 ]","title":"vlt.math.interval_add"},{"location":"reference/%2Bvlt/%2Bmath/interval_add.m/#vltmathinterval_add","text":"INTERVAL_ADD - add intervals I_OUT = vlt . math . interval_add ( I_IN , I_ADD ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that includes the interval I_ADD = [ S0 S1 ]. I_IN can be empty . Examples : i_out = vlt . math . interval_add ([ 0 3 ],[ 3 6 ]) % yields [ 0 6 ] i_out = vlt . math . interval_add ([ 0 2 ],[ 3 4 ]) % yields [ 0 2 ; 3 4 ] i_out = vlt . math . interval_add ([ 0 10 ],[ 0 2 ]) % yields [ 0 10 ]","title":"vlt.math.interval_add"},{"location":"reference/%2Bvlt/%2Bmath/interval_notation.m/","text":"vlt.math.interval_notation \u00b6 INTERVAL_NOTATION - Description of interval notation in mathematics Interval notation is a means of expressing an interval as a pair of numbers . The numbers indicate the endpoints of the interval . Parentheses and / or brackets are used to show whether the endpoints are excluded in the interval , or are included . ( N , M ] is the interval from N to M , excluding N and including M ( N , M ) is the interval from N to M , excluding N and M [ N , M ] is the interval from N to M , including N and M Note that this is a mathematical notation ( described for documentation purposes ) , and does not have meaning in Matlab code . ( That is , brackets and parentheses have different meanings in Matlab code . )","title":"vlt.math.interval_notation"},{"location":"reference/%2Bvlt/%2Bmath/interval_notation.m/#vltmathinterval_notation","text":"INTERVAL_NOTATION - Description of interval notation in mathematics Interval notation is a means of expressing an interval as a pair of numbers . The numbers indicate the endpoints of the interval . Parentheses and / or brackets are used to show whether the endpoints are excluded in the interval , or are included . ( N , M ] is the interval from N to M , excluding N and including M ( N , M ) is the interval from N to M , excluding N and M [ N , M ] is the interval from N to M , including N and M Note that this is a mathematical notation ( described for documentation purposes ) , and does not have meaning in Matlab code . ( That is , brackets and parentheses have different meanings in Matlab code . )","title":"vlt.math.interval_notation"},{"location":"reference/%2Bvlt/%2Bmath/interval_subtract.m/","text":"vlt.math.interval_subtract \u00b6 INTERVAL_SUBTRACT - remove an interval from a larger interval I_OUT = vlt . math . interval_subtract ( I_IN , I_SUB ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that excludes the interval I_SUB = [ S0 S1 ]. Examples : i_out = vlt . math . interval_subtract ([ 0 10 ],[ 1 2 ]) % yields [ 0 1 ; 2 10 ] i_out = vlt . math . interval_subtract ([ 0 10 ],[ 0 2 ]) % yields [ 2 10 ]","title":"vlt.math.interval_subtract"},{"location":"reference/%2Bvlt/%2Bmath/interval_subtract.m/#vltmathinterval_subtract","text":"INTERVAL_SUBTRACT - remove an interval from a larger interval I_OUT = vlt . math . interval_subtract ( I_IN , I_SUB ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that excludes the interval I_SUB = [ S0 S1 ]. Examples : i_out = vlt . math . interval_subtract ([ 0 10 ],[ 1 2 ]) % yields [ 0 1 ; 2 10 ] i_out = vlt . math . interval_subtract ([ 0 10 ],[ 0 2 ]) % yields [ 2 10 ]","title":"vlt.math.interval_subtract"},{"location":"reference/%2Bvlt/%2Bmath/intnchoosek.m/","text":"vlt.math.intnchoosek \u00b6 vlt . math . intnchoosek n choose k , 0 for non - integer , negative values vlt . math . intnchoosek ( N , K ) calls NCHOOSEK ( N , K ) , but defines the result to be zero when N and K are not positive integers with N >= K . This is different from matlab 's normal behavior of producing an error or returning an empty matrix.","title":"vlt.math.intnchoosek"},{"location":"reference/%2Bvlt/%2Bmath/intnchoosek.m/#vltmathintnchoosek","text":"vlt . math . intnchoosek n choose k , 0 for non - integer , negative values vlt . math . intnchoosek ( N , K ) calls NCHOOSEK ( N , K ) , but defines the result to be zero when N and K are not positive integers with N >= K . This is different from matlab 's normal behavior of producing an error or returning an empty matrix.","title":"vlt.math.intnchoosek"},{"location":"reference/%2Bvlt/%2Bmath/linearize_complex_discrete.m/","text":"vlt.math.linearize_complex_discrete \u00b6 LINEARIZE_COMPLEX_DISCRETE - create a linear plot by concatenating discrete complex elements [ Y , INDEXES , SET ] = vlt . math . linearize_complex_discrete ( X , ... ) Given an array X of complex - valued elements that correspond to discrete sets of real , imaginary pairs , this function creates a linearized array Y where the real values are repeated in a linear fashion with gap GAP . INDEXES indicate which entry in X corresponds to each entry in Y . SET indicates which set of the imaginary values each point is associated with ( where the imaginary values are sorted from least ( first set ) to greatest ( nth set )). If there is a real , imaginary pair value that is missing , then NaN will be filled in Y and INDEXES . This function can be modified by passing parameters as name / value pairs : Parameter ( default value ) | Description ----------------------------------------------------------------------- GAP ( 1 ) | The gap between successive steps of the imaginary values EPSILON ( 1e-10 ) | How close values must be in order to be considered the \"same\" See also : REAL , IMAG , vlt . data . namevaluepair Example : X = [ [ 1 2 3 ] [ 1 2 3 ] + sqrt ( - 1 ) [ 1 2 3 ] + 2 * sqrt ( - 1 ) ] [ Y , IND ] = vlt . math . linearize_complex_discrete ( X , 1 ) % Y = [ [1 2 3] [4 5 6] [7 8 9] ]', % IND = [ [1 2 3] [4 5 6] [7 8 9] ]', % SET = [ [1 1 1] [2 2 2] [3 3 3] ]'","title":"vlt.math.linearize_complex_discrete"},{"location":"reference/%2Bvlt/%2Bmath/linearize_complex_discrete.m/#vltmathlinearize_complex_discrete","text":"LINEARIZE_COMPLEX_DISCRETE - create a linear plot by concatenating discrete complex elements [ Y , INDEXES , SET ] = vlt . math . linearize_complex_discrete ( X , ... ) Given an array X of complex - valued elements that correspond to discrete sets of real , imaginary pairs , this function creates a linearized array Y where the real values are repeated in a linear fashion with gap GAP . INDEXES indicate which entry in X corresponds to each entry in Y . SET indicates which set of the imaginary values each point is associated with ( where the imaginary values are sorted from least ( first set ) to greatest ( nth set )). If there is a real , imaginary pair value that is missing , then NaN will be filled in Y and INDEXES . This function can be modified by passing parameters as name / value pairs : Parameter ( default value ) | Description ----------------------------------------------------------------------- GAP ( 1 ) | The gap between successive steps of the imaginary values EPSILON ( 1e-10 ) | How close values must be in order to be considered the \"same\" See also : REAL , IMAG , vlt . data . namevaluepair Example : X = [ [ 1 2 3 ] [ 1 2 3 ] + sqrt ( - 1 ) [ 1 2 3 ] + 2 * sqrt ( - 1 ) ] [ Y , IND ] = vlt . math . linearize_complex_discrete ( X , 1 ) % Y = [ [1 2 3] [4 5 6] [7 8 9] ]', % IND = [ [1 2 3] [4 5 6] [7 8 9] ]', % SET = [ [1 1 1] [2 2 2] [3 3 3] ]'","title":"vlt.math.linearize_complex_discrete"},{"location":"reference/%2Bvlt/%2Bmath/local_max.m/","text":"vlt.math.local_max \u00b6 k = local_max ( x ) finds location of local maxima Copyright ( c ) 1988 - 1999 The MathWorks , Inc . All Rights Reserved . $ Revision : 1.3 $","title":"vlt.math.local_max"},{"location":"reference/%2Bvlt/%2Bmath/local_max.m/#vltmathlocal_max","text":"k = local_max ( x ) finds location of local maxima Copyright ( c ) 1988 - 1999 The MathWorks , Inc . All Rights Reserved . $ Revision : 1.3 $","title":"vlt.math.local_max"},{"location":"reference/%2Bvlt/%2Bmath/magsqrt.m/","text":"vlt.math.magsqrt \u00b6 vlt . math . magsqrt - Magnitude square root MSR = vlt . math . magsqrt ( A ) returns the magnitude of the square root that is sign appropriate . If A ( i ) is negative , then - sqrt ( - A ( i )) is returned . Otherwise , sqrt ( A ( i )) is returned .","title":"vlt.math.magsqrt"},{"location":"reference/%2Bvlt/%2Bmath/magsqrt.m/#vltmathmagsqrt","text":"vlt . math . magsqrt - Magnitude square root MSR = vlt . math . magsqrt ( A ) returns the magnitude of the square root that is sign appropriate . If A ( i ) is negative , then - sqrt ( - A ( i )) is returned . Otherwise , sqrt ( A ( i )) is returned .","title":"vlt.math.magsqrt"},{"location":"reference/%2Bvlt/%2Bmath/meshgridarea.m/","text":"vlt.math.meshgridarea \u00b6 AREA = MESHGRIDAREA - Compute the area of each element of a meshgrid AREA = vlt . math . meshgridarea ( XMESH , YMESH ) Computes the area for a mesh grid with points XMESH YMESH . This function assumes that the 'area' for each MESH pixel i , j is equal to ( XMESH ( i ) - XMESH ( i - 1 )) * ( YMESH ( j ) - YMESH ( j - 1 )) and that the area of the first row and column are equal to the second row and column , respectively .","title":"vlt.math.meshgridarea"},{"location":"reference/%2Bvlt/%2Bmath/meshgridarea.m/#vltmathmeshgridarea","text":"AREA = MESHGRIDAREA - Compute the area of each element of a meshgrid AREA = vlt . math . meshgridarea ( XMESH , YMESH ) Computes the area for a mesh grid with points XMESH YMESH . This function assumes that the 'area' for each MESH pixel i , j is equal to ( XMESH ( i ) - XMESH ( i - 1 )) * ( YMESH ( j ) - YMESH ( j - 1 )) and that the area of the first row and column are equal to the second row and column , respectively .","title":"vlt.math.meshgridarea"},{"location":"reference/%2Bvlt/%2Bmath/mod_ellipse_on_mvnpdf.m/","text":"vlt.math.mod_ellipse_on_mvnpdf \u00b6 MOD_ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on multivariate normal , modulated by surround region Y = vlt . math . mod_ellipse_on_mvnpdf ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) MOD_AMP - the amplitude by which the response in the \"surround\" modulates the center \" MOD_SIGMA - the multiplier to SIGMA that defines the \"surround\" region ; the region and intensity that corresponds to the surround is the rectified difference between a mvn distribution with mean MU and covariance SIGMA * MOD_SIGMA and a mvn distribution with mean MU and covariance SIGMA ( so only the surround is positive and contributes ) . Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.mod_ellipse_on_mvnpdf"},{"location":"reference/%2Bvlt/%2Bmath/mod_ellipse_on_mvnpdf.m/#vltmathmod_ellipse_on_mvnpdf","text":"MOD_ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on multivariate normal , modulated by surround region Y = vlt . math . mod_ellipse_on_mvnpdf ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) MOD_AMP - the amplitude by which the response in the \"surround\" modulates the center \" MOD_SIGMA - the multiplier to SIGMA that defines the \"surround\" region ; the region and intensity that corresponds to the surround is the rectified difference between a mvn distribution with mean MU and covariance SIGMA * MOD_SIGMA and a mvn distribution with mean MU and covariance SIGMA ( so only the surround is positive and contributes ) . Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.mod_ellipse_on_mvnpdf"},{"location":"reference/%2Bvlt/%2Bmath/mod_ellipse_on_mvnpdf_x0.m/","text":"vlt.math.mod_ellipse_on_mvnpdf_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = vlt . math . ellipse_on_mvnpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor MOD_AMP = X0 ( 7 ) - scale factor for modulating surround MOD_SIGMA = X0 ( 8 ) - scale factor for SIGMA to determine surround ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.mod_ellipse_on_mvnpdf_x0"},{"location":"reference/%2Bvlt/%2Bmath/mod_ellipse_on_mvnpdf_x0.m/#vltmathmod_ellipse_on_mvnpdf_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = vlt . math . ellipse_on_mvnpdf_x0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor MOD_AMP = X0 ( 7 ) - scale factor for modulating surround MOD_SIGMA = X0 ( 8 ) - scale factor for SIGMA to determine surround ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : vlt . image . inside_ellipse , MVNPDF","title":"vlt.math.mod_ellipse_on_mvnpdf_x0"},{"location":"reference/%2Bvlt/%2Bmath/mvnskewpdf.m/","text":"vlt.math.mvnskewpdf \u00b6 MVNSKEWPDF - Multivariate normal skewed probability density function ( pdf ) Y = vlt . math . mvnskewpdf ( X , MU , SIGMA , ALPHA ) returns the probability density of the multivariate normal distribution with mean MU , covariance SIGMA , and skewness ALPHA , evaluated at each row of X . Rows of the N - by - D matrix X correspond to observations ( or points ), and columns correspond to variables or coordinate . Y is an N by 1 vector . The multivariate skewed distribution is defined as in Azzalini and Dalla Valle ( 1996 ): For each value of x : vlt . math . mvnskewpdf ( X , MU , SIGMA , ALPHA ) = 2 * MVNPDF ( X , MU , SIGMA ) * NORMCDF ( ALPHA '*(X-MU)' )","title":"vlt.math.mvnskewpdf"},{"location":"reference/%2Bvlt/%2Bmath/mvnskewpdf.m/#vltmathmvnskewpdf","text":"MVNSKEWPDF - Multivariate normal skewed probability density function ( pdf ) Y = vlt . math . mvnskewpdf ( X , MU , SIGMA , ALPHA ) returns the probability density of the multivariate normal distribution with mean MU , covariance SIGMA , and skewness ALPHA , evaluated at each row of X . Rows of the N - by - D matrix X correspond to observations ( or points ), and columns correspond to variables or coordinate . Y is an N by 1 vector . The multivariate skewed distribution is defined as in Azzalini and Dalla Valle ( 1996 ): For each value of x : vlt . math . mvnskewpdf ( X , MU , SIGMA , ALPHA ) = 2 * MVNPDF ( X , MU , SIGMA ) * NORMCDF ( ALPHA '*(X-MU)' )","title":"vlt.math.mvnskewpdf"},{"location":"reference/%2Bvlt/%2Bmath/normalizebounds.m/","text":"vlt.math.normalizebounds \u00b6 vlt.math.normalizebounds - Normalize data to lower, upper bound X = vlt.math.normalizebounds(DATA, LOWERBOUND, UPPERBOUND) Normalizes the data as follows X = (DATA-LOWERBOUND)/(UPPERBOUND-LOWERBOUND) So points between LOWERBOUND and UPPERBOUND are projected onto the interval [0..1] with points equal to LOWERBOUND set to 0 and points set to UPPERBOUND equal to 1. Note that it is possible to have points out of bounds.","title":"vlt.math.normalizebounds"},{"location":"reference/%2Bvlt/%2Bmath/normalizebounds.m/#vltmathnormalizebounds","text":"vlt.math.normalizebounds - Normalize data to lower, upper bound X = vlt.math.normalizebounds(DATA, LOWERBOUND, UPPERBOUND) Normalizes the data as follows X = (DATA-LOWERBOUND)/(UPPERBOUND-LOWERBOUND) So points between LOWERBOUND and UPPERBOUND are projected onto the interval [0..1] with points equal to LOWERBOUND set to 0 and points set to UPPERBOUND equal to 1. Note that it is possible to have points out of bounds.","title":"vlt.math.normalizebounds"},{"location":"reference/%2Bvlt/%2Bmath/oriented_grid.m/","text":"vlt.math.oriented_grid \u00b6 vlt.math.oriented_grid Create an oriented sinwave on a grid ORI = vlt.math.oriented_grid(XSIZE, YSIZE, SPATIALPHASE, ORIENTATION, SPATIALFREQ) This will create an oriented sinwave grating pattern on a grid of size XSIZE x YSIZE with the given spatial phase SPATIALPHASE and orientation ORIENTATION (in degrees) with spatial frequency SPATIALFREQ.","title":"vlt.math.oriented_grid"},{"location":"reference/%2Bvlt/%2Bmath/oriented_grid.m/#vltmathoriented_grid","text":"vlt.math.oriented_grid Create an oriented sinwave on a grid ORI = vlt.math.oriented_grid(XSIZE, YSIZE, SPATIALPHASE, ORIENTATION, SPATIALFREQ) This will create an oriented sinwave grating pattern on a grid of size XSIZE x YSIZE with the given spatial phase SPATIALPHASE and orientation ORIENTATION (in degrees) with spatial frequency SPATIALFREQ.","title":"vlt.math.oriented_grid"},{"location":"reference/%2Bvlt/%2Bmath/phase_advance.m/","text":"vlt.math.phase_advance \u00b6 PHASE_ADVANCE - Computes phase advance from a list of angles ADV = vlt.math.phase_advance(ANGLES) Computes the advance in phase from each angle, assuming an angle does not advance more than pi.","title":"vlt.math.phase_advance"},{"location":"reference/%2Bvlt/%2Bmath/phase_advance.m/#vltmathphase_advance","text":"PHASE_ADVANCE - Computes phase advance from a list of angles ADV = vlt.math.phase_advance(ANGLES) Computes the advance in phase from each angle, assuming an angle does not advance more than pi.","title":"vlt.math.phase_advance"},{"location":"reference/%2Bvlt/%2Bmath/prctile01.m/","text":"vlt.math.prctile01 \u00b6 PRCTILE20 - 1 st percentile of a data set Y = vlt . math . prctile01 ( X ) Simply returns Y = PRCTILE ( X , 1 ) Useful for passing to FEVAL .","title":"vlt.math.prctile01"},{"location":"reference/%2Bvlt/%2Bmath/prctile01.m/#vltmathprctile01","text":"PRCTILE20 - 1 st percentile of a data set Y = vlt . math . prctile01 ( X ) Simply returns Y = PRCTILE ( X , 1 ) Useful for passing to FEVAL .","title":"vlt.math.prctile01"},{"location":"reference/%2Bvlt/%2Bmath/prctile20.m/","text":"vlt.math.prctile20 \u00b6 PRCTILE20 - 20 th percentile of a data set Y = vlt . math . prctile20 ( X ) Simply returns Y = PRCTILE ( X , 20 ) Useful for passing to FEVAL .","title":"vlt.math.prctile20"},{"location":"reference/%2Bvlt/%2Bmath/prctile20.m/#vltmathprctile20","text":"PRCTILE20 - 20 th percentile of a data set Y = vlt . math . prctile20 ( X ) Simply returns Y = PRCTILE ( X , 20 ) Useful for passing to FEVAL .","title":"vlt.math.prctile20"},{"location":"reference/%2Bvlt/%2Bmath/ptontoline.m/","text":"vlt.math.ptontoline \u00b6 PTONTOLINE - calculate distance of point onto nearest point on line (2D) [XLYL, BS] = vlt.math.ptontoline(XY, M, B) XLYL is the distance in X and Y. BS of offset of the line that joins the point to the specified line M and B. See also: vlt.math.pts2line","title":"vlt.math.ptontoline"},{"location":"reference/%2Bvlt/%2Bmath/ptontoline.m/#vltmathptontoline","text":"PTONTOLINE - calculate distance of point onto nearest point on line (2D) [XLYL, BS] = vlt.math.ptontoline(XY, M, B) XLYL is the distance in X and Y. BS of offset of the line that joins the point to the specified line M and B. See also: vlt.math.pts2line","title":"vlt.math.ptontoline"},{"location":"reference/%2Bvlt/%2Bmath/ptontovector.m/","text":"vlt.math.ptontovector \u00b6 PTONTOVECTOR - Find distance between point and a vector [ D , CPT ] = vlt . math . ptontovector ( OFFSET , VECTOR_DIR , PT ) Calculates the Euclidean distance D between a vector that is specified by the line X = OFFSET + VECTOR_DIR * t for all t and the given PT . The closest point on the line X , CPT , is returned . This function accepts additional arguments in the form of name / value pairs . Parameter ( default ) | Description ---------------------------------------------------------------------- Segment ( 0 ) | Only calculate distance to points within the | segment from offset to offset + vector_dir","title":"vlt.math.ptontovector"},{"location":"reference/%2Bvlt/%2Bmath/ptontovector.m/#vltmathptontovector","text":"PTONTOVECTOR - Find distance between point and a vector [ D , CPT ] = vlt . math . ptontovector ( OFFSET , VECTOR_DIR , PT ) Calculates the Euclidean distance D between a vector that is specified by the line X = OFFSET + VECTOR_DIR * t for all t and the given PT . The closest point on the line X , CPT , is returned . This function accepts additional arguments in the form of name / value pairs . Parameter ( default ) | Description ---------------------------------------------------------------------- Segment ( 0 ) | Only calculate distance to points within the | segment from offset to offset + vector_dir","title":"vlt.math.ptontovector"},{"location":"reference/%2Bvlt/%2Bmath/pts2line.m/","text":"vlt.math.pts2line \u00b6 PTS2LINE - Create a 2D line from 2 points [M,B] = vlt.math.pts2line(X1Y1, X2Y2) Returns slope (M) and offset (B) of a line through 2 2-d points. See also: vlt.math.ptontoline","title":"vlt.math.pts2line"},{"location":"reference/%2Bvlt/%2Bmath/pts2line.m/#vltmathpts2line","text":"PTS2LINE - Create a 2D line from 2 points [M,B] = vlt.math.pts2line(X1Y1, X2Y2) Returns slope (M) and offset (B) of a line through 2 2-d points. See also: vlt.math.ptontoline","title":"vlt.math.pts2line"},{"location":"reference/%2Bvlt/%2Bmath/rad2deg.m/","text":"vlt.math.rad2deg \u00b6 vlt.math.rad2deg D = vlt.math.rad2deg(R) Converts radians to degrees D = R * 180 / pi;","title":"vlt.math.rad2deg"},{"location":"reference/%2Bvlt/%2Bmath/rad2deg.m/#vltmathrad2deg","text":"vlt.math.rad2deg D = vlt.math.rad2deg(R) Converts radians to degrees D = R * 180 / pi;","title":"vlt.math.rad2deg"},{"location":"reference/%2Bvlt/%2Bmath/rect2rect.m/","text":"vlt.math.rect2rect \u00b6 RECT2RECT - Convert among rectangle formats , eg [ left bottom width height ] -> [ left top right bottom ] R_OUT = vlt . math . rect2rect ( R_IN , DIRECTION ) Converts rectangle R_IN to R_OUT according to format specified in DIRECTION . DIRECTION should be a string 'IN2OUT' , where IN and OUT can be any of : 'ltrb' [ left top right bottom ] 'lbrt' [ left bottom right top ] 'lbwh' [ left bottom width height ] 'ltwh' [ left top width height ] Case is ignored in the DIRECTION command . See also : RESCALE_RECT","title":"vlt.math.rect2rect"},{"location":"reference/%2Bvlt/%2Bmath/rect2rect.m/#vltmathrect2rect","text":"RECT2RECT - Convert among rectangle formats , eg [ left bottom width height ] -> [ left top right bottom ] R_OUT = vlt . math . rect2rect ( R_IN , DIRECTION ) Converts rectangle R_IN to R_OUT according to format specified in DIRECTION . DIRECTION should be a string 'IN2OUT' , where IN and OUT can be any of : 'ltrb' [ left top right bottom ] 'lbrt' [ left bottom right top ] 'lbwh' [ left bottom width height ] 'ltwh' [ left top width height ] Case is ignored in the DIRECTION command . See also : RESCALE_RECT","title":"vlt.math.rect2rect"},{"location":"reference/%2Bvlt/%2Bmath/rectify.m/","text":"vlt.math.rectify \u00b6 vlt.math.rectify - Rectify around 0 R = vlt.math.rectify(X) Returns X except where X is less than 0, in which case 0 is returned. One can also use the form: R = vlt.math.rectify(X, RECTVALUE) where points below 0 are given the value RECTVALUE.","title":"vlt.math.rectify"},{"location":"reference/%2Bvlt/%2Bmath/rectify.m/#vltmathrectify","text":"vlt.math.rectify - Rectify around 0 R = vlt.math.rectify(X) Returns X except where X is less than 0, in which case 0 is returned. One can also use the form: R = vlt.math.rectify(X, RECTVALUE) where points below 0 are given the value RECTVALUE.","title":"vlt.math.rectify"},{"location":"reference/%2Bvlt/%2Bmath/refl2d.m/","text":"vlt.math.refl2d \u00b6 vlt.math.refl2d - 2D reflection matrix R = vlt.math.refl2d(THETA) Returns R = [cos(2*THETA) sin(2*THETA) ; sin(2*THETA) -cos(2*THETA) ];","title":"vlt.math.refl2d"},{"location":"reference/%2Bvlt/%2Bmath/refl2d.m/#vltmathrefl2d","text":"vlt.math.refl2d - 2D reflection matrix R = vlt.math.refl2d(THETA) Returns R = [cos(2*THETA) sin(2*THETA) ; sin(2*THETA) -cos(2*THETA) ];","title":"vlt.math.refl2d"},{"location":"reference/%2Bvlt/%2Bmath/rescale.m/","text":"vlt.math.rescale \u00b6 vlt . math . rescale - Rescale a quantity to a new interval NEWVALS = vlt . math . rescale ( VALS , INT1 , INT2 ) Takes values in an interval INT1 = [ a b ] and scales them so they are now in an interval [ c d ]. Any values less than a are set to c , and any values greater than b are set to d . NEWVALS = vlt . math . rescale ( VALS , INT1 , INT2 , ' noclip ' ) will do the same as above but will not clip values above b or below a .","title":"vlt.math.rescale"},{"location":"reference/%2Bvlt/%2Bmath/rescale.m/#vltmathrescale","text":"vlt . math . rescale - Rescale a quantity to a new interval NEWVALS = vlt . math . rescale ( VALS , INT1 , INT2 ) Takes values in an interval INT1 = [ a b ] and scales them so they are now in an interval [ c d ]. Any values less than a are set to c , and any values greater than b are set to d . NEWVALS = vlt . math . rescale ( VALS , INT1 , INT2 , ' noclip ' ) will do the same as above but will not clip values above b or below a .","title":"vlt.math.rescale"},{"location":"reference/%2Bvlt/%2Bmath/rescale_subrect.m/","text":"vlt.math.rescale_subrect \u00b6 RESCALE_SUBRECT - resize a rectangle within a larger rectangle according to a scale and shift [ NEWRECT ] = vlt . math . rescale_subrect ( SUBRECT , ORIGINAL_RECT , SCALED_RECT , [ FORMAT ] ) This function rescales a rectangle SUBRECT , whose coordinates are located with respect to ORIGINAL_RECT . The same transformation that would be required to scale and shift ORIGINAL_RECT to SCALED_RECT is applied to SUBRECT , and returned in NEWRECT . FORMAT is an optional argument that specifies the format of the rectangles . FORMAT == 1 ( default ) means [ left top right bottom ] FORMAT == 2 means [ left bottom right top ] FORMAT == 3 means [ left bottom width height ] FORMAT == 4 means [ left top width height ] See also : vlt . math . rescale , vlt . math . rect2rect","title":"vlt.math.rescale_subrect"},{"location":"reference/%2Bvlt/%2Bmath/rescale_subrect.m/#vltmathrescale_subrect","text":"RESCALE_SUBRECT - resize a rectangle within a larger rectangle according to a scale and shift [ NEWRECT ] = vlt . math . rescale_subrect ( SUBRECT , ORIGINAL_RECT , SCALED_RECT , [ FORMAT ] ) This function rescales a rectangle SUBRECT , whose coordinates are located with respect to ORIGINAL_RECT . The same transformation that would be required to scale and shift ORIGINAL_RECT to SCALED_RECT is applied to SUBRECT , and returned in NEWRECT . FORMAT is an optional argument that specifies the format of the rectangles . FORMAT == 1 ( default ) means [ left top right bottom ] FORMAT == 2 means [ left bottom right top ] FORMAT == 3 means [ left bottom width height ] FORMAT == 4 means [ left top width height ] See also : vlt . math . rescale , vlt . math . rect2rect","title":"vlt.math.rescale_subrect"},{"location":"reference/%2Bvlt/%2Bmath/rot2d.m/","text":"vlt.math.rot2d \u00b6 vlt . math . rot2d ( THETA ) 2D rotation matrix Returns the 2D rotation matrix : R = [ cos ( theta ) -sin ( theta ) ; sin ( theta ) cos ( theta ) ]","title":"vlt.math.rot2d"},{"location":"reference/%2Bvlt/%2Bmath/rot2d.m/#vltmathrot2d","text":"vlt . math . rot2d ( THETA ) 2D rotation matrix Returns the 2D rotation matrix : R = [ cos ( theta ) -sin ( theta ) ; sin ( theta ) cos ( theta ) ]","title":"vlt.math.rot2d"},{"location":"reference/%2Bvlt/%2Bmath/rot3d.m/","text":"vlt.math.rot3d \u00b6 ROT3D - Rotation in 3 d space R = vlt . math . rot3d ( THETA , AXIS ) Performs a 3 d rotation about one of the 3 - dimensional axes or an arbitrary axis . If AXIS == 1 , the rotation is performed about the X axis ( dimension 1 ). If AXIS == 2 , the rotation is performed about the Y axis ( dimension 2 ). If AXIS == 3 , the rotation is performed about the Z axis ( dimension 3 ). If AXIS is a vector of 3 , then the rotation is performed about that vector . The vector is first normalized . Examples : x_unit = [ 1 ; 0 ; 0 ]; y_unit = [ 0 ; 1 ; 0 ]; z_unit = [ 0 ; 0 ; 1 ]; R = vlt . math . rot3d ( pi / 2 , 1 ) R * x_unit % 45 degree rotation about x axis, no change in x_unit R = vlt . math . rot3d ( pi / 2 , x_unit ) % should be the same rotation as above % now rotate the y_unit about the x axis R * y_unit % moves from [0;1;0] to [0;0;1] See also : vlt . math . rot2d","title":"vlt.math.rot3d"},{"location":"reference/%2Bvlt/%2Bmath/rot3d.m/#vltmathrot3d","text":"ROT3D - Rotation in 3 d space R = vlt . math . rot3d ( THETA , AXIS ) Performs a 3 d rotation about one of the 3 - dimensional axes or an arbitrary axis . If AXIS == 1 , the rotation is performed about the X axis ( dimension 1 ). If AXIS == 2 , the rotation is performed about the Y axis ( dimension 2 ). If AXIS == 3 , the rotation is performed about the Z axis ( dimension 3 ). If AXIS is a vector of 3 , then the rotation is performed about that vector . The vector is first normalized . Examples : x_unit = [ 1 ; 0 ; 0 ]; y_unit = [ 0 ; 1 ; 0 ]; z_unit = [ 0 ; 0 ; 1 ]; R = vlt . math . rot3d ( pi / 2 , 1 ) R * x_unit % 45 degree rotation about x axis, no change in x_unit R = vlt . math . rot3d ( pi / 2 , x_unit ) % should be the same rotation as above % now rotate the y_unit about the x axis R * y_unit % moves from [0;1;0] to [0;0;1] See also : vlt . math . rot2d","title":"vlt.math.rot3d"},{"location":"reference/%2Bvlt/%2Bmath/sample_difference_error.m/","text":"vlt.math.sample_difference_error \u00b6 SAMPLE_DIFFERENCE_ERROR - calculate the uncertainty in the difference between 2 samples [ SD , SDE ] = vlt . math . sample_difference_error ( X1 , X2 , ... ) Computes the mean sample difference SD and the \"error\" or \"uncertainty\" in that difference SDE in the mean of X2 minus the mean of X1 . This function takes name / value pairs that modify the behavior of the function . Parameter ( default ) | Description -------------------------------------------------------------------------------- algorithm ( 'assume_normality' ) | If 'assume_normality' , then | uses standard error based on 'normal' assumption | ( that is , SDE = sqrt ( SME1 ^ 2 + SME2 ^ 2 ), where | SME is standard error of the mean . | If 'bootstrap' , then | simulations are performed that draw from samples X1 | and X2 with replacement ( sample sizes remain fixed ) | and the difference in means computed . bootstrap_samples ( 10000 ) | Number of simulations to perform when bootstrap is used bootstrap_confidence ... | The bootstrap confidence interval to report for SDE ([ cdf ( 'norm' , - 1 , 0 , 1 ) ... | (the default is the percentiles that correspond to cdf ( 'norm' , 1 , 0 , 1 )]) | +/- 1 standard deviation around the normal | distribution ). SDE is half of this | confidence interval . meanfunction ( 'nanmean' ) | The mean function to use ( could use 'nanmedian' ) Example : x1 = randn ( 50 , 1 ) + 5 ; x2 = randn ( 50 , 1 ) + 0 ; [ sd , sde ]= vlt . math . sample_difference_error ( x1 , x2 ), % show the bootstrap version is similar to standard when data is normally distributed [ sdb , sdeb ]= vlt . math . sample_difference_error ( x1 , x2 , 'algorithm' , 'bootstrap' ),","title":"vlt.math.sample_difference_error"},{"location":"reference/%2Bvlt/%2Bmath/sample_difference_error.m/#vltmathsample_difference_error","text":"SAMPLE_DIFFERENCE_ERROR - calculate the uncertainty in the difference between 2 samples [ SD , SDE ] = vlt . math . sample_difference_error ( X1 , X2 , ... ) Computes the mean sample difference SD and the \"error\" or \"uncertainty\" in that difference SDE in the mean of X2 minus the mean of X1 . This function takes name / value pairs that modify the behavior of the function . Parameter ( default ) | Description -------------------------------------------------------------------------------- algorithm ( 'assume_normality' ) | If 'assume_normality' , then | uses standard error based on 'normal' assumption | ( that is , SDE = sqrt ( SME1 ^ 2 + SME2 ^ 2 ), where | SME is standard error of the mean . | If 'bootstrap' , then | simulations are performed that draw from samples X1 | and X2 with replacement ( sample sizes remain fixed ) | and the difference in means computed . bootstrap_samples ( 10000 ) | Number of simulations to perform when bootstrap is used bootstrap_confidence ... | The bootstrap confidence interval to report for SDE ([ cdf ( 'norm' , - 1 , 0 , 1 ) ... | (the default is the percentiles that correspond to cdf ( 'norm' , 1 , 0 , 1 )]) | +/- 1 standard deviation around the normal | distribution ). SDE is half of this | confidence interval . meanfunction ( 'nanmean' ) | The mean function to use ( could use 'nanmedian' ) Example : x1 = randn ( 50 , 1 ) + 5 ; x2 = randn ( 50 , 1 ) + 0 ; [ sd , sde ]= vlt . math . sample_difference_error ( x1 , x2 ), % show the bootstrap version is similar to standard when data is normally distributed [ sdb , sdeb ]= vlt . math . sample_difference_error ( x1 , x2 , 'algorithm' , 'bootstrap' ),","title":"vlt.math.sample_difference_error"},{"location":"reference/%2Bvlt/%2Bmath/scale2d.m/","text":"vlt.math.scale2d \u00b6 vlt.math.scale2d - Scaling matrix in 2D S = vlt.math.scale2d(ALPHA) S = [ ALPHA 0 ; 0 ALPHA];","title":"vlt.math.scale2d"},{"location":"reference/%2Bvlt/%2Bmath/scale2d.m/#vltmathscale2d","text":"vlt.math.scale2d - Scaling matrix in 2D S = vlt.math.scale2d(ALPHA) S = [ ALPHA 0 ; 0 ALPHA];","title":"vlt.math.scale2d"},{"location":"reference/%2Bvlt/%2Bmath/single_gaussian_plot.m/","text":"vlt.math.single_gaussian_plot \u00b6 vlt.math.single_gaussian_plot is a function. Z = vlt.math.single_gaussian_plot(P, xi, wrap)","title":"vlt.math.single_gaussian_plot"},{"location":"reference/%2Bvlt/%2Bmath/single_gaussian_plot.m/#vltmathsingle_gaussian_plot","text":"vlt.math.single_gaussian_plot is a function. Z = vlt.math.single_gaussian_plot(P, xi, wrap)","title":"vlt.math.single_gaussian_plot"},{"location":"reference/%2Bvlt/%2Bmath/skewgauss.m/","text":"vlt.math.skewgauss \u00b6 SKEWGAUSS - calculate the skew gaussian function Y = SKEWGAUSS ( X , P ) Evaluates Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) * ( 1 + erf ( e * ( x - c ) / sqrt ( 2 ))); a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The parameters are specified in a vector P = [ a b c d e ] See also : vlt . fit . skewgaussfit_constraints","title":"vlt.math.skewgauss"},{"location":"reference/%2Bvlt/%2Bmath/skewgauss.m/#vltmathskewgauss","text":"SKEWGAUSS - calculate the skew gaussian function Y = SKEWGAUSS ( X , P ) Evaluates Y = a + b * exp (( x - c ) .^ 2 / ( 2 * d ^ 2 )) * ( 1 + erf ( e * ( x - c ) / sqrt ( 2 ))); a is an offset parameter ; b is a height parameter above the offset ; c is the peak location ; d is the width ; e is the degree of skewness ( 0 is none ) The parameters are specified in a vector P = [ a b c d e ] See also : vlt . fit . skewgaussfit_constraints","title":"vlt.math.skewgauss"},{"location":"reference/%2Bvlt/%2Bmath/slidingwindowfunc.m/","text":"vlt.math.slidingwindowfunc \u00b6 vlt . math . slidingwindowfunc - Sliding window analysis for 1 - dimensional data [ Yn , Xn , Yint ] = vlt . math . slidingwindowfunc ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE , ... FUNC , ZEROPAD ,[ INTERVALFUNC ]) Slides a window of size WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If a third output argument is given , then the standard error of the mean in each Xn bin is returned in Yint . The user can optionally specify his own interval function in INTERVALFUNC . The data to be analyzed are put into a variable called 'y' , so example INTERVALFUNC values are 'vlt.stats.stderr(y)' or 'diff(prctile(y,[33 66]))' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"vlt.math.slidingwindowfunc"},{"location":"reference/%2Bvlt/%2Bmath/slidingwindowfunc.m/#vltmathslidingwindowfunc","text":"vlt . math . slidingwindowfunc - Sliding window analysis for 1 - dimensional data [ Yn , Xn , Yint ] = vlt . math . slidingwindowfunc ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE , ... FUNC , ZEROPAD ,[ INTERVALFUNC ]) Slides a window of size WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If a third output argument is given , then the standard error of the mean in each Xn bin is returned in Yint . The user can optionally specify his own interval function in INTERVALFUNC . The data to be analyzed are put into a variable called 'y' , so example INTERVALFUNC values are 'vlt.stats.stderr(y)' or 'diff(prctile(y,[33 66]))' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"vlt.math.slidingwindowfunc"},{"location":"reference/%2Bvlt/%2Bmath/slidingwindowfunc2.m/","text":"vlt.math.slidingwindowfunc2 \u00b6 SLIDINGWINDOWFUNC2 - Sliding window analysis for 1 - dimensional data [ Yn , Xn ] = vlt . math . slidingwindowfunc2 ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE ,... FUNC , ZEROPAD ) Slides a window of WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"vlt.math.slidingwindowfunc2"},{"location":"reference/%2Bvlt/%2Bmath/slidingwindowfunc2.m/#vltmathslidingwindowfunc2","text":"SLIDINGWINDOWFUNC2 - Sliding window analysis for 1 - dimensional data [ Yn , Xn ] = vlt . math . slidingwindowfunc2 ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE ,... FUNC , ZEROPAD ) Slides a window of WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"vlt.math.slidingwindowfunc2"},{"location":"reference/%2Bvlt/%2Bmath/stepfunc.m/","text":"vlt.math.stepfunc \u00b6 vlt . math . stepfunc - Evaluate a discrete step function at many times [ SI , INDS ] = vlt . math . stepfunc ( T , STEPS , TI [, OUTOFBOUNDS ]) Returns the value of a step function that takes values STEPS ( i ) between the times T ( i ) and T ( i + 1 ) . ( STEPS ( end ) is assumed to be true between T ( end ) and T ( end ) + mean ( diff ( T )) ) If OUTOFBOUNDS is provided , one can specify the value of SI when ti is out of bounds . Default is NaN ; example choices might be NaN or 0. INDS are the index values such that SI = STEPS ( INDS ); INDS that are out of bounds are NaN . STEPS can have many rows ; each row will be one step function , and the answer will have the same number of rows as STEPS ; the columns of SI will be the same number as ti . Example 1 : Evaluate a step function at a high sampling rate S = [ 0 1 2 3 4 5 6 7 8 9 10 ]; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0.1 seconds ti = [ 0 : 0.001 : 1 ]; Si = vlt . math . stepfunc ( t , S , ti ); figure ; plot ( ti , Si ); % plots at high temporal resolution xlabel ( 'X-axis' ); ylabel ( 'Value' ); Example 2 : Evaluate a step function at a few locations : S = [ 0 1 2 3 4 5 6 7 8 9 10 ]; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0.1 seconds ti = [ 0 0.05 0.9 1.1 ]; [ Si , inds ] = vlt . math . stepfunc ( t , S , ti ) gives Si : [ 0 0 9 NaN ] inds : [ 1 1 10 NaN ]","title":"vlt.math.stepfunc"},{"location":"reference/%2Bvlt/%2Bmath/stepfunc.m/#vltmathstepfunc","text":"vlt . math . stepfunc - Evaluate a discrete step function at many times [ SI , INDS ] = vlt . math . stepfunc ( T , STEPS , TI [, OUTOFBOUNDS ]) Returns the value of a step function that takes values STEPS ( i ) between the times T ( i ) and T ( i + 1 ) . ( STEPS ( end ) is assumed to be true between T ( end ) and T ( end ) + mean ( diff ( T )) ) If OUTOFBOUNDS is provided , one can specify the value of SI when ti is out of bounds . Default is NaN ; example choices might be NaN or 0. INDS are the index values such that SI = STEPS ( INDS ); INDS that are out of bounds are NaN . STEPS can have many rows ; each row will be one step function , and the answer will have the same number of rows as STEPS ; the columns of SI will be the same number as ti . Example 1 : Evaluate a step function at a high sampling rate S = [ 0 1 2 3 4 5 6 7 8 9 10 ]; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0.1 seconds ti = [ 0 : 0.001 : 1 ]; Si = vlt . math . stepfunc ( t , S , ti ); figure ; plot ( ti , Si ); % plots at high temporal resolution xlabel ( 'X-axis' ); ylabel ( 'Value' ); Example 2 : Evaluate a step function at a few locations : S = [ 0 1 2 3 4 5 6 7 8 9 10 ]; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0.1 seconds ti = [ 0 0.05 0.9 1.1 ]; [ Si , inds ] = vlt . math . stepfunc ( t , S , ti ) gives Si : [ 0 0 9 NaN ] inds : [ 1 1 10 NaN ]","title":"vlt.math.stepfunc"},{"location":"reference/%2Bvlt/%2Bmath/vector2mesh.m/","text":"vlt.math.vector2mesh \u00b6 vlt . math . vector2mesh - convert a mesh grid from a vector representation back to a mesh set of matrixes [ Xm , Ym , Zm , Im ] = vlt . math . vector2mesh ( X , Y , Z ,...) Builds a mesh representation of two coordinate vectors X and Y . Xm and Ym will be matrixes that are NxM , where N is the number of elements in X and M is the number of elements in Y . The value of Z ( i ) for a given X ( i ) and Y ( i ) will be placed in at Z ( j , k ) where j is the jth entry of the unique values of X , and k is the kth entry of the unique values of Y . The index value i will be placed at position j , k . This function takes name / value pairs that modify its functionality . | --------------------------------- | ----------------------------------------------- | | tolerance ( 0 ) | How much tolerance should be given for values | | | of x or y to be considered equal ? | | --------------------------------- | ----------------------------------------------- | Example : [ Xm_ , Ym_ ] = meshgrid ( [ 0 : 0.1 : 1 ] , [ 0 : 0.2 : 1 ] ); Zm_ = sin ( 2 * pi * Xm_ ) + cos ( 2 * pi * Ym_ ); x = Xm_ (:); % convert to vectors y = Ym_ (:); % convert to vectors z = Zm_ (:); % convert to vectors [ Xm , Ym , Zm , Im ] = vlt . math . vector2mesh ( x , y , z ); % convert back Xm_ == Xm % they are equal Ym_ == Ym % they are equal Zm_ == Zm % they are equal Im figure ; surf ( Xm_ , Ym_ , Zm_ ) figure ; surf ( Xm , Ym , Zm )","title":"vlt.math.vector2mesh"},{"location":"reference/%2Bvlt/%2Bmath/vector2mesh.m/#vltmathvector2mesh","text":"vlt . math . vector2mesh - convert a mesh grid from a vector representation back to a mesh set of matrixes [ Xm , Ym , Zm , Im ] = vlt . math . vector2mesh ( X , Y , Z ,...) Builds a mesh representation of two coordinate vectors X and Y . Xm and Ym will be matrixes that are NxM , where N is the number of elements in X and M is the number of elements in Y . The value of Z ( i ) for a given X ( i ) and Y ( i ) will be placed in at Z ( j , k ) where j is the jth entry of the unique values of X , and k is the kth entry of the unique values of Y . The index value i will be placed at position j , k . This function takes name / value pairs that modify its functionality . | --------------------------------- | ----------------------------------------------- | | tolerance ( 0 ) | How much tolerance should be given for values | | | of x or y to be considered equal ? | | --------------------------------- | ----------------------------------------------- | Example : [ Xm_ , Ym_ ] = meshgrid ( [ 0 : 0.1 : 1 ] , [ 0 : 0.2 : 1 ] ); Zm_ = sin ( 2 * pi * Xm_ ) + cos ( 2 * pi * Ym_ ); x = Xm_ (:); % convert to vectors y = Ym_ (:); % convert to vectors z = Zm_ (:); % convert to vectors [ Xm , Ym , Zm , Im ] = vlt . math . vector2mesh ( x , y , z ); % convert back Xm_ == Xm % they are equal Ym_ == Ym % they are equal Zm_ == Zm % they are equal Im figure ; surf ( Xm_ , Ym_ , Zm_ ) figure ; surf ( Xm , Ym , Zm )","title":"vlt.math.vector2mesh"},{"location":"reference/%2Bvlt/%2Bmath/identity_tests/autocorr_step_white_poles.m/","text":"vlt.math/identity_tests.autocorr_step_white_poles \u00b6 AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , PIS ] = vlt . math . identity_tests . autocorr_step_white_poles ( z , M , alpha , o ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"vlt.math/identity_tests.autocorr_step_white_poles"},{"location":"reference/%2Bvlt/%2Bmath/identity_tests/autocorr_step_white_poles.m/#vltmathidentity_testsautocorr_step_white_poles","text":"AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , PIS ] = vlt . math . identity_tests . autocorr_step_white_poles ( z , M , alpha , o ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"vlt.math/identity_tests.autocorr_step_white_poles"},{"location":"reference/%2Bvlt/%2Bmath/identity_tests/autocorr_step_zeros.m/","text":"vlt.math/identity_tests.autocorr_step_zeros \u00b6 AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , ZI ] = vlt . math . identity_tests . autocorr_step_zeros ( z , N , alpha ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"vlt.math/identity_tests.autocorr_step_zeros"},{"location":"reference/%2Bvlt/%2Bmath/identity_tests/autocorr_step_zeros.m/#vltmathidentity_testsautocorr_step_zeros","text":"AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , ZI ] = vlt . math . identity_tests . autocorr_step_zeros ( z , N , alpha ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"vlt.math/identity_tests.autocorr_step_zeros"},{"location":"reference/%2Bvlt/%2Bmath/identity_tests/geometric_identities_tests.m/","text":"vlt.math/identity_tests.geometric_identities_tests \u00b6 GEOMETRIC_IDENTITIES_TESTS - Tests some mathematical geometric identities Displays several geometric identities and tests their validity for several random samples . ( Of course , not a proof , but a check of some of our proofs ) .","title":"vlt.math/identity_tests.geometric_identities_tests"},{"location":"reference/%2Bvlt/%2Bmath/identity_tests/geometric_identities_tests.m/#vltmathidentity_testsgeometric_identities_tests","text":"GEOMETRIC_IDENTITIES_TESTS - Tests some mathematical geometric identities Displays several geometric identities and tests their validity for several random samples . ( Of course , not a proof , but a check of some of our proofs ) .","title":"vlt.math/identity_tests.geometric_identities_tests"},{"location":"reference/%2Bvlt/%2Bmatlab/findfunctionusedir.m/","text":"vlt.matlab.findfunctionusedir \u00b6 FINDFUNCTIONUSEDIR determine where a function is called in a directory of m-files FUSE = FINDFUNCTIONUSEDIR ( DIRNAME , MINFO ) Searches the directory DIRNAME for uses of a Matlab function described by minfo returned by vlt . matlab . mfileinfo . This function searches for instances of [ MINFO.NAME ] Note that it may identify instances in the comments , or instances where the user has defined their own internal function of the same name . Returns the structure described in vlt . matlab . findfunctionusefile . This function takes extra parameters as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- IgnorePackages ( 0 ) | 0 / 1 ; should we ignore package directories that | begin with a '+' ? IgnoreClassDirs ( 0 ) | 0 / 1 : should we ignore class directories that | begin with a '@' ? See also : vlt . matlab . mfileinfo , vlt . matlab . findfunctionusefile , vlt . data . namevaluepair","title":"vlt.matlab.findfunctionusedir"},{"location":"reference/%2Bvlt/%2Bmatlab/findfunctionusedir.m/#vltmatlabfindfunctionusedir","text":"FINDFUNCTIONUSEDIR determine where a function is called in a directory of m-files FUSE = FINDFUNCTIONUSEDIR ( DIRNAME , MINFO ) Searches the directory DIRNAME for uses of a Matlab function described by minfo returned by vlt . matlab . mfileinfo . This function searches for instances of [ MINFO.NAME ] Note that it may identify instances in the comments , or instances where the user has defined their own internal function of the same name . Returns the structure described in vlt . matlab . findfunctionusefile . This function takes extra parameters as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- IgnorePackages ( 0 ) | 0 / 1 ; should we ignore package directories that | begin with a '+' ? IgnoreClassDirs ( 0 ) | 0 / 1 : should we ignore class directories that | begin with a '@' ? See also : vlt . matlab . mfileinfo , vlt . matlab . findfunctionusefile , vlt . data . namevaluepair","title":"vlt.matlab.findfunctionusedir"},{"location":"reference/%2Bvlt/%2Bmatlab/findfunctionusefile.m/","text":"vlt.matlab.findfunctionusefile \u00b6 FINDFUNCTIONUSE determine where a function is called in an m file FUSE = FINDFUNCTIONUSE ( FILENAME , MINFO ) Searches the file FILENAME for uses of a Matlab function described by minfo returned by vlt . matlab . mfileinfo . This function searches for instances of [ MINFO . NAME ] Note that it may identify instances in the comments , or instances where the user has defined their own internal function of the same name . Returns a structure of possible usages Fieldname | Description ---------------------------------------------------------------- fullfilename | Full filename of FILENAME name | Function name from MINFO . NAME line | Line number where possible usage occurred character | Character where the name occurrs incomments | 0 / 1 is it in a comment ? package_class_use | 0 / 1 Does a '.' appear before the function call ? allcaps | 0 / 1 Does the function appear in all caps here ? ( might be documentation use ) See also : vlt . matlab . mfileinfo","title":"vlt.matlab.findfunctionusefile"},{"location":"reference/%2Bvlt/%2Bmatlab/findfunctionusefile.m/#vltmatlabfindfunctionusefile","text":"FINDFUNCTIONUSE determine where a function is called in an m file FUSE = FINDFUNCTIONUSE ( FILENAME , MINFO ) Searches the file FILENAME for uses of a Matlab function described by minfo returned by vlt . matlab . mfileinfo . This function searches for instances of [ MINFO . NAME ] Note that it may identify instances in the comments , or instances where the user has defined their own internal function of the same name . Returns a structure of possible usages Fieldname | Description ---------------------------------------------------------------- fullfilename | Full filename of FILENAME name | Function name from MINFO . NAME line | Line number where possible usage occurred character | Character where the name occurrs incomments | 0 / 1 is it in a comment ? package_class_use | 0 / 1 Does a '.' appear before the function call ? allcaps | 0 / 1 Does the function appear in all caps here ? ( might be documentation use ) See also : vlt . matlab . mfileinfo","title":"vlt.matlab.findfunctionusefile"},{"location":"reference/%2Bvlt/%2Bmatlab/isa_text.m/","text":"vlt.matlab.isa_text \u00b6 ISA_TEXT - examines whether a class is a subclass of another class type [ B , SUBCLASSES_INCLUSIVE ] = vlt . matlab . isa_text ( CLASSNAME_A , CLASSNAME_B ) Returns B as true if CLASSNAME_A is equal to CLASSNAME_B or if CLASSNAME_B is among the superclasses of CLASSNAME_A . SUPERCLASSES_INCLUSIVE is a cell array of all superclasses of CLASSNAME_A including itself . Similar to ISA ( A , CLASSNAME ) except that both arguments are character strings instead of requiring one input to be an object . See also : ISA","title":"vlt.matlab.isa_text"},{"location":"reference/%2Bvlt/%2Bmatlab/isa_text.m/#vltmatlabisa_text","text":"ISA_TEXT - examines whether a class is a subclass of another class type [ B , SUBCLASSES_INCLUSIVE ] = vlt . matlab . isa_text ( CLASSNAME_A , CLASSNAME_B ) Returns B as true if CLASSNAME_A is equal to CLASSNAME_B or if CLASSNAME_B is among the superclasses of CLASSNAME_A . SUPERCLASSES_INCLUSIVE is a cell array of all superclasses of CLASSNAME_A including itself . Similar to ISA ( A , CLASSNAME ) except that both arguments are character strings instead of requiring one input to be an object . See also : ISA","title":"vlt.matlab.isa_text"},{"location":"reference/%2Bvlt/%2Bmatlab/isclassfile.m/","text":"vlt.matlab.isclassfile \u00b6 ISCLASSFILE - Is a Matlab . m file a class definition ? B = ISCLASSFILE ( FILENAME ) Returns 1 if FILENAME is a Matlab class definition file . Returns 0 otherwise . Uses an undocumented Matlab function MTREE . MTREE 's behavior may change in future releases. Derived from comments in this nice blog note: https://blogs.mathworks.com/loren/2013/08/26/what-kind-of-matlab-file-is-this/ Note : EXIST ( FILENAME , 'CLASS' ) did not work for my custom objects See also : vlt . matlab . isfunctionfile Example : wfilename = which ( 'table' ) b = vlt . matlab . isclassfile ( wfilename )","title":"vlt.matlab.isclassfile"},{"location":"reference/%2Bvlt/%2Bmatlab/isclassfile.m/#vltmatlabisclassfile","text":"ISCLASSFILE - Is a Matlab . m file a class definition ? B = ISCLASSFILE ( FILENAME ) Returns 1 if FILENAME is a Matlab class definition file . Returns 0 otherwise . Uses an undocumented Matlab function MTREE . MTREE 's behavior may change in future releases. Derived from comments in this nice blog note: https://blogs.mathworks.com/loren/2013/08/26/what-kind-of-matlab-file-is-this/ Note : EXIST ( FILENAME , 'CLASS' ) did not work for my custom objects See also : vlt . matlab . isfunctionfile Example : wfilename = which ( 'table' ) b = vlt . matlab . isclassfile ( wfilename )","title":"vlt.matlab.isclassfile"},{"location":"reference/%2Bvlt/%2Bmatlab/isfunctionfile.m/","text":"vlt.matlab.isfunctionfile \u00b6 ISFUNCTIONFILE - determines if a FILENAME defines a Matlab function B = ISFUNCTIONFILE ( FILENAME ) Returns 1 if FILENAME defines a Matlab function . Returns 0 otherwise . Note that other types of M files are Matlab SCRIPTS and CLASS DEFINITIONS . See also : vlt . matlab . isclassfile Example : wfilename = which ( 'vlt.matlab.isfunctionfile' ) b = vlt . matlab . isfunctionfile ( wfilename )","title":"vlt.matlab.isfunctionfile"},{"location":"reference/%2Bvlt/%2Bmatlab/isfunctionfile.m/#vltmatlabisfunctionfile","text":"ISFUNCTIONFILE - determines if a FILENAME defines a Matlab function B = ISFUNCTIONFILE ( FILENAME ) Returns 1 if FILENAME defines a Matlab function . Returns 0 otherwise . Note that other types of M files are Matlab SCRIPTS and CLASS DEFINITIONS . See also : vlt . matlab . isclassfile Example : wfilename = which ( 'vlt.matlab.isfunctionfile' ) b = vlt . matlab . isfunctionfile ( wfilename )","title":"vlt.matlab.isfunctionfile"},{"location":"reference/%2Bvlt/%2Bmatlab/matlabvers.m/","text":"vlt.matlab.matlabvers \u00b6 MATLABVERS - return the Matlab version N = vlt . matlab . matlabvers Returns the Matlab version . This function is a shortcut for A = VER ( 'MATLAB' ); N = A . Version ; Example : n = vlt . matlab . matlabvers ();","title":"vlt.matlab.matlabvers"},{"location":"reference/%2Bvlt/%2Bmatlab/matlabvers.m/#vltmatlabmatlabvers","text":"MATLABVERS - return the Matlab version N = vlt . matlab . matlabvers Returns the Matlab version . This function is a shortcut for A = VER ( 'MATLAB' ); N = A . Version ; Example : n = vlt . matlab . matlabvers ();","title":"vlt.matlab.matlabvers"},{"location":"reference/%2Bvlt/%2Bmatlab/mfile2package.m/","text":"vlt.matlab.mfile2package \u00b6 MFILE2PACKAGE - return the package name ( if any ) from a full path mfile name PNAME = MFILE2PACKAGE ( MFILENAME ) Returns the package name of the m file named by MFILENAME , which must be specified as a full path . Example : pname = vlt . matlab . mfile2package ( '/Users/me/Documents/+mypackage/myf.m' ); % pname = 'mypackage.myf'","title":"vlt.matlab.mfile2package"},{"location":"reference/%2Bvlt/%2Bmatlab/mfile2package.m/#vltmatlabmfile2package","text":"MFILE2PACKAGE - return the package name ( if any ) from a full path mfile name PNAME = MFILE2PACKAGE ( MFILENAME ) Returns the package name of the m file named by MFILENAME , which must be specified as a full path . Example : pname = vlt . matlab . mfile2package ( '/Users/me/Documents/+mypackage/myf.m' ); % pname = 'mypackage.myf'","title":"vlt.matlab.mfile2package"},{"location":"reference/%2Bvlt/%2Bmatlab/mfiledirinfo.m/","text":"vlt.matlab.mfiledirinfo \u00b6 MFILEDIRINFO - return m - file info for all files in a directory recursively MINFO = MFILEDIRINFO ( DIRNAME , ... ) Traveres all the m files in DIRNAME and all subdirectories and collects the same information as vlt . matlab . mfileinfo () . This function takes extra parameters as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- IgnorePackages ( 1 ) | 0 / 1 ; should we ignore package directories that | begin with a '+' ? IgnoreClassDirs ( 1 ) | 0 / 1 : should we ignore class directories that | begin with a '@' ? See also : vlt . matlab . mfileinfo (), vlt . data . namevaluepair () Example : dirname = '/Users/vanhoosr/Documents/matlab/tools/vhlab-toolbox-matlab' ; m = vlt . matlab . mfiledirinfo ( dirname );","title":"vlt.matlab.mfiledirinfo"},{"location":"reference/%2Bvlt/%2Bmatlab/mfiledirinfo.m/#vltmatlabmfiledirinfo","text":"MFILEDIRINFO - return m - file info for all files in a directory recursively MINFO = MFILEDIRINFO ( DIRNAME , ... ) Traveres all the m files in DIRNAME and all subdirectories and collects the same information as vlt . matlab . mfileinfo () . This function takes extra parameters as name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------- IgnorePackages ( 1 ) | 0 / 1 ; should we ignore package directories that | begin with a '+' ? IgnoreClassDirs ( 1 ) | 0 / 1 : should we ignore class directories that | begin with a '@' ? See also : vlt . matlab . mfileinfo (), vlt . data . namevaluepair () Example : dirname = '/Users/vanhoosr/Documents/matlab/tools/vhlab-toolbox-matlab' ; m = vlt . matlab . mfiledirinfo ( dirname );","title":"vlt.matlab.mfiledirinfo"},{"location":"reference/%2Bvlt/%2Bmatlab/mfileinfo.m/","text":"vlt.matlab.mfileinfo \u00b6 MFILEINFO - return a structure with information about an m-file MINFO = MFILEINFO ( FILENAME ) Returns a structure with information about FILENAME with the following fields : Field | Description -------------------------------------------------------------------- fullfile | File name with full path and extension path | Full path to the file name | File name without path and without extension isfunction | 0 / 1 is it a function ? isclass | 0 / 1 is it a classdefinition ? See also : vlt . matlab . isclassfile (), vlt . matlab . isfunctionfile () Example : minfo = vlt . matlab . mfileinfo ( 'table.m' );","title":"vlt.matlab.mfileinfo"},{"location":"reference/%2Bvlt/%2Bmatlab/mfileinfo.m/#vltmatlabmfileinfo","text":"MFILEINFO - return a structure with information about an m-file MINFO = MFILEINFO ( FILENAME ) Returns a structure with information about FILENAME with the following fields : Field | Description -------------------------------------------------------------------- fullfile | File name with full path and extension path | Full path to the file name | File name without path and without extension isfunction | 0 / 1 is it a function ? isclass | 0 / 1 is it a classdefinition ? See also : vlt . matlab . isclassfile (), vlt . matlab . isfunctionfile () Example : minfo = vlt . matlab . mfileinfo ( 'table.m' );","title":"vlt.matlab.mfileinfo"},{"location":"reference/%2Bvlt/%2Bmatlab/packagenamereplacementtable.m/","text":"vlt.matlab.packagenamereplacementtable \u00b6 PACKAGENAMEREPLACEMENTTABLE - create a replacement name table from MFILEDIRINFO structures REPLACEMENTTABLE = PACKAGENAMEREPLACEMENTTABLE(MINFO, TOOLBOXPREFIX, PACKAGEPREFIX) Built a search/replace table to replace naked function names with package-linked function names.","title":"vlt.matlab.packagenamereplacementtable"},{"location":"reference/%2Bvlt/%2Bmatlab/packagenamereplacementtable.m/#vltmatlabpackagenamereplacementtable","text":"PACKAGENAMEREPLACEMENTTABLE - create a replacement name table from MFILEDIRINFO structures REPLACEMENTTABLE = PACKAGENAMEREPLACEMENTTABLE(MINFO, TOOLBOXPREFIX, PACKAGEPREFIX) Built a search/replace table to replace naked function names with package-linked function names.","title":"vlt.matlab.packagenamereplacementtable"},{"location":"reference/%2Bvlt/%2Bmatlab/replacefunction.m/","text":"vlt.matlab.replacefunction \u00b6 REPLACEFUNCTION - replace instances of one function call with another STATUS = REPLACEFUNCTION ( FUSE , REPLACEMENT_TABLE , ...) This function examines each function use structure FUSE that is returned from vlt . matlab . findfunctionusefil or vlt . matlab . findfunctionusedir , and displays the relevant lines of code ( 2 above , and 2 below ). It asks the user if they would like to replace the function ( yes , no ) or write a note . The status ( \"skipped\" , \"replaced\" , or the note ) for each entry is returned . The FUSE ( i ) . name is looked up in the replacement_table for the replacement text . The replacement_table should be a struct with fields 'original' , and 'replace' . This function also takes name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------ MinLine ( 2 ) | Minimum line number to examine ; line numbers | less than this value will not be examined Disable ( 1 ) | Disable the changes ( the default ) See also : vlt . matlab . findfunctionusefile , vlt . matlab . mfileinfo","title":"vlt.matlab.replacefunction"},{"location":"reference/%2Bvlt/%2Bmatlab/replacefunction.m/#vltmatlabreplacefunction","text":"REPLACEFUNCTION - replace instances of one function call with another STATUS = REPLACEFUNCTION ( FUSE , REPLACEMENT_TABLE , ...) This function examines each function use structure FUSE that is returned from vlt . matlab . findfunctionusefil or vlt . matlab . findfunctionusedir , and displays the relevant lines of code ( 2 above , and 2 below ). It asks the user if they would like to replace the function ( yes , no ) or write a note . The status ( \"skipped\" , \"replaced\" , or the note ) for each entry is returned . The FUSE ( i ) . name is looked up in the replacement_table for the replacement text . The replacement_table should be a struct with fields 'original' , and 'replace' . This function also takes name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------ MinLine ( 2 ) | Minimum line number to examine ; line numbers | less than this value will not be examined Disable ( 1 ) | Disable the changes ( the default ) See also : vlt . matlab . findfunctionusefile , vlt . matlab . mfileinfo","title":"vlt.matlab.replacefunction"},{"location":"reference/%2Bvlt/%2Bmatlab/vlt_build.m/","text":"vlt.matlab.vlt_build \u00b6 vlt.matlab.vlt_build is a function.","title":"vlt.matlab.vlt_build"},{"location":"reference/%2Bvlt/%2Bmatlab/vlt_build.m/#vltmatlabvlt_build","text":"vlt.matlab.vlt_build is a function.","title":"vlt.matlab.vlt_build"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/cubeplot3d.m/","text":"vlt.matlab.graphics.cubeplot3d \u00b6 CUBEPLOT3D - Plot 3-dimensional data from many views simultaneously vlt.matlab.graphics.cubeplot3d(NAME, 'data', DATA, ...)","title":"vlt.matlab.graphics.cubeplot3d"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/cubeplot3d.m/#vltmatlabgraphicscubeplot3d","text":"CUBEPLOT3D - Plot 3-dimensional data from many views simultaneously vlt.matlab.graphics.cubeplot3d(NAME, 'data', DATA, ...)","title":"vlt.matlab.graphics.cubeplot3d"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/getline_3dplane.m/","text":"vlt.matlab.graphics.getline_3dplane \u00b6 GETLINE_3DPLANE Select polyline with mouse . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane ( FIG ) lets you select a polyline in the current axes of figure FIG using the mouse . Coordinates of the polyline are returned in X and Y and Z . Use normal button clicks to add points to the polyline . A shift - , right - , or double - click adds a final point and ends the polyline selection . Pressing RETURN or ENTER ends the polyline selection without adding a final point . Pressing BACKSPACE or DELETE removes the previously selected point from the polyline . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane ( AX ) lets you select a polyline in the axes specified by the handle AX . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane is the same as [ X , Y ] = vlt . matlab . graphics . getline_3dplane ( GCF ) . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane ( ..., 'closed' ) animates and returns a closed polygon . Example -------- imshow ( 'moon.tif' ) [ x , y ] = vlt . matlab . graphics . getline_3dplane See also GETLINE , GETRECT , GETPTS . Modified from GETLINE by SDV","title":"vlt.matlab.graphics.getline_3dplane"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/getline_3dplane.m/#vltmatlabgraphicsgetline_3dplane","text":"GETLINE_3DPLANE Select polyline with mouse . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane ( FIG ) lets you select a polyline in the current axes of figure FIG using the mouse . Coordinates of the polyline are returned in X and Y and Z . Use normal button clicks to add points to the polyline . A shift - , right - , or double - click adds a final point and ends the polyline selection . Pressing RETURN or ENTER ends the polyline selection without adding a final point . Pressing BACKSPACE or DELETE removes the previously selected point from the polyline . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane ( AX ) lets you select a polyline in the axes specified by the handle AX . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane is the same as [ X , Y ] = vlt . matlab . graphics . getline_3dplane ( GCF ) . [ X , Y , Z ] = vlt . matlab . graphics . getline_3dplane ( ..., 'closed' ) animates and returns a closed polygon . Example -------- imshow ( 'moon.tif' ) [ x , y ] = vlt . matlab . graphics . getline_3dplane See also GETLINE , GETRECT , GETPTS . Modified from GETLINE by SDV","title":"vlt.matlab.graphics.getline_3dplane"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/grect2local.m/","text":"vlt.matlab.graphics.grect2local \u00b6 Normalize a rectangle in units of a local rectangle","title":"vlt.matlab.graphics.grect2local"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/grect2local.m/#vltmatlabgraphicsgrect2local","text":"Normalize a rectangle in units of a local rectangle","title":"vlt.matlab.graphics.grect2local"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/isinwhere.m/","text":"vlt.matlab.graphics.isinwhere \u00b6 ISINWHERE 0 / 1 is a rectangle within another rectangle ? B = vlt . matlab . graphics . isinwhere ( RECT , UNITS , WHERE ) B is 1 if the rectangle RECT in the units UNITS ( either 'normalized' or 'pixels' ) is in the location structure WHERE . The figure is assumed to be WHERE . FIGURE ; For a description of the location structure , see 'help analysis_generic' .","title":"vlt.matlab.graphics.isinwhere"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/isinwhere.m/#vltmatlabgraphicsisinwhere","text":"ISINWHERE 0 / 1 is a rectangle within another rectangle ? B = vlt . matlab . graphics . isinwhere ( RECT , UNITS , WHERE ) B is 1 if the rectangle RECT in the units UNITS ( either 'normalized' or 'pixels' ) is in the location structure WHERE . The figure is assumed to be WHERE . FIGURE ; For a description of the location structure , see 'help analysis_generic' .","title":"vlt.matlab.graphics.isinwhere"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/normalized2pixels.m/","text":"vlt.matlab.graphics.normalized2pixels \u00b6 NORMALIZED2PIXELS - converts a 'normalized' figure rectangle to raw pixels NEWRECT = vlt . matlab . graphics . normalized2pixels ( FIG , RECT ) or NEWRECT = vlt . matlab . graphics . normalized2pixels ( FIG_RECT , RECT ) Converts a 'normalized' rectangle ( see help axes for definition ) to raw pixels . This function obtains the figure rectangle from the figure handle FIG if the first input argument is a figure handle , or uses the rectangle FIG_RECT if it is a 4 - element vector . See also : vlt . matlab . graphics . pixels2normalized","title":"vlt.matlab.graphics.normalized2pixels"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/normalized2pixels.m/#vltmatlabgraphicsnormalized2pixels","text":"NORMALIZED2PIXELS - converts a 'normalized' figure rectangle to raw pixels NEWRECT = vlt . matlab . graphics . normalized2pixels ( FIG , RECT ) or NEWRECT = vlt . matlab . graphics . normalized2pixels ( FIG_RECT , RECT ) Converts a 'normalized' rectangle ( see help axes for definition ) to raw pixels . This function obtains the figure rectangle from the figure handle FIG if the first input argument is a figure handle , or uses the rectangle FIG_RECT if it is a 4 - element vector . See also : vlt . matlab . graphics . pixels2normalized","title":"vlt.matlab.graphics.normalized2pixels"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/pcolordummyrowcolumn.m/","text":"vlt.matlab.graphics.pcolordummyrowcolumn \u00b6 PCOLORDUMMYROWCOLUMN - Add a dummy row and column to input to pcolor C_out = vlt . matlab . graphics . pcolordummyrowcolumn ( C ) Adds a dummy row and column of 0 data to the matrix C . This is especially made for use with the PCOLOR command , which , in SHADING FLAT or SHADING FACETED mode , completely ignores the contents of the last row and column . If you want them to show up , simply run your data through vlt . matlab . graphics . pcolordummyrowcolumn first . See also : PCOLOR , NONOPTIMAL - FUNCTION - BEHAVIOR ( sorry , I 've got some too)","title":"vlt.matlab.graphics.pcolordummyrowcolumn"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/pcolordummyrowcolumn.m/#vltmatlabgraphicspcolordummyrowcolumn","text":"PCOLORDUMMYROWCOLUMN - Add a dummy row and column to input to pcolor C_out = vlt . matlab . graphics . pcolordummyrowcolumn ( C ) Adds a dummy row and column of 0 data to the matrix C . This is especially made for use with the PCOLOR command , which , in SHADING FLAT or SHADING FACETED mode , completely ignores the contents of the last row and column . If you want them to show up , simply run your data through vlt . matlab . graphics . pcolordummyrowcolumn first . See also : PCOLOR , NONOPTIMAL - FUNCTION - BEHAVIOR ( sorry , I 've got some too)","title":"vlt.matlab.graphics.pcolordummyrowcolumn"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/pixels2normalized.m/","text":"vlt.matlab.graphics.pixels2normalized \u00b6 PIXELS2NORMALIZED - convert between pixels and normalized figure coordinates NEWRECT = vlt . matlab . graphics . pixels2normalized ( FIG , RECT ) or NEWRECT = vlt . matlab . graphics . pixels2normalized ( FIG_RECT , RECT ) Converts a rect in 'pixels' units to 'normalized' units ( see 'help axes' for definition ) . This function obtains the figure rectangle from the figure handle FIG if the first input argument is a figure handle , or uses the rectangle FIG_RECT if it is a 4 - element vector . See also : vlt . matlab . graphics . normalized2pixels","title":"vlt.matlab.graphics.pixels2normalized"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/pixels2normalized.m/#vltmatlabgraphicspixels2normalized","text":"PIXELS2NORMALIZED - convert between pixels and normalized figure coordinates NEWRECT = vlt . matlab . graphics . pixels2normalized ( FIG , RECT ) or NEWRECT = vlt . matlab . graphics . pixels2normalized ( FIG_RECT , RECT ) Converts a rect in 'pixels' units to 'normalized' units ( see 'help axes' for definition ) . This function obtains the figure rectangle from the figure handle FIG if the first input argument is a figure handle , or uses the rectangle FIG_RECT if it is a 4 - element vector . See also : vlt . matlab . graphics . normalized2pixels","title":"vlt.matlab.graphics.pixels2normalized"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/savefigurelist.m/","text":"vlt.matlab.graphics.savefigurelist \u00b6 SAVEFIGURELIST - Write the current figures to disk using figure tags for file names vlt . matlab . graphics . savefigurelist ( FIGLIST , ... ) Writes all of the figures in FIGLIST to the present working directory , using the 'Tag' field of each figure as its filename . If FIGLIST is empty , then all figures are written . This function also accepts additional parameter name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------- ErrorIfTagEmpty ( 1 ) | 0 / 1 Produces an error if a 'tag' field is empty . | If 0 , then a warning is given and the figure is | skipped . Formats ( { 'fig' ,... | File formats to write 'epsc' , 'pdf' } ) | See also : SAVEAS , PWD","title":"vlt.matlab.graphics.savefigurelist"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/savefigurelist.m/#vltmatlabgraphicssavefigurelist","text":"SAVEFIGURELIST - Write the current figures to disk using figure tags for file names vlt . matlab . graphics . savefigurelist ( FIGLIST , ... ) Writes all of the figures in FIGLIST to the present working directory , using the 'Tag' field of each figure as its filename . If FIGLIST is empty , then all figures are written . This function also accepts additional parameter name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------- ErrorIfTagEmpty ( 1 ) | 0 / 1 Produces an error if a 'tag' field is empty . | If 0 , then a warning is given and the figure is | skipped . Formats ( { 'fig' ,... | File formats to write 'epsc' , 'pdf' } ) | See also : SAVEAS , PWD","title":"vlt.matlab.graphics.savefigurelist"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/selectpoints3d.m/","text":"vlt.matlab.graphics.selectpoints3d \u00b6 SELECTPOINTS3D - Graphically select a bunch of ( 2 D or 3 D ) points by making a polygon in the current axes view INSIDE = vlt . matlab . graphics . selectpoints3d ( PTS3D ) Select a subset of points on a ( potentially 3 D ) graph by dragging a polygon . Allows the user to drag a polygon over the current axes ( may be in 3 D or 2 D mode ) and this function will return the points in PTS3D that are inside the polygon . PTS3D should be a 2 xN or 3 xN matrix where N is the the number of points . If only 2 - dimensional points are passed then the function will still work . Output : INSIDE is an N dimensional vector of 0 's and 1' s ; INSIDE ( i ) is 1 if and only if PTS3D (:, i ) is inside the user - drawn polygon . Please note that this function does not plot the points ; the points should already be plotted if you want them to be visible to the user . Example : pts = randn ( 30 , 3 ); figure ; plot3 ( pts (:, 1 ), pts (:, 2 ), pts (:, 3 ), 'ko' ); drawnow (); % change the view , maybe use the rotate3d tool inside = vlt . matlab . graphics . selectpoints3d ( pts '); % need to transpose to column vectors hold on ; indexes = find ( inside ); plot3 ( pts ( indexes , 1 ), pts ( indexes , 2 ), pts ( indexes , 3 ), 'bs' ); % add red x to selected points % look around with rotate3d tool to make sure it is right","title":"vlt.matlab.graphics.selectpoints3d"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/selectpoints3d.m/#vltmatlabgraphicsselectpoints3d","text":"SELECTPOINTS3D - Graphically select a bunch of ( 2 D or 3 D ) points by making a polygon in the current axes view INSIDE = vlt . matlab . graphics . selectpoints3d ( PTS3D ) Select a subset of points on a ( potentially 3 D ) graph by dragging a polygon . Allows the user to drag a polygon over the current axes ( may be in 3 D or 2 D mode ) and this function will return the points in PTS3D that are inside the polygon . PTS3D should be a 2 xN or 3 xN matrix where N is the the number of points . If only 2 - dimensional points are passed then the function will still work . Output : INSIDE is an N dimensional vector of 0 's and 1' s ; INSIDE ( i ) is 1 if and only if PTS3D (:, i ) is inside the user - drawn polygon . Please note that this function does not plot the points ; the points should already be plotted if you want them to be visible to the user . Example : pts = randn ( 30 , 3 ); figure ; plot3 ( pts (:, 1 ), pts (:, 2 ), pts (:, 3 ), 'ko' ); drawnow (); % change the view , maybe use the rotate3d tool inside = vlt . matlab . graphics . selectpoints3d ( pts '); % need to transpose to column vectors hold on ; indexes = find ( inside ); plot3 ( pts ( indexes , 1 ), pts ( indexes , 2 ), pts ( indexes , 3 ), 'bs' ); % add red x to selected points % look around with rotate3d tool to make sure it is right","title":"vlt.matlab.graphics.selectpoints3d"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/viewpoint3dto2d.m/","text":"vlt.matlab.graphics.viewpoint3dto2d \u00b6 VIEWPOINT3DTO2D Project a 3D point onto 2D with a given camera matrix PTS2D = vlt . matlab . graphics . viewpoint3dto2d ( PTS3D , CAMERAMATRIX ) Converts a list of 3D points PTS3D into their corresponding 2D projection for the camera matrix CAMERAMATRIX . The matrix PTS3D should be a list of column vectors ( 3xN , where N is the number of points ). CAMERAMATRIX is a standard camera matrix ( see Wikipedia for \"camera matrix\" ). Output : PTS2D is a list of column vectors ( 2xN ) that correspond to the 2D projection . There is an arbitrary scale factor that depends upon how you want to display the points ; you can scale these points with a multiplicative factor and the relative relationships will still be preserved . One can also call : PTS2D = vlt . matlab . graphics . viewpoint3dto2d ( PTS3D ) which takes the CAMERAMATRIX to be the current VIEW in the current axes . See also : VIEW","title":"vlt.matlab.graphics.viewpoint3dto2d"},{"location":"reference/%2Bvlt/%2Bmatlab/%2Bgraphics/viewpoint3dto2d.m/#vltmatlabgraphicsviewpoint3dto2d","text":"VIEWPOINT3DTO2D Project a 3D point onto 2D with a given camera matrix PTS2D = vlt . matlab . graphics . viewpoint3dto2d ( PTS3D , CAMERAMATRIX ) Converts a list of 3D points PTS3D into their corresponding 2D projection for the camera matrix CAMERAMATRIX . The matrix PTS3D should be a list of column vectors ( 3xN , where N is the number of points ). CAMERAMATRIX is a standard camera matrix ( see Wikipedia for \"camera matrix\" ). Output : PTS2D is a list of column vectors ( 2xN ) that correspond to the 2D projection . There is an arbitrary scale factor that depends upon how you want to display the points ; you can scale these points with a multiplicative factor and the relative relationships will still be preserved . One can also call : PTS2D = vlt . matlab . graphics . viewpoint3dto2d ( PTS3D ) which takes the CAMERAMATRIX to be the current VIEW in the current axes . See also : VIEW","title":"vlt.matlab.graphics.viewpoint3dto2d"},{"location":"reference/%2Bvlt/%2Bmusic/tone.m/","text":"CLASS vlt.music.tone \u00b6 TONE - create a new musical tone object OBJ = TONE (INPUT) Input can be the following: An integer, where 0 denotes C4 (middle C). 1 denotes C4#, 2 denotes D4, etc. -1 denotes B3, -2 denotes A3#, etc. A character string of 2 or 3 characters, where the first character (A-G) indicates the letter of the tone, the second character is the number of the tone, and the optional third character is a sharp '#' or flat 'b'. Superclasses \u00b6 none Properties \u00b6 Property Description value Methods \u00b6 Method Description char return the character description of a tone char2num convert a character description of a tone into a tone number major return the tones that make up the natural major scale of a tone (Ionian mode) minor return the tones that make up the natural minor scale of a tone num2char return a character description of a music tone scale return a scale generated with a certain array of tone intervals tone create a new musical tone object Methods help \u00b6 char - return the character description of a tone C = CHAR ( TONE_OBJ ) Return the character notation of a tone object . Example : tone_obj = vlt . music . tone ( 0 ); c = tone_obj . char % will be 'C4' char2num - convert a character description of a tone into a tone number N = CHAR2NUM ( INPUT ) Given a character input of a note ( e . g ., 'A3#' , 'C4' , 'G2b' ) , returns the tone number N . The character input should consist of a letter describing the note ( 'A' - 'G' ) , an integer describing the level of the note ( 0 , 1 , 9 ) , and a trailing character of '#' ( sharp ) or 'b' ( flat ) if necessary . The output N is a tone number , which is a signed integer . 'C4' is 0 , and each tone is an integer step up or down . For example , 'B3' is - 1 , 'A3#' is - 2 , 'C4#' is 1 , etc . major - return the tones that make up the natural major scale of a tone (Ionian mode) T = MAJOR ( TONE_OBJ ) Return an array of tone objects that correspond to the major scale of a tone . This is also known as the Ionian mode . Example : a = tone ( 'A3' ); % tone is A3 m = a . major (); m . char () % print the tones minor - return the tones that make up the natural minor scale of a tone T = MINOR ( TONE_OBJ ) Return an array of tone objects that correspond to the natural minor scale of a tone . ( Aeolian mode .) Example : a = tone ( 'A3' ); % tone is A3 m = a . minor (); m . char () % print the tones num2char - return a character description of a music tone C = NUM2CHAR ( NUM ) Return the character description of a musical tone with number NUM . 0 is middle C ( 'C4' ) , - 1 is 'B3' , - 2 is 'A3#' , etc . The character array will always bs 2 - 3 characters long . The first character is the letter , the second character is a digit specifying the level 0 .. 9 , and the third character ( if necessary ) will be a sharp . scale - return a scale generated with a certain array of tone intervals S = SCALE ( TONE_OBJ , INTERVALS ) Returns an array of tone objects that correspond to the specified intervals . Example : c = tone ( 'C4' ); % middle C m = c . scale ( [ 0 2 2 1 2 2 2 1 ] ); % natural major scale m . char () tone - create a new musical tone object OBJ = TONE ( INPUT ) Input can be the following : An integer , where 0 denotes C4 ( middle C ) . 1 denotes C4 #, 2 denotes D4 , etc . - 1 denotes B3 , - 2 denotes A3 #, etc . A character string of 2 or 3 characters , where the first character ( A - G ) indicates the letter of the tone , the second character is the number of the tone , and the optional third character is a sharp '#' or flat 'b' . Documentation for vlt . music . tone / tone doc vlt . music . tone","title":"vlt.music.tone"},{"location":"reference/%2Bvlt/%2Bmusic/tone.m/#class-vltmusictone","text":"TONE - create a new musical tone object OBJ = TONE (INPUT) Input can be the following: An integer, where 0 denotes C4 (middle C). 1 denotes C4#, 2 denotes D4, etc. -1 denotes B3, -2 denotes A3#, etc. A character string of 2 or 3 characters, where the first character (A-G) indicates the letter of the tone, the second character is the number of the tone, and the optional third character is a sharp '#' or flat 'b'.","title":"CLASS vlt.music.tone"},{"location":"reference/%2Bvlt/%2Bmusic/tone.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bmusic/tone.m/#properties","text":"Property Description value","title":"Properties"},{"location":"reference/%2Bvlt/%2Bmusic/tone.m/#methods","text":"Method Description char return the character description of a tone char2num convert a character description of a tone into a tone number major return the tones that make up the natural major scale of a tone (Ionian mode) minor return the tones that make up the natural minor scale of a tone num2char return a character description of a music tone scale return a scale generated with a certain array of tone intervals tone create a new musical tone object","title":"Methods"},{"location":"reference/%2Bvlt/%2Bmusic/tone.m/#methods-help","text":"char - return the character description of a tone C = CHAR ( TONE_OBJ ) Return the character notation of a tone object . Example : tone_obj = vlt . music . tone ( 0 ); c = tone_obj . char % will be 'C4' char2num - convert a character description of a tone into a tone number N = CHAR2NUM ( INPUT ) Given a character input of a note ( e . g ., 'A3#' , 'C4' , 'G2b' ) , returns the tone number N . The character input should consist of a letter describing the note ( 'A' - 'G' ) , an integer describing the level of the note ( 0 , 1 , 9 ) , and a trailing character of '#' ( sharp ) or 'b' ( flat ) if necessary . The output N is a tone number , which is a signed integer . 'C4' is 0 , and each tone is an integer step up or down . For example , 'B3' is - 1 , 'A3#' is - 2 , 'C4#' is 1 , etc . major - return the tones that make up the natural major scale of a tone (Ionian mode) T = MAJOR ( TONE_OBJ ) Return an array of tone objects that correspond to the major scale of a tone . This is also known as the Ionian mode . Example : a = tone ( 'A3' ); % tone is A3 m = a . major (); m . char () % print the tones minor - return the tones that make up the natural minor scale of a tone T = MINOR ( TONE_OBJ ) Return an array of tone objects that correspond to the natural minor scale of a tone . ( Aeolian mode .) Example : a = tone ( 'A3' ); % tone is A3 m = a . minor (); m . char () % print the tones num2char - return a character description of a music tone C = NUM2CHAR ( NUM ) Return the character description of a musical tone with number NUM . 0 is middle C ( 'C4' ) , - 1 is 'B3' , - 2 is 'A3#' , etc . The character array will always bs 2 - 3 characters long . The first character is the letter , the second character is a digit specifying the level 0 .. 9 , and the third character ( if necessary ) will be a sharp . scale - return a scale generated with a certain array of tone intervals S = SCALE ( TONE_OBJ , INTERVALS ) Returns an array of tone objects that correspond to the specified intervals . Example : c = tone ( 'C4' ); % middle C m = c . scale ( [ 0 2 2 1 2 2 2 1 ] ); % natural major scale m . char () tone - create a new musical tone object OBJ = TONE ( INPUT ) Input can be the following : An integer , where 0 denotes C4 ( middle C ) . 1 denotes C4 #, 2 denotes D4 , etc . - 1 denotes B3 , - 2 denotes A3 #, etc . A character string of 2 or 3 characters , where the first character ( A - G ) indicates the letter of the tone , the second character is the number of the tone , and the optional third character is a sharp '#' or flat 'b' . Documentation for vlt . music . tone / tone doc vlt . music . tone","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bneuro/%2Banatomy/calc_cluster_index.m/","text":"vlt.neuro.anatomy.calc_cluster_index \u00b6 vlt . neuro . anatomy . calc_cluster_index - Calculate cluster index from Ruthazer and Stryker CI = vlt . neuro . anatomy . calc_cluster_index ( CELL_PTS , ROI_PTS , SCALE , INJ_SIZE , WINDSIZE , WINDSTEP , AREA_THRESH , FRACT_CELLS , [ INDEXVALUES FUNC RANDFUNC ]) Calculates the cluster index as described by Ruthazer and Stryker JNeurosci 1996 16 : 7253 - 7269. Computes the cluster index over a region of interest drawn tightly around the data set excluding the injection site of size INJ_SIZE . Square windows of side size WINDSIZE are slid over the region of interest in steps of WINDSTEP . If the overlap of the window and the region of interest is at least AREA_THRESH ( a fraction of the total ), then the cluster index is computed in that window . ROI_PTS and INJ_SIZE can be empty , in which case no points will be excluded , the ROI will be taken to be a rectangle containing all points , the first point in the cell list is assumed to be a cell and not the injection location . The cluster index is computed by comparing nearest neighbor differences of all cells in the data set to a random point . Only FRACT_CELLS are used in the calculation . See the paper for a more complete description . The cells are specified as a list of X - Y pairs . It is assumed that the first entry in the list is actually the injection location , not a cell . The region of interest is also specified by a list of X - Y pairs that define a polygon around the region of interest . The points will be scaled by SCALE , which indicates the number of point units per unit . If the last three optional arguments are provided , then the cluster index is not computed based on physical distance between cells but rather the difference between index values in INDEXVALUES , a vector w / as many entries as there are cell points . FUNC should be a string describing how to take the difference between x1 and x2 , INDEX values from two cells . For example , ' min ( abs ([ x1 - x2 ; x1 - x2 - 360 ; x1 - x2 + 360 ]))' or ' abs ( x1 - x2 )'. RANDFUNC is a function that describes how to randomly generate an index value . For example , RANDFUNC = ' rand * 360 ' picks a value between 0 and 360 psuedorandomly .","title":"vlt.neuro.anatomy.calc_cluster_index"},{"location":"reference/%2Bvlt/%2Bneuro/%2Banatomy/calc_cluster_index.m/#vltneuroanatomycalc_cluster_index","text":"vlt . neuro . anatomy . calc_cluster_index - Calculate cluster index from Ruthazer and Stryker CI = vlt . neuro . anatomy . calc_cluster_index ( CELL_PTS , ROI_PTS , SCALE , INJ_SIZE , WINDSIZE , WINDSTEP , AREA_THRESH , FRACT_CELLS , [ INDEXVALUES FUNC RANDFUNC ]) Calculates the cluster index as described by Ruthazer and Stryker JNeurosci 1996 16 : 7253 - 7269. Computes the cluster index over a region of interest drawn tightly around the data set excluding the injection site of size INJ_SIZE . Square windows of side size WINDSIZE are slid over the region of interest in steps of WINDSTEP . If the overlap of the window and the region of interest is at least AREA_THRESH ( a fraction of the total ), then the cluster index is computed in that window . ROI_PTS and INJ_SIZE can be empty , in which case no points will be excluded , the ROI will be taken to be a rectangle containing all points , the first point in the cell list is assumed to be a cell and not the injection location . The cluster index is computed by comparing nearest neighbor differences of all cells in the data set to a random point . Only FRACT_CELLS are used in the calculation . See the paper for a more complete description . The cells are specified as a list of X - Y pairs . It is assumed that the first entry in the list is actually the injection location , not a cell . The region of interest is also specified by a list of X - Y pairs that define a polygon around the region of interest . The points will be scaled by SCALE , which indicates the number of point units per unit . If the last three optional arguments are provided , then the cluster index is not computed based on physical distance between cells but rather the difference between index values in INDEXVALUES , a vector w / as many entries as there are cell points . FUNC should be a string describing how to take the difference between x1 and x2 , INDEX values from two cells . For example , ' min ( abs ([ x1 - x2 ; x1 - x2 - 360 ; x1 - x2 + 360 ]))' or ' abs ( x1 - x2 )'. RANDFUNC is a function that describes how to randomly generate an index value . For example , RANDFUNC = ' rand * 360 ' picks a value between 0 and 360 psuedorandomly .","title":"vlt.neuro.anatomy.calc_cluster_index"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bdemos/demo_illustrate_facespace_build.m/","text":"vlt.neuro.demos.demo_illustrate_facespace_build \u00b6 DEMO_ILLUSTRATE_FACESPACE_BUILD - illustrate the construction of face space from Cheng and Tsao 2017 Illustrates the construction of facespace from Cheng and Tsao 2017 Cell DIRNAME should be the name of the FEI face database files , frontal views http : // fei . edu . br /~ cet / facedatabase . html Reads only the neutral expression faces ( number 'a.jpg' )","title":"vlt.neuro.demos.demo_illustrate_facespace_build"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bdemos/demo_illustrate_facespace_build.m/#vltneurodemosdemo_illustrate_facespace_build","text":"DEMO_ILLUSTRATE_FACESPACE_BUILD - illustrate the construction of face space from Cheng and Tsao 2017 Illustrates the construction of facespace from Cheng and Tsao 2017 Cell DIRNAME should be the name of the FEI face database files , frontal views http : // fei . edu . br /~ cet / facedatabase . html Reads only the neutral expression faces ( number 'a.jpg' )","title":"vlt.neuro.demos.demo_illustrate_facespace_build"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bdemos/nbio140_wholecell.m/","text":"vlt.neuro.demos.nbio140_wholecell \u00b6 NBIO140_WHOLECELL - A gui to simulate a Hodgkin-Huxley recording in voltage clamp/current clamp vlt.neuro.demos.nbio140_wholecell() Brings up a graphical user interface to allow the user to explore a current clamp/voltage clamp environment with Hodgkin-Huxley channels.","title":"vlt.neuro.demos.nbio140_wholecell"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bdemos/nbio140_wholecell.m/#vltneurodemosnbio140_wholecell","text":"NBIO140_WHOLECELL - A gui to simulate a Hodgkin-Huxley recording in voltage clamp/current clamp vlt.neuro.demos.nbio140_wholecell() Brings up a graphical user interface to allow the user to explore a current clamp/voltage clamp environment with Hodgkin-Huxley channels.","title":"vlt.neuro.demos.nbio140_wholecell"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/generate_normal_vm_fr.m/","text":"vlt.neuro.membrane.generate_normal_vm_fr \u00b6 GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = vlt . neuro . membrane . generate_poisson_vm_fr ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA ) Generates sample firing rates for a Normally - distrubuted process modulated by voltage measurements ( VM ) bins of size DELTAT . Firing rate is assumed to be generated according to a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and SIGMA is given . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : vlt . neuro . membrane . normal_vm_fr , vlt . neuro . membrane . poisson_vm_fr Example :","title":"vlt.neuro.membrane.generate_normal_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/generate_normal_vm_fr.m/#vltneuromembranegenerate_normal_vm_fr","text":"GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = vlt . neuro . membrane . generate_poisson_vm_fr ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA ) Generates sample firing rates for a Normally - distrubuted process modulated by voltage measurements ( VM ) bins of size DELTAT . Firing rate is assumed to be generated according to a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and SIGMA is given . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : vlt . neuro . membrane . normal_vm_fr , vlt . neuro . membrane . poisson_vm_fr Example :","title":"vlt.neuro.membrane.generate_normal_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/generate_poisson_vm_fr.m/","text":"vlt.neuro.membrane.generate_poisson_vm_fr \u00b6 GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = vlt . neuro . membrane . generate_poisson_vm_fr ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , ... ) Generates sample firing rates for a Poisson process modulated by voltage measurements ( VM ) bins of size DELTAT . Spikes are assumed to be generated at a Poisson rate , where the rate lambda is determined by RATEFUNC ( VM , ... ) * DELTAT . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : vlt . neuro . membrane . poisson_vm_fr Example :","title":"vlt.neuro.membrane.generate_poisson_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/generate_poisson_vm_fr.m/#vltneuromembranegenerate_poisson_vm_fr","text":"GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = vlt . neuro . membrane . generate_poisson_vm_fr ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , ... ) Generates sample firing rates for a Poisson process modulated by voltage measurements ( VM ) bins of size DELTAT . Spikes are assumed to be generated at a Poisson rate , where the rate lambda is determined by RATEFUNC ( VM , ... ) * DELTAT . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : vlt . neuro . membrane . poisson_vm_fr Example :","title":"vlt.neuro.membrane.generate_poisson_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/mle_normal_vm_fr.m/","text":"vlt.neuro.membrane.mle_normal_vm_fr \u00b6 MLE_NORMAL_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = vlt . neuro . membrane . mle_normal_vm_fr ( VM , FR , DELTAT , ...) Estimate the parameters of a Normal rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' linearthreshold ' , PARAMS is [ slope threshold sigma ] ( see help vlt . fit . linepowerthreshold ) For ' vlt . fit . linepowerthreshold ' , PARAMS is [ slope threshold exponent sigma ] For ' Normal ' , PARAMS is [ rate sigma ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function ( ' linearthreshold ' ) | Uses function ' linearthreshold ' | that has form R ( v ) = vlt . math . rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins fr = icdf ( ' Normal ' , rand ( 500 , 1 ), 2 , 1 ); % generate rates , rate of 2 , standard deviation of 1 p_out = vlt . neuro . membrane . mle_normal_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Normal ' ) p_out_matlab = mle ( fr , ' distribution ',' Normal ' ) % they match","title":"vlt.neuro.membrane.mle_normal_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/mle_normal_vm_fr.m/#vltneuromembranemle_normal_vm_fr","text":"MLE_NORMAL_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = vlt . neuro . membrane . mle_normal_vm_fr ( VM , FR , DELTAT , ...) Estimate the parameters of a Normal rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' linearthreshold ' , PARAMS is [ slope threshold sigma ] ( see help vlt . fit . linepowerthreshold ) For ' vlt . fit . linepowerthreshold ' , PARAMS is [ slope threshold exponent sigma ] For ' Normal ' , PARAMS is [ rate sigma ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function ( ' linearthreshold ' ) | Uses function ' linearthreshold ' | that has form R ( v ) = vlt . math . rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins fr = icdf ( ' Normal ' , rand ( 500 , 1 ), 2 , 1 ); % generate rates , rate of 2 , standard deviation of 1 p_out = vlt . neuro . membrane . mle_normal_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Normal ' ) p_out_matlab = mle ( fr , ' distribution ',' Normal ' ) % they match","title":"vlt.neuro.membrane.mle_normal_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/mle_poisson_vm_fr.m/","text":"vlt.neuro.membrane.mle_poisson_vm_fr \u00b6 MLE_POISSON_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = vlt . neuro . membrane . mle_poisson_vm_fr ( VM , FR , DELTAT , ...) Estimate the parameters of a Poisson rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' vlt . fit . linepowerthreshold ' , PARAMS is [ slope threshold ] ( see help vlt . fit . linepowerthreshold ) For ' vlt . fit . linepowerthreshold ' , PARAMS is [ slope threshold exponent ] For ' Poisson ' , PARAMS is [ rate ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function | Uses function ' vlt . fit . linearpowerthreshold ' ( ' vlt . fit . linepowerthreshold ' ) | that has form R ( v ) = vlt . math . rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins n = icdf ( ' Poisson ' , rand ( 500 , 1 ), 2 ); % generate spike counts in bins , rate of 2 fr = n / deltaT ; % convert to rates p_out = vlt . neuro . membrane . mle_poisson_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Poisson ' ) p_out_matlab = mle ( round ( fr * deltaT ), ' distribution ',' Poisson ' ) / deltaT % they match","title":"vlt.neuro.membrane.mle_poisson_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/mle_poisson_vm_fr.m/#vltneuromembranemle_poisson_vm_fr","text":"MLE_POISSON_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = vlt . neuro . membrane . mle_poisson_vm_fr ( VM , FR , DELTAT , ...) Estimate the parameters of a Poisson rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' vlt . fit . linepowerthreshold ' , PARAMS is [ slope threshold ] ( see help vlt . fit . linepowerthreshold ) For ' vlt . fit . linepowerthreshold ' , PARAMS is [ slope threshold exponent ] For ' Poisson ' , PARAMS is [ rate ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function | Uses function ' vlt . fit . linearpowerthreshold ' ( ' vlt . fit . linepowerthreshold ' ) | that has form R ( v ) = vlt . math . rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins n = icdf ( ' Poisson ' , rand ( 500 , 1 ), 2 ); % generate spike counts in bins , rate of 2 fr = n / deltaT ; % convert to rates p_out = vlt . neuro . membrane . mle_poisson_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Poisson ' ) p_out_matlab = mle ( round ( fr * deltaT ), ' distribution ',' Poisson ' ) / deltaT % they match","title":"vlt.neuro.membrane.mle_poisson_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/normal_vm_fr.m/","text":"vlt.neuro.membrane.normal_vm_fr \u00b6 NORMAL_VM_FR - calculate log likelihood of seeing Vm / Fr pairs given model LOGP_OF_DATA = vlt . neuro . membrane . normal_vm_fr ( VM , FR , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA , ... ) Calculate the log likelihood of observing a given set of binned membrane voltage measurements ( VM ) and corresponding binned firing rates ( FR ) in bins size DELTAT . Spikes are assumed to be generated from a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and the standard deviation SIGMA is constant and passed above . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:}); See also : vlt . neuro . membrane . mle_normal_vm_fr , vlt . neuro . membrane . poisson_vm_fr , vlt . neuro . membrane . mle_poisson_vm_fr","title":"vlt.neuro.membrane.normal_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/normal_vm_fr.m/#vltneuromembranenormal_vm_fr","text":"NORMAL_VM_FR - calculate log likelihood of seeing Vm / Fr pairs given model LOGP_OF_DATA = vlt . neuro . membrane . normal_vm_fr ( VM , FR , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA , ... ) Calculate the log likelihood of observing a given set of binned membrane voltage measurements ( VM ) and corresponding binned firing rates ( FR ) in bins size DELTAT . Spikes are assumed to be generated from a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and the standard deviation SIGMA is constant and passed above . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:}); See also : vlt . neuro . membrane . mle_normal_vm_fr , vlt . neuro . membrane . poisson_vm_fr , vlt . neuro . membrane . mle_poisson_vm_fr","title":"vlt.neuro.membrane.normal_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/plot_voltage_firingrate_observations.m/","text":"vlt.neuro.membrane.plot_voltage_firingrate_observations \u00b6 PLOT_VOLTAGE_FIRINGRATE_OBSERVATIONS - plot a list of voltage - firing rate observations against real data [ H , HTEXT ] = vlt . neuro . membrane . plot_voltage_firingrate_observations ( V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBTRACTED , T , VM , SPIKETIMES , ... ) Given inputs : V - voltage observations returned from vlt . neuro . membrane . voltage_firingrate_observations FR - firing rate observations returned from vlt . neuro . membrane . voltage_firingrate_observations STIMID - stimulus IDs TIMEPOINTS - Timepoints that are averaged together T - time points of raw data VM - voltage measurements of raw data SPIKETIMES - time of spiking events This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0 . 030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ( [] ) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ( [] ) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform See also : vlt . neuro . membrane . voltage_firingrate_observations","title":"vlt.neuro.membrane.plot_voltage_firingrate_observations"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/plot_voltage_firingrate_observations.m/#vltneuromembraneplot_voltage_firingrate_observations","text":"PLOT_VOLTAGE_FIRINGRATE_OBSERVATIONS - plot a list of voltage - firing rate observations against real data [ H , HTEXT ] = vlt . neuro . membrane . plot_voltage_firingrate_observations ( V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBTRACTED , T , VM , SPIKETIMES , ... ) Given inputs : V - voltage observations returned from vlt . neuro . membrane . voltage_firingrate_observations FR - firing rate observations returned from vlt . neuro . membrane . voltage_firingrate_observations STIMID - stimulus IDs TIMEPOINTS - Timepoints that are averaged together T - time points of raw data VM - voltage measurements of raw data SPIKETIMES - time of spiking events This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0 . 030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ( [] ) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ( [] ) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform See also : vlt . neuro . membrane . voltage_firingrate_observations","title":"vlt.neuro.membrane.plot_voltage_firingrate_observations"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/poisson_vm_fr.m/","text":"vlt.neuro.membrane.poisson_vm_fr \u00b6 POISSON_VM_FR - calculate log likelihood of seeing Vm/Fr pairs given model LOGP_OF_DATA = vlt.neuro.membrane.poisson_vm_fr(VM, FR, DELTAT, RATEFUNC, RATEFUNCPARAMS, ...) Calculate the log likelihood of observing a given set of binned membrane voltage measurements (VM) and corresponding binned firing rates (FR) in bins size DELTAT. Spikes are assumed to be generated at a Poisson rate, where the rate lambda is determined by RATEFUNC(VM, ...) * DELTAT. RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC, so that the call to RATEFUNC is RATEFUNC(VM, RATEFUNCPARAMS{:}); See also: vlt.neuro.membrane.mle_poisson_vm_fr","title":"vlt.neuro.membrane.poisson_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/poisson_vm_fr.m/#vltneuromembranepoisson_vm_fr","text":"POISSON_VM_FR - calculate log likelihood of seeing Vm/Fr pairs given model LOGP_OF_DATA = vlt.neuro.membrane.poisson_vm_fr(VM, FR, DELTAT, RATEFUNC, RATEFUNCPARAMS, ...) Calculate the log likelihood of observing a given set of binned membrane voltage measurements (VM) and corresponding binned firing rates (FR) in bins size DELTAT. Spikes are assumed to be generated at a Poisson rate, where the rate lambda is determined by RATEFUNC(VM, ...) * DELTAT. RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC, so that the call to RATEFUNC is RATEFUNC(VM, RATEFUNCPARAMS{:}); See also: vlt.neuro.membrane.mle_poisson_vm_fr","title":"vlt.neuro.membrane.poisson_vm_fr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/spikeFWHM.m/","text":"vlt.neuro.membrane.spikeFWHM \u00b6 vlt . neuro . membrane . spikeFWHM - find the full - width , half - maximum range in single spike waveforms [ FWHM ] = vlt . neuro . membrane . spikeFWHM ( SPIKEWAVES , V_SPIKEPEAK , SPIKEPEAK_LOC , V_INITIATION , SAMPLERATE ) Inputs : SPIKEWAVES | 1 D vector containing voltage values for each spikewave V_SPIKEPEAK | 1 D vector containing maximum voltage value of every | spike wave ( units V ) SPIKEPEAK_LOC | Position value of each spike peak KINK_VM | Value where action potential begins , calculated | by sister function vlt . neuro . membrane . spikekink ( units V ) SAMPLERATE | Rate of sampling for each epoch ( units Hz ), given by ndi_app_spikeextractor Outputs : FWHM | Full - width half maximum value , calculated from sample rate and converted to ms HM_PRESK_LOC | Position value of half - maximum value before spike peak | HM_POSTSK_LOC | Position value of half - maximum value after spike peak V_hm | Voltage value of the half - maximum points ( units V )","title":"vlt.neuro.membrane.spikeFWHM"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/spikeFWHM.m/#vltneuromembranespikefwhm","text":"vlt . neuro . membrane . spikeFWHM - find the full - width , half - maximum range in single spike waveforms [ FWHM ] = vlt . neuro . membrane . spikeFWHM ( SPIKEWAVES , V_SPIKEPEAK , SPIKEPEAK_LOC , V_INITIATION , SAMPLERATE ) Inputs : SPIKEWAVES | 1 D vector containing voltage values for each spikewave V_SPIKEPEAK | 1 D vector containing maximum voltage value of every | spike wave ( units V ) SPIKEPEAK_LOC | Position value of each spike peak KINK_VM | Value where action potential begins , calculated | by sister function vlt . neuro . membrane . spikekink ( units V ) SAMPLERATE | Rate of sampling for each epoch ( units Hz ), given by ndi_app_spikeextractor Outputs : FWHM | Full - width half maximum value , calculated from sample rate and converted to ms HM_PRESK_LOC | Position value of half - maximum value before spike peak | HM_POSTSK_LOC | Position value of half - maximum value after spike peak V_hm | Voltage value of the half - maximum points ( units V )","title":"vlt.neuro.membrane.spikeFWHM"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/spikekink.m/","text":"vlt.neuro.membrane.spikekink \u00b6 SPIKEKINK - find the \"kink\" inflection point in spike waveforms , and maximum dv / dt after Azouz and Gray 1999 [ KINK_VM , MAX_DVDT , KINK_INDEX_ ] = vlt . neuro . membrane . spikekink ( SPIKE_TRACE , T , SPIKE_INDEXES , ... ) Inputs : SPIKE_WAVE | 1 D vector containing values for voltage at every | timestep in spike_wave ( units V ) T_VEC | 1 D vector containing timestamps in seconds SPIKE_INDEXES | Sample index values of approximate spike peaks in SPIKE_TRACE | and can be in either row or column vector form Calculates the \"kink\" in spike waveforms where spike begins to take off . See Azouz and Gray , J . Neurosci 1999 . SPIKE_LOCATIONS that are greater than Outputs : KINK_VM | Vector of voltage at each spike kink MAX_DVDT | Vector of maximum DV / DT for each spike ( volts / sec ) KINK_INDEX | Vector of times of each spike kink This function also takes additional parameters in the form of name / value pairs . Parameter ( default ) | Description --------------------------------------------------------------- slope_criterion ( 0 . 033 ) | Fraction of peak dV / dt , calibrated by visual | inspection to match threshold search_interval ( 0 . 004 ) | How much before each spike_location to begin | the search for the kink ( in seconds ) Jason Osik 2016 - 2017 , slight mods by SDV , DPL","title":"vlt.neuro.membrane.spikekink"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/spikekink.m/#vltneuromembranespikekink","text":"SPIKEKINK - find the \"kink\" inflection point in spike waveforms , and maximum dv / dt after Azouz and Gray 1999 [ KINK_VM , MAX_DVDT , KINK_INDEX_ ] = vlt . neuro . membrane . spikekink ( SPIKE_TRACE , T , SPIKE_INDEXES , ... ) Inputs : SPIKE_WAVE | 1 D vector containing values for voltage at every | timestep in spike_wave ( units V ) T_VEC | 1 D vector containing timestamps in seconds SPIKE_INDEXES | Sample index values of approximate spike peaks in SPIKE_TRACE | and can be in either row or column vector form Calculates the \"kink\" in spike waveforms where spike begins to take off . See Azouz and Gray , J . Neurosci 1999 . SPIKE_LOCATIONS that are greater than Outputs : KINK_VM | Vector of voltage at each spike kink MAX_DVDT | Vector of maximum DV / DT for each spike ( volts / sec ) KINK_INDEX | Vector of times of each spike kink This function also takes additional parameters in the form of name / value pairs . Parameter ( default ) | Description --------------------------------------------------------------- slope_criterion ( 0 . 033 ) | Fraction of peak dV / dt , calibrated by visual | inspection to match threshold search_interval ( 0 . 004 ) | How much before each spike_location to begin | the search for the kink ( in seconds ) Jason Osik 2016 - 2017 , slight mods by SDV , DPL","title":"vlt.neuro.membrane.spikekink"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/spikewavetrimmer.m/","text":"vlt.neuro.membrane.spikewavetrimmer \u00b6 SPIKEWAVETRIMMER - remove the zero padding from spikewave and yield the time preceding spike peaks [ SPIKEWAVE_VTRIM ] = vlt . neuro . membrane . spikewavetrimmer ( SPIKEWAVE , SPIKEPEAK_LOC ) Inputs : SPIKEWAVE | 1 D vector containing values for voltage at every | timestep in spike_trace ( units V ) SPIKEPEAK_LOC | Position of spike peak location Outputs : SPIKEWAVE_VTRIM | A trimmed vector of spikewave voltages with all | 0 padding removed and replaced with the leading ( or | trailing ) non - zero data points at the beginning and | end of the wave , respectively .","title":"vlt.neuro.membrane.spikewavetrimmer"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/spikewavetrimmer.m/#vltneuromembranespikewavetrimmer","text":"SPIKEWAVETRIMMER - remove the zero padding from spikewave and yield the time preceding spike peaks [ SPIKEWAVE_VTRIM ] = vlt . neuro . membrane . spikewavetrimmer ( SPIKEWAVE , SPIKEPEAK_LOC ) Inputs : SPIKEWAVE | 1 D vector containing values for voltage at every | timestep in spike_trace ( units V ) SPIKEPEAK_LOC | Position of spike peak location Outputs : SPIKEWAVE_VTRIM | A trimmed vector of spikewave voltages with all | 0 padding removed and replaced with the leading ( or | trailing ) non - zero data points at the beginning and | end of the wave , respectively .","title":"vlt.neuro.membrane.spikewavetrimmer"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/vmnospikes.m/","text":"vlt.neuro.membrane.vmnospikes \u00b6 VMNOSPIKES - Return underlying voltage with spikes removed [ VMNS , T , SPIKETIMES ] = vlt . neuro . membrane . vmnospikes ( VM , SI ) Removes spikes from the trace VM with sample interval SI . Optionally , one can re - sample at a higher SI ( lower sampling rate ) . SPIKETIMES that were detected are returned in SPIKETIMES . The behavior of this function can be modified by passing name / value pairs : Parameter ( default ): | Description : --------------------------------------------------------------- newsi ( si ) | If the interval is higher than si , | then the waveform is smoothed ( boxcar ) | and downsampled . filter_algorithm | Filter algorithm : choice of 'vlt.signal.removespikes' , which employs ( 'vlt.signal.removespikes' ) | detects spikes and removes them with vlt . signal . removespikes ; | or 'medfilt1' which performs a median filter using MEDFILT1 spiketimes ([]) | Extracted spike times from the trace | ( if empty , then spikes are extracted using | threshold crossing and vlt . signal . refractory period ) | Spike times are in same units as SI | and are relative to Tstart thresh ( - 0.030 ) | Spike threshold for spike detection ( not used | if spiketimes is given ) refract ( 0.0025 ) | Refractory period ( in same units as SI ) MedFilterWidth | MedFilterWidth ( see MEDFILT1 ) ( round ( 0.004 / SI ) ) | Tstart ( 0 ) | Time of the first sample of the VM trace removespikes_inputs ({}) | Any custom inputs we should pass to vlt . signal . removespikes | ( see vlt . signal . removespikes ) rm60hz ( 1 ) | 0 / 1 should we filter 60 Hz noise ? ( uses vlt . signal . remove60hz ) rm60hz_inputs ({}) | Any custom arguments we should pass to vlt . signal . remove60hz | ( see vlt . signal . remove60hz )","title":"vlt.neuro.membrane.vmnospikes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/vmnospikes.m/#vltneuromembranevmnospikes","text":"VMNOSPIKES - Return underlying voltage with spikes removed [ VMNS , T , SPIKETIMES ] = vlt . neuro . membrane . vmnospikes ( VM , SI ) Removes spikes from the trace VM with sample interval SI . Optionally , one can re - sample at a higher SI ( lower sampling rate ) . SPIKETIMES that were detected are returned in SPIKETIMES . The behavior of this function can be modified by passing name / value pairs : Parameter ( default ): | Description : --------------------------------------------------------------- newsi ( si ) | If the interval is higher than si , | then the waveform is smoothed ( boxcar ) | and downsampled . filter_algorithm | Filter algorithm : choice of 'vlt.signal.removespikes' , which employs ( 'vlt.signal.removespikes' ) | detects spikes and removes them with vlt . signal . removespikes ; | or 'medfilt1' which performs a median filter using MEDFILT1 spiketimes ([]) | Extracted spike times from the trace | ( if empty , then spikes are extracted using | threshold crossing and vlt . signal . refractory period ) | Spike times are in same units as SI | and are relative to Tstart thresh ( - 0.030 ) | Spike threshold for spike detection ( not used | if spiketimes is given ) refract ( 0.0025 ) | Refractory period ( in same units as SI ) MedFilterWidth | MedFilterWidth ( see MEDFILT1 ) ( round ( 0.004 / SI ) ) | Tstart ( 0 ) | Time of the first sample of the VM trace removespikes_inputs ({}) | Any custom inputs we should pass to vlt . signal . removespikes | ( see vlt . signal . removespikes ) rm60hz ( 1 ) | 0 / 1 should we filter 60 Hz noise ? ( uses vlt . signal . remove60hz ) rm60hz_inputs ({}) | Any custom arguments we should pass to vlt . signal . remove60hz | ( see vlt . signal . remove60hz )","title":"vlt.neuro.membrane.vmnospikes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/voltage_firingrate_observations.m/","text":"vlt.neuro.membrane.voltage_firingrate_observations \u00b6 VOLTAGE_FIRINGRATE_OBSERVATIONS - compile a list of voltage measurements and firing rate measurements [ V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBECTRACTED , EXACTBINTIME , SUBTRACTED_VALUE ] = ... vlt . neuro . membrane . voltage_firingrate_observations ( T , VM , SPIKETIMES , ... ) Compiles a list of membrane voltage measurements V and firing rate measurements FR given the following inputs : T is a vector with the time of each sample in VM VM is a vector of samples of absolute voltage measurement , should have spikes removed SPIKETIMES is a vector of spike times ( in units of t , should be seconds ) V and FR are paired , binned observations of voltage and firing rate , and TIMEPOINTS are the mid - point values of the bins in time . STIMID is a vector containing the stimulus id of each V , FR pair . VM_BASELINESUBTRACTED is the voltage waveform with baseline values subtracted . EXACTBINTIME is the time interval of each bin exactly , which varies depending upon the sampling rate of Vm . This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0.030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ([]) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ([]) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform vm_baseline_correct ([]) | If non - empty , perform a baseline correction of the | voltage waveform using this much pre - stimulus | time ( units of t , should be seconds ) . | ( Recommended for sharp electrode recordings , not receommended | for patch recordings . ) vm_baseline_correct_func | The function to use for correcting baseline ( usually 'median' or 'mean' ) . ( 'median' )","title":"vlt.neuro.membrane.voltage_firingrate_observations"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/voltage_firingrate_observations.m/#vltneuromembranevoltage_firingrate_observations","text":"VOLTAGE_FIRINGRATE_OBSERVATIONS - compile a list of voltage measurements and firing rate measurements [ V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBECTRACTED , EXACTBINTIME , SUBTRACTED_VALUE ] = ... vlt . neuro . membrane . voltage_firingrate_observations ( T , VM , SPIKETIMES , ... ) Compiles a list of membrane voltage measurements V and firing rate measurements FR given the following inputs : T is a vector with the time of each sample in VM VM is a vector of samples of absolute voltage measurement , should have spikes removed SPIKETIMES is a vector of spike times ( in units of t , should be seconds ) V and FR are paired , binned observations of voltage and firing rate , and TIMEPOINTS are the mid - point values of the bins in time . STIMID is a vector containing the stimulus id of each V , FR pair . VM_BASELINESUBTRACTED is the voltage waveform with baseline values subtracted . EXACTBINTIME is the time interval of each bin exactly , which varies depending upon the sampling rate of Vm . This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0.030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ([]) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ([]) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform vm_baseline_correct ([]) | If non - empty , perform a baseline correction of the | voltage waveform using this much pre - stimulus | time ( units of t , should be seconds ) . | ( Recommended for sharp electrode recordings , not receommended | for patch recordings . ) vm_baseline_correct_func | The function to use for correcting baseline ( usually 'median' or 'mean' ) . ( 'median' )","title":"vlt.neuro.membrane.voltage_firingrate_observations"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/voltage_firingrate_observations_per_stimulus.m/","text":"vlt.neuro.membrane.voltage_firingrate_observations_per_stimulus \u00b6 VOLTAGE_FIRINGRATE_OBSERVATIONS - calculate voltage and firing rate observations for a stimulus ( mean , mean at a frequency ) [ MEAN_V , MEAN_FR , STIMID , STIMPRES , VMOPSPERSTIM , FROBSPERSTIM ] = vlt . neuro . membrane . voltage_firingrate_observations_per_stimulus ( ... VM , SPIKERATE , TIME , STIM_ONSETOFFSETID , ... ) Calculates the mean response across each stimulus presentation described in STIM_ONSETOFFSETID for both voltage ( VM ) and SPIKERATE . SPIKERATE should be the firing rate at each time point T , VM is the voltage at each time point T . STIM_ONSETOFFSETID should have 1 row per stimulus and each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of 'TIME' ( such as seconds ) . STIMPRES is the stimulus presentation number . VMOPSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . FROBSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . This function also takes NAME / VALUE parameter pairs that modify its behavior . Parameter ( default value ) | Description ----------------------------------------------------------------------------- PRETIME ( [] ) | If not empty , the voltage PRETIME seconds before each | stimulus is subtracted from the response . F1 ( [] ) | If not empty , then the responses is taken to be the | magnitude of the fourier transform at the frequency F1 .","title":"vlt.neuro.membrane.voltage_firingrate_observations_per_stimulus"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmembrane/voltage_firingrate_observations_per_stimulus.m/#vltneuromembranevoltage_firingrate_observations_per_stimulus","text":"VOLTAGE_FIRINGRATE_OBSERVATIONS - calculate voltage and firing rate observations for a stimulus ( mean , mean at a frequency ) [ MEAN_V , MEAN_FR , STIMID , STIMPRES , VMOPSPERSTIM , FROBSPERSTIM ] = vlt . neuro . membrane . voltage_firingrate_observations_per_stimulus ( ... VM , SPIKERATE , TIME , STIM_ONSETOFFSETID , ... ) Calculates the mean response across each stimulus presentation described in STIM_ONSETOFFSETID for both voltage ( VM ) and SPIKERATE . SPIKERATE should be the firing rate at each time point T , VM is the voltage at each time point T . STIM_ONSETOFFSETID should have 1 row per stimulus and each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of 'TIME' ( such as seconds ) . STIMPRES is the stimulus presentation number . VMOPSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . FROBSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . This function also takes NAME / VALUE parameter pairs that modify its behavior . Parameter ( default value ) | Description ----------------------------------------------------------------------------- PRETIME ( [] ) | If not empty , the voltage PRETIME seconds before each | stimulus is subtracted from the response . F1 ( [] ) | If not empty , then the responses is taken to be the | magnitude of the fourier transform at the frequency F1 .","title":"vlt.neuro.membrane.voltage_firingrate_observations_per_stimulus"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bminis/minidetection.m/","text":"vlt.neuro.minis.minidetection \u00b6 MINIDETECTION - Detect minis from noise -- THIS FUNCTION DOESNT WORK YET , STILL IN DEVELOPMENT MINISTRUCT = vlt . neuro . minis . minidetection ( DATA , SI , ... ) Finds spontaneous miniature evoked potential / current events in a recorded trace . Inputs : DATA should be an R x S matrix , where each row has a data set , and S is the number of samples in each recording . The sampling interval for the records is specified by SI . Additional modifications can be provided by specifying parameters as name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------------------------- do_detrend_median ( 1 ) | Should we detrend the data using vlt . signal . detrend_median ? detrend_timescale ( 0.5 ) | Over what timescale ? ( in seconds ) estimate_std_median ( 1 ) | Should we use the median method ( STD_MEDIAN ) to estimate | standard deviation ( 1 ) or the standard method | of calling STD ( 0 ) ? minisimulation ( see txt ) | What mini detection simulation should we use to | determine optimal threshold ? Default is | 'minidetectionsimulation_guassian' | This file must be on the path and it must be the | results of vlt . neuro . minis . minidetectionsimulation t_before ( - 0.020 ) | Time before each mini to grab ( in seconds , rounded to | nearest sample based on SI ) t_after ( 0.100 ) | Time after each mini to grab ( in seconds , rounded to | nearest sample based on SI ) Outputs : MINISTRUCT is a structure with the following fields : Fieldname : | Description ----------------------------------------------------------------------------- frequency | The overall average frequency of detected mini events amplitude | The overall average amplitude of detected mini events intereventintervals | The time intervals between detected mini events wavetime | A time axis for plotting mini waveforms meanminiwaveform | The grand mean mini waveform miniamplitudes | The amplitude for each mini row_minisamples {} | For each row of DATA , the samples that correspond to mini peaks row_minitimes {} | For each row of DATA , the times ( from beginning of row DATA ) | that correspond to peaks row_miniwaveforms {} | For each row of DATA , the waveform associated with each mini row_miniamplitudes {} | For each row of DATA , the amplitude associated with each mini See also :","title":"vlt.neuro.minis.minidetection"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bminis/minidetection.m/#vltneurominisminidetection","text":"MINIDETECTION - Detect minis from noise -- THIS FUNCTION DOESNT WORK YET , STILL IN DEVELOPMENT MINISTRUCT = vlt . neuro . minis . minidetection ( DATA , SI , ... ) Finds spontaneous miniature evoked potential / current events in a recorded trace . Inputs : DATA should be an R x S matrix , where each row has a data set , and S is the number of samples in each recording . The sampling interval for the records is specified by SI . Additional modifications can be provided by specifying parameters as name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------------------------- do_detrend_median ( 1 ) | Should we detrend the data using vlt . signal . detrend_median ? detrend_timescale ( 0.5 ) | Over what timescale ? ( in seconds ) estimate_std_median ( 1 ) | Should we use the median method ( STD_MEDIAN ) to estimate | standard deviation ( 1 ) or the standard method | of calling STD ( 0 ) ? minisimulation ( see txt ) | What mini detection simulation should we use to | determine optimal threshold ? Default is | 'minidetectionsimulation_guassian' | This file must be on the path and it must be the | results of vlt . neuro . minis . minidetectionsimulation t_before ( - 0.020 ) | Time before each mini to grab ( in seconds , rounded to | nearest sample based on SI ) t_after ( 0.100 ) | Time after each mini to grab ( in seconds , rounded to | nearest sample based on SI ) Outputs : MINISTRUCT is a structure with the following fields : Fieldname : | Description ----------------------------------------------------------------------------- frequency | The overall average frequency of detected mini events amplitude | The overall average amplitude of detected mini events intereventintervals | The time intervals between detected mini events wavetime | A time axis for plotting mini waveforms meanminiwaveform | The grand mean mini waveform miniamplitudes | The amplitude for each mini row_minisamples {} | For each row of DATA , the samples that correspond to mini peaks row_minitimes {} | For each row of DATA , the times ( from beginning of row DATA ) | that correspond to peaks row_miniwaveforms {} | For each row of DATA , the waveform associated with each mini row_miniamplitudes {} | For each row of DATA , the amplitude associated with each mini See also :","title":"vlt.neuro.minis.minidetection"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bminis/minidetectionsimulation.m/","text":"vlt.neuro.minis.minidetectionsimulation \u00b6 MINIDETECTIONSIMULATION [ OPT_THRESHOLD , DETECTOR , CONV_SCALE , STATS ] = vlt . neuro . minis . minidetectionsimulation Solves , through simulation , the optimum threshold for detecting miniature excitatory or inhibitory post - synaptic potentials or currents . Minis are assumed to arrive on a background of pure gaussian noise with a standard deviation of 1 . ( One can divide the threshold by the actual noise encountered in one 's own data to obtain the equivalent value for real data.) OPT_THRESHOLD - the threshold that produced the fewest overall errors of detection, weighing false positives and false negatives equally (because both errors have the same impact on average mini frequency and amplitude). DETECTOR - The filter used for detection. It assumes a positively-going wave (simply multiply this by -1 to switch sign). CONV_SCALE - The amount by which the convolution of the data and the DETECTOR should be scaled to reproduce the detection values used in this simulation (depends on sampling rate and number of samples). STATS - a structure with error rates for different values of threshold. The behavior of the function can be altered by passing name/value pairs: Parameter (default) | Description ------------------------------------------------------------------------------ DT (0.001) | The time step between adjacent samples Tau_Onset (0.0025) | The time of the synaptic potential onset (in seconds) Tau_Offset (0.0250) | The time of the synaptic potential offset (in seconds) Simulation_Duration (100) | The simulation duration (seconds) expected_rate_of_events (10) | The expected rate of real events (Hz) noise_fraction (0.1) | The fraction that Tau_Offset and Tau_Onset should be | altered by noise in the simulation threshold_steps (50) | Threshold steps to examine refractory_period (0.020) | Refractory period (time between events can be no shorter | than this, in seconds) plotit (0) | Plot the threshold vs. errors curve","title":"vlt.neuro.minis.minidetectionsimulation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bminis/minidetectionsimulation.m/#vltneurominisminidetectionsimulation","text":"MINIDETECTIONSIMULATION [ OPT_THRESHOLD , DETECTOR , CONV_SCALE , STATS ] = vlt . neuro . minis . minidetectionsimulation Solves , through simulation , the optimum threshold for detecting miniature excitatory or inhibitory post - synaptic potentials or currents . Minis are assumed to arrive on a background of pure gaussian noise with a standard deviation of 1 . ( One can divide the threshold by the actual noise encountered in one 's own data to obtain the equivalent value for real data.) OPT_THRESHOLD - the threshold that produced the fewest overall errors of detection, weighing false positives and false negatives equally (because both errors have the same impact on average mini frequency and amplitude). DETECTOR - The filter used for detection. It assumes a positively-going wave (simply multiply this by -1 to switch sign). CONV_SCALE - The amount by which the convolution of the data and the DETECTOR should be scaled to reproduce the detection values used in this simulation (depends on sampling rate and number of samples). STATS - a structure with error rates for different values of threshold. The behavior of the function can be altered by passing name/value pairs: Parameter (default) | Description ------------------------------------------------------------------------------ DT (0.001) | The time step between adjacent samples Tau_Onset (0.0025) | The time of the synaptic potential onset (in seconds) Tau_Offset (0.0250) | The time of the synaptic potential offset (in seconds) Simulation_Duration (100) | The simulation duration (seconds) expected_rate_of_events (10) | The expected rate of real events (Hz) noise_fraction (0.1) | The fraction that Tau_Offset and Tau_Onset should be | altered by noise in the simulation threshold_steps (50) | Threshold steps to examine refractory_period (0.020) | Refractory period (time between events can be no shorter | than this, in seconds) plotit (0) | Plot the threshold vs. errors curve","title":"vlt.neuro.minis.minidetectionsimulation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bminis/minitemplates.m/","text":"vlt.neuro.minis.minitemplates \u00b6 [MT,T,PARAMS] = vlt.neuro.minis.minitemplates(...) Returns several rows of mini EPSC templates, ranging in amplitude from 0.1 to 1 in amplitude, and with a range of tau onsets and offsets. T is a series of time points that can be used to plot the templates. PARAMS is a structure that has one entry per template that indicates the Tau_Onset, Tau_Offset, and amplitude used. This function takes name/value pairs to modify its default behavior. Parameter (default) | Description ----------------------------------------------------------------------- Min_Amplitude (0.1) | The minimum amplitude to use Max_Amplitude (3) | The maximum amplitude to use Amplitude_Steps (9) | The number of amplitude steps from min to max Tau_Onsets ([0.001; | The range of Tau_Onset values to use (seconds) 0.003;]) | Tau_Offsets ([0.010; | The range of Tau_Offset values to use (seconds) 0.020; 0.030]); | t0 (0) | The time of the first sample in each template (seconds) t1 (0.100) | The time of the last sample in each template (seconds) dt (0.001) | The time interval between samples (seconds)","title":"vlt.neuro.minis.minitemplates"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bminis/minitemplates.m/#vltneurominisminitemplates","text":"[MT,T,PARAMS] = vlt.neuro.minis.minitemplates(...) Returns several rows of mini EPSC templates, ranging in amplitude from 0.1 to 1 in amplitude, and with a range of tau onsets and offsets. T is a series of time points that can be used to plot the templates. PARAMS is a structure that has one entry per template that indicates the Tau_Onset, Tau_Offset, and amplitude used. This function takes name/value pairs to modify its default behavior. Parameter (default) | Description ----------------------------------------------------------------------- Min_Amplitude (0.1) | The minimum amplitude to use Max_Amplitude (3) | The maximum amplitude to use Amplitude_Steps (9) | The number of amplitude steps from min to max Tau_Onsets ([0.001; | The range of Tau_Onset values to use (seconds) 0.003;]) | Tau_Offsets ([0.010; | The range of Tau_Offset values to use (seconds) 0.020; 0.030]); | t0 (0) | The time of the first sample in each template (seconds) t1 (0.100) | The time of the last sample in each template (seconds) dt (0.001) | The time interval between samples (seconds)","title":"vlt.neuro.minis.minitemplates"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/MLE_PoisGauss.m/","text":"vlt.neuro.mledenoise.MLE_PoisGauss \u00b6 MLE_PoisGauss - Calculate maximum likelihood of gain and average stimulus responses given raw responses [ PARAMS , FVAL ] = vlt . neuro . mledenoise . MLE_PoisGauss ( STIM_CENTER_TIMES , STIM_DURATIONS , RESPONSES_OBSERVED , ... SP , STIMLIST , MODEL , FIXPARAM , G_PARAMS , S_I_PARAMS , SMOOTHNESS ); Inputs : STIM_CENTER_TIMES - The time points at which the stimuli were presented ( middle of the stimuli ) Note that this vector should be as long as the number of stimuli times the number of repetitions of those stimuli . STIM_DURATIONS - The duration of each stimulus ( should be a vector ) RESPONSES_OBSERVED - The observed spike counts ( for Poisson model ) or rates ( for Gaussian model ) that occurred for stimulus presentation i ( should be vector as long as number of stimui times number of repetitions ) SP - Sinwave parameters STIMLIST - Stim ID numbers for all presented stimuli MODEL - 'Poisson' or 'Gaussian' FIXPARAM - Is the fixed parameter g ( FIXPARAM == 1 ) or s_i ( FIXPARAM == 0 ) ? G_PARAMS - A list of amplitudes for the 4 sinwaves S_I_PARAMS - The estimated mean firing rate for the i different types of stimuli that were presented ( note that this is as long as the number of unique stimuli ) . SMOOTHNESS - A constraint on the 2 nd derivative ( must be smoother than SMOOTHNESS ) If Inf is provided , or empty ([]), then this constraint is not used . Outputs : PARAMS - The estimated parameters , either s_i ( FIXPARAM == 1 ) or g ( FIXPARAM == 0 ) Fval - the value of the function to be minimized","title":"vlt.neuro.mledenoise.MLE_PoisGauss"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/MLE_PoisGauss.m/#vltneuromledenoisemle_poisgauss","text":"MLE_PoisGauss - Calculate maximum likelihood of gain and average stimulus responses given raw responses [ PARAMS , FVAL ] = vlt . neuro . mledenoise . MLE_PoisGauss ( STIM_CENTER_TIMES , STIM_DURATIONS , RESPONSES_OBSERVED , ... SP , STIMLIST , MODEL , FIXPARAM , G_PARAMS , S_I_PARAMS , SMOOTHNESS ); Inputs : STIM_CENTER_TIMES - The time points at which the stimuli were presented ( middle of the stimuli ) Note that this vector should be as long as the number of stimuli times the number of repetitions of those stimuli . STIM_DURATIONS - The duration of each stimulus ( should be a vector ) RESPONSES_OBSERVED - The observed spike counts ( for Poisson model ) or rates ( for Gaussian model ) that occurred for stimulus presentation i ( should be vector as long as number of stimui times number of repetitions ) SP - Sinwave parameters STIMLIST - Stim ID numbers for all presented stimuli MODEL - 'Poisson' or 'Gaussian' FIXPARAM - Is the fixed parameter g ( FIXPARAM == 1 ) or s_i ( FIXPARAM == 0 ) ? G_PARAMS - A list of amplitudes for the 4 sinwaves S_I_PARAMS - The estimated mean firing rate for the i different types of stimuli that were presented ( note that this is as long as the number of unique stimuli ) . SMOOTHNESS - A constraint on the 2 nd derivative ( must be smoother than SMOOTHNESS ) If Inf is provided , or empty ([]), then this constraint is not used . Outputs : PARAMS - The estimated parameters , either s_i ( FIXPARAM == 1 ) or g ( FIXPARAM == 0 ) Fval - the value of the function to be minimized","title":"vlt.neuro.mledenoise.MLE_PoisGauss"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/SlowMLEDeNoise.m/","text":"vlt.neuro.mledenoise.SlowMLEDeNoise \u00b6 SlowMLEDeNoise -- Estimate underlying stimulus response assuming a slow background drift in gain [ RESPONSES , SIN_WEIGHTS ] = vlt . neuro . mledenoise . SlowMLEDeNoise ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); ( see additional output arguments below ) This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . The parameters g ( t ) and s_i ( t ) are estimated using a maximum likelihood approach . First , initial estimates of g ( t ) and s_i ( t ) are made . The function g ( t ) is fit as the sum of 4 sinusoids . These sinwaves are constrained to have very low temporal frequencies , and cannot take a temporal frequency faster than 1 / 10 of the total trial duration by default ( see 'maxFrequency' parameter below ) . The measured mean response to each stimulus is taken to be the initial estimate of s_i ( t ) . We then iteratively re - estimate s_i ( t ) and g ( t ) to increase the likelihood of the data r ( t ) that we actually observed . First , s_i ( t ) is fixed while g ( t ) is re - estimated , and then g ( t ) is fixed while s_i ( t ) is re - estimated . This process is repeated 10 times be default ( see 'numIterations' parameter below ) . Note : This is a generalization of code that Dan Rubin wrote as part of his PhD Thesis : \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012 RESPONSES are the estimated mean responses to each unique stimulus . SIN_WEIGHTS are the best - fit amplitude coefficients to the underlying 4 term sinusoidal fit . PARAMETERS that can be modified , with default values : 'mlesmoothness' : Constraint of smoothness of second derivative of stimulus : response . Default 0.1 response units squared / stimvalues squared . : The 2 nd derivative calculation assumess that STIMVALUES are : equally spaced . Any change that is faster than this constraint : is not allowed . 'tFilter' : Timecourse of spikerate filter , default 100 ( seconds ) 'sin_dt' : Step size for smoothed sinusoid function , default 0.1 ( seconds ) 'dt' : Step size for simulated firing rate , default 1 / 1000 ( seconds ) 'model' : Can be 'Poisson' or 'Gaussian' ( case insensitive ) : Use 'Poisson' for spike responses , and 'Gaussian' for : continuous - valued measurements ( spike rates / voltages / etc ) 'responses_s_i' : Responses to each stimulus ; if this is : empty , then the spike rates are calculated from the : stimulus on and off times ( average rate ) ( default []) : If you want to calculate the response to a continuous : process such as the F1 component or a voltage , then : you must provide this . : This quantity serves as the r ( t ) to be fit , and also : serves as the initial estimate of s ( t ) . 'prerecordtime' : Number of seconds before the first stimulus that we assume : the recording of spikes began ( default 5 ) 'postrecordtime' : Number of seconds after the last stimulus that we assume : the recording of spikes continued ( default 5 ) 'maxFrequency' : Maximum temporal frequency of the smoothed sinewave , where : 1 cycle is the duration of the whole experiment . Default 10 'numIterations' : Number of re - estimation steps to perform . Default 10. 'verbose' : 0 / 1 Prints what is going on as function runs ( default 0 ) One can also retrieve additional outputs : [ RESPONSES , SIN_WEIGHT , FIT_SIN4 , MLE , RESPONSE_OBSERVED , ... STIMLIST , RESPONSES_S_I , SMOOTH_TIME , SMOOTH_SPIKERATE , SINFIT_SMOOTH_SPIKERATE ] ... = vlt . neuro . mledenoise . SlowMLEDeNoise ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); FIT_SIN4 is a set of 13 coefficients to a 4 th order sinusoidal fit ( see vlt . fit . sin4_fit ), MLE is the actual maximum likelihood value RESPONSE_OBSERVED is the actual responses that were observed . In the case of the Poisson model , this is the number of spikes per stimulus . In the case of the Gaussian model , this is the response rate . STIMLIST is the order in which the stimuli were presented ; stimuli are numbered according to the value of STIMVALUES , from least to greatest ( see help UNIQUE ) RESPONSES_S_I are the responses ( r ( t ) * g ( t )) for each stimulus in STIMLIST Examples : see vlt . neuro . mledenoise . testSlowMLE and vlt . neuro . mledenoise . testSlowMLE_modulation ( 'type vlt.neuro.mledenoise.testSlowMLE' and 'type vlt.neuro.mledenoise.testSlowMLE_modulation' ) See also : FIT_SIN4","title":"vlt.neuro.mledenoise.SlowMLEDeNoise"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/SlowMLEDeNoise.m/#vltneuromledenoiseslowmledenoise","text":"SlowMLEDeNoise -- Estimate underlying stimulus response assuming a slow background drift in gain [ RESPONSES , SIN_WEIGHTS ] = vlt . neuro . mledenoise . SlowMLEDeNoise ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); ( see additional output arguments below ) This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . The parameters g ( t ) and s_i ( t ) are estimated using a maximum likelihood approach . First , initial estimates of g ( t ) and s_i ( t ) are made . The function g ( t ) is fit as the sum of 4 sinusoids . These sinwaves are constrained to have very low temporal frequencies , and cannot take a temporal frequency faster than 1 / 10 of the total trial duration by default ( see 'maxFrequency' parameter below ) . The measured mean response to each stimulus is taken to be the initial estimate of s_i ( t ) . We then iteratively re - estimate s_i ( t ) and g ( t ) to increase the likelihood of the data r ( t ) that we actually observed . First , s_i ( t ) is fixed while g ( t ) is re - estimated , and then g ( t ) is fixed while s_i ( t ) is re - estimated . This process is repeated 10 times be default ( see 'numIterations' parameter below ) . Note : This is a generalization of code that Dan Rubin wrote as part of his PhD Thesis : \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012 RESPONSES are the estimated mean responses to each unique stimulus . SIN_WEIGHTS are the best - fit amplitude coefficients to the underlying 4 term sinusoidal fit . PARAMETERS that can be modified , with default values : 'mlesmoothness' : Constraint of smoothness of second derivative of stimulus : response . Default 0.1 response units squared / stimvalues squared . : The 2 nd derivative calculation assumess that STIMVALUES are : equally spaced . Any change that is faster than this constraint : is not allowed . 'tFilter' : Timecourse of spikerate filter , default 100 ( seconds ) 'sin_dt' : Step size for smoothed sinusoid function , default 0.1 ( seconds ) 'dt' : Step size for simulated firing rate , default 1 / 1000 ( seconds ) 'model' : Can be 'Poisson' or 'Gaussian' ( case insensitive ) : Use 'Poisson' for spike responses , and 'Gaussian' for : continuous - valued measurements ( spike rates / voltages / etc ) 'responses_s_i' : Responses to each stimulus ; if this is : empty , then the spike rates are calculated from the : stimulus on and off times ( average rate ) ( default []) : If you want to calculate the response to a continuous : process such as the F1 component or a voltage , then : you must provide this . : This quantity serves as the r ( t ) to be fit , and also : serves as the initial estimate of s ( t ) . 'prerecordtime' : Number of seconds before the first stimulus that we assume : the recording of spikes began ( default 5 ) 'postrecordtime' : Number of seconds after the last stimulus that we assume : the recording of spikes continued ( default 5 ) 'maxFrequency' : Maximum temporal frequency of the smoothed sinewave , where : 1 cycle is the duration of the whole experiment . Default 10 'numIterations' : Number of re - estimation steps to perform . Default 10. 'verbose' : 0 / 1 Prints what is going on as function runs ( default 0 ) One can also retrieve additional outputs : [ RESPONSES , SIN_WEIGHT , FIT_SIN4 , MLE , RESPONSE_OBSERVED , ... STIMLIST , RESPONSES_S_I , SMOOTH_TIME , SMOOTH_SPIKERATE , SINFIT_SMOOTH_SPIKERATE ] ... = vlt . neuro . mledenoise . SlowMLEDeNoise ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); FIT_SIN4 is a set of 13 coefficients to a 4 th order sinusoidal fit ( see vlt . fit . sin4_fit ), MLE is the actual maximum likelihood value RESPONSE_OBSERVED is the actual responses that were observed . In the case of the Poisson model , this is the number of spikes per stimulus . In the case of the Gaussian model , this is the response rate . STIMLIST is the order in which the stimuli were presented ; stimuli are numbered according to the value of STIMVALUES , from least to greatest ( see help UNIQUE ) RESPONSES_S_I are the responses ( r ( t ) * g ( t )) for each stimulus in STIMLIST Examples : see vlt . neuro . mledenoise . testSlowMLE and vlt . neuro . mledenoise . testSlowMLE_modulation ( 'type vlt.neuro.mledenoise.testSlowMLE' and 'type vlt.neuro.mledenoise.testSlowMLE_modulation' ) See also : FIT_SIN4","title":"vlt.neuro.mledenoise.SlowMLEDeNoise"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/gaindriftexample.m/","text":"vlt.neuro.mledenoise.gaindriftexample \u00b6 GAINDRIFTEXAMPLE - Create an artificial stimulus response where gain varies [ SPIKETIMES , R , T , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS , G ] = ... vlt . neuro . mledenoise . gaindriftexample Creates a spike train that with the following rate : r ( t ) = g ( t ) * s_i ( t ) The ongoing gain of the system is g ( t ), and is a slow sinusoid . s_i ( t ) is the response to stimulus i . Outputs : SPIKETIMES is the time of all of the stimulated spikes . R is the rate used to generate the spikes T is an array of time value for the simulated rate values STIM_ON_TIMES is an array of times of stimulus onset STIM_OFF_TIMES is an array of time of stimulus offset STIM_NUMBERS is an array of stim ids G is the gain as a function of time . Alternatively , one may use : [ SPIKETIMES , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS ] = ... vlt . neuro . mledenoise . gaindriftexample ( 'PROPERTY1' , VALUE1 , ... ); can be used to alter the parameters used to create the model as follows : NAME : DESCRIPTION : ------------------------------------------------------------------------- 'gain_amplitude' The amplitude of the gain modulation ( default 2 ) 'gain_frequency' Frequency of gain modulation ( default 1 / 300 Hz ) 'gain_offset' Offset of gain modulation ( default 0.5 ) 'stim_response' Mean responses to each stim ( default [ 20 10 5 0 ]) 'stim_repeats' Number of times to repeat each stim ( default 50 ) 'stim_duration' Duration of each stimulus ( default 2 seconds ) 'stim_isi' Inter - stimulus - interval ( default 5 seconds ) 'response_tf' Temporal frequency of response ( default 0 Hz ) 'dt' Time step of simulation ; default 0.001 seconds Creates an artificial stimulus response where gain varies . Creates REPS numbers of repetitions of the stimuli that have mean responses STIM_RESPONSES ( i ) . The length of STIM_RESPONSES determines the number of stimuli that are produced . Each stimulus is assumed to last STIM_DURATION seconds . Example : [ spiketimes , r , t , stimon , stimoff , stimids , g ] = vlt . neuro . mledenoise . gaindriftexample ; figure ; plot ( t , r ); hold on ; plot ( spiketimes , 50 , 'kx' ); % plot an x for each simulated spike time plot ( t , g , 'g' ); % plot gain for i = 1 : length ( stimon ), text ( mean ([ stimon ( i ) stimoff ( i )]), 55 , int2str ( stimids ( i ))); end ; axis ([ t ( 1 ) t ( end ) - 60 60 ]); box off ; xlabel ( 'Time(s)' ); ylabel ( 'Firing rate' ); title ( 'x indicates spike, numbers indicate stimulus number' );","title":"vlt.neuro.mledenoise.gaindriftexample"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/gaindriftexample.m/#vltneuromledenoisegaindriftexample","text":"GAINDRIFTEXAMPLE - Create an artificial stimulus response where gain varies [ SPIKETIMES , R , T , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS , G ] = ... vlt . neuro . mledenoise . gaindriftexample Creates a spike train that with the following rate : r ( t ) = g ( t ) * s_i ( t ) The ongoing gain of the system is g ( t ), and is a slow sinusoid . s_i ( t ) is the response to stimulus i . Outputs : SPIKETIMES is the time of all of the stimulated spikes . R is the rate used to generate the spikes T is an array of time value for the simulated rate values STIM_ON_TIMES is an array of times of stimulus onset STIM_OFF_TIMES is an array of time of stimulus offset STIM_NUMBERS is an array of stim ids G is the gain as a function of time . Alternatively , one may use : [ SPIKETIMES , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS ] = ... vlt . neuro . mledenoise . gaindriftexample ( 'PROPERTY1' , VALUE1 , ... ); can be used to alter the parameters used to create the model as follows : NAME : DESCRIPTION : ------------------------------------------------------------------------- 'gain_amplitude' The amplitude of the gain modulation ( default 2 ) 'gain_frequency' Frequency of gain modulation ( default 1 / 300 Hz ) 'gain_offset' Offset of gain modulation ( default 0.5 ) 'stim_response' Mean responses to each stim ( default [ 20 10 5 0 ]) 'stim_repeats' Number of times to repeat each stim ( default 50 ) 'stim_duration' Duration of each stimulus ( default 2 seconds ) 'stim_isi' Inter - stimulus - interval ( default 5 seconds ) 'response_tf' Temporal frequency of response ( default 0 Hz ) 'dt' Time step of simulation ; default 0.001 seconds Creates an artificial stimulus response where gain varies . Creates REPS numbers of repetitions of the stimuli that have mean responses STIM_RESPONSES ( i ) . The length of STIM_RESPONSES determines the number of stimuli that are produced . Each stimulus is assumed to last STIM_DURATION seconds . Example : [ spiketimes , r , t , stimon , stimoff , stimids , g ] = vlt . neuro . mledenoise . gaindriftexample ; figure ; plot ( t , r ); hold on ; plot ( spiketimes , 50 , 'kx' ); % plot an x for each simulated spike time plot ( t , g , 'g' ); % plot gain for i = 1 : length ( stimon ), text ( mean ([ stimon ( i ) stimoff ( i )]), 55 , int2str ( stimids ( i ))); end ; axis ([ t ( 1 ) t ( end ) - 60 60 ]); box off ; xlabel ( 'Time(s)' ); ylabel ( 'Firing rate' ); title ( 'x indicates spike, numbers indicate stimulus number' );","title":"vlt.neuro.mledenoise.gaindriftexample"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/response_gaindrift_model.m/","text":"vlt.neuro.mledenoise.response_gaindrift_model \u00b6 RESPONSE_GAINDRIFT_MODEL - Computes the response of the gain drift model R = vlt . neuro . mledenoise . response_gaindrift_model ( STIM_TIMES , STIM_DURATION , STIMLIST , ... SINPARAMS , G_PARAMS , S_I_PARAMS ); This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . This function computes the response to a specific model , where the stimuli are presented in order STIMLIST at times STIM_TIMES and have stim duration STIM_DURATION . It is further assumed that SINPARAMS are parameters of a 4 sinusoidal fit to the data that describes the slow drift in gain g . S_I_PARAMS is the mean response to stimulus type i , which can occur more than once in the STIMLIST . G_PARAMS is a 4 element vector that describes the weighting of the 4 sinusoids . If G_PARAMS has a 5 th element , it is assumed to be a constant offset for g ( t ) . R is returned at the STIM_TIMES . If R is less than or equal to 0 , R is set to eps .","title":"vlt.neuro.mledenoise.response_gaindrift_model"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/response_gaindrift_model.m/#vltneuromledenoiseresponse_gaindrift_model","text":"RESPONSE_GAINDRIFT_MODEL - Computes the response of the gain drift model R = vlt . neuro . mledenoise . response_gaindrift_model ( STIM_TIMES , STIM_DURATION , STIMLIST , ... SINPARAMS , G_PARAMS , S_I_PARAMS ); This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . This function computes the response to a specific model , where the stimuli are presented in order STIMLIST at times STIM_TIMES and have stim duration STIM_DURATION . It is further assumed that SINPARAMS are parameters of a 4 sinusoidal fit to the data that describes the slow drift in gain g . S_I_PARAMS is the mean response to stimulus type i , which can occur more than once in the STIMLIST . G_PARAMS is a 4 element vector that describes the weighting of the 4 sinusoids . If G_PARAMS has a 5 th element , it is assumed to be a constant offset for g ( t ) . R is returned at the STIM_TIMES . If R is less than or equal to 0 , R is set to eps .","title":"vlt.neuro.mledenoise.response_gaindrift_model"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/testSlowMLE.m/","text":"vlt.neuro.mledenoise.testSlowMLE \u00b6 testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of vlt . neuro . mledenoise . testSlowMLE in action on simulated data . See also : vlt . neuro . mledenoise . testSlowMLE_modulation for an example where the response is a modulated sinusoid instead of a constant response .","title":"vlt.neuro.mledenoise.testSlowMLE"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/testSlowMLE.m/#vltneuromledenoisetestslowmle","text":"testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of vlt . neuro . mledenoise . testSlowMLE in action on simulated data . See also : vlt . neuro . mledenoise . testSlowMLE_modulation for an example where the response is a modulated sinusoid instead of a constant response .","title":"vlt.neuro.mledenoise.testSlowMLE"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/testSlowMLE_modulation.m/","text":"vlt.neuro.mledenoise.testSlowMLE_modulation \u00b6 testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of vlt . neuro . mledenoise . testSlowMLE in action on simulated data that exhibits modulated responses to stimulation . See also : vlt . neuro . mledenoise . testSlowMLE for an example where the response is a a constant response instead of modulated .","title":"vlt.neuro.mledenoise.testSlowMLE_modulation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/testSlowMLE_modulation.m/#vltneuromledenoisetestslowmle_modulation","text":"testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of vlt . neuro . mledenoise . testSlowMLE in action on simulated data that exhibits modulated responses to stimulation . See also : vlt . neuro . mledenoise . testSlowMLE for an example where the response is a a constant response instead of modulated .","title":"vlt.neuro.mledenoise.testSlowMLE_modulation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/archived_code/MLE_Gauss.m/","text":"vlt.neuro.mledenoise/archived_code.MLE_Gauss \u00b6 UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"vlt.neuro.mledenoise/archived_code.MLE_Gauss"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/archived_code/MLE_Gauss.m/#vltneuromledenoisearchived_codemle_gauss","text":"UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"vlt.neuro.mledenoise/archived_code.MLE_Gauss"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/archived_code/MLE_Pois.m/","text":"vlt.neuro.mledenoise/archived_code.MLE_Pois \u00b6 UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"vlt.neuro.mledenoise/archived_code.MLE_Pois"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/archived_code/MLE_Pois.m/#vltneuromledenoisearchived_codemle_pois","text":"UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"vlt.neuro.mledenoise/archived_code.MLE_Pois"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/archived_code/slowdenoise.m/","text":"vlt.neuro.mledenoise/archived_code.slowdenoise \u00b6 SLOWDENOISE - Remove slow gain changes from spike train [ RATE , GAIN , T ] = vlt . neuro . mledenoise . archived_code . slowdenoise ( SPIKETIMES , STIMTIMES , STIMIDS , T0 , T1 , DT , TFILTER , F ) STIMTIMES - An S x 2 matrix where S is the number of stims , and the first column is the onset timet for each stim , and the second column is the offset timet for each stim TFILTER - Time resolution of the filter ( e . g ., 0 . 1 seconds )","title":"vlt.neuro.mledenoise/archived_code.slowdenoise"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmledenoise/archived_code/slowdenoise.m/#vltneuromledenoisearchived_codeslowdenoise","text":"SLOWDENOISE - Remove slow gain changes from spike train [ RATE , GAIN , T ] = vlt . neuro . mledenoise . archived_code . slowdenoise ( SPIKETIMES , STIMTIMES , STIMIDS , T0 , T1 , DT , TFILTER , F ) STIMTIMES - An S x 2 matrix where S is the number of stims , and the first column is the onset timet for each stim , and the second column is the offset timet for each stim TFILTER - Time resolution of the filter ( e . g ., 0 . 1 seconds )","title":"vlt.neuro.mledenoise/archived_code.slowdenoise"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHclass.m/","text":"CLASS vlt.neuro.models.hh.HHclass \u00b6 developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Superclasses \u00b6 vlt.neuro.models.hh.neuronmodelclass Properties \u00b6 Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial Methods \u00b6 Method Description HHclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt vlt.neuro.models.hh.HHclass/dsdt is a function. hvar vlt.neuro.models.hh.HHclass/hvar is a function. mvar vlt.neuro.models.hh.HHclass/mvar is a function. nvar vlt.neuro.models.hh.HHclass/nvar is a function. setup_command vlt.neuro.models.hh.HHclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class voltage vlt.neuro.models.hh.HHclass/voltage is a function. Methods help \u00b6 HHclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for vlt . neuro . models . hh . HHclass / HHclass doc vlt . neuro . models . hh . HHclass dsdt - vlt.neuro.models.hh.HHclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - vlt.neuro.models.hh.HHclass/hvar is a function. h = hvar ( HHobj ) mvar - vlt.neuro.models.hh.HHclass/mvar is a function. m = mvar ( HHobj ) nvar - vlt.neuro.models.hh.HHclass/nvar is a function. n = nvar ( HHobj ) setup_command - vlt.neuro.models.hh.HHclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation Help for vlt . neuro . models . hh . HHclass / simulate is inherited from superclass vlt . neuro . models . hh . neuronmodelclass statemodifier - nothing to do in base class Help for vlt . neuro . models . hh . HHclass / statemodifier is inherited from superclass vlt . neuro . models . hh . neuronmodelclass voltage - vlt.neuro.models.hh.HHclass/voltage is a function. V = voltage(HHobj)","title":"vlt.neuro.models.hh.HHclass"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHclass.m/#class-vltneuromodelshhhhclass","text":"developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller","title":"CLASS vlt.neuro.models.hh.HHclass"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHclass.m/#superclasses","text":"vlt.neuro.models.hh.neuronmodelclass","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHclass.m/#properties","text":"Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial","title":"Properties"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHclass.m/#methods","text":"Method Description HHclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt vlt.neuro.models.hh.HHclass/dsdt is a function. hvar vlt.neuro.models.hh.HHclass/hvar is a function. mvar vlt.neuro.models.hh.HHclass/mvar is a function. nvar vlt.neuro.models.hh.HHclass/nvar is a function. setup_command vlt.neuro.models.hh.HHclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class voltage vlt.neuro.models.hh.HHclass/voltage is a function.","title":"Methods"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHclass.m/#methods-help","text":"HHclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for vlt . neuro . models . hh . HHclass / HHclass doc vlt . neuro . models . hh . HHclass dsdt - vlt.neuro.models.hh.HHclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - vlt.neuro.models.hh.HHclass/hvar is a function. h = hvar ( HHobj ) mvar - vlt.neuro.models.hh.HHclass/mvar is a function. m = mvar ( HHobj ) nvar - vlt.neuro.models.hh.HHclass/nvar is a function. n = nvar ( HHobj ) setup_command - vlt.neuro.models.hh.HHclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation Help for vlt . neuro . models . hh . HHclass / simulate is inherited from superclass vlt . neuro . models . hh . neuronmodelclass statemodifier - nothing to do in base class Help for vlt . neuro . models . hh . HHclass / statemodifier is inherited from superclass vlt . neuro . models . hh . neuronmodelclass voltage - vlt.neuro.models.hh.HHclass/voltage is a function. V = voltage(HHobj)","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHsynclass.m/","text":"CLASS vlt.neuro.models.hh.HHsynclass \u00b6 developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Superclasses \u00b6 vlt.neuro.models.hh.neuronmodelclass Properties \u00b6 Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA SR AMPA NMDA GABA E_ESyn E_ISyn GLUT_PNQ ESyn1_times ESyn2_times ISyn_times GABA_PNQ facilitation facilitation_tau V_recovery_time Total_AMPA_G Total_NMDA_G Total_GABA_G Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial Methods \u00b6 Method Description HHsynclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt vlt.neuro.models.hh.HHsynclass/dsdt is a function. hvar vlt.neuro.models.hh.HHsynclass/hvar is a function. mvar vlt.neuro.models.hh.HHsynclass/mvar is a function. nvar vlt.neuro.models.hh.HHsynclass/nvar is a function. setup_command vlt.neuro.models.hh.HHsynclass/setup_command is a function. setup_synapses vlt.neuro.models.hh.HHsynclass/setup_synapses is a function. simulate perform a simulation statemodifier nothing to do in base class voltage vlt.neuro.models.hh.HHsynclass/voltage is a function. Methods help \u00b6 HHsynclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for vlt . neuro . models . hh . HHsynclass / HHsynclass doc vlt . neuro . models . hh . HHsynclass dsdt - vlt.neuro.models.hh.HHsynclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - vlt.neuro.models.hh.HHsynclass/hvar is a function. h = hvar ( HHobj ) mvar - vlt.neuro.models.hh.HHsynclass/mvar is a function. m = mvar ( HHobj ) nvar - vlt.neuro.models.hh.HHsynclass/nvar is a function. n = nvar ( HHobj ) setup_command - vlt.neuro.models.hh.HHsynclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) setup_synapses - vlt.neuro.models.hh.HHsynclass/setup_synapses is a function. HHobj = setup_synapses(HHobj) simulate - perform a simulation Help for vlt . neuro . models . hh . HHsynclass / simulate is inherited from superclass vlt . neuro . models . hh . neuronmodelclass statemodifier - nothing to do in base class Help for vlt . neuro . models . hh . HHsynclass / statemodifier is inherited from superclass vlt . neuro . models . hh . neuronmodelclass voltage - vlt.neuro.models.hh.HHsynclass/voltage is a function. V = voltage(HHobj)","title":"vlt.neuro.models.hh.HHsynclass"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHsynclass.m/#class-vltneuromodelshhhhsynclass","text":"developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller","title":"CLASS vlt.neuro.models.hh.HHsynclass"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHsynclass.m/#superclasses","text":"vlt.neuro.models.hh.neuronmodelclass","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHsynclass.m/#properties","text":"Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA SR AMPA NMDA GABA E_ESyn E_ISyn GLUT_PNQ ESyn1_times ESyn2_times ISyn_times GABA_PNQ facilitation facilitation_tau V_recovery_time Total_AMPA_G Total_NMDA_G Total_GABA_G Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial","title":"Properties"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHsynclass.m/#methods","text":"Method Description HHsynclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt vlt.neuro.models.hh.HHsynclass/dsdt is a function. hvar vlt.neuro.models.hh.HHsynclass/hvar is a function. mvar vlt.neuro.models.hh.HHsynclass/mvar is a function. nvar vlt.neuro.models.hh.HHsynclass/nvar is a function. setup_command vlt.neuro.models.hh.HHsynclass/setup_command is a function. setup_synapses vlt.neuro.models.hh.HHsynclass/setup_synapses is a function. simulate perform a simulation statemodifier nothing to do in base class voltage vlt.neuro.models.hh.HHsynclass/voltage is a function.","title":"Methods"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/HHsynclass.m/#methods-help","text":"HHsynclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for vlt . neuro . models . hh . HHsynclass / HHsynclass doc vlt . neuro . models . hh . HHsynclass dsdt - vlt.neuro.models.hh.HHsynclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - vlt.neuro.models.hh.HHsynclass/hvar is a function. h = hvar ( HHobj ) mvar - vlt.neuro.models.hh.HHsynclass/mvar is a function. m = mvar ( HHobj ) nvar - vlt.neuro.models.hh.HHsynclass/nvar is a function. n = nvar ( HHobj ) setup_command - vlt.neuro.models.hh.HHsynclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) setup_synapses - vlt.neuro.models.hh.HHsynclass/setup_synapses is a function. HHobj = setup_synapses(HHobj) simulate - perform a simulation Help for vlt . neuro . models . hh . HHsynclass / simulate is inherited from superclass vlt . neuro . models . hh . neuronmodelclass statemodifier - nothing to do in base class Help for vlt . neuro . models . hh . HHsynclass / statemodifier is inherited from superclass vlt . neuro . models . hh . neuronmodelclass voltage - vlt.neuro.models.hh.HHsynclass/voltage is a function. V = voltage(HHobj)","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/neuronmodelclass.m/","text":"CLASS vlt.neuro.models.hh.neuronmodelclass \u00b6 developed by Steve Van Hooser and Ishaan Khurana Superclasses \u00b6 none Properties \u00b6 Property Description Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial Methods \u00b6 Method Description dsdt vlt.neuro.models.hh.neuronmodelclass/dsdt is a function. neuronmodelclass developed by Steve Van Hooser and Ishaan Khurana setup_command vlt.neuro.models.hh.neuronmodelclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class Methods help \u00b6 dsdt - vlt.neuro.models.hh.neuronmodelclass/dsdt is a function. dsdt = dsdt(neuronmodel_obj, S_value) neuronmodelclass - developed by Steve Van Hooser and Ishaan Khurana Documentation for vlt . neuro . models . hh . neuronmodelclass / neuronmodelclass doc vlt . neuro . models . hh . neuronmodelclass setup_command - vlt.neuro.models.hh.neuronmodelclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation statemodifier - nothing to do in base class","title":"vlt.neuro.models.hh.neuronmodelclass"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/neuronmodelclass.m/#class-vltneuromodelshhneuronmodelclass","text":"developed by Steve Van Hooser and Ishaan Khurana","title":"CLASS vlt.neuro.models.hh.neuronmodelclass"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/neuronmodelclass.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/neuronmodelclass.m/#properties","text":"Property Description Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial","title":"Properties"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/neuronmodelclass.m/#methods","text":"Method Description dsdt vlt.neuro.models.hh.neuronmodelclass/dsdt is a function. neuronmodelclass developed by Steve Van Hooser and Ishaan Khurana setup_command vlt.neuro.models.hh.neuronmodelclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class","title":"Methods"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bhh/neuronmodelclass.m/#methods-help","text":"dsdt - vlt.neuro.models.hh.neuronmodelclass/dsdt is a function. dsdt = dsdt(neuronmodel_obj, S_value) neuronmodelclass - developed by Steve Van Hooser and Ishaan Khurana Documentation for vlt . neuro . models . hh . neuronmodelclass / neuronmodelclass doc vlt . neuro . models . hh . neuronmodelclass setup_command - vlt.neuro.models.hh.neuronmodelclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation statemodifier - nothing to do in base class","title":"Methods help"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bode/simpleodedemo.m/","text":"vlt.neuro.models.ode.simpleodedemo \u00b6 SIMPLEODEDEMO - A simple demonstration of a first order, ordinary differential equation vlt.neuro.models.ode.simpleodedemo - Popups up a window that allows the user to watch the operation of a simple ode. The equation simulated is the following: tau * d r(t)/dt = -(r(t)-C)+I The window has graphical user elements that allow the user to specify all of the parameters and to watch the simulation run.","title":"vlt.neuro.models.ode.simpleodedemo"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bode/simpleodedemo.m/#vltneuromodelsodesimpleodedemo","text":"SIMPLEODEDEMO - A simple demonstration of a first order, ordinary differential equation vlt.neuro.models.ode.simpleodedemo - Popups up a window that allows the user to watch the operation of a simple ode. The equation simulated is the following: tau * d r(t)/dt = -(r(t)-C)+I The window has graphical user elements that allow the user to specify all of the parameters and to watch the simulation run.","title":"vlt.neuro.models.ode.simpleodedemo"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/depression_model_comp.m/","text":"vlt.neuro.models.synapses.depression_model_comp \u00b6 vlt . neuro . models . synapses . depression_model_comp - Computes synaptic currents for Varela depression model SYNCURRS = vlt . neuro . models . synapses . depression_model_comp ( SPIKETIMES , A0 , F , FTAU , D , DTAU ) Computes synaptic currents for a facilitating and / or depressing synapse . Presynaptic spike times are given in SPIKETIMES , and the unfacilitated , undepressed amplitude of the synapse is A0 . Synaptic currents are modeled as A = A0 * F1 *...* FN * D1 *...* DN , where F1 ... FN are facilitating factors and D1 ... DN are depressing factors . After each presynaptic spike , Fi -> Fi + fi , where fi is a positive number , and Fi decays back to 1 with time constant fitau . Input argument F is an array containing fi , and the length of F determines the number of facilitating factors ( use empty for none ) . FTAU is an array of the same length of F and contains the time constants fitau . After each presynaptic spike , Di -> Di * di , where 0 < di <= 1 , and Di decays back to 1 with time constant ditau . Input argument D is an array containing di , and the length of D determines the number of facilitating factors ( use empty for none ) . DTAU is an array of the same length of D and contains the time constants ditau . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neurosci . 17 : 7926 - 40 , 1997.","title":"vlt.neuro.models.synapses.depression_model_comp"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/depression_model_comp.m/#vltneuromodelssynapsesdepression_model_comp","text":"vlt . neuro . models . synapses . depression_model_comp - Computes synaptic currents for Varela depression model SYNCURRS = vlt . neuro . models . synapses . depression_model_comp ( SPIKETIMES , A0 , F , FTAU , D , DTAU ) Computes synaptic currents for a facilitating and / or depressing synapse . Presynaptic spike times are given in SPIKETIMES , and the unfacilitated , undepressed amplitude of the synapse is A0 . Synaptic currents are modeled as A = A0 * F1 *...* FN * D1 *...* DN , where F1 ... FN are facilitating factors and D1 ... DN are depressing factors . After each presynaptic spike , Fi -> Fi + fi , where fi is a positive number , and Fi decays back to 1 with time constant fitau . Input argument F is an array containing fi , and the length of F determines the number of facilitating factors ( use empty for none ) . FTAU is an array of the same length of F and contains the time constants fitau . After each presynaptic spike , Di -> Di * di , where 0 < di <= 1 , and Di decays back to 1 with time constant ditau . Input argument D is an array containing di , and the length of D determines the number of facilitating factors ( use empty for none ) . DTAU is an array of the same length of D and contains the time constants ditau . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neurosci . 17 : 7926 - 40 , 1997.","title":"vlt.neuro.models.synapses.depression_model_comp"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/depression_model_err.m/","text":"vlt.neuro.models.synapses.depression_model_err \u00b6 vlt.neuro.models.synapses.depression_model_err - Depression model error function","title":"vlt.neuro.models.synapses.depression_model_err"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/depression_model_err.m/#vltneuromodelssynapsesdepression_model_err","text":"vlt.neuro.models.synapses.depression_model_err - Depression model error function","title":"vlt.neuro.models.synapses.depression_model_err"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/depression_model_fit.m/","text":"vlt.neuro.models.synapses.depression_model_fit \u00b6 DEPRESSION_MODEL - Compute parameters of model for synaptic depression [ A0,F,FTAU,D,TAU,ERR ]= DEPRESSION_MODEL ( SPIKETIMES , SYNAPTIC_CURRENT ,... FORDER , DORDER , [ NUMATTEMPTS ] ) Finds the best fit depression model with FORDER facilitating factors and DORDER depressing factors for the synaptic currents measured in the array SYNAPTIC_CURRENT at presynaptic spike times SPIKETIMES . This program tries NUMATTEMPTS different random starting positions ( default 10 ) and picks the best solution . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neuroscience 17 : 7926 - 40 ( 1997 ) and 'help vlt.neuro.models.synapses.depression_model_comp' for details of the model and parameters . ERR is the squared error over the whole data .","title":"vlt.neuro.models.synapses.depression_model_fit"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/depression_model_fit.m/#vltneuromodelssynapsesdepression_model_fit","text":"DEPRESSION_MODEL - Compute parameters of model for synaptic depression [ A0,F,FTAU,D,TAU,ERR ]= DEPRESSION_MODEL ( SPIKETIMES , SYNAPTIC_CURRENT ,... FORDER , DORDER , [ NUMATTEMPTS ] ) Finds the best fit depression model with FORDER facilitating factors and DORDER depressing factors for the synaptic currents measured in the array SYNAPTIC_CURRENT at presynaptic spike times SPIKETIMES . This program tries NUMATTEMPTS different random starting positions ( default 10 ) and picks the best solution . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neuroscience 17 : 7926 - 40 ( 1997 ) and 'help vlt.neuro.models.synapses.depression_model_comp' for details of the model and parameters . ERR is the squared error over the whole data .","title":"vlt.neuro.models.synapses.depression_model_fit"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/nmda_voltage_gate.m/","text":"vlt.neuro.models.synapses.nmda_voltage_gate \u00b6 NMDA_VOLTAGE_GATE - voltage gate for NMDA channels , dependent on Mg block G = vlt . neuro . models . synapses . nmda_voltage_gate ( V ) Returns a simulated gating variable based on the NMDA voltage dependence as measured from Mayar , Westbrook , and Guthrie 1984. At V = 0 volts , the gating variable is 1. It goes up and down according to Figure 3 C of the paper . For example , at V = - 0.080 volts , g is 0.0564 . At V = 0.020 V , g is 1.2359 .","title":"vlt.neuro.models.synapses.nmda_voltage_gate"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/nmda_voltage_gate.m/#vltneuromodelssynapsesnmda_voltage_gate","text":"NMDA_VOLTAGE_GATE - voltage gate for NMDA channels , dependent on Mg block G = vlt . neuro . models . synapses . nmda_voltage_gate ( V ) Returns a simulated gating variable based on the NMDA voltage dependence as measured from Mayar , Westbrook , and Guthrie 1984. At V = 0 volts , the gating variable is 1. It goes up and down according to Figure 3 C of the paper . For example , at V = - 0.080 volts , g is 0.0564 . At V = 0.020 V , g is 1.2359 .","title":"vlt.neuro.models.synapses.nmda_voltage_gate"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/probabilistic_release.m/","text":"vlt.neuro.models.synapses.probabilistic_release \u00b6 vlt . neuro . models . synapses . probabilistic_release is a function . [ g , g_ ] = vlt . neuro . models . synapses . probabilistic_release ( varargin )","title":"vlt.neuro.models.synapses.probabilistic_release"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bmodels/%2Bsynapses/probabilistic_release.m/#vltneuromodelssynapsesprobabilistic_release","text":"vlt . neuro . models . synapses . probabilistic_release is a function . [ g , g_ ] = vlt . neuro . models . synapses . probabilistic_release ( varargin )","title":"vlt.neuro.models.synapses.probabilistic_release"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/createdirkernel.m/","text":"vlt.neuro.reverse_correlation.createdirkernel \u00b6 vlt . neuro . reverse_correlation . createdirkernel - Create a model direction - selective kernel D = vlt . neuro . reverse_correlation . createdirkernel ( X , T , SPFREQ , SPHASE , TF , DIR , SPACE_GAUSS , TIME_DE , ABSNORM ) Creates a model direction - selective kernel X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values of the kernel to create ( kernel is assumed to be constant in each bin ) ( example : 0 : 0.001 : 0.5 is 0.5 seconds in 0.001 s steps ) SPFREQ is the spatial frequency preference of the kernel ( say 0.1 cycles per degree ) SPPHASE is the spatial phase pref of the grating ( between 0 and 2 * pi ) TF is the temporal frequency of drifting ( in Hz ) DIR is the slant direction ( 1 is left , - 1 is right , 0 for no slant ) SPACE_GAUSS is a 2 element vector for gaussian envelope [ mean and variance ] TIME_DE is a 3 element vector describing a double exponential function TIME_DE = [ onset tau1 tau2 ], where G > 0 only for T > offset , and then G = (( tau1 * tau2 ) / ( tau1 - tau2 )) * ( exp ( - t / tau1 ) - exp ( - t / tau2 )) ( rougly speaking , tau1 is the onset time constant , tau2 is offset ) ABSNORM -- if this parameter is not empty ([]) then the kernel will be normalized so the optimal stimulus will produce a response of ABSNORM .","title":"vlt.neuro.reverse_correlation.createdirkernel"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/createdirkernel.m/#vltneuroreverse_correlationcreatedirkernel","text":"vlt . neuro . reverse_correlation . createdirkernel - Create a model direction - selective kernel D = vlt . neuro . reverse_correlation . createdirkernel ( X , T , SPFREQ , SPHASE , TF , DIR , SPACE_GAUSS , TIME_DE , ABSNORM ) Creates a model direction - selective kernel X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values of the kernel to create ( kernel is assumed to be constant in each bin ) ( example : 0 : 0.001 : 0.5 is 0.5 seconds in 0.001 s steps ) SPFREQ is the spatial frequency preference of the kernel ( say 0.1 cycles per degree ) SPPHASE is the spatial phase pref of the grating ( between 0 and 2 * pi ) TF is the temporal frequency of drifting ( in Hz ) DIR is the slant direction ( 1 is left , - 1 is right , 0 for no slant ) SPACE_GAUSS is a 2 element vector for gaussian envelope [ mean and variance ] TIME_DE is a 3 element vector describing a double exponential function TIME_DE = [ onset tau1 tau2 ], where G > 0 only for T > offset , and then G = (( tau1 * tau2 ) / ( tau1 - tau2 )) * ( exp ( - t / tau1 ) - exp ( - t / tau2 )) ( rougly speaking , tau1 is the onset time constant , tau2 is offset ) ABSNORM -- if this parameter is not empty ([]) then the kernel will be normalized so the optimal stimulus will produce a response of ABSNORM .","title":"vlt.neuro.reverse_correlation.createdirkernel"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/reverse_correlation_mv_stepfunc.m/","text":"vlt.neuro.reverse_correlation.reverse_correlation_mv_stepfunc \u00b6 REVERSE_CORRELATION_MV_STEPFUNC - Performs RC between a continuously valued signal and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... vlt . neuro . reverse_correlation . reverse_correlation_mv_stepfunc ( SIGNAL , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a signal SIGNAL and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct SIGNAL from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SIGNAL is the signal to be related to the stimulus SIGNAL_T is the time of each sample in SIGNAL STIM_OFFSETS is a list of times of SIGNAL relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to vlt . neuro . reverse_correlation . reverse_correlation_mv_stepfunc as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt normalize_xc_stimsignal ( 0 ) | Perform normalization of xc_stimsignal by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example2 , FIRWIENER","title":"vlt.neuro.reverse_correlation.reverse_correlation_mv_stepfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/reverse_correlation_mv_stepfunc.m/#vltneuroreverse_correlationreverse_correlation_mv_stepfunc","text":"REVERSE_CORRELATION_MV_STEPFUNC - Performs RC between a continuously valued signal and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... vlt . neuro . reverse_correlation . reverse_correlation_mv_stepfunc ( SIGNAL , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a signal SIGNAL and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct SIGNAL from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SIGNAL is the signal to be related to the stimulus SIGNAL_T is the time of each sample in SIGNAL STIM_OFFSETS is a list of times of SIGNAL relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to vlt . neuro . reverse_correlation . reverse_correlation_mv_stepfunc as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt normalize_xc_stimsignal ( 0 ) | Perform normalization of xc_stimsignal by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example2 , FIRWIENER","title":"vlt.neuro.reverse_correlation.reverse_correlation_mv_stepfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/reverse_correlation_stepfunc.m/","text":"vlt.neuro.reverse_correlation.reverse_correlation_stepfunc \u00b6 REVERSE_CORRELATION_STEPFUNC - Performs RC between a spike train and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... vlt . neuro . reverse_correlation . reverse_correlation_stepfunc ( SPIKETIMES , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a spike train with spikes at SPIKETIMES and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct the underlying response kernel from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SPIKETIMES is an array of spike times SIGNAL_T is the time of each sample in the stimulus record ( used to calculate the autocorrelation of the stimulus ) STIM_OFFSETS is a list of times of SPIKETIMES relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to vlt . neuro . reverse_correlation . reverse_correlation_mv_stepfunc as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example2 , FIRWIENER","title":"vlt.neuro.reverse_correlation.reverse_correlation_stepfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/reverse_correlation_stepfunc.m/#vltneuroreverse_correlationreverse_correlation_stepfunc","text":"REVERSE_CORRELATION_STEPFUNC - Performs RC between a spike train and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... vlt . neuro . reverse_correlation . reverse_correlation_stepfunc ( SPIKETIMES , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a spike train with spikes at SPIKETIMES and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct the underlying response kernel from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SPIKETIMES is an array of spike times SIGNAL_T is the time of each sample in the stimulus record ( used to calculate the autocorrelation of the stimulus ) STIM_OFFSETS is a list of times of SPIKETIMES relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to vlt . neuro . reverse_correlation . reverse_correlation_mv_stepfunc as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example2 , FIRWIENER","title":"vlt.neuro.reverse_correlation.reverse_correlation_stepfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/reverse_correlation_stepfunc_old.m/","text":"vlt.neuro.reverse_correlation.reverse_correlation_stepfunc_old \u00b6 vlt . neuro . reverse_correlation . reverse_correlation_stepfunc - Performs RC between spike times and step function stimulus AVG_STIM = vlt . neuro . reverse_correlation . reverse_correlation_stepfunc ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation ( AKA the spike triggered average , STA , AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example3","title":"vlt.neuro.reverse_correlation.reverse_correlation_stepfunc_old"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/reverse_correlation_stepfunc_old.m/#vltneuroreverse_correlationreverse_correlation_stepfunc_old","text":"vlt . neuro . reverse_correlation . reverse_correlation_stepfunc - Performs RC between spike times and step function stimulus AVG_STIM = vlt . neuro . reverse_correlation . reverse_correlation_stepfunc ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation ( AKA the spike triggered average , STA , AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example3","title":"vlt.neuro.reverse_correlation.reverse_correlation_stepfunc_old"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/simulate_1dkernel_response.m/","text":"vlt.neuro.reverse_correlation.simulate_1dkernel_response \u00b6 vlt.neuro.reverse_correlation.simulate_1dkernel_response -- Simulate response of a linear kernel R = vlt.neuro.reverse_correlation.simulate_1dkernel_response(D,DX,DT,STIM,STIMX,STIMT) Simulates the responses of a 1D (in space) kernel D to a stimulus STIM. DX is the spatial positions of the kernel, DT is the temporal positions of the kernel, STIMX is the spatial positions of the stimulus and STIMT is the temporal positions of the stimulus.","title":"vlt.neuro.reverse_correlation.simulate_1dkernel_response"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/simulate_1dkernel_response.m/#vltneuroreverse_correlationsimulate_1dkernel_response","text":"vlt.neuro.reverse_correlation.simulate_1dkernel_response -- Simulate response of a linear kernel R = vlt.neuro.reverse_correlation.simulate_1dkernel_response(D,DX,DT,STIM,STIMX,STIMT) Simulates the responses of a 1D (in space) kernel D to a stimulus STIM. DX is the spatial positions of the kernel, DT is the temporal positions of the kernel, STIMX is the spatial positions of the stimulus and STIMT is the temporal positions of the stimulus.","title":"vlt.neuro.reverse_correlation.simulate_1dkernel_response"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/sparse_noise_responses.m/","text":"vlt.neuro.reverse_correlation.sparse_noise_responses \u00b6 vlt . neuro . reverse_correlation . sparse_noise_responses - calculate responses to sparse noise stimulation [ R , C , Rmean , Cmean ] = vlt . neuro . reverse_correlation . sparse_noise_responses ( spike_times , stim_times , ... stim_position_index , t0 , t1 ) Calculates the response rate R and spike count C at each position . Inputs : spike_times - the time of each spike ( unit : seconds ) stim_times - the time of each stimulus frame ( vector : 1 entry per frame ; unit : seconds ) stim_position_index - The stimulus position index that was stimulated for each frame ( vector : 1 entry per frame ) t0 - the time relative to each frame to start counting spikes ( scalar , unit : seconds ) t1 - the time relative to each from to stop counting spikes ( scalar , unit : seconds ) Outputs : R - spike rates ( spike count divided by ( t1-t0 )) for each position ( cell : 1 vector per stim_position_index value ; each vector holds the observation for each stimulus presentation ) C - spike counts in the interval [ t0 , t1 ] relative to each frame for each position ( cell : 1 vector per stim_position_index value ; each vector holds the observation for each stimulus presentation ) Rmean - A vector of the mean response across trials ( vector : 1 entry per unique stim_position_index value ) Cmean - A vector of the mean response across trials ( vector : 1 entry per unique stim_position_index )","title":"vlt.neuro.reverse_correlation.sparse_noise_responses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/sparse_noise_responses.m/#vltneuroreverse_correlationsparse_noise_responses","text":"vlt . neuro . reverse_correlation . sparse_noise_responses - calculate responses to sparse noise stimulation [ R , C , Rmean , Cmean ] = vlt . neuro . reverse_correlation . sparse_noise_responses ( spike_times , stim_times , ... stim_position_index , t0 , t1 ) Calculates the response rate R and spike count C at each position . Inputs : spike_times - the time of each spike ( unit : seconds ) stim_times - the time of each stimulus frame ( vector : 1 entry per frame ; unit : seconds ) stim_position_index - The stimulus position index that was stimulated for each frame ( vector : 1 entry per frame ) t0 - the time relative to each frame to start counting spikes ( scalar , unit : seconds ) t1 - the time relative to each from to stop counting spikes ( scalar , unit : seconds ) Outputs : R - spike rates ( spike count divided by ( t1-t0 )) for each position ( cell : 1 vector per stim_position_index value ; each vector holds the observation for each stimulus presentation ) C - spike counts in the interval [ t0 , t1 ] relative to each frame for each position ( cell : 1 vector per stim_position_index value ; each vector holds the observation for each stimulus presentation ) Rmean - A vector of the mean response across trials ( vector : 1 entry per unique stim_position_index value ) Cmean - A vector of the mean response across trials ( vector : 1 entry per unique stim_position_index )","title":"vlt.neuro.reverse_correlation.sparse_noise_responses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/spike_triggered_average_stepfunc.m/","text":"vlt.neuro.reverse_correlation.spike_triggered_average_stepfunc \u00b6 vlt . neuro . reverse_correlation . spike_triggered_average_stepfunc - Performs STA between spike times and step function stimulus AVG_STIM = vlt . neuro . reverse_correlation . spike_triggered_average_stepfunc ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function calculates the spike triggered average ( STA ), AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example3","title":"vlt.neuro.reverse_correlation.spike_triggered_average_stepfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/spike_triggered_average_stepfunc.m/#vltneuroreverse_correlationspike_triggered_average_stepfunc","text":"vlt . neuro . reverse_correlation . spike_triggered_average_stepfunc - Performs STA between spike times and step function stimulus AVG_STIM = vlt . neuro . reverse_correlation . spike_triggered_average_stepfunc ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function calculates the spike triggered average ( STA ), AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : vlt . math . stepfunc , vlt . neuro . reverse_correlation . demos . DirRFModel_example3","title":"vlt.neuro.reverse_correlation.spike_triggered_average_stepfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/stim1d_motion.m/","text":"vlt.neuro.reverse_correlation.stim1d_motion \u00b6 vlt . neuro . reverse_correlation . stim1d_motion -- Creates a 1 - D ( space ) motion stimulus for model computation STIM = vlt . neuro . reverse_correlation . stim1d_motion ( X , T , SPFREQ , SPPHASE , TF , DIR ) Creates a discrete 1 - D ( in space ) motion stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) SPFREQ is the spatial frequency of the grating ( say 0.1 cycles per degree ) SPPHASE is the spatial phase of the grating ( between 0 and 2 * pi ) TF is the temporal frequency ( in Hz ) DIR is the direction ( 1 is left , - 1 is right , 0 for no motion ) One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = vlt . neuro . reverse_correlation . stim1d_motion ([ 0 : 0.1 : 10 ],[ 0 : 0.01 : 2 ], 0.1 , 0 , 4 , 1 );","title":"vlt.neuro.reverse_correlation.stim1d_motion"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/stim1d_motion.m/#vltneuroreverse_correlationstim1d_motion","text":"vlt . neuro . reverse_correlation . stim1d_motion -- Creates a 1 - D ( space ) motion stimulus for model computation STIM = vlt . neuro . reverse_correlation . stim1d_motion ( X , T , SPFREQ , SPPHASE , TF , DIR ) Creates a discrete 1 - D ( in space ) motion stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) SPFREQ is the spatial frequency of the grating ( say 0.1 cycles per degree ) SPPHASE is the spatial phase of the grating ( between 0 and 2 * pi ) TF is the temporal frequency ( in Hz ) DIR is the direction ( 1 is left , - 1 is right , 0 for no motion ) One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = vlt . neuro . reverse_correlation . stim1d_motion ([ 0 : 0.1 : 10 ],[ 0 : 0.01 : 2 ], 0.1 , 0 , 4 , 1 );","title":"vlt.neuro.reverse_correlation.stim1d_motion"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/stim1d_random.m/","text":"vlt.neuro.reverse_correlation.stim1d_random \u00b6 vlt . neuro . reverse_correlation . stim1d_random -- Creates a 1 - D ( space ) random stimulus for model computation STIM = vlt . neuro . reverse_correlation . stim1d_motion ( X , T , VALUES , DISTRIBUTION ) Creates a discrete 1 - D ( in space ) random stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) VALUES should be an array list of brightness values that the stimulus can take DISTRIBUTION should be an array list of probabilities that the brightness will assume each value in VALUE . One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = vlt . neuro . reverse_correlation . stim1d_random ([ 0 : 0.1 : 10 ],[ 0 : 0.1 : 300 ],[ 1 0 - 1 ],[ 0.1 0.8 0.1 ]);","title":"vlt.neuro.reverse_correlation.stim1d_random"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/stim1d_random.m/#vltneuroreverse_correlationstim1d_random","text":"vlt . neuro . reverse_correlation . stim1d_random -- Creates a 1 - D ( space ) random stimulus for model computation STIM = vlt . neuro . reverse_correlation . stim1d_motion ( X , T , VALUES , DISTRIBUTION ) Creates a discrete 1 - D ( in space ) random stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) VALUES should be an array list of brightness values that the stimulus can take DISTRIBUTION should be an array list of probabilities that the brightness will assume each value in VALUE . One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = vlt . neuro . reverse_correlation . stim1d_random ([ 0 : 0.1 : 10 ],[ 0 : 0.1 : 300 ],[ 1 0 - 1 ],[ 0.1 0.8 0.1 ]);","title":"vlt.neuro.reverse_correlation.stim1d_random"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModelTestCode.m/","text":"vlt.neuro.reverse_correlation.demos.DirRFModelTestCode \u00b6 vlt.neuro.reverse_correlation.demos.DirRFModelTestCode is a script.","title":"vlt.neuro.reverse_correlation.demos.DirRFModelTestCode"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModelTestCode.m/#vltneuroreverse_correlationdemosdirrfmodeltestcode","text":"vlt.neuro.reverse_correlation.demos.DirRFModelTestCode is a script.","title":"vlt.neuro.reverse_correlation.demos.DirRFModelTestCode"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example0.m/","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example0 \u00b6 vlt.neuro.reverse_correlation.demos.DirRFModel_example0 - Tests 1d kernel with a \"trivial\" kernel This simulates the response of a \"trivial\" kernel with only 1 non-zero value. The output should equal the input.","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example0"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example0.m/#vltneuroreverse_correlationdemosdirrfmodel_example0","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example0 - Tests 1d kernel with a \"trivial\" kernel This simulates the response of a \"trivial\" kernel with only 1 non-zero value. The output should equal the input.","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example0"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example1.m/","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example1 \u00b6 vlt.neuro.reverse_correlation.demos.DirRFModel_example1 - Direction selective responses from a hand-picked kernel","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example1"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example1.m/#vltneuroreverse_correlationdemosdirrfmodel_example1","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example1 - Direction selective responses from a hand-picked kernel","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example1"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example2.m/","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example2 \u00b6 vlt . neuro . reverse_correlation . demos . DirRFModel_example2 - Generating a firing rate with hand - picked kernel , then Reconstructing the linear kernel from that firing rate . ( Note that there are no spikes generated here , that is vlt . neuro . reverse_correlation . demos . DirRFModel_example3 )","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example2"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example2.m/#vltneuroreverse_correlationdemosdirrfmodel_example2","text":"vlt . neuro . reverse_correlation . demos . DirRFModel_example2 - Generating a firing rate with hand - picked kernel , then Reconstructing the linear kernel from that firing rate . ( Note that there are no spikes generated here , that is vlt . neuro . reverse_correlation . demos . DirRFModel_example3 )","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example2"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example3.m/","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example3 \u00b6 vlt . neuro . reverse_correlation . demos . DirRFModel_example3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example3"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example3.m/#vltneuroreverse_correlationdemosdirrfmodel_example3","text":"vlt . neuro . reverse_correlation . demos . DirRFModel_example3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example3"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example3_old.m/","text":"vlt.neuro.reverse_correlation.demos.DirRFModel_example3_old \u00b6 vlt . neuro . reverse_correlation . demos . DirRFModel_example3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example3_old"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/DirRFModel_example3_old.m/#vltneuroreverse_correlationdemosdirrfmodel_example3_old","text":"vlt . neuro . reverse_correlation . demos . DirRFModel_example3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"vlt.neuro.reverse_correlation.demos.DirRFModel_example3_old"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/RandomRDTestCode.m/","text":"vlt.neuro.reverse_correlation.demos.RandomRDTestCode \u00b6 vlt.neuro.reverse_correlation.demos.RandomRDTestCode is a script.","title":"vlt.neuro.reverse_correlation.demos.RandomRDTestCode"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bdemos/RandomRDTestCode.m/#vltneuroreverse_correlationdemosrandomrdtestcode","text":"vlt.neuro.reverse_correlation.demos.RandomRDTestCode is a script.","title":"vlt.neuro.reverse_correlation.demos.RandomRDTestCode"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/build.m/","text":"vlt.neuro.reverse_correlation.hartley.build \u00b6 BUILD - build a Hartley structure to rapidly draw Hartley stimuli HSTRUCT = vlt . neuro . reverse_correlation . hartley . build ( M , KMAX , LMAX , NORM_MAX ) Computes a structure that allows easy drawing ( with rotation and repetition ) of a Hartley stimulus from Ringach et al . 1997. It is compact in memory and can be used to give input to Psychtoolbox or other GPU renderers for fast drawing with minimal memory . The image rotation used here works best for M > 50 and for K , L < M / 2. This will not faithfully reproduce the basis functions for M < 50 or K , L near M , due to aliasing . Inputs : M is the number of pixels per edge of the image ( the image is square ) . KMAX is the number of Hartley components to use in X . Components from - KMAX ... KMAX will be used . LMAX is the number of Hartley components to use in Y . Components from - LMAX ... LMAX will be used . NORMMAX - components will only be included if they also are less than NORMMAX , where sqrt ( K ^ 2 + L ^ 2 ) <= NORMMAX See also : vlt . neuro . reverse_correlation . hartley . draw , vlt . neuro . reverse_correlation . hartley . hartley_image","title":"vlt.neuro.reverse_correlation.hartley.build"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/build.m/#vltneuroreverse_correlationhartleybuild","text":"BUILD - build a Hartley structure to rapidly draw Hartley stimuli HSTRUCT = vlt . neuro . reverse_correlation . hartley . build ( M , KMAX , LMAX , NORM_MAX ) Computes a structure that allows easy drawing ( with rotation and repetition ) of a Hartley stimulus from Ringach et al . 1997. It is compact in memory and can be used to give input to Psychtoolbox or other GPU renderers for fast drawing with minimal memory . The image rotation used here works best for M > 50 and for K , L < M / 2. This will not faithfully reproduce the basis functions for M < 50 or K , L near M , due to aliasing . Inputs : M is the number of pixels per edge of the image ( the image is square ) . KMAX is the number of Hartley components to use in X . Components from - KMAX ... KMAX will be used . LMAX is the number of Hartley components to use in Y . Components from - LMAX ... LMAX will be used . NORMMAX - components will only be included if they also are less than NORMMAX , where sqrt ( K ^ 2 + L ^ 2 ) <= NORMMAX See also : vlt . neuro . reverse_correlation . hartley . draw , vlt . neuro . reverse_correlation . hartley . hartley_image","title":"vlt.neuro.reverse_correlation.hartley.build"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/check.m/","text":"vlt.neuro.reverse_correlation.hartley.check \u00b6 CHECK - check a rapid procedure for drawing Hartley stimli OUT = vlt . neuro . reverse_correlation . hartley . check ( S , KX , KY , M ) Draws a Hartley stimulus where the stimulus has MxM pixels , for Hartley numbers KX and KY . Also shows accuracy of the rapid procedure reconstruction and the full Hartley calculation . S should be - 1 or 1 and indicates the sign ( phase ) of the stimulus . The complete workspace variables used to build the stimulus and draw the stimulus are returned in OUT , for diagnostic purposes . See also : vlt . neuro . reverse_correlation . hartley . build , vlt . neuro . reverse_correlation . hartley . draw Example : out = vlt . neuro . reverse_correlation . hartley . check ( 1 , 5 , 15 , 500 );","title":"vlt.neuro.reverse_correlation.hartley.check"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/check.m/#vltneuroreverse_correlationhartleycheck","text":"CHECK - check a rapid procedure for drawing Hartley stimli OUT = vlt . neuro . reverse_correlation . hartley . check ( S , KX , KY , M ) Draws a Hartley stimulus where the stimulus has MxM pixels , for Hartley numbers KX and KY . Also shows accuracy of the rapid procedure reconstruction and the full Hartley calculation . S should be - 1 or 1 and indicates the sign ( phase ) of the stimulus . The complete workspace variables used to build the stimulus and draw the stimulus are returned in OUT , for diagnostic purposes . See also : vlt . neuro . reverse_correlation . hartley . build , vlt . neuro . reverse_correlation . hartley . draw Example : out = vlt . neuro . reverse_correlation . hartley . check ( 1 , 5 , 15 , 500 );","title":"vlt.neuro.reverse_correlation.hartley.check"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/draw.m/","text":"vlt.neuro.reverse_correlation.hartley.draw \u00b6 DRAW - draw a Hartley stimulus [ IM , OUT ] = vlt . neuro . reverse_correlation . hartley . draw ( HSTRUCT , K , L ) Draw a Hartley stimulus from a structure returned from vlt . neuro . reverse_correlation . hartley . build ( HSTRUCT ) for Hartley numbers K and L . All variables created in the construction are returned in a structure called OUT . See also : vlt . neuro . reverse_correlation . hartley . build , vlt . neuro . reverse_correlation . hartley . check","title":"vlt.neuro.reverse_correlation.hartley.draw"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/draw.m/#vltneuroreverse_correlationhartleydraw","text":"DRAW - draw a Hartley stimulus [ IM , OUT ] = vlt . neuro . reverse_correlation . hartley . draw ( HSTRUCT , K , L ) Draw a Hartley stimulus from a structure returned from vlt . neuro . reverse_correlation . hartley . build ( HSTRUCT ) for Hartley numbers K and L . All variables created in the construction are returned in a structure called OUT . See also : vlt . neuro . reverse_correlation . hartley . build , vlt . neuro . reverse_correlation . hartley . check","title":"vlt.neuro.reverse_correlation.hartley.draw"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/hartley_image.m/","text":"vlt.neuro.reverse_correlation.hartley.hartley_image \u00b6 HARTLEY_IMAGE - A Hartley image function IM = vlt.neuro.reverse_correlation.hartley.hartley_image(S, KX, KY, M) Returns the Hartley image defined by the equation H(kx,ky) = s * vlt.math.cas(2*pi*(kx*l+ky*m)/M) where l and m run from 0 to M-1. S can be -1 or 1. From Ringach et al., 1997","title":"vlt.neuro.reverse_correlation.hartley.hartley_image"},{"location":"reference/%2Bvlt/%2Bneuro/%2Breverse_correlation/%2Bhartley/hartley_image.m/#vltneuroreverse_correlationhartleyhartley_image","text":"HARTLEY_IMAGE - A Hartley image function IM = vlt.neuro.reverse_correlation.hartley.hartley_image(S, KX, KY, M) Returns the Hartley image defined by the equation H(kx,ky) = s * vlt.math.cas(2*pi*(kx*l+ky*m)/M) where l and m run from 0 to M-1. S can be -1 or 1. From Ringach et al., 1997","title":"vlt.neuro.reverse_correlation.hartley.hartley_image"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/centerspikes_neg.m/","text":"vlt.neuro.spikesorting.centerspikes_neg \u00b6 CENTERSPIKES_NEG Center negative-going spike waveforms based on minimum [ CENTEREDSPIKES , SHIFTS ] = vlt . neuro . spikesorting . centerspikes_neg ( SPIKESHAPES , CENTER_RANGE ) Inputs : SPIKESHAPES : an NxMxD vector where N is the number of spikes , M is the number of samples that comprise each spike waveform , and D is dimensions ( i . e ., number of channels ). CENTER_RANGE : the range , in samples , around the center sample that the program should search to identify the center ( e . g ., 10 ) Outputs : CENTEREDSPIKES : the re-centered spikes ; if the center of a spike has shifted , then the edges will be zero padded . SHIFTS : the number of samples the spike has been shifted . Negative means the centered spike was shifted to the left , positive is shifted to the right .","title":"vlt.neuro.spikesorting.centerspikes_neg"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/centerspikes_neg.m/#vltneurospikesortingcenterspikes_neg","text":"CENTERSPIKES_NEG Center negative-going spike waveforms based on minimum [ CENTEREDSPIKES , SHIFTS ] = vlt . neuro . spikesorting . centerspikes_neg ( SPIKESHAPES , CENTER_RANGE ) Inputs : SPIKESHAPES : an NxMxD vector where N is the number of spikes , M is the number of samples that comprise each spike waveform , and D is dimensions ( i . e ., number of channels ). CENTER_RANGE : the range , in samples , around the center sample that the program should search to identify the center ( e . g ., 10 ) Outputs : CENTEREDSPIKES : the re-centered spikes ; if the center of a spike has shifted , then the edges will be zero padded . SHIFTS : the number of samples the spike has been shifted . Negative means the centered spike was shifted to the left , positive is shifted to the right .","title":"vlt.neuro.spikesorting.centerspikes_neg"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/cluster_spikewaves_gui.m/","text":"vlt.neuro.spikesorting.cluster_spikewaves_gui \u00b6 CLUSTER_SPIKEWAVES_GUI - Cluster spikewaves into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = vlt . neuro . spikesorting . cluster_spikewaves_gui ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in vlt . file . custom_file_formats . readvhlspikewaveformfile ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"vlt.neuro.spikesorting.cluster_spikewaves_gui"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/cluster_spikewaves_gui.m/#vltneurospikesortingcluster_spikewaves_gui","text":"CLUSTER_SPIKEWAVES_GUI - Cluster spikewaves into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = vlt . neuro . spikesorting . cluster_spikewaves_gui ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in vlt . file . custom_file_formats . readvhlspikewaveformfile ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"vlt.neuro.spikesorting.cluster_spikewaves_gui"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/cluster_spikewaves_trivial.m/","text":"vlt.neuro.spikesorting.cluster_spikewaves_trivial \u00b6 CLUSTER_SPIKEWAVES_TRIVIAL - Cluster spikewaves into a single ' multi - unit ' group [ CLUSTERIDS , CLUSTERINFO ] = vlt . neuro . spikesorting . cluster_spikewaves_trivial ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Classifies all spikes in the manner of vlt . neuro . spikesorting . cluster_spikewaves_gui , except that all spikes are put into a single cluster and labeled with quality ' Multi - unit ' . Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in vlt . file . custom_file_formats . readvhlspikewaveformfile ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"vlt.neuro.spikesorting.cluster_spikewaves_trivial"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/cluster_spikewaves_trivial.m/#vltneurospikesortingcluster_spikewaves_trivial","text":"CLUSTER_SPIKEWAVES_TRIVIAL - Cluster spikewaves into a single ' multi - unit ' group [ CLUSTERIDS , CLUSTERINFO ] = vlt . neuro . spikesorting . cluster_spikewaves_trivial ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Classifies all spikes in the manner of vlt . neuro . spikesorting . cluster_spikewaves_gui , except that all spikes are put into a single cluster and labeled with quality ' Multi - unit ' . Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in vlt . file . custom_file_formats . readvhlspikewaveformfile ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"vlt.neuro.spikesorting.cluster_spikewaves_trivial"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/fitspike_neg.m/","text":"vlt.neuro.spikesorting.fitspike_neg \u00b6 this function is under development, not good","title":"vlt.neuro.spikesorting.fitspike_neg"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/fitspike_neg.m/#vltneurospikesortingfitspike_neg","text":"this function is under development, not good","title":"vlt.neuro.spikesorting.fitspike_neg"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/oversamplespikes.m/","text":"vlt.neuro.spikesorting.oversamplespikes \u00b6 OVERSAMPLESPIKES - Oversample spike waveforms using spline interpolation [ SPIKESHAPESUP,TUP ] = vlt . neuro . spikesorting . oversamplespikes ( SPIKESHAPES , UPSAMPLEFACTOR , [ T ] ) Inputs : SPIKESHAPES : an NxMxD matrix of spikes shapes ; N is the number of spikes , M is the number of samples per spike , and D is the number of dimensions ( e . g ., D = 1 for a single channel recording ). UPSAMPLEFACTOR : the number of times to vlt . signal . oversample ( e . g ., 5 ) T : ( optional ), the relative time values within each spike sample ( shoudl be length M ) Outputs : SPIKESHAPESUP : An NxM * UPSCALEFACTOR * D matrix with the upsampled spikeshapes . N is the number of spikes , M * UPSCALEFACTOR is the number of samples for each spike , and D is the number of dimensions . N , M , and D are unchanged from the input SPIKESHAPES . TUP : If T is given , TUP is the upscaled time values for each spike .","title":"vlt.neuro.spikesorting.oversamplespikes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/oversamplespikes.m/#vltneurospikesortingoversamplespikes","text":"OVERSAMPLESPIKES - Oversample spike waveforms using spline interpolation [ SPIKESHAPESUP,TUP ] = vlt . neuro . spikesorting . oversamplespikes ( SPIKESHAPES , UPSAMPLEFACTOR , [ T ] ) Inputs : SPIKESHAPES : an NxMxD matrix of spikes shapes ; N is the number of spikes , M is the number of samples per spike , and D is the number of dimensions ( e . g ., D = 1 for a single channel recording ). UPSAMPLEFACTOR : the number of times to vlt . signal . oversample ( e . g ., 5 ) T : ( optional ), the relative time values within each spike sample ( shoudl be length M ) Outputs : SPIKESHAPESUP : An NxM * UPSCALEFACTOR * D matrix with the upsampled spikeshapes . N is the number of spikes , M * UPSCALEFACTOR is the number of samples for each spike , and D is the number of dimensions . N , M , and D are unchanged from the input SPIKESHAPES . TUP : If T is given , TUP is the upscaled time values for each spike .","title":"vlt.neuro.spikesorting.oversamplespikes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/plotspikewaves.m/","text":"vlt.neuro.spikesorting.plotspikewaves \u00b6 PLOTSPIKEWAVES - Plot spike waveforms to the current axes H = vlt . neuro . spikesorting . plotspikewaves ( WAVES , [ INDEXES ] , ...) Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . All channels are combined into 1 dimension for the plot . INDEXES : Optional , a list of index values to plot . If not provided , then all waves are plotted ( subject to restrictions below ). Additional name / value pairs can be provided to modify the default settings below : 'SampleTimes' : The sample times of each spike ; default 1 : ( NumSamples * NumChannels ) ( sample numbers ) 't' : The time of each spike ( default 1 : NumSpikes , indicating spike order only ) 'TimeGraphBin' ** : If > 0 and if t has real times , show a second graph in front of the spike : waveforms indicating the firing rate in time bins of this size ( default 0 ); : otherwise show no graph 'TimeGraphMax' ** : The firing rate in the time graph that is considered \"maximum\" ( default 20 ( Hz )) 'ClassID' : 1 xNumSpikes - class identity of each waveform ( default 1 : NumSpikes , meaning each unique ) 'ColorOrder' : List of colors ( Nx3 ) to cycle through with class ID ; defaults to the default : color order for the axes , that is , get ( gca , 'ColorOrder' ). 'RandomSubset' : Should we plot only a random subset ? ( 0 / 1 , default 1 ) 'RandomSubsetSize' : How many waves should we plot ? ( default 200 ) 'LineWidth' : Default 0.5 'ClearAxes' : Default 0 ** not implemented yet Outputs : H : A list of the plot handles for these waves","title":"vlt.neuro.spikesorting.plotspikewaves"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/plotspikewaves.m/#vltneurospikesortingplotspikewaves","text":"PLOTSPIKEWAVES - Plot spike waveforms to the current axes H = vlt . neuro . spikesorting . plotspikewaves ( WAVES , [ INDEXES ] , ...) Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . All channels are combined into 1 dimension for the plot . INDEXES : Optional , a list of index values to plot . If not provided , then all waves are plotted ( subject to restrictions below ). Additional name / value pairs can be provided to modify the default settings below : 'SampleTimes' : The sample times of each spike ; default 1 : ( NumSamples * NumChannels ) ( sample numbers ) 't' : The time of each spike ( default 1 : NumSpikes , indicating spike order only ) 'TimeGraphBin' ** : If > 0 and if t has real times , show a second graph in front of the spike : waveforms indicating the firing rate in time bins of this size ( default 0 ); : otherwise show no graph 'TimeGraphMax' ** : The firing rate in the time graph that is considered \"maximum\" ( default 20 ( Hz )) 'ClassID' : 1 xNumSpikes - class identity of each waveform ( default 1 : NumSpikes , meaning each unique ) 'ColorOrder' : List of colors ( Nx3 ) to cycle through with class ID ; defaults to the default : color order for the axes , that is , get ( gca , 'ColorOrder' ). 'RandomSubset' : Should we plot only a random subset ? ( 0 / 1 , default 1 ) 'RandomSubsetSize' : How many waves should we plot ? ( default 200 ) 'LineWidth' : Default 0.5 'ClearAxes' : Default 0 ** not implemented yet Outputs : H : A list of the plot handles for these waves","title":"vlt.neuro.spikesorting.plotspikewaves"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/spikewaves2Npointfeature.m/","text":"vlt.neuro.spikesorting.spikewaves2Npointfeature \u00b6 SPIKEWAVES2NPOINTFEATURE - Select samples from spike waves FEATURES = vlt.neuro.spikesorting.spikewaves2Npointfeature(WAVES, SAMPLELIST) Creates a set of \"features\" of the spike waveform WAVES by grabbing samples at the locations SAMPLELIST. Inputs: WAVES: A NumSamples x NumChannels x NumSpikes list of spike waveforms. SAMPLELIST: A list of samples [S1 S2 ...] at which to sample the spike waveforms on each channel. Outputs: FEATURES: A (NumSampleList*NumChannel) x NumSpikes list of features. Each spike waveform is sampled on each channel at the sample offsets in SAMPLELIST. Each column has the sample values on the first channel, followed by the second, and so on.","title":"vlt.neuro.spikesorting.spikewaves2Npointfeature"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/spikewaves2Npointfeature.m/#vltneurospikesortingspikewaves2npointfeature","text":"SPIKEWAVES2NPOINTFEATURE - Select samples from spike waves FEATURES = vlt.neuro.spikesorting.spikewaves2Npointfeature(WAVES, SAMPLELIST) Creates a set of \"features\" of the spike waveform WAVES by grabbing samples at the locations SAMPLELIST. Inputs: WAVES: A NumSamples x NumChannels x NumSpikes list of spike waveforms. SAMPLELIST: A list of samples [S1 S2 ...] at which to sample the spike waveforms on each channel. Outputs: FEATURES: A (NumSampleList*NumChannel) x NumSpikes list of features. Each spike waveform is sampled on each channel at the sample offsets in SAMPLELIST. Each column has the sample values on the first channel, followed by the second, and so on.","title":"vlt.neuro.spikesorting.spikewaves2Npointfeature"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/spikewaves2pca.m/","text":"vlt.neuro.spikesorting.spikewaves2pca \u00b6 SPIKEWAVES2PCA - Compute first N principle components of spike waveforms FEATURES = vlt . neuro . spikesorting . spikewaves2pca ( WAVES , N , [ RANGE ] ) Creates a set of \"features\" of the spike waveform WAVES by calculating the values of the first N principle components . Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . N : the number of principle components to include Optional input : RANGE : A 2 element vector with the START and STOP range to examine Outputs : FEATURES : An N x NumSpikes list of features .","title":"vlt.neuro.spikesorting.spikewaves2pca"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspikesorting/spikewaves2pca.m/#vltneurospikesortingspikewaves2pca","text":"SPIKEWAVES2PCA - Compute first N principle components of spike waveforms FEATURES = vlt . neuro . spikesorting . spikewaves2pca ( WAVES , N , [ RANGE ] ) Creates a set of \"features\" of the spike waveform WAVES by calculating the values of the first N principle components . Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . N : the number of principle components to include Optional input : RANGE : A 2 element vector with the START and STOP range to examine Outputs : FEATURES : An N x NumSpikes list of features .","title":"vlt.neuro.spikesorting.spikewaves2pca"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/interspikeinterval.m/","text":"vlt.neuro.spiketrains.interspikeinterval \u00b6 INTERSPIKEINTERVAL - Calculate interspike interval distribution for spiketrain ISI = vlt . neuro . spiketrains . interspikeinterval ( SPIKETIMES , BINS ) Calculates the distribution of interspike intervals for the list of spikes SPIKETIMES . SPIKETIMES should be in the same time units as BINS . If the function is called without a BINS argument : ISI = vlt . neuro . spiketrains . interspikeinterval ( SPIKETIMES ) then BINS is taken to be [ 0 : 0.001 : 0.100 ] ( that is , 1 ms bins from 0 to 0.100 seconds ) Example : % Poisson spike train at 3Hz dt = 0.001 ; t = 0 : dt : 100 ; rate = 3 ; spikebins = rand ( size ( t )) < rate * dt ; % 0's and 1's spikebin_indexes = find ( spikebins ); % find locations of spikes spiketimes = t ( spikebin_indexes ); % get the corresponding time values bins = 0 : 0.001 : 0.1 ; ISI = vlt . neuro . spiketrains . interspikeinterval ( spiketimes , bins ); % plot as a fraction of total bar ( bins + 0.001 / 2 , ISI / sum ( ISI ));","title":"vlt.neuro.spiketrains.interspikeinterval"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/interspikeinterval.m/#vltneurospiketrainsinterspikeinterval","text":"INTERSPIKEINTERVAL - Calculate interspike interval distribution for spiketrain ISI = vlt . neuro . spiketrains . interspikeinterval ( SPIKETIMES , BINS ) Calculates the distribution of interspike intervals for the list of spikes SPIKETIMES . SPIKETIMES should be in the same time units as BINS . If the function is called without a BINS argument : ISI = vlt . neuro . spiketrains . interspikeinterval ( SPIKETIMES ) then BINS is taken to be [ 0 : 0.001 : 0.100 ] ( that is , 1 ms bins from 0 to 0.100 seconds ) Example : % Poisson spike train at 3Hz dt = 0.001 ; t = 0 : dt : 100 ; rate = 3 ; spikebins = rand ( size ( t )) < rate * dt ; % 0's and 1's spikebin_indexes = find ( spikebins ); % find locations of spikes spiketimes = t ( spikebin_indexes ); % get the corresponding time values bins = 0 : 0.001 : 0.1 ; ISI = vlt . neuro . spiketrains . interspikeinterval ( spiketimes , bins ); % plot as a fraction of total bar ( bins + 0.001 / 2 , ISI / sum ( ISI ));","title":"vlt.neuro.spiketrains.interspikeinterval"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/loglikelihood_spikerate.m/","text":"vlt.neuro.spiketrains.loglikelihood_spikerate \u00b6 LOGLIKELIHOOD_SPIKERATE - Compute the log likelihood of seeing spike rates LL = vlt.neuro.spiketrains.loglikelihood_spikerate(BIN_RATES, BIN_DURATIONS, SPIKERATES, SIGMA) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of -log((sqrt(2*pi)*sigma))-(spikerates(i)-bin_rates(i))^2/(2*sigma^2) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"vlt.neuro.spiketrains.loglikelihood_spikerate"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/loglikelihood_spikerate.m/#vltneurospiketrainsloglikelihood_spikerate","text":"LOGLIKELIHOOD_SPIKERATE - Compute the log likelihood of seeing spike rates LL = vlt.neuro.spiketrains.loglikelihood_spikerate(BIN_RATES, BIN_DURATIONS, SPIKERATES, SIGMA) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of -log((sqrt(2*pi)*sigma))-(spikerates(i)-bin_rates(i))^2/(2*sigma^2) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"vlt.neuro.spiketrains.loglikelihood_spikerate"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/loglikelihood_spiketrain.m/","text":"vlt.neuro.spiketrains.loglikelihood_spiketrain \u00b6 LOGLIKELIHOOD_SPIKETRAIN - Compute the log likelihood of seeing spike counts LL = vlt.neuro.spiketrains.loglikelihood_spiketrain(BIN_RATES, BIN_DURATIONS, SPIKECOUNTS) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of bin_rates(i)*bin_durations(i) + spikecounts(i)*log(bin_rates(i)*bin_durations)-log(k!) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"vlt.neuro.spiketrains.loglikelihood_spiketrain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/loglikelihood_spiketrain.m/#vltneurospiketrainsloglikelihood_spiketrain","text":"LOGLIKELIHOOD_SPIKETRAIN - Compute the log likelihood of seeing spike counts LL = vlt.neuro.spiketrains.loglikelihood_spiketrain(BIN_RATES, BIN_DURATIONS, SPIKECOUNTS) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of bin_rates(i)*bin_durations(i) + spikecounts(i)*log(bin_rates(i)*bin_durations)-log(k!) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"vlt.neuro.spiketrains.loglikelihood_spiketrain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/make_psth.m/","text":"vlt.neuro.spiketrains.make_psth \u00b6 [ N , X , RAST ] = vlt . neuro . spiketrains . make_psth ( SPIKEDATA , TRIGGERS , INTERV , RES , NORMALIZE , RASTTYPE ) vlt . neuro . spiketrains . make_psth gives a peri - stimulus time histogram . The bins of the histogram are given in X , while the values in each bin are given in N . Rasters are also returned in the sparse matrix RAST ; each trial has a separate row . The function takes as arguments SPIKEDATA , a spikedata object to be evaluated , TRIGGERS , a list of trigger times , INTERV = [ before after ], which tells how much before and after the trigger the histogram should examine , and RES , which is the time resolution of the histogram . NORMALIZE = 0 / 1 , and if it is 1 then the output is normalized by the number of triggers . RASTTYPE == 1 specifies RAST should be a cell with number of trigger entries , each of which has all spike times for that peri - stimulus time . RASTTYPE == 0 specifies that the RAST should be an X x ( length of histogram ) sparse matrix with each peri - stimulus time in a row . All units are SI . ( documentation cryptic ... fix ) Questions ? vanhoosr @ brandeis . edu","title":"vlt.neuro.spiketrains.make_psth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/make_psth.m/#vltneurospiketrainsmake_psth","text":"[ N , X , RAST ] = vlt . neuro . spiketrains . make_psth ( SPIKEDATA , TRIGGERS , INTERV , RES , NORMALIZE , RASTTYPE ) vlt . neuro . spiketrains . make_psth gives a peri - stimulus time histogram . The bins of the histogram are given in X , while the values in each bin are given in N . Rasters are also returned in the sparse matrix RAST ; each trial has a separate row . The function takes as arguments SPIKEDATA , a spikedata object to be evaluated , TRIGGERS , a list of trigger times , INTERV = [ before after ], which tells how much before and after the trigger the histogram should examine , and RES , which is the time resolution of the histogram . NORMALIZE = 0 / 1 , and if it is 1 then the output is normalized by the number of triggers . RASTTYPE == 1 specifies RAST should be a cell with number of trigger entries , each of which has all spike times for that peri - stimulus time . RASTTYPE == 0 specifies that the RAST should be an X x ( length of histogram ) sparse matrix with each peri - stimulus time in a row . All units are SI . ( documentation cryptic ... fix ) Questions ? vanhoosr @ brandeis . edu","title":"vlt.neuro.spiketrains.make_psth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/plot_psth.m/","text":"vlt.neuro.spiketrains.plot_psth \u00b6 [ H ] = vlt . neuro . spiketrains . plot_psth ( N , X , rast , ratioPSTH , PSTHclear , theAxes )","title":"vlt.neuro.spiketrains.plot_psth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/plot_psth.m/#vltneurospiketrainsplot_psth","text":"[ H ] = vlt . neuro . spiketrains . plot_psth ( N , X , rast , ratioPSTH , PSTHclear , theAxes )","title":"vlt.neuro.spiketrains.plot_psth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spikeresponse.m/","text":"vlt.neuro.spiketrains.spikeresponse \u00b6 [ RESPONSE_CURVE ] = vlt . neuro . spiketrains . spikeresponse ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES ) Return a response curve of responses to the presentation of multiple stimuli . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) Test example : % Step 1 , use vlt . neuro . mledenoise . gaindriftexample . m to generate spike responses . % See help vlt . neuro . mledenoise . gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= vlt . neuro . mledenoise . gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ); % Step 2 , use vlt . neuro . spiketrains . spikeresponse to calculate the actual responses response_curve = vlt . neuro . spiketrains . spikeresponse ( stimon , stimoff , stimids , spiketimes ); % see if the average spikes are equal to what we expect from vlt . neuro . mledenoise . gaindriftexample ' s help response_curve . curve ( 2 , : ), See also : vlt . neuro . spiketrains . spikeresponse_tf","title":"vlt.neuro.spiketrains.spikeresponse"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spikeresponse.m/#vltneurospiketrainsspikeresponse","text":"[ RESPONSE_CURVE ] = vlt . neuro . spiketrains . spikeresponse ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES ) Return a response curve of responses to the presentation of multiple stimuli . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) Test example : % Step 1 , use vlt . neuro . mledenoise . gaindriftexample . m to generate spike responses . % See help vlt . neuro . mledenoise . gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= vlt . neuro . mledenoise . gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ); % Step 2 , use vlt . neuro . spiketrains . spikeresponse to calculate the actual responses response_curve = vlt . neuro . spiketrains . spikeresponse ( stimon , stimoff , stimids , spiketimes ); % see if the average spikes are equal to what we expect from vlt . neuro . mledenoise . gaindriftexample ' s help response_curve . curve ( 2 , : ), See also : vlt . neuro . spiketrains . spikeresponse_tf","title":"vlt.neuro.spiketrains.spikeresponse"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spikeresponse_tf.m/","text":"vlt.neuro.spiketrains.spikeresponse_tf \u00b6 [ RESPONSE_CURVE ] = vlt . neuro . spiketrains . spikeresponse_tf ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES , BINSIZE , FREQUENCY ) Return a response curve of responses to the presentation of multiple stimuli . In this function , only the portion of the response that is modulated at temporal fequency FREQUENCY is reported . Spike trains are first discretized into bins with binsize BINSIZE . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the % same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) % See help vlt . neuro . mledenoise . gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= vlt . neuro . mledenoise . gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ,... 'response_tf' , 4 ); % Step 2 , use vlt . neuro . spiketrains . spikeresponse to calculate the actual responses response_curve = vlt . neuro . spiketrains . spikeresponse_tf ( stimon , stimoff , stimids , spiketimes , 0.001 , 4 ); % see if the average spikes are equal to what we expect from vlt . neuro . mledenoise . gaindriftexample ' s help abs ( response_curve . curve ( 2 , : )), See also : vlt . neuro . spiketrains . spikeresponse","title":"vlt.neuro.spiketrains.spikeresponse_tf"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spikeresponse_tf.m/#vltneurospiketrainsspikeresponse_tf","text":"[ RESPONSE_CURVE ] = vlt . neuro . spiketrains . spikeresponse_tf ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES , BINSIZE , FREQUENCY ) Return a response curve of responses to the presentation of multiple stimuli . In this function , only the portion of the response that is modulated at temporal fequency FREQUENCY is reported . Spike trains are first discretized into bins with binsize BINSIZE . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the % same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) % See help vlt . neuro . mledenoise . gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= vlt . neuro . mledenoise . gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ,... 'response_tf' , 4 ); % Step 2 , use vlt . neuro . spiketrains . spikeresponse to calculate the actual responses response_curve = vlt . neuro . spiketrains . spikeresponse_tf ( stimon , stimoff , stimids , spiketimes , 0.001 , 4 ); % see if the average spikes are equal to what we expect from vlt . neuro . mledenoise . gaindriftexample ' s help abs ( response_curve . curve ( 2 , : )), See also : vlt . neuro . spiketrains . spikeresponse","title":"vlt.neuro.spiketrains.spikeresponse_tf"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes2bins.m/","text":"vlt.neuro.spiketrains.spiketimes2bins \u00b6 SPIKETIMES2BINS - Convert a list of spike times to discrete time bins SPIKE_COUNTS = vlt . neuro . spiketrains . spiketimes2bins ( SPIKETIMES , TIMES ) Takes a list of spike times ( in units of TIMES ) and calculates the number of spikes that fall within time bins TIMES ( i ) - TIMES ( i + 1 ). If a spike occurred at exactly time TIMES ( i ) then it is included in bin i . Note that bins can contain more than one spike . Example : Generate a list of bins in spike times , get the spike times , and then convert it back to bins . dt = 0 . 001 ; T = 0 : dt : 10 ; % 10 seconds R = 5 * vlt . math . rectify ( sin ( 2 * pi * 3 * T )); S = ( rand ( size ( T ))< R * dt ); % generate spikes with probability R * dt spike_indexes = find ( S ); % find which bins have spikes spiketimes = T ( spike_indexes ); % get the time of those bins S2 = vlt . neuro . spiketrains . spiketimes2bins ( spiketimes , T ); % convert back all ( S == S2 ) % are these vectors equal ? Yes !","title":"vlt.neuro.spiketrains.spiketimes2bins"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes2bins.m/#vltneurospiketrainsspiketimes2bins","text":"SPIKETIMES2BINS - Convert a list of spike times to discrete time bins SPIKE_COUNTS = vlt . neuro . spiketrains . spiketimes2bins ( SPIKETIMES , TIMES ) Takes a list of spike times ( in units of TIMES ) and calculates the number of spikes that fall within time bins TIMES ( i ) - TIMES ( i + 1 ). If a spike occurred at exactly time TIMES ( i ) then it is included in bin i . Note that bins can contain more than one spike . Example : Generate a list of bins in spike times , get the spike times , and then convert it back to bins . dt = 0 . 001 ; T = 0 : dt : 10 ; % 10 seconds R = 5 * vlt . math . rectify ( sin ( 2 * pi * 3 * T )); S = ( rand ( size ( T ))< R * dt ); % generate spikes with probability R * dt spike_indexes = find ( S ); % find which bins have spikes spiketimes = T ( spike_indexes ); % get the time of those bins S2 = vlt . neuro . spiketrains . spiketimes2bins ( spiketimes , T ); % convert back all ( S == S2 ) % are these vectors equal ? Yes !","title":"vlt.neuro.spiketrains.spiketimes2bins"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes_correlation.m/","text":"vlt.neuro.spiketrains.spiketimes_correlation \u00b6 SPIKETIMES_CORRELATION - Compute correlation of 2 spike trains [ CORR , LAGS ] = vlt . neuro . spiketrains . spiketimes_correlation ( TRAIN1 , TRAIN2 , BINSIZE , MAXLAG ) Computes the raw correlation between 2 spike trains that are specified by the spike times of TRAIN1 and TRAIN2 at the lags requested from -MAXLAG to MAXLAG . Spike events are binned into bins of size BINSIZE ( same time units as LAGS ). MAXLAG should be evenly divided by BINSIZE ( such that MAXLAG / BINSIZE yields an integer ). For example , if LAGS ( i ) is 0 , then CORR ( i ) returns the number of times the 2 cells spiked stimulateously ( within the resolution BINSIZE ). If LAGS ( i ) is 0 . 010 , then CORR ( i ) returns the number of times cell 2 spiked 10ms after cell 1 ( with a resolution of BINSIZE ). Note that this treatment of \"LAGS\" is backwards from the function XCORR . Example : train1 = [ 0 0.010 0.020 ] ; train2 = [ 0 0.010 0.020 0.022 ] ; [ corr , lags ] = vlt . neuro . spiketrains . spiketimes_correlation ( train1 , train2 , 0 . 001 , 0 . 010 ); figure ; bar ( lags , corr ); xlabel ( 'Time lags' ); ylabel ( 'Counts' ); See also : XCORR","title":"vlt.neuro.spiketrains.spiketimes_correlation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes_correlation.m/#vltneurospiketrainsspiketimes_correlation","text":"SPIKETIMES_CORRELATION - Compute correlation of 2 spike trains [ CORR , LAGS ] = vlt . neuro . spiketrains . spiketimes_correlation ( TRAIN1 , TRAIN2 , BINSIZE , MAXLAG ) Computes the raw correlation between 2 spike trains that are specified by the spike times of TRAIN1 and TRAIN2 at the lags requested from -MAXLAG to MAXLAG . Spike events are binned into bins of size BINSIZE ( same time units as LAGS ). MAXLAG should be evenly divided by BINSIZE ( such that MAXLAG / BINSIZE yields an integer ). For example , if LAGS ( i ) is 0 , then CORR ( i ) returns the number of times the 2 cells spiked stimulateously ( within the resolution BINSIZE ). If LAGS ( i ) is 0 . 010 , then CORR ( i ) returns the number of times cell 2 spiked 10ms after cell 1 ( with a resolution of BINSIZE ). Note that this treatment of \"LAGS\" is backwards from the function XCORR . Example : train1 = [ 0 0.010 0.020 ] ; train2 = [ 0 0.010 0.020 0.022 ] ; [ corr , lags ] = vlt . neuro . spiketrains . spiketimes_correlation ( train1 , train2 , 0 . 001 , 0 . 010 ); figure ; bar ( lags , corr ); xlabel ( 'Time lags' ); ylabel ( 'Counts' ); See also : XCORR","title":"vlt.neuro.spiketrains.spiketimes_correlation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes_correlation_timeshiftsubtract.m/","text":"vlt.neuro.spiketrains.spiketimes_correlation_timeshiftsubtract \u00b6 SPIKETIMES_CORRELATION_TIMESHIFTSUBTRACT - Correlation that subtracts correlation not due to precise times [ XCORR_ACTUAL , XCORR_SHIFTED , XCORR_PERCENTILE , LAGS ] = vlt . neuro . spiketrains . spiketimes_correlation_timeshiftsubtract ( TRAIN1 , TRAIN2 , BINSIZE , ... MAXLAG , SHIFT , TRIALS ) Computes both the standard spike train correlation ( XCORR_ACTUAL ) between TRAIN1 and TRAIN2 , lists of spike times , using vlt . neuro . spiketrains . spiketimes_correlation , and computes an estimate of the amount of this correlation that is due to slow covarying spike rates with a time scale of SHIFT . BINSIZE is the resolution ( e . g . , 0.002 for 2 ms bins ), and MAXLAG is the maximum lag between the two trains TRAIN1 and TRAIN2 that will be computed . ( See help vlt . neuro . spiketrains . spiketimes_correlation ) The estimate of the amount of correlation that is due to slow covarying spike rates is computed over TRIALS trials ( e . g . , 100 ), during which each spike in the trains is time - shifted by a variable amount between 0 and SHIFT ( uniform distribution ) . SHIFT might be 0.100 to shift 100 ms , for example . This estimate is returned in XCORR_SHIFTED . The percentile distribution of XCORR_SHIFTED is returned in XCORR_PERCENTILE . Each Nth row of XCORR_PERCENTILE is the N - 1 th percentile of the distribution .","title":"vlt.neuro.spiketrains.spiketimes_correlation_timeshiftsubtract"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes_correlation_timeshiftsubtract.m/#vltneurospiketrainsspiketimes_correlation_timeshiftsubtract","text":"SPIKETIMES_CORRELATION_TIMESHIFTSUBTRACT - Correlation that subtracts correlation not due to precise times [ XCORR_ACTUAL , XCORR_SHIFTED , XCORR_PERCENTILE , LAGS ] = vlt . neuro . spiketrains . spiketimes_correlation_timeshiftsubtract ( TRAIN1 , TRAIN2 , BINSIZE , ... MAXLAG , SHIFT , TRIALS ) Computes both the standard spike train correlation ( XCORR_ACTUAL ) between TRAIN1 and TRAIN2 , lists of spike times , using vlt . neuro . spiketrains . spiketimes_correlation , and computes an estimate of the amount of this correlation that is due to slow covarying spike rates with a time scale of SHIFT . BINSIZE is the resolution ( e . g . , 0.002 for 2 ms bins ), and MAXLAG is the maximum lag between the two trains TRAIN1 and TRAIN2 that will be computed . ( See help vlt . neuro . spiketrains . spiketimes_correlation ) The estimate of the amount of correlation that is due to slow covarying spike rates is computed over TRIALS trials ( e . g . , 100 ), during which each spike in the trains is time - shifted by a variable amount between 0 and SHIFT ( uniform distribution ) . SHIFT might be 0.100 to shift 100 ms , for example . This estimate is returned in XCORR_SHIFTED . The percentile distribution of XCORR_SHIFTED is returned in XCORR_PERCENTILE . Each Nth row of XCORR_PERCENTILE is the N - 1 th percentile of the distribution .","title":"vlt.neuro.spiketrains.spiketimes_correlation_timeshiftsubtract"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes_plot.m/","text":"vlt.neuro.spiketrains.spiketimes_plot \u00b6 SPIKETIMES_PLOT - Plot a spike train as a bunch of hash ticks H = vlt . neuro . spiketrains . spiketimes_plot ( SPIKETIMES ) Plot a spiketrain ( with spike times SPIKETIMES ) on the current axes as a series of hash ticks . One can also modify the plot using the following options passed as name / value pairs ( for example , h = vlt . neuro . spiketrains . spiketimes_plot ( spiketimes , 'color' ,[ 1 0 0 ] ) plots in red ) : Parameter ( default ) | Description --------------------------------------------------------------------- color [ 0 0 0 ] | Hash color ( [ red green blue ], 0 .. 1 ) linewidth 1 | Line thickness hashheight 0 . 8 | Height of the hash marks in axis Y units hashcenter 0 . 5 | Center location of the hash marks Keywords : spiketrain spike train spiketimes times hash","title":"vlt.neuro.spiketrains.spiketimes_plot"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketimes_plot.m/#vltneurospiketrainsspiketimes_plot","text":"SPIKETIMES_PLOT - Plot a spike train as a bunch of hash ticks H = vlt . neuro . spiketrains . spiketimes_plot ( SPIKETIMES ) Plot a spiketrain ( with spike times SPIKETIMES ) on the current axes as a series of hash ticks . One can also modify the plot using the following options passed as name / value pairs ( for example , h = vlt . neuro . spiketrains . spiketimes_plot ( spiketimes , 'color' ,[ 1 0 0 ] ) plots in red ) : Parameter ( default ) | Description --------------------------------------------------------------------- color [ 0 0 0 ] | Hash color ( [ red green blue ], 0 .. 1 ) linewidth 1 | Line thickness hashheight 0 . 8 | Height of the hash marks in axis Y units hashcenter 0 . 5 | Center location of the hash marks Keywords : spiketrain spike train spiketimes times hash","title":"vlt.neuro.spiketrains.spiketimes_plot"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain2rate.m/","text":"vlt.neuro.spiketrains.spiketrain2rate \u00b6 SPIKETRAIN2RATE - compute a 'blurred' spike rate from 0 / 1 spike train RATE = vlt . neuro . spiketrains . spiketrain2rate ( SPIKETRAIN , DT , BLUR , ...) Given a vector of 0 / 1 binned SPIKETRAIN data and the sampling interval DT of the SPIKETRAIN , estimate a RATE of the spiking process by blurring with a parameter BLUR . This function takes extra parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------------- BlurFunc ( 'gaussian' ) | The blur function to use . Default is 'gaussian' . See also : vlt . data . namevaluepair , vlt . neuro . spiketrains . spiketimes2bins Example : dt = 0 . 001 ; t_start = 0 ; t_end = 50 / 2 ; maxrate = 50 ; tFreq = 2 ; phase = 0 ; rate_offset = 20 ; ST = vlt . neuro . spiketrains . spiketrain_sinusoidal ( maxrate , tFreq , phase , rate_offset , t_start , t_end , dt ); % 50 cycles at 2Hz T = t_start : dt : t_end ; SC = vlt . neuro . spiketrains . spiketimes2bins ( ST , T ); R = vlt . neuro . spiketrains . spiketrain2rate ( SC , dt , 0 . 005 ); figure ; subplot ( 2 , 1 , 1 ); plot ( T , R ); hold on ; plot ( T , vlt . math . rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase )), 'g' ); xlabel ( 'Time(s)' ); ylabel ( 'Rate (spikes/s)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( cumsum ( R ), cumsum ( vlt . math . rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase ))), 'bo' ); hold on ; plot ( [ 0 sum ( R ) ] , [ 0 sum ( R ) ] , 'k--' ); xlabel ( 'Cumulative rate measured (spikes)' ); ylabel ( 'Actual cumulative rate (spikes)' ); axis equal square ; box off ;","title":"vlt.neuro.spiketrains.spiketrain2rate"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain2rate.m/#vltneurospiketrainsspiketrain2rate","text":"SPIKETRAIN2RATE - compute a 'blurred' spike rate from 0 / 1 spike train RATE = vlt . neuro . spiketrains . spiketrain2rate ( SPIKETRAIN , DT , BLUR , ...) Given a vector of 0 / 1 binned SPIKETRAIN data and the sampling interval DT of the SPIKETRAIN , estimate a RATE of the spiking process by blurring with a parameter BLUR . This function takes extra parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------------- BlurFunc ( 'gaussian' ) | The blur function to use . Default is 'gaussian' . See also : vlt . data . namevaluepair , vlt . neuro . spiketrains . spiketimes2bins Example : dt = 0 . 001 ; t_start = 0 ; t_end = 50 / 2 ; maxrate = 50 ; tFreq = 2 ; phase = 0 ; rate_offset = 20 ; ST = vlt . neuro . spiketrains . spiketrain_sinusoidal ( maxrate , tFreq , phase , rate_offset , t_start , t_end , dt ); % 50 cycles at 2Hz T = t_start : dt : t_end ; SC = vlt . neuro . spiketrains . spiketimes2bins ( ST , T ); R = vlt . neuro . spiketrains . spiketrain2rate ( SC , dt , 0 . 005 ); figure ; subplot ( 2 , 1 , 1 ); plot ( T , R ); hold on ; plot ( T , vlt . math . rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase )), 'g' ); xlabel ( 'Time(s)' ); ylabel ( 'Rate (spikes/s)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( cumsum ( R ), cumsum ( vlt . math . rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase ))), 'bo' ); hold on ; plot ( [ 0 sum ( R ) ] , [ 0 sum ( R ) ] , 'k--' ); xlabel ( 'Cumulative rate measured (spikes)' ); ylabel ( 'Actual cumulative rate (spikes)' ); axis equal square ; box off ;","title":"vlt.neuro.spiketrains.spiketrain2rate"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_poisson_n.m/","text":"vlt.neuro.spiketrains.spiketrain_poisson_n \u00b6 SPIKETRAIN_POISSON_N - Return a Poisson spike train with N spikes SPIKETIMES = vlt . neuro . spiketrains . spiketrain_poisson_n ( LAMBDA , N , TIMERESOLUTION ) Returns a list of SPIKETIMES of length N that are generated by a Poisson process with mean rate LAMBDA and time resolution TIMERESOLUTION . Example : lambda = 10 ; % 10Hz timeres = 0.001 ; % 1ms bins spiketimes = spiketrain_posson_n ( lambda , 10 , timeres ); % returns 10 spikes distributed in a Poisson manner with rate % 10Hz, 1ms bins","title":"vlt.neuro.spiketrains.spiketrain_poisson_n"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_poisson_n.m/#vltneurospiketrainsspiketrain_poisson_n","text":"SPIKETRAIN_POISSON_N - Return a Poisson spike train with N spikes SPIKETIMES = vlt . neuro . spiketrains . spiketrain_poisson_n ( LAMBDA , N , TIMERESOLUTION ) Returns a list of SPIKETIMES of length N that are generated by a Poisson process with mean rate LAMBDA and time resolution TIMERESOLUTION . Example : lambda = 10 ; % 10Hz timeres = 0.001 ; % 1ms bins spiketimes = spiketrain_posson_n ( lambda , 10 , timeres ); % returns 10 spikes distributed in a Poisson manner with rate % 10Hz, 1ms bins","title":"vlt.neuro.spiketrains.spiketrain_poisson_n"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_powerspectrum.m/","text":"vlt.neuro.spiketrains.spiketrain_powerspectrum \u00b6 SPIKETRAIN_POWERSPECTRUM - Compute power spectrum of a spiketrain using pmtm [ Pxx , Pxxc , F ] = vlt . neuro . spiketrains . spiketrain_powerspectrum ( SPIKETIMES , TIME_RESOLUTION ) Use the Tomson Multi-Taper method ( see help pmtm ) to calculate the power spectrum of a list of SPIKETIMES , sampled with time resolution TIME_RESOLUTION ( e . g ., 0 . 001 for 1 / 1000 of the units of SPIKETIMES ). One may modify the behavior of the function by passing name / value pairs : Parameter ( default value ) : Description ------------------------------------------------------------------------ NFFT ( [] ) : Number of points to include in the FFT : ( see HELP PMTM ) Example : dt = 0 . 001 ; t = 0 : dt : 100 ; % 100 seconds long rate = 10 * vlt . math . rectify ( cos ( 2 * pi * 0 . 5 * t )* dt ); % spiketimes = t ( find ( rand ( size ( rate ))< rate )); [ Pxx , Pxxc , F ] = vlt . neuro . spiketrains . spiketrain_powerspectrum ( spiketimes , 0 . 01 ); figure ; loglog ( F , Pxx ); hold on ; loglog ( F , Pxxc (:, 1 ), 'r-' ); loglog ( F , Pxxc (:, 2 ), 'r-' ); title ( 'Tomson Multitaper Power Spectral Density Estimate' ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Power/frequency (dB/Hz)' );","title":"vlt.neuro.spiketrains.spiketrain_powerspectrum"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_powerspectrum.m/#vltneurospiketrainsspiketrain_powerspectrum","text":"SPIKETRAIN_POWERSPECTRUM - Compute power spectrum of a spiketrain using pmtm [ Pxx , Pxxc , F ] = vlt . neuro . spiketrains . spiketrain_powerspectrum ( SPIKETIMES , TIME_RESOLUTION ) Use the Tomson Multi-Taper method ( see help pmtm ) to calculate the power spectrum of a list of SPIKETIMES , sampled with time resolution TIME_RESOLUTION ( e . g ., 0 . 001 for 1 / 1000 of the units of SPIKETIMES ). One may modify the behavior of the function by passing name / value pairs : Parameter ( default value ) : Description ------------------------------------------------------------------------ NFFT ( [] ) : Number of points to include in the FFT : ( see HELP PMTM ) Example : dt = 0 . 001 ; t = 0 : dt : 100 ; % 100 seconds long rate = 10 * vlt . math . rectify ( cos ( 2 * pi * 0 . 5 * t )* dt ); % spiketimes = t ( find ( rand ( size ( rate ))< rate )); [ Pxx , Pxxc , F ] = vlt . neuro . spiketrains . spiketrain_powerspectrum ( spiketimes , 0 . 01 ); figure ; loglog ( F , Pxx ); hold on ; loglog ( F , Pxxc (:, 1 ), 'r-' ); loglog ( F , Pxxc (:, 2 ), 'r-' ); title ( 'Tomson Multitaper Power Spectral Density Estimate' ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Power/frequency (dB/Hz)' );","title":"vlt.neuro.spiketrains.spiketrain_powerspectrum"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_powerspectrum_window.m/","text":"vlt.neuro.spiketrains.spiketrain_powerspectrum_window \u00b6 SPIKETRAIN_POWERSPECTRUM_WINDOW - calculate the power spectrum of a spike train using a sliding window [ Pxx , Fxx , BANDVALUES , BANDS ] = vlt . neuro . spiketrains . spiketrain_powerspectrum_window ( SPIKETRAIN ,... [ START WINDOWSIZE STEP STOP ] , ...) Returns the power spectrum Pxx at different frequencies Fxx . The power spectrum is calculated from time START to STOP using sliding windows of size WINDOWSIZE . The window is advanced STEP units each time . The power spectrum is calculated by calling the function vlt . neuro . spiketrains . spiketrain_powerspectrum . One can modify the default parameters by adding name / value pairs to the function : Parameter ( default value ) : Description -------------------------------------------------------------------------------- BINSIZE ( 0 . 002 ) : Bin size for spike trains ( seconds ) NFFT ( 2 ^ 15 ) : Number of FFT values to use in powerspectrum bands ( [ 0.1 4 ;, ... : Frequency bands for averaging. 4 8 ; ... 8 12 ; ... 12 30 ] ); 0 . 1-4 Hz , theta 4-8 , alpha 8-12 , beta 12-30 See also : vlt . neuro . spiketrains . spiketrain_powerspectrum","title":"vlt.neuro.spiketrains.spiketrain_powerspectrum_window"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_powerspectrum_window.m/#vltneurospiketrainsspiketrain_powerspectrum_window","text":"SPIKETRAIN_POWERSPECTRUM_WINDOW - calculate the power spectrum of a spike train using a sliding window [ Pxx , Fxx , BANDVALUES , BANDS ] = vlt . neuro . spiketrains . spiketrain_powerspectrum_window ( SPIKETRAIN ,... [ START WINDOWSIZE STEP STOP ] , ...) Returns the power spectrum Pxx at different frequencies Fxx . The power spectrum is calculated from time START to STOP using sliding windows of size WINDOWSIZE . The window is advanced STEP units each time . The power spectrum is calculated by calling the function vlt . neuro . spiketrains . spiketrain_powerspectrum . One can modify the default parameters by adding name / value pairs to the function : Parameter ( default value ) : Description -------------------------------------------------------------------------------- BINSIZE ( 0 . 002 ) : Bin size for spike trains ( seconds ) NFFT ( 2 ^ 15 ) : Number of FFT values to use in powerspectrum bands ( [ 0.1 4 ;, ... : Frequency bands for averaging. 4 8 ; ... 8 12 ; ... 12 30 ] ); 0 . 1-4 Hz , theta 4-8 , alpha 8-12 , beta 12-30 See also : vlt . neuro . spiketrains . spiketrain_powerspectrum","title":"vlt.neuro.spiketrains.spiketrain_powerspectrum_window"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_sinusoidal.m/","text":"vlt.neuro.spiketrains.spiketrain_sinusoidal \u00b6 SPIKETRAIN_SINUSOIDAL - Create a spike train with a sinusoidal rate SPIKETIMES = vlt . neuro . spiketrains . spiketrain_sinusoidal ( MAXRATE , FREQUENCY ,... PHASE , RATE_OFFSET , T_START , T_END , DT ) On top of a background spike rate of RATE_OFFSET , create a sinusoidal spike train with a maximum rate MAXRATE , sinusoidal frequency equal to FREQUENCY , with a phase of PHASE radians . Time will start at T_START and end at T_END in steps of DT . SPIKETIMES will be the spike times generated by a poisson process . Example : Generate a sinusoidal spike train and verify the modulation rate with fourier analysis . dt = 0.001 ; t_start = 0 ; t_end = 50 / 4 ; % 50 cycles at 4 Hz % Generate a spike train with modulation rate of 4 Hz and amplitude of 20 Hz on %a background of 50 Hz rate ST = vlt . neuro . spiketrains . spiketrain_sinusoidal ( 20 , 4 , 0 , 50 , t_start , t_end , dt ); % convert back to bins T = t_start : dt : t_end ; % time bins SC = vlt . neuro . spiketrains . spiketimes2bins ( ST , T ); % convert spikes to be instantaneous rates SCr = SC / dt ; [ fc , freqs ] = vlt . math . fouriercoeffs ( SCr , dt ); figure ; subplot ( 2 , 1 , 1 , ' box ',' off ' ); plot ( T ( find ( SC )), SC ( find ( SC )), 'x' ); xlabel ( ' Time ( s ) ' ); ylabel ( ' Spike ' ); subplot ( 2 , 1 , 2 , ' box ',' off ' ); plot ( freqs , abs ( fc )); xlabel ( ' Frequency ' ); ylabel ( ' Fourier magnitude ' ); A = axis ; axis ([ 0 10 A ( 3 ) A ( 4 )]);","title":"vlt.neuro.spiketrains.spiketrain_sinusoidal"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_sinusoidal.m/#vltneurospiketrainsspiketrain_sinusoidal","text":"SPIKETRAIN_SINUSOIDAL - Create a spike train with a sinusoidal rate SPIKETIMES = vlt . neuro . spiketrains . spiketrain_sinusoidal ( MAXRATE , FREQUENCY ,... PHASE , RATE_OFFSET , T_START , T_END , DT ) On top of a background spike rate of RATE_OFFSET , create a sinusoidal spike train with a maximum rate MAXRATE , sinusoidal frequency equal to FREQUENCY , with a phase of PHASE radians . Time will start at T_START and end at T_END in steps of DT . SPIKETIMES will be the spike times generated by a poisson process . Example : Generate a sinusoidal spike train and verify the modulation rate with fourier analysis . dt = 0.001 ; t_start = 0 ; t_end = 50 / 4 ; % 50 cycles at 4 Hz % Generate a spike train with modulation rate of 4 Hz and amplitude of 20 Hz on %a background of 50 Hz rate ST = vlt . neuro . spiketrains . spiketrain_sinusoidal ( 20 , 4 , 0 , 50 , t_start , t_end , dt ); % convert back to bins T = t_start : dt : t_end ; % time bins SC = vlt . neuro . spiketrains . spiketimes2bins ( ST , T ); % convert spikes to be instantaneous rates SCr = SC / dt ; [ fc , freqs ] = vlt . math . fouriercoeffs ( SCr , dt ); figure ; subplot ( 2 , 1 , 1 , ' box ',' off ' ); plot ( T ( find ( SC )), SC ( find ( SC )), 'x' ); xlabel ( ' Time ( s ) ' ); ylabel ( ' Spike ' ); subplot ( 2 , 1 , 2 , ' box ',' off ' ); plot ( freqs , abs ( fc )); xlabel ( ' Frequency ' ); ylabel ( ' Fourier magnitude ' ); A = axis ; axis ([ 0 10 A ( 3 ) A ( 4 )]);","title":"vlt.neuro.spiketrains.spiketrain_sinusoidal"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_timingcorrelated.m/","text":"vlt.neuro.spiketrains.spiketrain_timingcorrelated \u00b6 SPIKETRAIN_TIMINGCORRELATED - Make spike train that is correlated in spike timing with an input spike train [ CORRELATED_TRAIN , CORR ] = vlt . neuro . spiketrains . spiketrain_timingcorrelated ( INPUT_TRAIN , C ) Creates a spike train that is correlated with the spike train INPUT_TRAIN . INPUT_TRAIN should be a list of spike times in seconds . C indicates how correlated the spike trains should be in terms of 1 ms spike timing , from 0 ( all spikes different ) to 1 ( all spikes the same ) . CORRELATED_TRAIN will have the same number of spikes as INPUT_TRAIN . CORR is the actual correlation that was achieved . This may differ slightly from the requested correlation if the fraction correlation requested times the number of spikes is not an integer .","title":"vlt.neuro.spiketrains.spiketrain_timingcorrelated"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bspiketrains/spiketrain_timingcorrelated.m/#vltneurospiketrainsspiketrain_timingcorrelated","text":"SPIKETRAIN_TIMINGCORRELATED - Make spike train that is correlated in spike timing with an input spike train [ CORRELATED_TRAIN , CORR ] = vlt . neuro . spiketrains . spiketrain_timingcorrelated ( INPUT_TRAIN , C ) Creates a spike train that is correlated with the spike train INPUT_TRAIN . INPUT_TRAIN should be a list of spike times in seconds . C indicates how correlated the spike trains should be in terms of 1 ms spike timing , from 0 ( all spikes different ) to 1 ( all spikes the same ) . CORRELATED_TRAIN will have the same number of spikes as INPUT_TRAIN . CORR is the actual correlation that was achieved . This may differ slightly from the requested correlation if the fraction correlation requested times the number of spikes is not an integer .","title":"vlt.neuro.spiketrains.spiketrain_timingcorrelated"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/ltpi_apply.m/","text":"vlt.neuro.stdp.ltpi_apply \u00b6 LTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . ltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the \"veto\" long term potentiation of inhibition rule based on the experimental data of Maffei et . al 2006 ( Nature ) and on the equations in Bourjaily and Miller 2011 ( Frontiers in Computational Neuroscience ) . For all presynaptic ( inhibitory ) spikes , we look to see if there is a postsynaptic spike in the interval [ t_pre - tau_minus , tpre + tau_plus ] . If so , there is an inhibitory potentiation : weight = weight + dIW WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott ( 2001 ), the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) Normally , we do not know what additional spikes are coming in the future . The code assumes that we only know up to time of the latest spike in the 2 trains . ( That is , if an inhibitory spike is the last spike to occur , and it has no postsynaptic partners , then we do not yet know if it will generate a potentiation event . One can explicitly set T1 to indicate the latest time that we have information for ( which might be later than the latest spike time ) . The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . ltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 dIW | 0.001 ( a 1 % change ) T0 | 0 T1 | max ( spiketimes_pre ( end ), spiketimes_post ( end ))","title":"vlt.neuro.stdp.ltpi_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/ltpi_apply.m/#vltneurostdpltpi_apply","text":"LTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . ltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the \"veto\" long term potentiation of inhibition rule based on the experimental data of Maffei et . al 2006 ( Nature ) and on the equations in Bourjaily and Miller 2011 ( Frontiers in Computational Neuroscience ) . For all presynaptic ( inhibitory ) spikes , we look to see if there is a postsynaptic spike in the interval [ t_pre - tau_minus , tpre + tau_plus ] . If so , there is an inhibitory potentiation : weight = weight + dIW WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott ( 2001 ), the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) Normally , we do not know what additional spikes are coming in the future . The code assumes that we only know up to time of the latest spike in the 2 trains . ( That is , if an inhibitory spike is the last spike to occur , and it has no postsynaptic partners , then we do not yet know if it will generate a potentiation event . One can explicitly set T1 to indicate the latest time that we have information for ( which might be later than the latest spike time ) . The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . ltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 dIW | 0.001 ( a 1 % change ) T0 | 0 T1 | max ( spiketimes_pre ( end ), spiketimes_post ( end ))","title":"vlt.neuro.stdp.ltpi_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/ltpi_test.m/","text":"vlt.neuro.stdp.ltpi_test \u00b6 LTPI_TEST - Simple test function to test the ltpi_apply.m function Test function - read code","title":"vlt.neuro.stdp.ltpi_test"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/ltpi_test.m/#vltneurostdpltpi_test","text":"LTPI_TEST - Simple test function to test the ltpi_apply.m function Test function - read code","title":"vlt.neuro.stdp.ltpi_test"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/sjostrom_freq_stdp.m/","text":"vlt.neuro.stdp.sjostrom_freq_stdp \u00b6 SJOSTROM_FREQ_STDP - Sjostrom's data on plasticity vs. spike rate and timing A = SJOSTROM_FREQ_STPD Returns data from Sjostrom et al. 2001, showing how the change in synaptic weight depends on frequency and timing. The data represent the synaptic change (in percent (I think)) as a function of 60 repetitions of pairings of pre-synaptic and postsynaptic spikes. The first column of the table indicates the frequency used in the experiment. The second column is the synaptic change when pre-before-post firing with a gap of 10ms was used. The third column is the standard error of the quantity in column 2. The fourth column is the synaptic change when post-before-per firing with a gap of 10ms was used. The fifth column is the standard error of the quantity in column 4. A = [ ... 0.1 -0.04 0.05 -0.29 0.08; 10 0.14 0.1 -0.41 0.11; 20 0.29 0.14 -0.34 0.1; 40 0.53 0.11 0.56 0.32; 50 0.56 0.26 0.75 0.19; ];","title":"vlt.neuro.stdp.sjostrom_freq_stdp"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/sjostrom_freq_stdp.m/#vltneurostdpsjostrom_freq_stdp","text":"SJOSTROM_FREQ_STDP - Sjostrom's data on plasticity vs. spike rate and timing A = SJOSTROM_FREQ_STPD Returns data from Sjostrom et al. 2001, showing how the change in synaptic weight depends on frequency and timing. The data represent the synaptic change (in percent (I think)) as a function of 60 repetitions of pairings of pre-synaptic and postsynaptic spikes. The first column of the table indicates the frequency used in the experiment. The second column is the synaptic change when pre-before-post firing with a gap of 10ms was used. The third column is the standard error of the quantity in column 2. The fourth column is the synaptic change when post-before-per firing with a gap of 10ms was used. The fifth column is the standard error of the quantity in column 4. A = [ ... 0.1 -0.04 0.05 -0.29 0.08; 10 0.14 0.1 -0.41 0.11; 20 0.29 0.14 -0.34 0.1; 40 0.53 0.11 0.56 0.32; 50 0.56 0.26 0.75 0.19; ];","title":"vlt.neuro.stdp.sjostrom_freq_stdp"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/sjostrom_spiketrain.m/","text":"vlt.neuro.stdp.sjostrom_spiketrain \u00b6 SJOSTROM_SPIKETRAIN - Generate a pre / post synaptic spiketrain pair from Sjostrom 2001 [ PRE , POST ] = SJOSTROM_STPD ( deltaT , frequency , N ) Generates a list of N pre - and post - synaptic spike times that have spacing deltaT ( that is , the pre - synaptic cell fires deltaT before the post - synaptic cell ). Pre - and postsynaptic spikes are generated at a rate of frequency Hz . The first spike ( whether it is pre - or post - synaptic ) will occur at time 0. Example : % Generate pre- and post-synaptic spiketrains to pair % with 10ms pre-before-post firing at 10Hz, with 60 repetitions [ PRE , POST ] = vlt . neuro . stdp . sjostrom_spiketrain ( 0.010 , 10 , 60 )","title":"vlt.neuro.stdp.sjostrom_spiketrain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/sjostrom_spiketrain.m/#vltneurostdpsjostrom_spiketrain","text":"SJOSTROM_SPIKETRAIN - Generate a pre / post synaptic spiketrain pair from Sjostrom 2001 [ PRE , POST ] = SJOSTROM_STPD ( deltaT , frequency , N ) Generates a list of N pre - and post - synaptic spike times that have spacing deltaT ( that is , the pre - synaptic cell fires deltaT before the post - synaptic cell ). Pre - and postsynaptic spikes are generated at a rate of frequency Hz . The first spike ( whether it is pre - or post - synaptic ) will occur at time 0. Example : % Generate pre- and post-synaptic spiketrains to pair % with 10ms pre-before-post firing at 10Hz, with 60 repetitions [ PRE , POST ] = vlt . neuro . stdp . sjostrom_spiketrain ( 0.010 , 10 , 60 )","title":"vlt.neuro.stdp.sjostrom_spiketrain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_apply.m/","text":"vlt.neuro.stdp.stdp_apply \u00b6 STDP_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . stdp_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the classic SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Song and Abbott 2001 ( Neuron ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = - A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . stdp_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 A_plus | 0.005 ( a 5 % change ) A_minus | 0.00525 ( a 5.25 % change ) T0 | 0","title":"vlt.neuro.stdp.stdp_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_apply.m/#vltneurostdpstdp_apply","text":"STDP_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . stdp_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the classic SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Song and Abbott 2001 ( Neuron ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = - A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . stdp_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 A_plus | 0.005 ( a 5 % change ) A_minus | 0.00525 ( a 5.25 % change ) T0 | 0","title":"vlt.neuro.stdp.stdp_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_eltpi_apply.m/","text":"vlt.neuro.stdp.stdp_eltpi_apply \u00b6 STDP_ELTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . stdp_eltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the early LTPi rule discovered by Maffei and colleages ( unpublished ) . The model is closely related to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( dT / tau_minus ) In addition , this pre / post synaptic activity is boosted by integrating the pre ( tau_y ) or post ( tau_x ) rate activity as described in Bourjaily and Miller 2011. ( describe this better ) The \"boost\" is further modified by a gaussian transformation such that the effect is boosted only at particular firing rates close the center of the gaussian . WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . stdp_eltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.100 ( units are same as spiketimes ) tau_minus | 0.100 tau_x | 0.100 tau_y | 0.100 tau_x2 | 0.025 tau_y2 | 0.025 A2_plus | 0.00001 A2_minus |- 0.00001 A3_plus | 1e-3 A3_minus |- 1e-3 A4_minusgaussmean | 1.4 ( from sum ( exp ( - ( 0 : 1 / 8 : 10 ) / tau_x )) ), 8 Hz peak A4_minusgausswidth | 0.17 ( from diff of 8 Hz and 6 Hz values above ) A4_plusgaussmean | 1.4 A4_plusgausswidth | 0.17 T0 | 0","title":"vlt.neuro.stdp.stdp_eltpi_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_eltpi_apply.m/#vltneurostdpstdp_eltpi_apply","text":"STDP_ELTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . stdp_eltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the early LTPi rule discovered by Maffei and colleages ( unpublished ) . The model is closely related to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( dT / tau_minus ) In addition , this pre / post synaptic activity is boosted by integrating the pre ( tau_y ) or post ( tau_x ) rate activity as described in Bourjaily and Miller 2011. ( describe this better ) The \"boost\" is further modified by a gaussian transformation such that the effect is boosted only at particular firing rates close the center of the gaussian . WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . stdp_eltpi_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.100 ( units are same as spiketimes ) tau_minus | 0.100 tau_x | 0.100 tau_y | 0.100 tau_x2 | 0.025 tau_y2 | 0.025 A2_plus | 0.00001 A2_minus |- 0.00001 A3_plus | 1e-3 A3_minus |- 1e-3 A4_minusgaussmean | 1.4 ( from sum ( exp ( - ( 0 : 1 / 8 : 10 ) / tau_x )) ), 8 Hz peak A4_minusgausswidth | 0.17 ( from diff of 8 Hz and 6 Hz values above ) A4_plusgaussmean | 1.4 A4_plusgausswidth | 0.17 T0 | 0","title":"vlt.neuro.stdp.stdp_eltpi_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_study.m/","text":"vlt.neuro.stdp.stdp_study \u00b6 vlt.neuro.stdp.stdp_study is a script.","title":"vlt.neuro.stdp.stdp_study"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_study.m/#vltneurostdpstdp_study","text":"vlt.neuro.stdp.stdp_study is a script.","title":"vlt.neuro.stdp.stdp_study"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_study_plotspiketrains.m/","text":"vlt.neuro.stdp.stdp_study_plotspiketrains \u00b6 plot spike-timing examples at different correlations, rates","title":"vlt.neuro.stdp.stdp_study_plotspiketrains"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_study_plotspiketrains.m/#vltneurostdpstdp_study_plotspiketrains","text":"plot spike-timing examples at different correlations, rates","title":"vlt.neuro.stdp.stdp_study_plotspiketrains"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_test.m/","text":"vlt.neuro.stdp.stdp_test \u00b6 STDP_TEST Test performance of STPD_APPLY and STDP_TRIPLET_APPLY Performs a test of vlt.neuro.stdp.stdp_apply and vlt.neuro.stdp.stdp_triplet_apply using data from vlt.neuro.stdp.sjostrom_freq_stdp. See also: vlt.neuro.stdp.stdp_apply, STDP_TRIPLET","title":"vlt.neuro.stdp.stdp_test"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_test.m/#vltneurostdpstdp_test","text":"STDP_TEST Test performance of STPD_APPLY and STDP_TRIPLET_APPLY Performs a test of vlt.neuro.stdp.stdp_apply and vlt.neuro.stdp.stdp_triplet_apply using data from vlt.neuro.stdp.sjostrom_freq_stdp. See also: vlt.neuro.stdp.stdp_apply, STDP_TRIPLET","title":"vlt.neuro.stdp.stdp_test"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_triplet_apply.m/","text":"vlt.neuro.stdp.stdp_triplet_apply \u00b6 STDP_TRIPLET_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . stdp_triplet_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . stdp_triplet_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.01668 ( units are same as spiketimes ) tau_minus | 0.0337 tau_x | 0.101 tau_y | 0.125 A2_plus | 5e-5 A2_minus | 7e-3 A3_plus | 6.2e-3 A3_minus | 2.3e-4 T0 | 0","title":"vlt.neuro.stdp.stdp_triplet_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_triplet_apply.m/#vltneurostdpstdp_triplet_apply","text":"STDP_TRIPLET_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = vlt . neuro . stdp . stdp_triplet_apply ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = vlt . neuro . stdp . stdp_triplet_apply ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.01668 ( units are same as spiketimes ) tau_minus | 0.0337 tau_x | 0.101 tau_y | 0.125 A2_plus | 5e-5 A2_minus | 7e-3 A3_plus | 6.2e-3 A3_minus | 2.3e-4 T0 | 0","title":"vlt.neuro.stdp.stdp_triplet_apply"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_tripletvscorrelation.m/","text":"vlt.neuro.stdp.stdp_tripletvscorrelation \u00b6 STDP_TRIPLETVSCORRELATION - Examine dependency of weight change vs. time shift, average firing rate, and spike timing correlation correlation","title":"vlt.neuro.stdp.stdp_tripletvscorrelation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_tripletvscorrelation.m/#vltneurostdpstdp_tripletvscorrelation","text":"STDP_TRIPLETVSCORRELATION - Examine dependency of weight change vs. time shift, average firing rate, and spike timing correlation correlation","title":"vlt.neuro.stdp.stdp_tripletvscorrelation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_tripletvsratecorrelation.m/","text":"vlt.neuro.stdp.stdp_tripletvsratecorrelation \u00b6 vlt.neuro.stdp.stdp_tripletvsratecorrelation is a function. [W, Werr, shifts, freqs, lambda] = vlt.neuro.stdp.stdp_tripletvsratecorrelation","title":"vlt.neuro.stdp.stdp_tripletvsratecorrelation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstdp/stdp_tripletvsratecorrelation.m/#vltneurostdpstdp_tripletvsratecorrelation","text":"vlt.neuro.stdp.stdp_tripletvsratecorrelation is a function. [W, Werr, shifts, freqs, lambda] = vlt.neuro.stdp.stdp_tripletvsratecorrelation","title":"vlt.neuro.stdp.stdp_tripletvsratecorrelation"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/descramble_pseudorandom.m/","text":"vlt.neuro.stimulus.descramble_pseudorandom \u00b6 DESCRAMBLE_PSEUDORANDOM - Descramble responses to pseduorandomly varied stimuli [ RESPONSE_CURVE ] = vlt . neuro . stimulus . descramble_pseudorandom ( STIM_RESPONSES , STIMVALUES ) Descrambles responses to pseudorandomly varied stimuli . Inputs : STIM_RESPONSES : | Responses to individual stimuli ( 1 xN or Nx1 list ) STIMVALUES : | The stimulus value ( or , could be stimulus ID ) | for each of the N presented stimuli ( 1 xN or Nx1 ) | To indicate that a stimulus is a \"blank\" or \"control\" | provide NaN for its value . Output : RESPONSE_CURVE is a structure with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } )","title":"vlt.neuro.stimulus.descramble_pseudorandom"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/descramble_pseudorandom.m/#vltneurostimulusdescramble_pseudorandom","text":"DESCRAMBLE_PSEUDORANDOM - Descramble responses to pseduorandomly varied stimuli [ RESPONSE_CURVE ] = vlt . neuro . stimulus . descramble_pseudorandom ( STIM_RESPONSES , STIMVALUES ) Descrambles responses to pseudorandomly varied stimuli . Inputs : STIM_RESPONSES : | Responses to individual stimuli ( 1 xN or Nx1 list ) STIMVALUES : | The stimulus value ( or , could be stimulus ID ) | for each of the N presented stimuli ( 1 xN or Nx1 ) | To indicate that a stimulus is a \"blank\" or \"control\" | provide NaN for its value . Output : RESPONSE_CURVE is a structure with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } )","title":"vlt.neuro.stimulus.descramble_pseudorandom"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/findcontrolstimulus.m/","text":"vlt.neuro.stimulus.findcontrolstimulus \u00b6 FINDCONTROLSTIMULUS - find the corresponding 'control' stimulus for a set of stimuli CONTROLSTIMNUMBER = vlt . neuro . stimulus . findcontrolstimulus ( STIMID , CONTROLSTIMID ) Given an array of STIMID values that indicate stimulus presentation , and an array of CONTROLSTIMID value ( s ) that indicate the identification number of a 'control' stimulus ( such as a blank screen ), this function finds the control stimulus id that corresponds to each STIMID presentation . If the stimulus presentation is regular ( stimuli are presented from 1. .. numstims in some order , followed by a second presentation of 1. .. numstims in some order , etc , with only a single control stimulus ), then the control stimulus for each stimulus is the control stimulus that corresponds to the same stimulus repetition . If the stimulus presentation is not regular , then the 'closest' control stimulus is taken to be the control stimulus ; if 2 stimuli are equally close , then the first stimulus will be taken as the control stimulus . CONTROLSTIMNUMBER will always be returned as a column vector . See also : vlt . neuro . stimulus . stimids2reps Example : stimid = [ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 ]; cs = vlt . neuro . stimulus . findcontrolstimulus ( stimid , 3 ) ' % cs == [ 3 3 3 6 6 6 9 9 9 12 12 12 15 15 15 ]","title":"vlt.neuro.stimulus.findcontrolstimulus"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/findcontrolstimulus.m/#vltneurostimulusfindcontrolstimulus","text":"FINDCONTROLSTIMULUS - find the corresponding 'control' stimulus for a set of stimuli CONTROLSTIMNUMBER = vlt . neuro . stimulus . findcontrolstimulus ( STIMID , CONTROLSTIMID ) Given an array of STIMID values that indicate stimulus presentation , and an array of CONTROLSTIMID value ( s ) that indicate the identification number of a 'control' stimulus ( such as a blank screen ), this function finds the control stimulus id that corresponds to each STIMID presentation . If the stimulus presentation is regular ( stimuli are presented from 1. .. numstims in some order , followed by a second presentation of 1. .. numstims in some order , etc , with only a single control stimulus ), then the control stimulus for each stimulus is the control stimulus that corresponds to the same stimulus repetition . If the stimulus presentation is not regular , then the 'closest' control stimulus is taken to be the control stimulus ; if 2 stimuli are equally close , then the first stimulus will be taken as the control stimulus . CONTROLSTIMNUMBER will always be returned as a column vector . See also : vlt . neuro . stimulus . stimids2reps Example : stimid = [ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 ]; cs = vlt . neuro . stimulus . findcontrolstimulus ( stimid , 3 ) ' % cs == [ 3 3 3 6 6 6 9 9 9 12 12 12 15 15 15 ]","title":"vlt.neuro.stimulus.findcontrolstimulus"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/generate_test_stimulus_responses.m/","text":"vlt.neuro.stimulus.generate_test_stimulus_responses \u00b6 GENERATE_TEST_STIMULUS_RESPONSES - generate test stimuli and responses to test analysis code [ TIMESERIES , TIMESTAMPS , STIMONSETOFFSETID ] = GENERATE_TEST_STIMULUS_RESPONSE ( ... ) Generates a timeseries ( with timestamps ) that exhibits responses to a stimulus ( described using options below ) . This function accepts additional arguments as name / value pairs that modify the default behavior : Parameter ( default value ) | Description ----------------------------------------------------------------------------------------------- N ( 10 ) | Number of stimuli control_stim ( 1 ) | 0 / 1 Use a control stimulus ? Value will just be 0. reps ( 5 ) | Number of full pseudorandom repetitions userandom ( 1 ) | Display in random order ? f ( 1 ) | Frequency component for stimfunc DC ( 1 ) | DC component for stimfunc AC ( 1 ) | Modulated component for stimfunc stimfunc ( 'sin(pi*(n-1)/N)*... | n is the stimulus number from 1..N, t is the stimulus time ( DC + AC * sin ( 2 * pi * f * t )) ') | ctrlfunc ( '0*t' ) | Function to evaluate for control stimulus randomness ( 0.3 ) | Additive randomness to all stims ( multiplies randn ) dt ( 0.001 ) | Time step ( in seconds ) T ( 2 ) | Stimulus duration in seconds ISI ( 2 ) | Stimulus interstimulus interval PoissonProcess ( 0 ) | Should the function produce a Poisson process ? | If so , TIMESTAMPS will only contain the values when the | process is triggered and TIMESERIES will be a vector of 1 s . PoissonProcessMultiplier ( 10 ) | The value that stimfunc should be multiplied by before checking whether | each dt of the Poisson process is a 'hit' . Example : % continuous signal example figure ; [ timeseries , timestamps , stimonsetoffsetid ] = vlt . neuro . stimulus . generate_test_stimulus_responses ( 'reps' , 10 ); plot ( timestamps , timeseries , 'k-' ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = vlt . neuro . stimulus . stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 ); S = vlt . neuro . stimulus . stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; vlt . plot . myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' ); % spike example [ timeseries , timestamps , stimonsetoffsetid ] = vlt . neuro . stimulus . generate_test_stimulus_responses ( 'PoissonProcess' , 1 , 'reps' , 10 ); vlt . neuro . spiketrains . spiketimes_plot ( timestamps ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = vlt . neuro . stimulus . stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 , 'isspike' , 1 ); S = vlt . neuro . stimulus . stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; vlt . plot . myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' );","title":"vlt.neuro.stimulus.generate_test_stimulus_responses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/generate_test_stimulus_responses.m/#vltneurostimulusgenerate_test_stimulus_responses","text":"GENERATE_TEST_STIMULUS_RESPONSES - generate test stimuli and responses to test analysis code [ TIMESERIES , TIMESTAMPS , STIMONSETOFFSETID ] = GENERATE_TEST_STIMULUS_RESPONSE ( ... ) Generates a timeseries ( with timestamps ) that exhibits responses to a stimulus ( described using options below ) . This function accepts additional arguments as name / value pairs that modify the default behavior : Parameter ( default value ) | Description ----------------------------------------------------------------------------------------------- N ( 10 ) | Number of stimuli control_stim ( 1 ) | 0 / 1 Use a control stimulus ? Value will just be 0. reps ( 5 ) | Number of full pseudorandom repetitions userandom ( 1 ) | Display in random order ? f ( 1 ) | Frequency component for stimfunc DC ( 1 ) | DC component for stimfunc AC ( 1 ) | Modulated component for stimfunc stimfunc ( 'sin(pi*(n-1)/N)*... | n is the stimulus number from 1..N, t is the stimulus time ( DC + AC * sin ( 2 * pi * f * t )) ') | ctrlfunc ( '0*t' ) | Function to evaluate for control stimulus randomness ( 0.3 ) | Additive randomness to all stims ( multiplies randn ) dt ( 0.001 ) | Time step ( in seconds ) T ( 2 ) | Stimulus duration in seconds ISI ( 2 ) | Stimulus interstimulus interval PoissonProcess ( 0 ) | Should the function produce a Poisson process ? | If so , TIMESTAMPS will only contain the values when the | process is triggered and TIMESERIES will be a vector of 1 s . PoissonProcessMultiplier ( 10 ) | The value that stimfunc should be multiplied by before checking whether | each dt of the Poisson process is a 'hit' . Example : % continuous signal example figure ; [ timeseries , timestamps , stimonsetoffsetid ] = vlt . neuro . stimulus . generate_test_stimulus_responses ( 'reps' , 10 ); plot ( timestamps , timeseries , 'k-' ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = vlt . neuro . stimulus . stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 ); S = vlt . neuro . stimulus . stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; vlt . plot . myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' ); % spike example [ timeseries , timestamps , stimonsetoffsetid ] = vlt . neuro . stimulus . generate_test_stimulus_responses ( 'PoissonProcess' , 1 , 'reps' , 10 ); vlt . neuro . spiketrains . spiketimes_plot ( timestamps ); hold on ; vlt . neuro . stimulus . plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = vlt . neuro . stimulus . stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 , 'isspike' , 1 ); S = vlt . neuro . stimulus . stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; vlt . plot . myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' );","title":"vlt.neuro.stimulus.generate_test_stimulus_responses"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/plot_stimulus_timeseries.m/","text":"vlt.neuro.stimulus.plot_stimulus_timeseries \u00b6 PLOT_STIMULUS_TIMESERIES - plot the occurence of a stimulus or stimuli as a thick bar on a time series plot [ H , HTEXT ] = vlt . neuro . stimulus . plot_stimulus_timeseries ( Y , STIMON , STIMOFF , ...) Uses a thick horizontal bar to indicate the presentation time of a set of stimuli . STIMON should be a vector containing all stimulus ON times . STIMOFF should be a vector containing all stimulus OFF times . This function takes additional arguments in the form of name / value pairs : Parameter ( default value ) | Description --------------------------------------------------------------------------- stimid ( [] ) | Stimulus ID numbers for each entry in | STIMON / STIMOFF ; if present , will be plotted | Can also be a cell array of string names linewidth ( 2 ) | Line size linecolor ( [ 0 0 0 ] ) | Line color FontSize ( 12 ) | Font size for text ( if 'stimid' is present ) FontWeight ( 'normal' ) | Font weight FontColor ( [ 0 0 0 ] ) | Text default color textycoord ( Y + 1 ) | Text y coordinate HorizontalAlignment ( 'center' ) | Text horizontal alignment","title":"vlt.neuro.stimulus.plot_stimulus_timeseries"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/plot_stimulus_timeseries.m/#vltneurostimulusplot_stimulus_timeseries","text":"PLOT_STIMULUS_TIMESERIES - plot the occurence of a stimulus or stimuli as a thick bar on a time series plot [ H , HTEXT ] = vlt . neuro . stimulus . plot_stimulus_timeseries ( Y , STIMON , STIMOFF , ...) Uses a thick horizontal bar to indicate the presentation time of a set of stimuli . STIMON should be a vector containing all stimulus ON times . STIMOFF should be a vector containing all stimulus OFF times . This function takes additional arguments in the form of name / value pairs : Parameter ( default value ) | Description --------------------------------------------------------------------------- stimid ( [] ) | Stimulus ID numbers for each entry in | STIMON / STIMOFF ; if present , will be plotted | Can also be a cell array of string names linewidth ( 2 ) | Line size linecolor ( [ 0 0 0 ] ) | Line color FontSize ( 12 ) | Font size for text ( if 'stimid' is present ) FontWeight ( 'normal' ) | Font weight FontColor ( [ 0 0 0 ] ) | Text default color textycoord ( Y + 1 ) | Text y coordinate HorizontalAlignment ( 'center' ) | Text horizontal alignment","title":"vlt.neuro.stimulus.plot_stimulus_timeseries"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimids2reps.m/","text":"vlt.neuro.stimulus.stimids2reps \u00b6 STIMIDS2REPS - Label each stimulus id with the repetition number for a regular stimulus sequence [ REPS , ISREGULAR ] = vlt . neuro . stimulus . stimids2reps ( STIMIDS , NUMSTIMS ) Given a list of STIMIDS that indicate an order of presentation , and given that STIMIDS range from 1. . NUMSTIMS , vlt . neuro . stimulus . stimids2reps returns a label REPS , the same size as STIMIDS , that indicates the repetition number if the stimuli were to be presented in a regular order . Regular order means that all stimuli 1. .. NUMSTIMS are shown in some order once , followed by 1. . NUMSTIMS in some order a second time , etc . ISREGULAR is 1 if the sequence of STIMIDS is in a regular order . The last repetition need not be complete for the stimulus presentation to be regular ( that is , if a sequence ended early it can still be regular ). Example : [ reps , isregular ] = vlt . neuro . stimulus . stimids2reps ([ 1 2 3 1 2 3 ], 3 ) % reps = [1 1 1 2 2 2] % isregular = 1","title":"vlt.neuro.stimulus.stimids2reps"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimids2reps.m/#vltneurostimulusstimids2reps","text":"STIMIDS2REPS - Label each stimulus id with the repetition number for a regular stimulus sequence [ REPS , ISREGULAR ] = vlt . neuro . stimulus . stimids2reps ( STIMIDS , NUMSTIMS ) Given a list of STIMIDS that indicate an order of presentation , and given that STIMIDS range from 1. . NUMSTIMS , vlt . neuro . stimulus . stimids2reps returns a label REPS , the same size as STIMIDS , that indicates the repetition number if the stimuli were to be presented in a regular order . Regular order means that all stimuli 1. .. NUMSTIMS are shown in some order once , followed by 1. . NUMSTIMS in some order a second time , etc . ISREGULAR is 1 if the sequence of STIMIDS is in a regular order . The last repetition need not be complete for the stimulus presentation to be regular ( that is , if a sequence ended early it can still be regular ). Example : [ reps , isregular ] = vlt . neuro . stimulus . stimids2reps ([ 1 2 3 1 2 3 ], 3 ) % reps = [1 1 1 2 2 2] % isregular = 1","title":"vlt.neuro.stimulus.stimids2reps"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimulus_response_scalar.m/","text":"vlt.neuro.stimulus.stimulus_response_scalar \u00b6 STIMULUS_RESPONSE_SUMMARY - compute stimulus responses to stimuli RESPONSE = vlt . neuro . stimulus . stimulus_response_scalar ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) Inputs : TIMESERIES is a 1 xT array of the data values of the thing exhibiting the response , such as a voltage signal , calcium dF / F signal , or spike signals ( 1 s ) . TIMESTAMPS is a 1 xT array of the occurrences of the signals in TIMESERIES STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed ; there will be 1 value of stimid | for each stimulus presentation ( so stimid values may repeat many times ) response | The scalar response to each stimulus response . control_response | The scalar response to the control stimulus for each stimulus controlstimnumber | The stimulus number used as the control stimulus for each stimulus parameters | A structure with the parameters used in the calculation ( described below ) The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . control_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse isspike ( see right ) | 0 / 1 Is the signal a spike process ? If so , timestamps correspond to spike events . spiketrain_dt ( 0.001 ) | Resolution to use for spike train reconstruction if computing Fourier transform","title":"vlt.neuro.stimulus.stimulus_response_scalar"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimulus_response_scalar.m/#vltneurostimulusstimulus_response_scalar","text":"STIMULUS_RESPONSE_SUMMARY - compute stimulus responses to stimuli RESPONSE = vlt . neuro . stimulus . stimulus_response_scalar ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) Inputs : TIMESERIES is a 1 xT array of the data values of the thing exhibiting the response , such as a voltage signal , calcium dF / F signal , or spike signals ( 1 s ) . TIMESTAMPS is a 1 xT array of the occurrences of the signals in TIMESERIES STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed ; there will be 1 value of stimid | for each stimulus presentation ( so stimid values may repeat many times ) response | The scalar response to each stimulus response . control_response | The scalar response to the control stimulus for each stimulus controlstimnumber | The stimulus number used as the control stimulus for each stimulus parameters | A structure with the parameters used in the calculation ( described below ) The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . control_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse isspike ( see right ) | 0 / 1 Is the signal a spike process ? If so , timestamps correspond to spike events . spiketrain_dt ( 0.001 ) | Resolution to use for spike train reconstruction if computing Fourier transform","title":"vlt.neuro.stimulus.stimulus_response_scalar"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimulus_response_stats.m/","text":"vlt.neuro.stimulus.stimulus_response_stats \u00b6 STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data STATS = vlt . neuro . stimulus . stimulus_response_stats ( RESPONSES , ... ) RESPONSES is a structure returned from vlt . neuro . stimulus . stimulus_response_scalar that has fields Field name : | Description -------------------------------------------------------------------------------- stimid | Stimulus id number for each stimulus presentation response | Computed scalar response for each stimulus presentation control_response | Computed scalar response to a control stimulus ( could be empty ) controlstimnumber | The stimulus number that was used as the control stimulus for | each stimulus presentation parameters | A structure of parameters used in the computation | ( see HELP vlt . neuro . stimulus . stimulus_response_scalar ) Computes a structure STATS with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] vlt . stats . stderr | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] ind ividual | A cell array with the ind ividual responses to each stimulus | ind ividual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) control_mean | The mean response of TIMESERIES to the control stimulus , if one is | specified with RESPONSES . parameters . control_stimulus control_stddev | The standard deviation of the response of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_stderr | The standard error of the mean of the responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_individual | The ind ividual responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ control_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response := Response - PrestimResponse | 2 ) Fractional change Response := (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response := Response ./ PreStimResponse See also : vlt . data . namevaluepair","title":"vlt.neuro.stimulus.stimulus_response_stats"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimulus_response_stats.m/#vltneurostimulusstimulus_response_stats","text":"STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data STATS = vlt . neuro . stimulus . stimulus_response_stats ( RESPONSES , ... ) RESPONSES is a structure returned from vlt . neuro . stimulus . stimulus_response_scalar that has fields Field name : | Description -------------------------------------------------------------------------------- stimid | Stimulus id number for each stimulus presentation response | Computed scalar response for each stimulus presentation control_response | Computed scalar response to a control stimulus ( could be empty ) controlstimnumber | The stimulus number that was used as the control stimulus for | each stimulus presentation parameters | A structure of parameters used in the computation | ( see HELP vlt . neuro . stimulus . stimulus_response_scalar ) Computes a structure STATS with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] vlt . stats . stderr | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] ind ividual | A cell array with the ind ividual responses to each stimulus | ind ividual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) control_mean | The mean response of TIMESERIES to the control stimulus , if one is | specified with RESPONSES . parameters . control_stimulus control_stddev | The standard deviation of the response of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_stderr | The standard error of the mean of the responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_individual | The ind ividual responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ control_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response := Response - PrestimResponse | 2 ) Fractional change Response := (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response := Response ./ PreStimResponse See also : vlt . data . namevaluepair","title":"vlt.neuro.stimulus.stimulus_response_stats"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimulus_response_summary.m/","text":"vlt.neuro.stimulus.stimulus_response_summary \u00b6 STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data RESPONSE = vlt . neuro . stimulus . stimulus_response_summary ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean_responses | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev_responses | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stderr_responses | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] individual_responses | A cell array with the individual responses to each stimulus | individual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) blank_mean | The mean response of TIMESERIES to the blank stimulus , if one is | specified with 'blank_stimid' blank_stddev | The standard deviation of the response of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_stderr | The standard error of the mean of the responses of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_individual_responses | The individual responses of TIMESERIES to the blank stimulus , if one | is specified with 'blank_stimid' The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . blank_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) | The 'blank' stimulus is not counted among the stimuli in 'stimid' prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse","title":"vlt.neuro.stimulus.stimulus_response_summary"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/stimulus_response_summary.m/#vltneurostimulusstimulus_response_summary","text":"STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data RESPONSE = vlt . neuro . stimulus . stimulus_response_summary ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean_responses | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev_responses | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stderr_responses | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] individual_responses | A cell array with the individual responses to each stimulus | individual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) blank_mean | The mean response of TIMESERIES to the blank stimulus , if one is | specified with 'blank_stimid' blank_stddev | The standard deviation of the response of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_stderr | The standard error of the mean of the responses of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_individual_responses | The individual responses of TIMESERIES to the blank stimulus , if one | is specified with 'blank_stimid' The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . blank_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) | The 'blank' stimulus is not counted among the stimuli in 'stimid' prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse","title":"vlt.neuro.stimulus.stimulus_response_summary"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/trimrespcurve.m/","text":"vlt.neuro.stimulus.trimrespcurve \u00b6 TRIMRESPCURVE - Trim a 4 xN response curve to remove NaN stimulus values CURVE = vlt . neuro . stimulus . trimrespcurve ( MYCURVE ) Assumes MYCURVE is a 4 xN response curve where the first row MYCURVE ( 1 ,: ) has the stimulus values . If any of these entries are NaN , then those column is removed from MYCURVE . The result is returned in CURVE . One can use this function to remove the response of the blank stimulus from a response curve .","title":"vlt.neuro.stimulus.trimrespcurve"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bstimulus/trimrespcurve.m/#vltneurostimulustrimrespcurve","text":"TRIMRESPCURVE - Trim a 4 xN response curve to remove NaN stimulus values CURVE = vlt . neuro . stimulus . trimrespcurve ( MYCURVE ) Assumes MYCURVE is a 4 xN response curve where the first row MYCURVE ( 1 ,: ) has the stimulus values . If any of these entries are NaN , then those column is removed from MYCURVE . The result is returned in CURVE . One can use this function to remove the response of the blank stimulus from a response curve .","title":"vlt.neuro.stimulus.trimrespcurve"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/curved_monitor_view.m/","text":"vlt.neuro.vision.curved_monitor_view \u00b6 CURVED_MONITOR_VIEW - Given the dimensions of a curved monitor, calculate the viewing angle of the animal SYSTEM = vlt.neuro.vision.curved_monitor_view(MONITOR_DIAG, ASPECTRATIO, RADIUS, VIEWING_DISTANCE) MONITOR_DIAG should be the diagonal monitor size (usually what is specified, multiply by 2.54 to get cm from inches). ASPECTRATIO should be aspect ratio of monitor (width in numerator) RADIUS should be the curvature of the monitor (e.g., 180 cm). VIEWING_DISTANCE should be the desired animal viewing distance. All angles are returned in degrees. SYSTEM is a structure with the following entries: Fieldname: | Description: ------------------------------------------------------ theta | Viewing angle of hemifield | (so 2*theta is whole view) monitor_diag | Monitor diag (from input) monitor_height | Monitor height monitor_width | Monitor width (along curve) radius | Radius of curvature from input viewing_distance | Viewing distance from input alpha | Angle from center of monitor to phi | Angle from center of monitor to line to edge of monitor | monitor edge edge when monitor is | viewed center-on at distance radius C | Distance between straight view of animal | and edge of monitor P | Distance between monitor and location that | makes a right angle with the edge of the monitor A | Distance between edge of monitor and point P","title":"vlt.neuro.vision.curved_monitor_view"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/curved_monitor_view.m/#vltneurovisioncurved_monitor_view","text":"CURVED_MONITOR_VIEW - Given the dimensions of a curved monitor, calculate the viewing angle of the animal SYSTEM = vlt.neuro.vision.curved_monitor_view(MONITOR_DIAG, ASPECTRATIO, RADIUS, VIEWING_DISTANCE) MONITOR_DIAG should be the diagonal monitor size (usually what is specified, multiply by 2.54 to get cm from inches). ASPECTRATIO should be aspect ratio of monitor (width in numerator) RADIUS should be the curvature of the monitor (e.g., 180 cm). VIEWING_DISTANCE should be the desired animal viewing distance. All angles are returned in degrees. SYSTEM is a structure with the following entries: Fieldname: | Description: ------------------------------------------------------ theta | Viewing angle of hemifield | (so 2*theta is whole view) monitor_diag | Monitor diag (from input) monitor_height | Monitor height monitor_width | Monitor width (along curve) radius | Radius of curvature from input viewing_distance | Viewing distance from input alpha | Angle from center of monitor to phi | Angle from center of monitor to line to edge of monitor | monitor edge edge when monitor is | viewed center-on at distance radius C | Distance between straight view of animal | and edge of monitor P | Distance between monitor and location that | makes a right angle with the edge of the monitor A | Distance between edge of monitor and point P","title":"vlt.neuro.vision.curved_monitor_view"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/make3dbar.m/","text":"vlt.neuro.vision.make3dbar \u00b6 vlt.neuro.vision.make3dbar is a function.","title":"vlt.neuro.vision.make3dbar"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/make3dbar.m/#vltneurovisionmake3dbar","text":"vlt.neuro.vision.make3dbar is a function.","title":"vlt.neuro.vision.make3dbar"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/make3dwords2.m/","text":"vlt.neuro.vision.make3dwords2 \u00b6 vlt.neuro.vision.make3dwords2 is a script.","title":"vlt.neuro.vision.make3dwords2"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/make3dwords2.m/#vltneurovisionmake3dwords2","text":"vlt.neuro.vision.make3dwords2 is a script.","title":"vlt.neuro.vision.make3dwords2"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/simp_sat_cgain.m/","text":"vlt.neuro.vision.simp_sat_cgain \u00b6 vlt . neuro . vision . simp_sat_cgain - Simple saturating contrast gain G = vlt . neuro . vision . simp_sat_cgain ( C , Cs ) Returns a simple contrast gain . If contrast C is less than Cs , then G = 1 . Otherwise , gain is 1 - ( C - Cs ) . The gain falls off monotonically with slope 1 after the point Cs .","title":"vlt.neuro.vision.simp_sat_cgain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/simp_sat_cgain.m/#vltneurovisionsimp_sat_cgain","text":"vlt . neuro . vision . simp_sat_cgain - Simple saturating contrast gain G = vlt . neuro . vision . simp_sat_cgain ( C , Cs ) Returns a simple contrast gain . If contrast C is less than Cs , then G = 1 . Otherwise , gain is 1 - ( C - Cs ) . The gain falls off monotonically with slope 1 after the point Cs .","title":"vlt.neuro.vision.simp_sat_cgain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/squirrelcolor.m/","text":"vlt.neuro.vision.squirrelcolor \u00b6 vlt.neuro.vision.squirrelcolor is a script.","title":"vlt.neuro.vision.squirrelcolor"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/squirrelcolor.m/#vltneurovisionsquirrelcolor","text":"vlt.neuro.vision.squirrelcolor is a script.","title":"vlt.neuro.vision.squirrelcolor"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/stereopoint.m/","text":"vlt.neuro.vision.stereopoint \u00b6 vlt . neuro . vision . stereopoint - Compute shifts for a point in space for making a stereograph [ LEFTOFFSET , RIGHTOFFSET ] = vlt . neuro . vision . stereopoint ( VIEWDIST , EYEDIST , XOFFSET , DOFFSET ) Computes projections onto the two eyes for a point in 3 D space . VIEWDIST is the distance to the focal point ( or the screen ) . EYEDIST is the distance between the eyes ( same units as VIEWDIST ) . XOFFSET is the X offset between the focal point and the point in 3 space for which to compute shifts . Positive values are to the right , use same units as VIEWDIST . DOFFSET is the depth offset between the focal point and the point for which to compute shifts .","title":"vlt.neuro.vision.stereopoint"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/stereopoint.m/#vltneurovisionstereopoint","text":"vlt . neuro . vision . stereopoint - Compute shifts for a point in space for making a stereograph [ LEFTOFFSET , RIGHTOFFSET ] = vlt . neuro . vision . stereopoint ( VIEWDIST , EYEDIST , XOFFSET , DOFFSET ) Computes projections onto the two eyes for a point in 3 D space . VIEWDIST is the distance to the focal point ( or the screen ) . EYEDIST is the distance between the eyes ( same units as VIEWDIST ) . XOFFSET is the X offset between the focal point and the point in 3 space for which to compute shifts . Positive values are to the right , use same units as VIEWDIST . DOFFSET is the depth offset between the focal point and the point for which to compute shifts .","title":"vlt.neuro.vision.stereopoint"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/visual_stim_row_correlator.m/","text":"vlt.neuro.vision.visual_stim_row_correlator \u00b6 VISUAL_STIM_ROW_CORRELATOR - Compute the next visual stimulus frame for a given correlator NEXT_FRAME = vlt . neuro . vision . visual_stim_row_correlator ( FRAME_DATA , CORRELATOR , SIGN ) Given a frame of visual stimulus data that consists of -1 's and 1s (FRAME_DATA), then a new frame (NEXT_FRAME) of -1' s and 1s is created such that the correlation between the new frame and the old frame is as described in CORRELATOR ( see below ). The algorithm operates on the rows of the stimulus , so that if the stimulus frame has many rows , each row will be operated on independently . CORRELATOR : A number that indicates which correlator to use 0 : 2-point leftward correlator 1 : 2-point rightward correlator 2 : 3-point converging leftward correlator 3 : 3-point converging rightward correlator 4 : 3-point diverging leftward correlator 5 : 3-point diverging rightward correlator SIGN : the sign of the correlator ; should the product be -1 or 1 ? For a graphical depiction of these correlators , see Clark , Fitzgerald , and Ales et al ., Nature Neuroscience 2014 ( in particular , Supplementary Figure 4 ) Example : Compute 10 frames for a single row , using a leftward 2-point correlator ( sign 1 ) correlator = 0 ; corelator_sign = 1 ; row_data = [ 1 1 - 1 1 - 1 - 1 1 1 ] ; % made up data for i = 1 : 10 , row_data ( i + 1 ,:) = vlt . neuro . vision . visual_stim_row_correlator ( row_data ( i ,:), correlator , correlator_sign ); end ; row_data ,","title":"vlt.neuro.vision.visual_stim_row_correlator"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/visual_stim_row_correlator.m/#vltneurovisionvisual_stim_row_correlator","text":"VISUAL_STIM_ROW_CORRELATOR - Compute the next visual stimulus frame for a given correlator NEXT_FRAME = vlt . neuro . vision . visual_stim_row_correlator ( FRAME_DATA , CORRELATOR , SIGN ) Given a frame of visual stimulus data that consists of -1 's and 1s (FRAME_DATA), then a new frame (NEXT_FRAME) of -1' s and 1s is created such that the correlation between the new frame and the old frame is as described in CORRELATOR ( see below ). The algorithm operates on the rows of the stimulus , so that if the stimulus frame has many rows , each row will be operated on independently . CORRELATOR : A number that indicates which correlator to use 0 : 2-point leftward correlator 1 : 2-point rightward correlator 2 : 3-point converging leftward correlator 3 : 3-point converging rightward correlator 4 : 3-point diverging leftward correlator 5 : 3-point diverging rightward correlator SIGN : the sign of the correlator ; should the product be -1 or 1 ? For a graphical depiction of these correlators , see Clark , Fitzgerald , and Ales et al ., Nature Neuroscience 2014 ( in particular , Supplementary Figure 4 ) Example : Compute 10 frames for a single row , using a leftward 2-point correlator ( sign 1 ) correlator = 0 ; corelator_sign = 1 ; row_data = [ 1 1 - 1 1 - 1 - 1 1 1 ] ; % made up data for i = 1 : 10 , row_data ( i + 1 ,:) = vlt . neuro . vision . visual_stim_row_correlator ( row_data ( i ,:), correlator , correlator_sign ); end ; row_data ,","title":"vlt.neuro.vision.visual_stim_row_correlator"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/naka_rushton_fit.m/","text":"vlt.neuro.vision.contrast.naka_rushton_fit \u00b6 naka_rushton Naka-Rushton fit ( for contrast curves ) [ RM , C50 ] = vlt . neuro . vision . contrast . naka_rushton_fit ( C , DATA ) Finds the best fit to the Naka-Rushton function R ( c ) = Rm * c /( C50 + c ) where C is contrast ( 0-1 ), Rm is the maximum response , and C50 is the half-maximum contrast . [ RM , C50 , N ] = vlt . neuro . vision . contrast . naka_rushton ( C , DATA ) Finds the best fit to the Naka-Rushton function R ( c ) = Rm * c ^ n /( C50 + c ^ n ) where C is contrast ( 0-1 ), Rm is the maximum response , and C50 is the half-maximum contrast . [ RM , C50 , N , S ] = vlt . neuro . vision . contrast . naka_rushton ( C , DATA ) Finds the best fit to the Naka-Rushton function R ( c ) = Rm * c ^ n /( C50 ^( s * n )+ c ^( s * n )) where C is contrast ( 0-1 ), Rm is the maximum response , and C50 is the half-maximum contrast , and s is a saturation factor . References : Naka_Rushton fit was first described in Naka , Rushton , J . Physiol . London 185 : 536-555 , 1966 and used to fit contrast data of cortical cells in Albrecht and Hamilton , J . Neurophys . 48 : 217-237 , 1982 The saturation form was described in Peirce 2007 J Vision This function also takes additional arguments in the form of name-value pairs : | ----------------------------------------------------------------- | | Parameter ( default ) | Description | | --------------------------- | ------------------------------------- | | init_rmax ( max of r ) | Initial rmax search point | | min_rmax ( 0 ) | Minimum rmax value | | max_rmax ( Inf ) | Maximum rmax value | | initc50 ( contrast value | Initial C50 search point | | with response closest | | | to the empirical max / 2 )| | | min_c50 ( low / 2 ) | Minimum C50 value ( low is the lowest | | | contrast tested | | max_c50 ( 1 ) | Maximum value of C50 | | init_N ( 1 ) | Initial value for N | | min_N ( 0 . 1 ) | Minimum value of N | | max_N ( 5 ) | Maximum value of N | | init_S ( 1 ) | Initial value for S | | min_S ( 1 ) | Minumum value of S | | max_S ( 2 . 5 ) | Maximum value of S | ------------------------------------------------------------------- Example : c = [ 0 : 0.05 : 1 ] ; rmax_in = 10 ; c50_in = 0 . 45 ; N_in = 1 . 5 ; s_in = 1 ; r = rmax_in * vlt . fit . naka_rushton_func ( c , c50_in , N_in , s_in ); [ rmax , c50 , N , s ] = vlt . neuro . vision . contrast . naka_rushton_fit ( c , r ); r_fit = rmax * vlt . fit . naka_rushton_func ( c , c50 , N , s ); figure ; plot ( c , r , '-o' ); hold on ; plot ( c , r_fit , 'r-x' ); xlabel ( 'Contrast' ); ylabel ( 'Response' ); box off ;","title":"vlt.neuro.vision.contrast.naka_rushton_fit"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/naka_rushton_fit.m/#vltneurovisioncontrastnaka_rushton_fit","text":"naka_rushton Naka-Rushton fit ( for contrast curves ) [ RM , C50 ] = vlt . neuro . vision . contrast . naka_rushton_fit ( C , DATA ) Finds the best fit to the Naka-Rushton function R ( c ) = Rm * c /( C50 + c ) where C is contrast ( 0-1 ), Rm is the maximum response , and C50 is the half-maximum contrast . [ RM , C50 , N ] = vlt . neuro . vision . contrast . naka_rushton ( C , DATA ) Finds the best fit to the Naka-Rushton function R ( c ) = Rm * c ^ n /( C50 + c ^ n ) where C is contrast ( 0-1 ), Rm is the maximum response , and C50 is the half-maximum contrast . [ RM , C50 , N , S ] = vlt . neuro . vision . contrast . naka_rushton ( C , DATA ) Finds the best fit to the Naka-Rushton function R ( c ) = Rm * c ^ n /( C50 ^( s * n )+ c ^( s * n )) where C is contrast ( 0-1 ), Rm is the maximum response , and C50 is the half-maximum contrast , and s is a saturation factor . References : Naka_Rushton fit was first described in Naka , Rushton , J . Physiol . London 185 : 536-555 , 1966 and used to fit contrast data of cortical cells in Albrecht and Hamilton , J . Neurophys . 48 : 217-237 , 1982 The saturation form was described in Peirce 2007 J Vision This function also takes additional arguments in the form of name-value pairs : | ----------------------------------------------------------------- | | Parameter ( default ) | Description | | --------------------------- | ------------------------------------- | | init_rmax ( max of r ) | Initial rmax search point | | min_rmax ( 0 ) | Minimum rmax value | | max_rmax ( Inf ) | Maximum rmax value | | initc50 ( contrast value | Initial C50 search point | | with response closest | | | to the empirical max / 2 )| | | min_c50 ( low / 2 ) | Minimum C50 value ( low is the lowest | | | contrast tested | | max_c50 ( 1 ) | Maximum value of C50 | | init_N ( 1 ) | Initial value for N | | min_N ( 0 . 1 ) | Minimum value of N | | max_N ( 5 ) | Maximum value of N | | init_S ( 1 ) | Initial value for S | | min_S ( 1 ) | Minumum value of S | | max_S ( 2 . 5 ) | Maximum value of S | ------------------------------------------------------------------- Example : c = [ 0 : 0.05 : 1 ] ; rmax_in = 10 ; c50_in = 0 . 45 ; N_in = 1 . 5 ; s_in = 1 ; r = rmax_in * vlt . fit . naka_rushton_func ( c , c50_in , N_in , s_in ); [ rmax , c50 , N , s ] = vlt . neuro . vision . contrast . naka_rushton_fit ( c , r ); r_fit = rmax * vlt . fit . naka_rushton_func ( c , c50 , N , s ); figure ; plot ( c , r , '-o' ); hold on ; plot ( c , r_fit , 'r-x' ); xlabel ( 'Contrast' ); ylabel ( 'Response' ); box off ;","title":"vlt.neuro.vision.contrast.naka_rushton_fit"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/c50interpolated.m/","text":"vlt.neuro.vision.contrast.indexes.c50interpolated \u00b6 C50INTERPOLATED - find the value of C50 through interpolation C50I = C50INTERPOLATED ( CONTRAST , RESPONSES ) Given RESPONSES ( N - point vector ) and the corresponding stimulus CONTRAST values ( N - point vector ), return the contrast that gives the half maximum value via linear interpolation . The units of CONTRAST should be between 0 and 1. If values larger than 1 are given , then it is assumed that CONTRAST is being given in units of percent , and CONTRAST is divided by 100. C50I will then be returned in units of percent . Note that this interpolated C50 does not equal the C50 of a Naka - Rushton equation . Example : c = 0 : 0.01 : 1 ; c50 = 0.2 ; r = 10 * vlt . fit . naka_rushton_func ( c , c50 ); figure ; plot ( c , r , ' - o ' ); xlabel ( ' Contrast ' ); ylabel ( ' Response ' ); box off ; c50i = vlt . neuro . vision . contrast . indexes . c50interpolated ( c , r ); hold on ; A = axis ; plot ([ c50i c50i ],[ A ( 3 ) A ( 4 )], ' k -- ' );","title":"vlt.neuro.vision.contrast.indexes.c50interpolated"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/c50interpolated.m/#vltneurovisioncontrastindexesc50interpolated","text":"C50INTERPOLATED - find the value of C50 through interpolation C50I = C50INTERPOLATED ( CONTRAST , RESPONSES ) Given RESPONSES ( N - point vector ) and the corresponding stimulus CONTRAST values ( N - point vector ), return the contrast that gives the half maximum value via linear interpolation . The units of CONTRAST should be between 0 and 1. If values larger than 1 are given , then it is assumed that CONTRAST is being given in units of percent , and CONTRAST is divided by 100. C50I will then be returned in units of percent . Note that this interpolated C50 does not equal the C50 of a Naka - Rushton equation . Example : c = 0 : 0.01 : 1 ; c50 = 0.2 ; r = 10 * vlt . fit . naka_rushton_func ( c , c50 ); figure ; plot ( c , r , ' - o ' ); xlabel ( ' Contrast ' ); ylabel ( ' Response ' ); box off ; c50i = vlt . neuro . vision . contrast . indexes . c50interpolated ( c , r ); hold on ; A = axis ; plot ([ c50i c50i ],[ A ( 3 ) A ( 4 )], ' k -- ' );","title":"vlt.neuro.vision.contrast.indexes.c50interpolated"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2c50.m/","text":"vlt.neuro.vision.contrast.indexes.contrastfit2c50 \u00b6 CONTRASTFIT2C50- Compute Half maximum C50 = vlt.neuro.vision.contrast.indexes.contrastfit2c50(CONTRAST, RESPONSE) Given contrast in 1 percent steps in CONTRAST, this function computes the half maximum value that is defined as: value of C such that R(C50) = 0.5 * max(R) Units of contrast can be percent or from 0 to 1. See Heimel et al. 2005 (Journal of Neurophysiology)","title":"vlt.neuro.vision.contrast.indexes.contrastfit2c50"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2c50.m/#vltneurovisioncontrastindexescontrastfit2c50","text":"CONTRASTFIT2C50- Compute Half maximum C50 = vlt.neuro.vision.contrast.indexes.contrastfit2c50(CONTRAST, RESPONSE) Given contrast in 1 percent steps in CONTRAST, this function computes the half maximum value that is defined as: value of C such that R(C50) = 0.5 * max(R) Units of contrast can be percent or from 0 to 1. See Heimel et al. 2005 (Journal of Neurophysiology)","title":"vlt.neuro.vision.contrast.indexes.contrastfit2c50"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2relativemaximumgain.m/","text":"vlt.neuro.vision.contrast.indexes.contrastfit2relativemaximumgain \u00b6 CONTRASTFIT2RELATIVEMAXIMUMGAIN - Compute relative maximum gain [ RMG , CVALUE ] = vlt . neuro . vision . contrast . indexes . contrastfit2relativemaximumgain ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the relative maximum gain that is defined as : max ( dR / dC ) Units of contrast can be percent or from 0 to 1 . If they are percent these units will be converted to 0 - 1 , so that the units of dC are in fractions . CVALUE is the contrast value where the maximum occurs . See Heimel et al . 2005 ( J Neurophysiology )","title":"vlt.neuro.vision.contrast.indexes.contrastfit2relativemaximumgain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2relativemaximumgain.m/#vltneurovisioncontrastindexescontrastfit2relativemaximumgain","text":"CONTRASTFIT2RELATIVEMAXIMUMGAIN - Compute relative maximum gain [ RMG , CVALUE ] = vlt . neuro . vision . contrast . indexes . contrastfit2relativemaximumgain ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the relative maximum gain that is defined as : max ( dR / dC ) Units of contrast can be percent or from 0 to 1 . If they are percent these units will be converted to 0 - 1 , so that the units of dC are in fractions . CVALUE is the contrast value where the maximum occurs . See Heimel et al . 2005 ( J Neurophysiology )","title":"vlt.neuro.vision.contrast.indexes.contrastfit2relativemaximumgain"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2saturationindex.m/","text":"vlt.neuro.vision.contrast.indexes.contrastfit2saturationindex \u00b6 CONTRASTFIT2SATURATIONINDEX - Compute Saturation Index SI = vlt . neuro . vision . contrast . indexes . contrastfit2saturationindex ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the \"saturation index\" that is defined as : SI = ( Rmax - R ( 100 )) / ( Rmax - R ( 0 )) This is the amount of \"super saturation\" at 100 % contrast . Units of contrast can be percent or from 0 to 1 . If Rmax == R ( 0 ) , then the measure is undefined and the index that is returned is NaN . This index is called MI in Peirce 2007 ( JoV )","title":"vlt.neuro.vision.contrast.indexes.contrastfit2saturationindex"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2saturationindex.m/#vltneurovisioncontrastindexescontrastfit2saturationindex","text":"CONTRASTFIT2SATURATIONINDEX - Compute Saturation Index SI = vlt . neuro . vision . contrast . indexes . contrastfit2saturationindex ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the \"saturation index\" that is defined as : SI = ( Rmax - R ( 100 )) / ( Rmax - R ( 0 )) This is the amount of \"super saturation\" at 100 % contrast . Units of contrast can be percent or from 0 to 1 . If Rmax == R ( 0 ) , then the measure is undefined and the index that is returned is NaN . This index is called MI in Peirce 2007 ( JoV )","title":"vlt.neuro.vision.contrast.indexes.contrastfit2saturationindex"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2sensitivity.m/","text":"vlt.neuro.vision.contrast.indexes.contrastfit2sensitivity \u00b6 CONTRASTFIT2SENSITIVITY - Compute contrast sensitivity [ S , C_CRITERON ] = vlt . neuro . vision . contrast . indexes . contrastfit2sensitivity (... NKPARAMETERS , CRITERION ) Given Naka - Rushton fit parameters ( either [ Rm C50 ], [ Rm C50 N ], or [ Rm C50 N S ]) computes the first contrast C_CRITERION where the response exceeds CRITERION . The sensitivity S = 1 / C_CRITERION is also computed . If there is no response that exceeds the criterion , then the sensitivity S is 0 and the C_CRITERION is Inf . Example : c = 0 : 0.1 : 1 ; rm = 10 ; c50 = 0.3 ; r = rm * vlt . fit . naka_rushton_func ( c , c50 ); figure ; plot ( c , r , ' b - ' ); xlabel ( ' Contrast ' ); ylabel ( ' Response ' ); box off ; [ s , c_criterion ] = vlt . neuro . vision . contrast . indexes . contrastfit2sensitivity ([ rm c50 ], 2 ); hold on A = axis ; plot ( c_criterion * [ 1 1 ], A ([ 3 4 ]), ' k - ' ); title ([ ' Contrast sensitivity is ' num2str ( s ) '.' ]);","title":"vlt.neuro.vision.contrast.indexes.contrastfit2sensitivity"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/contrastfit2sensitivity.m/#vltneurovisioncontrastindexescontrastfit2sensitivity","text":"CONTRASTFIT2SENSITIVITY - Compute contrast sensitivity [ S , C_CRITERON ] = vlt . neuro . vision . contrast . indexes . contrastfit2sensitivity (... NKPARAMETERS , CRITERION ) Given Naka - Rushton fit parameters ( either [ Rm C50 ], [ Rm C50 N ], or [ Rm C50 N S ]) computes the first contrast C_CRITERION where the response exceeds CRITERION . The sensitivity S = 1 / C_CRITERION is also computed . If there is no response that exceeds the criterion , then the sensitivity S is 0 and the C_CRITERION is Inf . Example : c = 0 : 0.1 : 1 ; rm = 10 ; c50 = 0.3 ; r = rm * vlt . fit . naka_rushton_func ( c , c50 ); figure ; plot ( c , r , ' b - ' ); xlabel ( ' Contrast ' ); ylabel ( ' Response ' ); box off ; [ s , c_criterion ] = vlt . neuro . vision . contrast . indexes . contrastfit2sensitivity ([ rm c50 ], 2 ); hold on A = axis ; plot ( c_criterion * [ 1 1 ], A ([ 3 4 ]), ' k - ' ); title ([ ' Contrast sensitivity is ' num2str ( s ) '.' ]);","title":"vlt.neuro.vision.contrast.indexes.contrastfit2sensitivity"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/fitindexes.m/","text":"vlt.neuro.vision.contrast.indexes.fitindexes \u00b6 FITINDEXES - compute contrast fit index values from a response structure FI = vlt . neuro . vision . contrast . index . fitindexes ( RESPSTRUCT , FITTERMS ) RESPSTRUCT is a structure of response properties with fields : | ------------------------------------------------------------------ | | Field | Description | | ------------------------------------------------------------------ | | curve | 4xnumber of contrasts tested , | | | curve ( 1 ,:) is contrasts tested | | | curve ( 2 ,:) is mean response at each contrast | | | curve ( 3 ,:) is standard deviation at each contrast | | | curve ( 4 ,:) is standard error at each contrast | | ind | cell list of individual trial responses for each | | | contrast | | blankresp | 1x3 vector of mean control response , mean control | | | response standard deviation , and mean control | | | response standard error . | ------------------------------------------------------------------ | FITTERMS is the number of terms to include in the Naka-Rushton Fit ( R = RM * C .^ N /( C .^( N * S )+ c50 ^.( N * S )) | ------------------------------------------------------------------ | | FITTERMS | Description | | ------------------------------------------------------------------ | | 2 | Uses only RM and C50 ( N and S are 1 ) | | 3 | Uses only RM , C50 , and N ( S is 1 ) | | 4 | Uses RM , C50 , N , and S | | ------------------------------------------------------------------ | Returns a structure FI with fields : | ------------------------------------------------------------------ | | Field | Description | | ------------------------------------------------------------------ | | fit_parameters | [ RM C50 N S ] Naka Rushton fit params | | | N and S are left off if FITTERMS < 3 , 4 | | fit | 2x101 matrix ; first row is contrasts | | | 0 : 0 . 01 : 1 ; second row is fit of | | | responses for those contrasts | | r2 | Fit r ^ 2 value | | empirical_C50 | Empirical fit contrast that gives 50 % of | | | response to 100 % contrast ( differs | | | from C50 of the fit b / c max response | | | is not usually at 100 % contrast ) | | relative_max_gain | Relative maximum gain ( Heimel et al . | | | 2005 ) | | saturation_index | Saturation index ( only meaningful for | | | fits including S but provided always ) | | sensitivity | 1x10 vector of contrast sensitivity with | | | criteria of [ 1 ... 10 ] standard | | | deviations of the control response . | | | If the standard deviation of the | | | control response is 0 , then it is | | | recalculated assuming the response is | | | 1 unit on one trial . | | ------------------------------------------------------------------ |","title":"vlt.neuro.vision.contrast.indexes.fitindexes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bcontrast/%2Bindexes/fitindexes.m/#vltneurovisioncontrastindexesfitindexes","text":"FITINDEXES - compute contrast fit index values from a response structure FI = vlt . neuro . vision . contrast . index . fitindexes ( RESPSTRUCT , FITTERMS ) RESPSTRUCT is a structure of response properties with fields : | ------------------------------------------------------------------ | | Field | Description | | ------------------------------------------------------------------ | | curve | 4xnumber of contrasts tested , | | | curve ( 1 ,:) is contrasts tested | | | curve ( 2 ,:) is mean response at each contrast | | | curve ( 3 ,:) is standard deviation at each contrast | | | curve ( 4 ,:) is standard error at each contrast | | ind | cell list of individual trial responses for each | | | contrast | | blankresp | 1x3 vector of mean control response , mean control | | | response standard deviation , and mean control | | | response standard error . | ------------------------------------------------------------------ | FITTERMS is the number of terms to include in the Naka-Rushton Fit ( R = RM * C .^ N /( C .^( N * S )+ c50 ^.( N * S )) | ------------------------------------------------------------------ | | FITTERMS | Description | | ------------------------------------------------------------------ | | 2 | Uses only RM and C50 ( N and S are 1 ) | | 3 | Uses only RM , C50 , and N ( S is 1 ) | | 4 | Uses RM , C50 , N , and S | | ------------------------------------------------------------------ | Returns a structure FI with fields : | ------------------------------------------------------------------ | | Field | Description | | ------------------------------------------------------------------ | | fit_parameters | [ RM C50 N S ] Naka Rushton fit params | | | N and S are left off if FITTERMS < 3 , 4 | | fit | 2x101 matrix ; first row is contrasts | | | 0 : 0 . 01 : 1 ; second row is fit of | | | responses for those contrasts | | r2 | Fit r ^ 2 value | | empirical_C50 | Empirical fit contrast that gives 50 % of | | | response to 100 % contrast ( differs | | | from C50 of the fit b / c max response | | | is not usually at 100 % contrast ) | | relative_max_gain | Relative maximum gain ( Heimel et al . | | | 2005 ) | | saturation_index | Saturation index ( only meaningful for | | | fits including S but provided always ) | | sensitivity | 1x10 vector of contrast sensitivity with | | | criteria of [ 1 ... 10 ] standard | | | deviations of the control response . | | | If the standard deviation of the | | | control response is 0 , then it is | | | recalculated assuming the response is | | | 1 unit on one trial . | | ------------------------------------------------------------------ |","title":"vlt.neuro.vision.contrast.indexes.fitindexes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/dirspace2orispace.m/","text":"vlt.neuro.vision.oridir.dirspace2orispace \u00b6 DIRSPACE2ORISPACE - Converts direction responses to orientation responses [ ANGLES_ORI , RESPONSES_ORI ] = vlt . neuro . vision . oridir . dirspace2orispace ( ANGLES , RESPONSES ) Converts direction responses and angles of stimulation into orientation space . Each angle in ANGLES that goes around the clock in direction space ( ranging from 0 to 360 degrees ) is converted to an orientation ranging from 0 to 180 degrees and returned in ANGLES_ORI . The new ANGLES_ORI is a column vector ( regardless of the form of the input ANGLES ). RESPONSES_ORI ( A , R ) is a matrix of all RESPONSES R that map to the orientation A . In the event that there are not an equal number of responses to each orientation , extra entries in the matrix will be NaN .","title":"vlt.neuro.vision.oridir.dirspace2orispace"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/dirspace2orispace.m/#vltneurovisionoridirdirspace2orispace","text":"DIRSPACE2ORISPACE - Converts direction responses to orientation responses [ ANGLES_ORI , RESPONSES_ORI ] = vlt . neuro . vision . oridir . dirspace2orispace ( ANGLES , RESPONSES ) Converts direction responses and angles of stimulation into orientation space . Each angle in ANGLES that goes around the clock in direction space ( ranging from 0 to 360 degrees ) is converted to an orientation ranging from 0 to 180 degrees and returned in ANGLES_ORI . The new ANGLES_ORI is a column vector ( regardless of the form of the input ANGLES ). RESPONSES_ORI ( A , R ) is a matrix of all RESPONSES R that map to the orientation A . In the event that there are not an equal number of responses to each orientation , extra entries in the matrix will be NaN .","title":"vlt.neuro.vision.oridir.dirspace2orispace"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/doublegaussianfunc.m/","text":"vlt.neuro.vision.oridir.doublegaussianfunc \u00b6 vlt . neuro . vision . oridir . doublegaussianfunc - compute responses for double gaussian fit R = DOUBLEGAUSIANFUNC ( ANGLES , PARAMETERS ) Given ANGLES in degrees , and PARAMETERS = [ Rsp Rp Rn Op sig ] compute R = Rsp + Rp * exp ( - vlt . math . angdiff ( Op - angles ) .^ 2 / ( 2 * sig ^ 2 )) + Rn * exp ( - vlt . math . angdiff ( 180 + Op - angles ) .^ 2 / ( 2 * sig ^ 2 ));","title":"vlt.neuro.vision.oridir.doublegaussianfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/doublegaussianfunc.m/#vltneurovisionoridirdoublegaussianfunc","text":"vlt . neuro . vision . oridir . doublegaussianfunc - compute responses for double gaussian fit R = DOUBLEGAUSIANFUNC ( ANGLES , PARAMETERS ) Given ANGLES in degrees , and PARAMETERS = [ Rsp Rp Rn Op sig ] compute R = Rsp + Rp * exp ( - vlt . math . angdiff ( Op - angles ) .^ 2 / ( 2 * sig ^ 2 )) + Rn * exp ( - vlt . math . angdiff ( 180 + Op - angles ) .^ 2 / ( 2 * sig ^ 2 ));","title":"vlt.neuro.vision.oridir.doublegaussianfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/dsi2dirparams.m/","text":"vlt.neuro.vision.oridir.dsi2dirparams \u00b6 DSI2DIRPARAMS - Given a DSI , generate double gaussian parameters that has that dsi index [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . dsi2dirparams ( DSI , ...) Given a requested DSI index value , where DSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( OPPOSITE ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the DSI . By default , OP is 0 , SIGMA is 20 , RSP is 0 , RP = 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . dsi2dirparams ( DSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = vlt . neuro . vision . oridir . dsi2dirparams ( i ); [ dummy , shape ] = vlt . fit . otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = vlt . neurovision . oridir . index . compute_directionindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : vlt . fit . otfit_carandini","title":"vlt.neuro.vision.oridir.dsi2dirparams"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/dsi2dirparams.m/#vltneurovisionoridirdsi2dirparams","text":"DSI2DIRPARAMS - Given a DSI , generate double gaussian parameters that has that dsi index [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . dsi2dirparams ( DSI , ...) Given a requested DSI index value , where DSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( OPPOSITE ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the DSI . By default , OP is 0 , SIGMA is 20 , RSP is 0 , RP = 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . dsi2dirparams ( DSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = vlt . neuro . vision . oridir . dsi2dirparams ( i ); [ dummy , shape ] = vlt . fit . otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = vlt . neurovision . oridir . index . compute_directionindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : vlt . fit . otfit_carandini","title":"vlt.neuro.vision.oridir.dsi2dirparams"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/osi2oriparams.m/","text":"vlt.neuro.vision.oridir.osi2oriparams \u00b6 OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are 10 , unless OSI == 0 , in which case RP and RN are 0 and RSP is 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = vlt . neuro . vision . oridir . osi2oriparams ( i ); [ dummy , shape ] = vlt . fit . otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = vlt . neurovision . oridir . index . compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : vlt . fit . otfit_carandini","title":"vlt.neuro.vision.oridir.osi2oriparams"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/osi2oriparams.m/#vltneurovisionoridirosi2oriparams","text":"OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are 10 , unless OSI == 0 , in which case RP and RN are 0 and RSP is 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = vlt . neuro . vision . oridir . osi2oriparams ( i ); [ dummy , shape ] = vlt . fit . otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = vlt . neurovision . oridir . index . compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : vlt . fit . otfit_carandini","title":"vlt.neuro.vision.oridir.osi2oriparams"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/osi2oriparams2.m/","text":"vlt.neuro.vision.oridir.osi2oriparams2 \u00b6 OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams2 ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are equal . RP + RSP will be 10 . RSP will be set to whatever is necessary to make the OSI be fit . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams2 ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = vlt . neuro . vision . oridir . osi2oriparams2 ( i ); [ dummy , shape ] = vlt . fit . otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = vlt . neurovision . oridir . index . compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : vlt . fit . otfit_carandini","title":"vlt.neuro.vision.oridir.osi2oriparams2"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/osi2oriparams2.m/#vltneurovisionoridirosi2oriparams2","text":"OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams2 ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are equal . RP + RSP will be 10 . RSP will be set to whatever is necessary to make the OSI be fit . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = vlt . neuro . vision . oridir . osi2oriparams2 ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = vlt . neuro . vision . oridir . osi2oriparams2 ( i ); [ dummy , shape ] = vlt . fit . otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = vlt . neurovision . oridir . index . compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : vlt . fit . otfit_carandini","title":"vlt.neuro.vision.oridir.osi2oriparams2"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/rotated_oripref_stats.m/","text":"vlt.neuro.vision.oridir.rotated_oripref_stats \u00b6 ROTATED_ORIPREF_STATS - compute mean and dispersion of a set of orientation angle preferences with respect to a reference angle [ MEANANGLE , DISPERSION ] = vlt . neuro . vision . oridir . rotated_oripref_stats ( ORI_PREF , REFERENCE_ANGLE ) Given a vector of ORI_PREF values ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) and a REFERENCE_ANGLE that defines '0' ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) returns the mean angle MEANANGLE and the DISPERSION , calculated as the circular variance ( CIRC_VAR ) .","title":"vlt.neuro.vision.oridir.rotated_oripref_stats"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/rotated_oripref_stats.m/#vltneurovisionoridirrotated_oripref_stats","text":"ROTATED_ORIPREF_STATS - compute mean and dispersion of a set of orientation angle preferences with respect to a reference angle [ MEANANGLE , DISPERSION ] = vlt . neuro . vision . oridir . rotated_oripref_stats ( ORI_PREF , REFERENCE_ANGLE ) Given a vector of ORI_PREF values ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) and a REFERENCE_ANGLE that defines '0' ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) returns the mean angle MEANANGLE and the DISPERSION , calculated as the circular variance ( CIRC_VAR ) .","title":"vlt.neuro.vision.oridir.rotated_oripref_stats"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/rotatedircurve.m/","text":"vlt.neuro.vision.oridir.rotatedircurve \u00b6 ROTATEDIRCURVE - rotate a direction curve so that it 's highest value is at a defined place NEWCURVE = vlt.neuro.vision.oridir.rotatedircurve(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT) Rotates the direction tuning curve measured at angles ANGLES and with responses RESPONSES so that the maximum response is at PREF_ANGLE_ASSIGNMENT. ANGLES are assumed to run from 0 .. 360. NEWCURVE is the shifted response curve that can be plotted with the existing ANGLES measurements. The function also has a form: NEWCURVE = vlt.neuro.vision.oridir.rotatedircurve(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT, ANCHOR_RESPONSES) That will shift the curve RESPONSES based on the responses of a different curve ANCHOR_RESPONSES. This is useful, for example, for shifting the surround tuning curve with respect to the responses of a center tuning curve, for example.","title":"vlt.neuro.vision.oridir.rotatedircurve"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/rotatedircurve.m/#vltneurovisionoridirrotatedircurve","text":"ROTATEDIRCURVE - rotate a direction curve so that it 's highest value is at a defined place NEWCURVE = vlt.neuro.vision.oridir.rotatedircurve(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT) Rotates the direction tuning curve measured at angles ANGLES and with responses RESPONSES so that the maximum response is at PREF_ANGLE_ASSIGNMENT. ANGLES are assumed to run from 0 .. 360. NEWCURVE is the shifted response curve that can be plotted with the existing ANGLES measurements. The function also has a form: NEWCURVE = vlt.neuro.vision.oridir.rotatedircurve(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT, ANCHOR_RESPONSES) That will shift the curve RESPONSES based on the responses of a different curve ANCHOR_RESPONSES. This is useful, for example, for shifting the surround tuning curve with respect to the responses of a center tuning curve, for example.","title":"vlt.neuro.vision.oridir.rotatedircurve"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/vector_direction_pref.m/","text":"vlt.neuro.vision.oridir.vector_direction_pref \u00b6 VECTOR_DIRECTION_PREF - Determine dir preference / response w / vector methods [ PREF_RESP, NULL_RESP, DIR_PREF, ORI_PREF ] = ... vlt . neuro . vision . oridir . vector_direction_pref ( ANGLES , RESPONSES , [ BLANK ] ) Calculates the preferred response PREF_RESP and the null response NULL_RESP with vector methods . First , the orientation preference is calculated using vector methods . Then , the preferred and null responses are computed at the 2 directions that correspond to the orientation angle indicated by the vector method . The responses are computed by interpolation .","title":"vlt.neuro.vision.oridir.vector_direction_pref"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/vector_direction_pref.m/#vltneurovisionoridirvector_direction_pref","text":"VECTOR_DIRECTION_PREF - Determine dir preference / response w / vector methods [ PREF_RESP, NULL_RESP, DIR_PREF, ORI_PREF ] = ... vlt . neuro . vision . oridir . vector_direction_pref ( ANGLES , RESPONSES , [ BLANK ] ) Calculates the preferred response PREF_RESP and the null response NULL_RESP with vector methods . First , the orientation preference is calculated using vector methods . Then , the preferred and null responses are computed at the 2 directions that correspond to the orientation angle indicated by the vector method . The responses are computed by interpolation .","title":"vlt.neuro.vision.oridir.vector_direction_pref"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_circularvariance.m/","text":"vlt.neuro.vision.oridir.index.compute_circularvariance \u00b6 vlt . neuro . vision . oridir . index . compute_circularvariance CV = vlt . neuro . vision . oridir . index . compute_circularvariance ( ANGLES , RATES ) Takes ANGLES in degrees . ANGLES and RATES should be row vectors . CV = 1 - | R | R = ( RATES * EXP ( 2 I * ANGLES ) ') / SUM(RATES) See Ringach et al . J . Neurosci . 2002 22 : 5639 - 5651","title":"vlt.neuro.vision.oridir.index.compute_circularvariance"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_circularvariance.m/#vltneurovisionoridirindexcompute_circularvariance","text":"vlt . neuro . vision . oridir . index . compute_circularvariance CV = vlt . neuro . vision . oridir . index . compute_circularvariance ( ANGLES , RATES ) Takes ANGLES in degrees . ANGLES and RATES should be row vectors . CV = 1 - | R | R = ( RATES * EXP ( 2 I * ANGLES ) ') / SUM(RATES) See Ringach et al . J . Neurosci . 2002 22 : 5639 - 5651","title":"vlt.neuro.vision.oridir.index.compute_circularvariance"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_dircircularvariance.m/","text":"vlt.neuro.vision.oridir.index.compute_dircircularvariance \u00b6 vlt . neuro . vision . oridir . index . compute_dircircularvariance CV = vlt . neuro . vision . oridir . index . compute_dircircularvariance ( ANGLES , RATES ) Takes ANGLES in degrees . ANGLES and RATES should be row vectors . CV = 1 - | R | R = ( RATES * EXP ( I * ANGLES ) ') / SUM(RATES) See Ringach et al . J . Neurosci . 2002 22 : 5639 - 5651","title":"vlt.neuro.vision.oridir.index.compute_dircircularvariance"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_dircircularvariance.m/#vltneurovisionoridirindexcompute_dircircularvariance","text":"vlt . neuro . vision . oridir . index . compute_dircircularvariance CV = vlt . neuro . vision . oridir . index . compute_dircircularvariance ( ANGLES , RATES ) Takes ANGLES in degrees . ANGLES and RATES should be row vectors . CV = 1 - | R | R = ( RATES * EXP ( I * ANGLES ) ') / SUM(RATES) See Ringach et al . J . Neurosci . 2002 22 : 5639 - 5651","title":"vlt.neuro.vision.oridir.index.compute_dircircularvariance"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_directionindex.m/","text":"vlt.neuro.vision.oridir.index.compute_directionindex \u00b6 vlt.neuro.vision.oridir.index.compute_directionindex DI = vlt.neuro.vision.oridir.index.compute_directionindex( ANGLES, RATES ) Takes ANGLES in degrees di = (maxrate - rate(stimulus in oppositedirection))/maxrate di == 1 means maximally selective di == 0 means not selective","title":"vlt.neuro.vision.oridir.index.compute_directionindex"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_directionindex.m/#vltneurovisionoridirindexcompute_directionindex","text":"vlt.neuro.vision.oridir.index.compute_directionindex DI = vlt.neuro.vision.oridir.index.compute_directionindex( ANGLES, RATES ) Takes ANGLES in degrees di = (maxrate - rate(stimulus in oppositedirection))/maxrate di == 1 means maximally selective di == 0 means not selective","title":"vlt.neuro.vision.oridir.index.compute_directionindex"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_directionsignificancedotproduct.m/","text":"vlt.neuro.vision.oridir.index.compute_directionsignificancedotproduct \u00b6 COMPUTE_DIRECTIONSIGNIFICANCEDOTPRODUCT Direction tuning significance using dot product with empirical orientation preference P = COMPUTE_DIRECTIONSIGNIFIANCEDOTPRODUCT ( ANGLES , RATES ) This function calculates the probability that the \"true\" direction tuning vector of a neuron has non-zero length . It performs this by empirically determing the unit orientation vector , and then computing the dot product of the direction vector for each trial onto the overall orientation vector , and then looking to see if the average is non-zero . Inputs : ANGLES is a vector of direction angles at which the response has been measured . RATES is the response of the neuron in to each angle ; each row should contain responses from a different trial . Output : P the probability that the \"true\" direction tuning vector is non-zero . See : Mazurek , Kagan , Van Hooser 2014 ; Frontiers in Neural Circuits","title":"vlt.neuro.vision.oridir.index.compute_directionsignificancedotproduct"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_directionsignificancedotproduct.m/#vltneurovisionoridirindexcompute_directionsignificancedotproduct","text":"COMPUTE_DIRECTIONSIGNIFICANCEDOTPRODUCT Direction tuning significance using dot product with empirical orientation preference P = COMPUTE_DIRECTIONSIGNIFIANCEDOTPRODUCT ( ANGLES , RATES ) This function calculates the probability that the \"true\" direction tuning vector of a neuron has non-zero length . It performs this by empirically determing the unit orientation vector , and then computing the dot product of the direction vector for each trial onto the overall orientation vector , and then looking to see if the average is non-zero . Inputs : ANGLES is a vector of direction angles at which the response has been measured . RATES is the response of the neuron in to each angle ; each row should contain responses from a different trial . Output : P the probability that the \"true\" direction tuning vector is non-zero . See : Mazurek , Kagan , Van Hooser 2014 ; Frontiers in Neural Circuits","title":"vlt.neuro.vision.oridir.index.compute_directionsignificancedotproduct"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_dirvecconstrainedori.m/","text":"vlt.neuro.vision.oridir.index.compute_dirvecconstrainedori \u00b6 COMPUTE_DIRVECCONSTRAINEDORI - Computes direction vector constrained by orientation ( DVCO ) [ DI , PREF , DV ] = COMPUTE_DIRVECCONSTRANEDORI ( ANGLES , RATES ) ANGLES and RATES should be ROW vectors .","title":"vlt.neuro.vision.oridir.index.compute_dirvecconstrainedori"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_dirvecconstrainedori.m/#vltneurovisionoridirindexcompute_dirvecconstrainedori","text":"COMPUTE_DIRVECCONSTRAINEDORI - Computes direction vector constrained by orientation ( DVCO ) [ DI , PREF , DV ] = COMPUTE_DIRVECCONSTRANEDORI ( ANGLES , RATES ) ANGLES and RATES should be ROW vectors .","title":"vlt.neuro.vision.oridir.index.compute_dirvecconstrainedori"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_dirvecdotorivec.m/","text":"vlt.neuro.vision.oridir.index.compute_dirvecdotorivec \u00b6 COMPUTE_DIRVECDOTORIVEC - Direction index based on dot product with computed orientation vector DI = vlt . neuro . vision . oridir . index . compute_dirvecdotorivec ( ANGLES , RATES ) Takes ANGLES in degrees , and RATES is the response to each angle in a row vector . DI is a modified vector index ; the function first finds the empirical orientation vector and then computes dot product of direction vector with unit orentation vector","title":"vlt.neuro.vision.oridir.index.compute_dirvecdotorivec"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_dirvecdotorivec.m/#vltneurovisionoridirindexcompute_dirvecdotorivec","text":"COMPUTE_DIRVECDOTORIVEC - Direction index based on dot product with computed orientation vector DI = vlt . neuro . vision . oridir . index . compute_dirvecdotorivec ( ANGLES , RATES ) Takes ANGLES in degrees , and RATES is the response to each angle in a row vector . DI is a modified vector index ; the function first finds the empirical orientation vector and then computes dot product of direction vector with unit orentation vector","title":"vlt.neuro.vision.oridir.index.compute_dirvecdotorivec"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_halfwidth.m/","text":"vlt.neuro.vision.oridir.index.compute_halfwidth \u00b6 COMPUTE_LOWHALFMAX [ LOW , MAX , HIGH ] = vlt . neuro . vision . oridir . index . compute_halfwidth ( X , Y ) interpolates function by linearly ( splines goes strange for small points ) and returns MAX , where x position where function attains its maximum value LOW < MAX , where function attains half its maximum HIGH > MAX , where function attains half its maximum returns NAN for LOW or / and HIGH , when function does not come below the point note : ugly , slow and crude routine , consider taking log x first","title":"vlt.neuro.vision.oridir.index.compute_halfwidth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_halfwidth.m/#vltneurovisionoridirindexcompute_halfwidth","text":"COMPUTE_LOWHALFMAX [ LOW , MAX , HIGH ] = vlt . neuro . vision . oridir . index . compute_halfwidth ( X , Y ) interpolates function by linearly ( splines goes strange for small points ) and returns MAX , where x position where function attains its maximum value LOW < MAX , where function attains half its maximum HIGH > MAX , where function attains half its maximum returns NAN for LOW or / and HIGH , when function does not come below the point note : ugly , slow and crude routine , consider taking log x first","title":"vlt.neuro.vision.oridir.index.compute_halfwidth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_orientationindex.m/","text":"vlt.neuro.vision.oridir.index.compute_orientationindex \u00b6 vlt.neuro.vision.oridir.index.compute_orientationindex DI = vlt.neuro.vision.oridir.index.compute_orientationindex( ANGLES, RATES ) Takes ANGLES in degrees oi = (max + max_180 - max_90 - max_270)/(max) no interpolation done","title":"vlt.neuro.vision.oridir.index.compute_orientationindex"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_orientationindex.m/#vltneurovisionoridirindexcompute_orientationindex","text":"vlt.neuro.vision.oridir.index.compute_orientationindex DI = vlt.neuro.vision.oridir.index.compute_orientationindex( ANGLES, RATES ) Takes ANGLES in degrees oi = (max + max_180 - max_90 - max_270)/(max) no interpolation done","title":"vlt.neuro.vision.oridir.index.compute_orientationindex"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_orientationvector.m/","text":"vlt.neuro.vision.oridir.index.compute_orientationvector \u00b6 vlt . neuro . vision . oridir . index . compute_orientationvector VECTOR = vlt . neuro . vision . oridir . index . compute_orientationvector ( ANGLES , RATES ) Takes ANGLES in degrees and returns the orientation vector : vector = ( rates * transpose ( exp ( sqrt ( - 1 ) * 2 * mod ( angles * pi / 180 , pi )))) / N The vector is normalized by a factor of N , which is 2 if the angles go all the way around the clock ( that is , they sample from 0 to 360 ) as opposed to from 0 to 180 ( N = 1 ). no interpolation done","title":"vlt.neuro.vision.oridir.index.compute_orientationvector"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_orientationvector.m/#vltneurovisionoridirindexcompute_orientationvector","text":"vlt . neuro . vision . oridir . index . compute_orientationvector VECTOR = vlt . neuro . vision . oridir . index . compute_orientationvector ( ANGLES , RATES ) Takes ANGLES in degrees and returns the orientation vector : vector = ( rates * transpose ( exp ( sqrt ( - 1 ) * 2 * mod ( angles * pi / 180 , pi )))) / N The vector is normalized by a factor of N , which is 2 if the angles go all the way around the clock ( that is , they sample from 0 to 360 ) as opposed to from 0 to 180 ( N = 1 ). no interpolation done","title":"vlt.neuro.vision.oridir.index.compute_orientationvector"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_tuningwidth.m/","text":"vlt.neuro.vision.oridir.index.compute_tuningwidth \u00b6 vlt.neuro.vision.oridir.index.compute_tuningwidth TUNINGWIDTH = vlt.neuro.vision.oridir.index.compute_tuningwidth( ANGLES, RATES ) Takes ANGLES in degrees linearly interpolates rates and returns the half of the distance between the two points sandwiching the maximum where the response is 1/sqrt(2) of the maximum rate. returns 90, when function does not come below the point See Rinach et al. J.Neurosci. 2002 22:5639-5651","title":"vlt.neuro.vision.oridir.index.compute_tuningwidth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/compute_tuningwidth.m/#vltneurovisionoridirindexcompute_tuningwidth","text":"vlt.neuro.vision.oridir.index.compute_tuningwidth TUNINGWIDTH = vlt.neuro.vision.oridir.index.compute_tuningwidth( ANGLES, RATES ) Takes ANGLES in degrees linearly interpolates rates and returns the half of the distance between the two points sandwiching the maximum where the response is 1/sqrt(2) of the maximum rate. returns 90, when function does not come below the point See Rinach et al. J.Neurosci. 2002 22:5639-5651","title":"vlt.neuro.vision.oridir.index.compute_tuningwidth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdi.m/","text":"vlt.neuro.vision.oridir.index.fit2fitdi \u00b6 FIT2FITDI - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = vlt . neuro . vision . oridir . index . fit2fitdi ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitdi"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdi.m/#vltneurovisionoridirindexfit2fitdi","text":"FIT2FITDI - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = vlt . neuro . vision . oridir . index . fit2fitdi ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitdi"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdibr.m/","text":"vlt.neuro.vision.oridir.index.fit2fitdibr \u00b6 vlt . neuro . vision . oridir . index . fit2fitdibr - Direction index from double gaussian fit ( blank rectified ) DSI = vlt . neuro . vision . oridir . index . fit2fitdibr ( FITPARAMS , BLANKRESP ) Computes the \"direction selectivity index\" , or the fraction of the total response that is in the preferred direction compared to the opposite direction . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitdibr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdibr.m/#vltneurovisionoridirindexfit2fitdibr","text":"vlt . neuro . vision . oridir . index . fit2fitdibr - Direction index from double gaussian fit ( blank rectified ) DSI = vlt . neuro . vision . oridir . index . fit2fitdibr ( FITPARAMS , BLANKRESP ) Computes the \"direction selectivity index\" , or the fraction of the total response that is in the preferred direction compared to the opposite direction . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitdibr"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdibr_orig.m/","text":"vlt.neuro.vision.oridir.index.fit2fitdibr_orig \u00b6 vlt.neuro.vision.oridir.index.fit2fitdibr_orig is a function.","title":"vlt.neuro.vision.oridir.index.fit2fitdibr_orig"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdibr_orig.m/#vltneurovisionoridirindexfit2fitdibr_orig","text":"vlt.neuro.vision.oridir.index.fit2fitdibr_orig is a function.","title":"vlt.neuro.vision.oridir.index.fit2fitdibr_orig"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdidiffsum.m/","text":"vlt.neuro.vision.oridir.index.fit2fitdidiffsum \u00b6 FIT2FITDIDIFFSUM - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = vlt . neuro . vision . oridir . index . fit2fitdidiffsum ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / ( Rpref + Rnull ) where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr , vlt . neuro . vision . oridir . index . fit2fitdi","title":"vlt.neuro.vision.oridir.index.fit2fitdidiffsum"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdidiffsum.m/#vltneurovisionoridirindexfit2fitdidiffsum","text":"FIT2FITDIDIFFSUM - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = vlt . neuro . vision . oridir . index . fit2fitdidiffsum ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / ( Rpref + Rnull ) where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr , vlt . neuro . vision . oridir . index . fit2fitdi","title":"vlt.neuro.vision.oridir.index.fit2fitdidiffsum"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdr_angle.m/","text":"vlt.neuro.vision.oridir.index.fit2fitdr_angle \u00b6 vlt . neuro . vision . oridir . index . fit2fitdr_angle - Direction ratio ( fraction of response in certain direction ) from double gaussian fit TDR = vlt . neuro . vision . oridir . index . fit2fitdr_angle ( FITPARAMS , BLANKRESP , THEANGLE ) Computes the \"direction ratio\" , or the fraction of the total response that is in the given angle compared to the opposite angle . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The formula is TDR = Resp ( THEANGLE ) / ( Resp ( THEANGLE ) + Resp ( THEANGLE + 180 )) See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitdr_angle"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitdr_angle.m/#vltneurovisionoridirindexfit2fitdr_angle","text":"vlt . neuro . vision . oridir . index . fit2fitdr_angle - Direction ratio ( fraction of response in certain direction ) from double gaussian fit TDR = vlt . neuro . vision . oridir . index . fit2fitdr_angle ( FITPARAMS , BLANKRESP , THEANGLE ) Computes the \"direction ratio\" , or the fraction of the total response that is in the given angle compared to the opposite angle . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - vlt . math . angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The formula is TDR = Resp ( THEANGLE ) / ( Resp ( THEANGLE ) + Resp ( THEANGLE + 180 )) See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitdr_angle"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitoi.m/","text":"vlt.neuro.vision.oridir.index.fit2fitoi \u00b6 FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = vlt . neuro . vision . oridir . index . fit2fitoi ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / Rpref where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitoi"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitoi.m/#vltneurovisionoridirindexfit2fitoi","text":"FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = vlt . neuro . vision . oridir . index . fit2fitoi ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / Rpref where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr","title":"vlt.neuro.vision.oridir.index.fit2fitoi"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitoidiffsum.m/","text":"vlt.neuro.vision.oridir.index.fit2fitoidiffsum \u00b6 FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = vlt . neuro . vision . oridir . index . fit2fitoidiffsum ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / ( Rpref + Rorth ) where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr , vlt . neuro . vision . oridir . index . fit2fitdidiffsum","title":"vlt.neuro.vision.oridir.index.fit2fitoidiffsum"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2fitoidiffsum.m/#vltneurovisionoridirindexfit2fitoidiffsum","text":"FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = vlt . neuro . vision . oridir . index . fit2fitoidiffsum ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / ( Rpref + Rorth ) where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : vlt . fit . otfit_carandini , vlt . neuro . vision . oridir . index . fit2fitoi , vlt . neuro . vision . oridir . index . fit2fitdibr , vlt . neuro . vision . oridir . index . fit2fitdidiffsum","title":"vlt.neuro.vision.oridir.index.fit2fitoidiffsum"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2null.m/","text":"vlt.neuro.vision.oridir.index.fit2null \u00b6 FIT2NULL - calculate the null ( anti - preferred ) response from a fit to direction NULL = vlt . neuro . vision . oridir . index . fit2null ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 180 degrees away from the location with the maximum response . This is the null response or the response in the anti - preferred direction . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : vlt . neuro . vision . oridir . index . fit2pref , vlt . neuro . vision . oridir . index . fit2orth","title":"vlt.neuro.vision.oridir.index.fit2null"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2null.m/#vltneurovisionoridirindexfit2null","text":"FIT2NULL - calculate the null ( anti - preferred ) response from a fit to direction NULL = vlt . neuro . vision . oridir . index . fit2null ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 180 degrees away from the location with the maximum response . This is the null response or the response in the anti - preferred direction . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : vlt . neuro . vision . oridir . index . fit2pref , vlt . neuro . vision . oridir . index . fit2orth","title":"vlt.neuro.vision.oridir.index.fit2null"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2orth.m/","text":"vlt.neuro.vision.oridir.index.fit2orth \u00b6 FIT2ORTH - calculate the orthogonal response from a fit to direction ORTH = vlt . neuro . vision . oridir . index . fit2orth ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 90 degrees away from the location with the maximum response . This is the orthogonal response or the response of the neuron to the orientation orthogonal to the preferred . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : vlt . neuro . vision . oridir . index . fit2pref , vlt . neuro . vision . oridir . index . fit2null","title":"vlt.neuro.vision.oridir.index.fit2orth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2orth.m/#vltneurovisionoridirindexfit2orth","text":"FIT2ORTH - calculate the orthogonal response from a fit to direction ORTH = vlt . neuro . vision . oridir . index . fit2orth ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 90 degrees away from the location with the maximum response . This is the orthogonal response or the response of the neuron to the orientation orthogonal to the preferred . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : vlt . neuro . vision . oridir . index . fit2pref , vlt . neuro . vision . oridir . index . fit2null","title":"vlt.neuro.vision.oridir.index.fit2orth"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2pref.m/","text":"vlt.neuro.vision.oridir.index.fit2pref \u00b6 FIT2PREF - calculate the preferred response from a fit to direction PREF = vlt . neuro . vision . oridir . index . fit2pref ( RESPONSE ) Given the RESPONSE of a double gaussian fit , find the maximum response . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . The largest response is returned in PREF . See also : vlt . neuro . vision . oridir . index . fit2null , vlt . neuro . vision . oridir . index . fit2orth","title":"vlt.neuro.vision.oridir.index.fit2pref"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/fit2pref.m/#vltneurovisionoridirindexfit2pref","text":"FIT2PREF - calculate the preferred response from a fit to direction PREF = vlt . neuro . vision . oridir . index . fit2pref ( RESPONSE ) Given the RESPONSE of a double gaussian fit , find the maximum response . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . The largest response is returned in PREF . See also : vlt . neuro . vision . oridir . index . fit2null , vlt . neuro . vision . oridir . index . fit2orth","title":"vlt.neuro.vision.oridir.index.fit2pref"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/oridir_fitindexes.m/","text":"vlt.neuro.vision.oridir.index.oridir_fitindexes \u00b6 ORIDIR_FITINDEXES - compute orientation / direction fits , index values FI = vlt . neuro . vision . oridir . index . oridir_fitindexes ( RESPSTRUCT ) Computes orientation / direction index fit values from a response structure RESPSTRUCT . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords .) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Note that fits may be garbage if there are not significantly different responses across different directions . Returns a structure FI with fields : Field | Description ---------------------------------------------------------------------------------------- fit_parameters | [ Rsp Rp Ot sigm Rn ] fit | 2 row fit ; first row is set of directions , second row is responses ot_index | Orientation index ( ( pref-orth )/ pref ) ) ot_index_rectified | Orientation index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 ot_index_diffsum | Orientation index ( ( pref-orth )/( pref + orth ) ) ot_index_diffsum_rectified | Orientation index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1 dir_pref | Ot tuning_width | Fit tuning width ( HWHH , sigm * sqrt ( log ( 4 ))) dir_index | Direction index ( ( pref-orth )/ pref ) ) dir_index_rectified | Direction index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 dir_index_diffsum | Direction index ( ( pref-orth )/( pref + orth ) ) dir_index_diffsum_rectified | Direction index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1","title":"vlt.neuro.vision.oridir.index.oridir_fitindexes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/oridir_fitindexes.m/#vltneurovisionoridirindexoridir_fitindexes","text":"ORIDIR_FITINDEXES - compute orientation / direction fits , index values FI = vlt . neuro . vision . oridir . index . oridir_fitindexes ( RESPSTRUCT ) Computes orientation / direction index fit values from a response structure RESPSTRUCT . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords .) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Note that fits may be garbage if there are not significantly different responses across different directions . Returns a structure FI with fields : Field | Description ---------------------------------------------------------------------------------------- fit_parameters | [ Rsp Rp Ot sigm Rn ] fit | 2 row fit ; first row is set of directions , second row is responses ot_index | Orientation index ( ( pref-orth )/ pref ) ) ot_index_rectified | Orientation index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 ot_index_diffsum | Orientation index ( ( pref-orth )/( pref + orth ) ) ot_index_diffsum_rectified | Orientation index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1 dir_pref | Ot tuning_width | Fit tuning width ( HWHH , sigm * sqrt ( log ( 4 ))) dir_index | Direction index ( ( pref-orth )/ pref ) ) dir_index_rectified | Direction index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 dir_index_diffsum | Direction index ( ( pref-orth )/( pref + orth ) ) dir_index_diffsum_rectified | Direction index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1","title":"vlt.neuro.vision.oridir.index.oridir_fitindexes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/oridir_vectorindexes.m/","text":"vlt.neuro.vision.oridir.index.oridir_vectorindexes \u00b6 ORIDIR_VECTORINDEX - compute orientation / direction vector indexes VI = vlt . neuro . vision . oridir . index . oridir_vectorindexes ( RESPSTRUCT ) Computes orientation / direction index vector values from a response structure RESP . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4 xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords . ) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Returns a structure VI with fields : Field | Description ---------------------------------------------------------------------------------------- ot_HotellingT2_p | Hotelling 's T^2 test of orientation vector data ot_pref | Angle preference in orientation space ot_circularvariance | Magnitude of response in orientation space ( see Ringach et al . 2002 ) ot_index | Orientation index ( ( pref - orth ) / pref ) ) tuning_width | Vector tuning width ( see help vlt . neuro . vision . oridir . index . compute_tuningwidth ) dir_HotellingT2_p | Hotelling 's T^2 test of direction vector data dir_pref | Angle preference in direction space dir_circularvariance | Direction index in vector space dir_dotproduct_sig_p | P value of dot product direction vector significance | method of Mazurek et al . 2014","title":"vlt.neuro.vision.oridir.index.oridir_vectorindexes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bindex/oridir_vectorindexes.m/#vltneurovisionoridirindexoridir_vectorindexes","text":"ORIDIR_VECTORINDEX - compute orientation / direction vector indexes VI = vlt . neuro . vision . oridir . index . oridir_vectorindexes ( RESPSTRUCT ) Computes orientation / direction index vector values from a response structure RESP . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4 xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords . ) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Returns a structure VI with fields : Field | Description ---------------------------------------------------------------------------------------- ot_HotellingT2_p | Hotelling 's T^2 test of orientation vector data ot_pref | Angle preference in orientation space ot_circularvariance | Magnitude of response in orientation space ( see Ringach et al . 2002 ) ot_index | Orientation index ( ( pref - orth ) / pref ) ) tuning_width | Vector tuning width ( see help vlt . neuro . vision . oridir . index . compute_tuningwidth ) dir_HotellingT2_p | Hotelling 's T^2 test of direction vector data dir_pref | Angle preference in direction space dir_circularvariance | Direction index in vector space dir_dotproduct_sig_p | P value of dot product direction vector significance | method of Mazurek et al . 2014","title":"vlt.neuro.vision.oridir.index.oridir_vectorindexes"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bplot/polarplot_dir.m/","text":"vlt.neuro.vision.oridir.plot.polarplot_dir \u00b6 POLARPLOT_DIR - Produces a polar plot of direction responses [ H , OUTPUTS ] = vlt . neuro . vision . oridir . plot . polarplot_dir ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of direction responses in direction space . The plot handle is returned in H . ANGLES should be direction angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean direction vector in the complex plane 'vectormag' : mean direction vector magnitude 'vectorpref' : vector direction preference in degrees 'dircircularvariance' : direction circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the dir circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean direction vector ( default 0 ) 'showdircircularvariance' : 0 / 1 show dir circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - dircircular : variance and angle equal to vector direction : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : vlt . neuro . vision . oridir . dirspace2orispace , MMPOLAR , vlt . neuro . vision . oridir . plot . polarplot_ori","title":"vlt.neuro.vision.oridir.plot.polarplot_dir"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bplot/polarplot_dir.m/#vltneurovisionoridirplotpolarplot_dir","text":"POLARPLOT_DIR - Produces a polar plot of direction responses [ H , OUTPUTS ] = vlt . neuro . vision . oridir . plot . polarplot_dir ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of direction responses in direction space . The plot handle is returned in H . ANGLES should be direction angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean direction vector in the complex plane 'vectormag' : mean direction vector magnitude 'vectorpref' : vector direction preference in degrees 'dircircularvariance' : direction circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the dir circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean direction vector ( default 0 ) 'showdircircularvariance' : 0 / 1 show dir circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - dircircular : variance and angle equal to vector direction : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : vlt . neuro . vision . oridir . dirspace2orispace , MMPOLAR , vlt . neuro . vision . oridir . plot . polarplot_ori","title":"vlt.neuro.vision.oridir.plot.polarplot_dir"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bplot/polarplot_ori.m/","text":"vlt.neuro.vision.oridir.plot.polarplot_ori \u00b6 POLARPLOT_ORI - Produces a polar plot of orientation responses [ H , OUTPUTS ] = vlt . neuro . vision . oridir . plot . polarplot_ori ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of orientation responses in orientation space . The plot handle is returned in H . ANGLES should be orientation angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean orientation vector in the complex plane 'vectormag' : mean vector magnitude 'vectorpref' : vector preference in degrees 'circularvariance' : circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean orientation vector ( default 0 ) 'showcircularvariance' : 0 / 1 show circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - circular : variance and angle equal to orientation : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : vlt . neuro . vision . oridir . dirspace2orispace , MMPOLAR , vlt . neuro . vision . oridir . plot . polarplot_dir","title":"vlt.neuro.vision.oridir.plot.polarplot_ori"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Boridir/%2Bplot/polarplot_ori.m/#vltneurovisionoridirplotpolarplot_ori","text":"POLARPLOT_ORI - Produces a polar plot of orientation responses [ H , OUTPUTS ] = vlt . neuro . vision . oridir . plot . polarplot_ori ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of orientation responses in orientation space . The plot handle is returned in H . ANGLES should be orientation angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean orientation vector in the complex plane 'vectormag' : mean vector magnitude 'vectorpref' : vector preference in degrees 'circularvariance' : circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean orientation vector ( default 0 ) 'showcircularvariance' : 0 / 1 show circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - circular : variance and angle equal to orientation : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : vlt . neuro . vision . oridir . dirspace2orispace , MMPOLAR , vlt . neuro . vision . oridir . plot . polarplot_dir","title":"vlt.neuro.vision.oridir.plot.polarplot_ori"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/fit.m/","text":"vlt.neuro.vision.speed.fit \u00b6 vlt . neuro . speed . fit Fit two - dimensional Gaussian function to data set P = vlt . neuro . vision . speed . fit ( SF , TF , R , min_xi ) Fit a Gaussian to a set of responses generated by a speed tuning curve . Inputs : SF is an array of spatial frequency values TF is an array of temporal frequency values R is an array of measured responses driven by the spatial and temporal frequency values MIN_XI : if provided , provides the lower limit on XI . If not provided , assumed to be 0 . ( Might provide - 1 , for example . ) Outputs : P is an array with parameters : --------------------------------------------- | A | Peak response of the neuron | | | | | zeta | Skew of the temporal | | | frequency tuning curve | | | | | xi | Speed parameter | | | | | sigma_sf | Tuning width of the neuron | | | for spatial frequency | | | | | sigma_tf | Tuning width of the neuron | | | for temporal frequency | | | | | sf0 | Preferred spatial frequency | | | averaged across temporal | | | frequencies | | | | | tf0 | Preferred temporal frequency | | | averaged across spatial | | | frequencies | --------------------------------------------- See : Priebe et al . 2006 By Noah Lasky - Nielson","title":"vlt.neuro.vision.speed.fit"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/fit.m/#vltneurovisionspeedfit","text":"vlt . neuro . speed . fit Fit two - dimensional Gaussian function to data set P = vlt . neuro . vision . speed . fit ( SF , TF , R , min_xi ) Fit a Gaussian to a set of responses generated by a speed tuning curve . Inputs : SF is an array of spatial frequency values TF is an array of temporal frequency values R is an array of measured responses driven by the spatial and temporal frequency values MIN_XI : if provided , provides the lower limit on XI . If not provided , assumed to be 0 . ( Might provide - 1 , for example . ) Outputs : P is an array with parameters : --------------------------------------------- | A | Peak response of the neuron | | | | | zeta | Skew of the temporal | | | frequency tuning curve | | | | | xi | Speed parameter | | | | | sigma_sf | Tuning width of the neuron | | | for spatial frequency | | | | | sigma_tf | Tuning width of the neuron | | | for temporal frequency | | | | | sf0 | Preferred spatial frequency | | | averaged across temporal | | | frequencies | | | | | tf0 | Preferred temporal frequency | | | averaged across spatial | | | frequencies | --------------------------------------------- See : Priebe et al . 2006 By Noah Lasky - Nielson","title":"vlt.neuro.vision.speed.fit"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/plottuning.m/","text":"vlt.neuro.vision.speed.plottuning \u00b6 vlt . neuro . vision . speed . plottuning - Plot speed tuning vlt . neuro . vision . speed . plottuning ( SF , TF , R ,...) Creates a plot like Priebe et al . 2006 . On the left side , plot the speed tuning for each spatial frequency . On the right side , plot a \"heat map\" of response as a function of spatial frequency . This function also takes name / value pairs that modify its default behavior : | ---------------------------------------------------------------- | | Parameter ( default ) | Description | | ------------------------ | --------------------------------------- | | 'marker' ( 'o' ) | Marker type to use in plot | | 'linestyle' ( 'none' ) | Line style to use | | 'do_surf' ( 1 ) | 0 / 1 Should we do the surface plot ? | | ------------------------ | --------------------------------------- | Example : out = vlt . neuro . vision . speed . test . responseplay (); figure ; vlt . neuro . vision . speed . plottuning ( out . SF , out . TF , out . R , 'marker' , 'd' , 'linestyle' , '-' );","title":"vlt.neuro.vision.speed.plottuning"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/plottuning.m/#vltneurovisionspeedplottuning","text":"vlt . neuro . vision . speed . plottuning - Plot speed tuning vlt . neuro . vision . speed . plottuning ( SF , TF , R ,...) Creates a plot like Priebe et al . 2006 . On the left side , plot the speed tuning for each spatial frequency . On the right side , plot a \"heat map\" of response as a function of spatial frequency . This function also takes name / value pairs that modify its default behavior : | ---------------------------------------------------------------- | | Parameter ( default ) | Description | | ------------------------ | --------------------------------------- | | 'marker' ( 'o' ) | Marker type to use in plot | | 'linestyle' ( 'none' ) | Line style to use | | 'do_surf' ( 1 ) | 0 / 1 Should we do the surface plot ? | | ------------------------ | --------------------------------------- | Example : out = vlt . neuro . vision . speed . test . responseplay (); figure ; vlt . neuro . vision . speed . plottuning ( out . SF , out . TF , out . R , 'marker' , 'd' , 'linestyle' , '-' );","title":"vlt.neuro.vision.speed.plottuning"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/tuningfunc.m/","text":"vlt.neuro.vision.speed.tuningfunc \u00b6 vlt . neuro . vision . speed . tuningfunc - produce responses given a speed tuning function R = vlt . neuro . vision . speed . tuningfunc ( SF , TF , P ) Produce the responses at given spatial ( SF ) and temporal ( TF ) frequencies given parameters for a speed tuning curve . Inputs : SF is an array of spatial frequency values TF is an array of temporal frequency values P is an array with parameters : --------------------------------------------- | A | Peak response of the neuron | | | | | zeta | Skew of the temporal | | | frequency tuning curve | | | | | xi | Speed parameter | | | | | sigma_sf | Tuning width of the neuron | | | for spatial frequency | | | | | sigma_tf | Tuning width of the neuron | | | for temporal frequency | | | | | sf0 | Preferred spatial frequency | | | averaged across temporal | | | frequencies | | | | | tf0 | Preferred temporal frequency | | | averaged across spatial | | | frequencies | --------------------------------------------- Outputs : R is an array of calculated responses Example : [ SF , TF ] = meshgrid ([ 0.05 0.08 0.1 0.2 0.4 0.8 1.2 ],[ 0.5 1 2 4 8 16 32 ]); % Pick some parameters A = 1 ; zeta = 0 ; xi = 0 ; sigma_sf = 0.2 ; % Cycles per degree sigma_tf = 4 ; % Cycles per second ; this is the fall off sf0 = 0.1 ; tf0 = 4 ; % Now calculate the responses R = speed . tuningfunc ( SF , TF ,[ A zeta xi sigma_sf sigma_tf sf0 tf0 ]); % Now plot the responses figure ; speed . plottuning ( SF , TF , R ); See : Priebe et al . 2006","title":"vlt.neuro.vision.speed.tuningfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/tuningfunc.m/#vltneurovisionspeedtuningfunc","text":"vlt . neuro . vision . speed . tuningfunc - produce responses given a speed tuning function R = vlt . neuro . vision . speed . tuningfunc ( SF , TF , P ) Produce the responses at given spatial ( SF ) and temporal ( TF ) frequencies given parameters for a speed tuning curve . Inputs : SF is an array of spatial frequency values TF is an array of temporal frequency values P is an array with parameters : --------------------------------------------- | A | Peak response of the neuron | | | | | zeta | Skew of the temporal | | | frequency tuning curve | | | | | xi | Speed parameter | | | | | sigma_sf | Tuning width of the neuron | | | for spatial frequency | | | | | sigma_tf | Tuning width of the neuron | | | for temporal frequency | | | | | sf0 | Preferred spatial frequency | | | averaged across temporal | | | frequencies | | | | | tf0 | Preferred temporal frequency | | | averaged across spatial | | | frequencies | --------------------------------------------- Outputs : R is an array of calculated responses Example : [ SF , TF ] = meshgrid ([ 0.05 0.08 0.1 0.2 0.4 0.8 1.2 ],[ 0.5 1 2 4 8 16 32 ]); % Pick some parameters A = 1 ; zeta = 0 ; xi = 0 ; sigma_sf = 0.2 ; % Cycles per degree sigma_tf = 4 ; % Cycles per second ; this is the fall off sf0 = 0.1 ; tf0 = 4 ; % Now calculate the responses R = speed . tuningfunc ( SF , TF ,[ A zeta xi sigma_sf sigma_tf sf0 tf0 ]); % Now plot the responses figure ; speed . plottuning ( SF , TF , R ); See : Priebe et al . 2006","title":"vlt.neuro.vision.speed.tuningfunc"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/%2Btest/fittest.m/","text":"vlt.neuro.vision.speed.test.fittest \u00b6 Demonstration script for calculating responses and fits of speed tuning curve","title":"vlt.neuro.vision.speed.test.fittest"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/%2Btest/fittest.m/#vltneurovisionspeedtestfittest","text":"Demonstration script for calculating responses and fits of speed tuning curve","title":"vlt.neuro.vision.speed.test.fittest"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/%2Btest/responseplay.m/","text":"vlt.neuro.vision.speed.test.responseplay \u00b6 vlt.neuro.vision.speed.responseplay - A function to demonstrate the speed tuning response function OUT = vlt.neuro.vision.speed.test.responseplay()","title":"vlt.neuro.vision.speed.test.responseplay"},{"location":"reference/%2Bvlt/%2Bneuro/%2Bvision/%2Bspeed/%2Btest/responseplay.m/#vltneurovisionspeedtestresponseplay","text":"vlt.neuro.vision.speed.responseplay - A function to demonstrate the speed tuning response function OUT = vlt.neuro.vision.speed.test.responseplay()","title":"vlt.neuro.vision.speed.test.responseplay"},{"location":"reference/%2Bvlt/%2Boffice/addresslabels2pdf.m/","text":"vlt.office.addresslabels2pdf \u00b6 ADDRESSLABELS2PDF - print address labels to a set of PDFs following a template vlt . office . addresslabels2pdf ( LABELS , ... ) This prints address labels LABELS to many pieces of figure 'paper' . It follows the template described below . LABELS { i }{:} is a cell array that contains each line of text for each label . This function accepts name / value pairs that modify its default behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- units ( 'inches' ) | The units to use first_label_Y ( 1 . 0 ) | The location of the first label in X first_label_X ( 1 . 5025 ) | The location of the first label in Y dX ( 2 . 75 ) | Offset between columns ( center - to - center ) dY ( 1 ) | Offset between rows ( center - to - center ) ncolumns ( 10 ) | Number of columns per sheet nrows ( 3 ) | Number of rows per sheet | ( These are for Avery Labels 8160 ) fontsize ( 13 ) | Fontsize to use","title":"vlt.office.addresslabels2pdf"},{"location":"reference/%2Bvlt/%2Boffice/addresslabels2pdf.m/#vltofficeaddresslabels2pdf","text":"ADDRESSLABELS2PDF - print address labels to a set of PDFs following a template vlt . office . addresslabels2pdf ( LABELS , ... ) This prints address labels LABELS to many pieces of figure 'paper' . It follows the template described below . LABELS { i }{:} is a cell array that contains each line of text for each label . This function accepts name / value pairs that modify its default behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- units ( 'inches' ) | The units to use first_label_Y ( 1 . 0 ) | The location of the first label in X first_label_X ( 1 . 5025 ) | The location of the first label in Y dX ( 2 . 75 ) | Offset between columns ( center - to - center ) dY ( 1 ) | Offset between rows ( center - to - center ) ncolumns ( 10 ) | Number of columns per sheet nrows ( 3 ) | Number of rows per sheet | ( These are for Avery Labels 8160 ) fontsize ( 13 ) | Fontsize to use","title":"vlt.office.addresslabels2pdf"},{"location":"reference/%2Bvlt/%2Boffice/vcarddata2addresslabels.m/","text":"vlt.office.vcarddata2addresslabels \u00b6 VCARD2LABELS - convert a VCARD file to a structure of label content V = VCARD2LABELS ( VCARDDATA , ... ) Identifies entries of the VCARDDATA ( from vlt . file . vcard2mat ) that have the field VFLAG . Then , an address is constructed and saved in the cell array of strings V . Each line of the address is a cell entry in the 2 nd dimension of V ( for example , V { i }{ 2 } is the 2 nd line of the ith address . This function also accepts name / value pairs that modify the default behavior : Parameter ( Default ) | Description -------------------------------------------------------------------------- VFLAG ( 'X-PHONETIC-ORG' ) | If this field is present , then the card should | be included in addresses . ADDRESSTITLELINE | The content of the first line of the address ( 'X-PHONETIC-ORG' ) | ADDRESS ( 'ADR' ) | The field to use to grab the address . If this | string ends the name of the field , it will be | used . ADDRESS_TYPE ( 'HOME' ) | The type of address to use Example : v = vlt . file . vcard2mat ( fname ); vout = vlt . office . vcarddata2addresslabels ( v ); vlt . office . addresslabels2pdf ( vout )","title":"vlt.office.vcarddata2addresslabels"},{"location":"reference/%2Bvlt/%2Boffice/vcarddata2addresslabels.m/#vltofficevcarddata2addresslabels","text":"VCARD2LABELS - convert a VCARD file to a structure of label content V = VCARD2LABELS ( VCARDDATA , ... ) Identifies entries of the VCARDDATA ( from vlt . file . vcard2mat ) that have the field VFLAG . Then , an address is constructed and saved in the cell array of strings V . Each line of the address is a cell entry in the 2 nd dimension of V ( for example , V { i }{ 2 } is the 2 nd line of the ith address . This function also accepts name / value pairs that modify the default behavior : Parameter ( Default ) | Description -------------------------------------------------------------------------- VFLAG ( 'X-PHONETIC-ORG' ) | If this field is present , then the card should | be included in addresses . ADDRESSTITLELINE | The content of the first line of the address ( 'X-PHONETIC-ORG' ) | ADDRESS ( 'ADR' ) | The field to use to grab the address . If this | string ends the name of the field , it will be | used . ADDRESS_TYPE ( 'HOME' ) | The type of address to use Example : v = vlt . file . vcard2mat ( fname ); vout = vlt . office . vcarddata2addresslabels ( v ); vlt . office . addresslabels2pdf ( vout )","title":"vlt.office.vcarddata2addresslabels"},{"location":"reference/%2Bvlt/%2Boptics/ideal_optical_transfer_function.m/","text":"vlt.optics.ideal_optical_transfer_function \u00b6 IDEAL_OPTICAL_TRANSFER_FUNCTION - ideal optical transfer function as a function of spatial frequency OTF_VALUE = vlt . optics . ideal_optical_transfer_function ( V ) Computes the optical transfer function of an ideal diffraction-limited imaging system : OTF_VALUE = 2 / pi * ( acos ( abs ( v )) - abs ( v ).* sqrt ( 1-v .* v )) V is the spatial frequency , relative to the high spatial frequency cut off V_cutoff ( V_cutoff := 1 ). From Wikipedia : Example : v = 0 : 0 . 001 : 1 ; otf = vlt . optics . ideal_optical_transfer_function ( v ); figure ; plot ( v , otf ); xlabel ( 'Spatial frequency (relative to max cut-off)' ); ylabel ( 'Contrast' );","title":"vlt.optics.ideal_optical_transfer_function"},{"location":"reference/%2Bvlt/%2Boptics/ideal_optical_transfer_function.m/#vltopticsideal_optical_transfer_function","text":"IDEAL_OPTICAL_TRANSFER_FUNCTION - ideal optical transfer function as a function of spatial frequency OTF_VALUE = vlt . optics . ideal_optical_transfer_function ( V ) Computes the optical transfer function of an ideal diffraction-limited imaging system : OTF_VALUE = 2 / pi * ( acos ( abs ( v )) - abs ( v ).* sqrt ( 1-v .* v )) V is the spatial frequency , relative to the high spatial frequency cut off V_cutoff ( V_cutoff := 1 ). From Wikipedia : Example : v = 0 : 0 . 001 : 1 ; otf = vlt . optics . ideal_optical_transfer_function ( v ); figure ; plot ( v , otf ); xlabel ( 'Spatial frequency (relative to max cut-off)' ); ylabel ( 'Contrast' );","title":"vlt.optics.ideal_optical_transfer_function"},{"location":"reference/%2Bvlt/%2Boptics/optics_tables/luminous_efficacy.m/","text":"vlt.optics/optics_tables.luminous_efficacy \u00b6 LUMINOUS_EFFICACY - The luminous efficacy ( in lm / watt ) vs . wavelength VL = vlt . optics . optics_tables . luminous_efficacy ( WAVELENGTHS ) or VL = vlt . optics . optics_tables . luminous_efficacy ( WAVELENGTHS , SCOTOPIC ) Returns the luminous efficacy for the requested WAVELENGTHS ( in nm ) . If the second argument SCOTOPIC is provided and it is 1 , then the scotopic ( dark vision / rod vision ) values are returned . Otherwise , PHOTOTOPIC vision ( light vision ) values are provided . The luminous efficacy is the conversion factor between radiated light energy in watts and the brightness as experienced by the human visual system , which has units of lumens . For example , if you have a 5 mW laser beam at 680 nm , the luminous flux is lf = ( 0 . 005 W ) * vlt . optics . optics_tables . luminous_efficacy ( 680 ) ( lm / watt ) = 0 . 0581 lm If you have a 5 mW laser beam at 630 nm , the luminous flux is lf = ( 0 . 005 W ) * vlt . optics . optics_tables . luminous_efficacy ( 630 ) ( lm / watt ) = 0 . 9050 lm The latter is better because 630 nm has a stronger overlap with visual perception . Note : Values of VL for wavelengths < 380 nm and greater than 770 nm will be 0 by default . Source : http : // hyperphysics . phy - astr . gsu . edu / hbase / vision / efficacy . html Their source : Williamson & Cummins , Light and Color in Nature and Art , Wiley , 1983 .","title":"vlt.optics/optics_tables.luminous_efficacy"},{"location":"reference/%2Bvlt/%2Boptics/optics_tables/luminous_efficacy.m/#vltopticsoptics_tablesluminous_efficacy","text":"LUMINOUS_EFFICACY - The luminous efficacy ( in lm / watt ) vs . wavelength VL = vlt . optics . optics_tables . luminous_efficacy ( WAVELENGTHS ) or VL = vlt . optics . optics_tables . luminous_efficacy ( WAVELENGTHS , SCOTOPIC ) Returns the luminous efficacy for the requested WAVELENGTHS ( in nm ) . If the second argument SCOTOPIC is provided and it is 1 , then the scotopic ( dark vision / rod vision ) values are returned . Otherwise , PHOTOTOPIC vision ( light vision ) values are provided . The luminous efficacy is the conversion factor between radiated light energy in watts and the brightness as experienced by the human visual system , which has units of lumens . For example , if you have a 5 mW laser beam at 680 nm , the luminous flux is lf = ( 0 . 005 W ) * vlt . optics . optics_tables . luminous_efficacy ( 680 ) ( lm / watt ) = 0 . 0581 lm If you have a 5 mW laser beam at 630 nm , the luminous flux is lf = ( 0 . 005 W ) * vlt . optics . optics_tables . luminous_efficacy ( 630 ) ( lm / watt ) = 0 . 9050 lm The latter is better because 630 nm has a stronger overlap with visual perception . Note : Values of VL for wavelengths < 380 nm and greater than 770 nm will be 0 by default . Source : http : // hyperphysics . phy - astr . gsu . edu / hbase / vision / efficacy . html Their source : Williamson & Cummins , Light and Color in Nature and Art , Wiley , 1983 .","title":"vlt.optics/optics_tables.luminous_efficacy"},{"location":"reference/%2Bvlt/%2Boptics/optics_tables/optics_table.m/","text":"vlt.optics/optics_tables.optics_table \u00b6 OPTICS_TABLE - Look up values from a table based on wavelength in nm [ Y , UNITS_STR , DESC_STR ] = vlt . optics . optics_tables . optics_table ( WAVELENGTHS , FILENAME ) Reads in a table from the text file FILENAME . If no path is provided , it is assume that FILENAME sits in the same directory as vlt . optics . optics_tables . optics_table . The table should have 2 or more columns . The first column is assumed to have the wavelengths in units of nanometers , and columns 2-N have the units to be returned . Each of the N-1 dimensions is interpolated from the table using linear interpolation in INTERP1 . Entries for wavelengths that are outside the bounds provided in the table are 0 . If there are files FILENAME_units . txt and FILENAME_desc . txt in the same directory as FILENAME , then units and a description are read . UNITS_STR is a string that gives human-readable units . DESC_STR is a human-readable description string . If these files are not present , then UNITS_STR and DESC_STR are empty strings . Example : Read in the intensity emissions from the NP510 projector : WAVES = [ 380 : 770 ] '; [ NP510 , NP510_units , NP510_desc ] =vlt.optics.optics_tables.optics_table(WAVES,' NP510 . txt '); figure; plot(WAVES,NP510(:,1),' r '); hold on; plot(WAVES,NP510(:,2),' g '); plot(WAVES,NP510(:,3),' b '); xlabel(' Wavelength ( nm ) '); ylabel(' Intensity ( abitrary units ) ' );","title":"vlt.optics/optics_tables.optics_table"},{"location":"reference/%2Bvlt/%2Boptics/optics_tables/optics_table.m/#vltopticsoptics_tablesoptics_table","text":"OPTICS_TABLE - Look up values from a table based on wavelength in nm [ Y , UNITS_STR , DESC_STR ] = vlt . optics . optics_tables . optics_table ( WAVELENGTHS , FILENAME ) Reads in a table from the text file FILENAME . If no path is provided , it is assume that FILENAME sits in the same directory as vlt . optics . optics_tables . optics_table . The table should have 2 or more columns . The first column is assumed to have the wavelengths in units of nanometers , and columns 2-N have the units to be returned . Each of the N-1 dimensions is interpolated from the table using linear interpolation in INTERP1 . Entries for wavelengths that are outside the bounds provided in the table are 0 . If there are files FILENAME_units . txt and FILENAME_desc . txt in the same directory as FILENAME , then units and a description are read . UNITS_STR is a string that gives human-readable units . DESC_STR is a human-readable description string . If these files are not present , then UNITS_STR and DESC_STR are empty strings . Example : Read in the intensity emissions from the NP510 projector : WAVES = [ 380 : 770 ] '; [ NP510 , NP510_units , NP510_desc ] =vlt.optics.optics_tables.optics_table(WAVES,' NP510 . txt '); figure; plot(WAVES,NP510(:,1),' r '); hold on; plot(WAVES,NP510(:,2),' g '); plot(WAVES,NP510(:,3),' b '); xlabel(' Wavelength ( nm ) '); ylabel(' Intensity ( abitrary units ) ' );","title":"vlt.optics/optics_tables.optics_table"},{"location":"reference/%2Bvlt/%2Bpath/absolute2relative.m/","text":"vlt.path.absolute2relative \u00b6 vlt . path . absolute2relative - Determine the relative path between two filenames , given two absolute names r = vlt . path . absolute2relative ( absolutepath1 , absolutepath2 ) Given two absolute paths , this function returns the relative path of path1 with respect to path2 . This function takes name / value pairs that modify its default behavior : | Parameter | Description | | ------------------------ | ------------------------------------------- | | input_filesep ( '/' ) | Input file separator ( consider filesep ) | | output_filesep ( '/' ) | Output file separator ( usually '/' for html | | backdir_symbol ( '..' ) | Symbol for moving back one directory | ** Example ** : r = vlt . path . absolute2relative ( '/Users/me/mydir1/mydir2/myfile1.m' , '/Users/me/mydir3/myfile2.m' ) % r = '../mydir1/mydir2/myfile1.m'","title":"vlt.path.absolute2relative"},{"location":"reference/%2Bvlt/%2Bpath/absolute2relative.m/#vltpathabsolute2relative","text":"vlt . path . absolute2relative - Determine the relative path between two filenames , given two absolute names r = vlt . path . absolute2relative ( absolutepath1 , absolutepath2 ) Given two absolute paths , this function returns the relative path of path1 with respect to path2 . This function takes name / value pairs that modify its default behavior : | Parameter | Description | | ------------------------ | ------------------------------------------- | | input_filesep ( '/' ) | Input file separator ( consider filesep ) | | output_filesep ( '/' ) | Output file separator ( usually '/' for html | | backdir_symbol ( '..' ) | Symbol for moving back one directory | ** Example ** : r = vlt . path . absolute2relative ( '/Users/me/mydir1/mydir2/myfile1.m' , '/Users/me/mydir3/myfile2.m' ) % r = '../mydir1/mydir2/myfile1.m'","title":"vlt.path.absolute2relative"},{"location":"reference/%2Bvlt/%2Bpath/pathstr2cellarray.m/","text":"vlt.path.pathstr2cellarray \u00b6 PATHSTR2CELLARRAY - Convert a path string to a cell list of strings PATH_CELLSTR = vlt . path . pathstr2cellarray Converts the current path string to a cell list of strings in PATH_CELLSTR . One can also use the constructions : PATH_CELLSTR = vlt . path . pathstr2cellarray ( PATHSTR ) to specify a path string other than the current PATH , or PATH_CELLSTR = vlt . path . pathstr2cellarray ( PATHSTR , SEPARATOR ) to use a path separator other than the current PATHSEP . Example : Remove all paths that have 'VH_matlab_code' in them path_cellstr = vlt . path . pathstr2cellarray ; matches = strfind ( path_cellstr , 'VH_matlab_code' ); inds = find ( 1 - vlt . data . isempty_cell ( matches )); % find indexes of all matches rmpath ( path_cellstr ( inds )); path_cellstr = vlt . path . pathstr2cellarray ; % update the list to reflect the changes See also : PATH , PATHSEP , vlt . data . isempty_cell","title":"vlt.path.pathstr2cellarray"},{"location":"reference/%2Bvlt/%2Bpath/pathstr2cellarray.m/#vltpathpathstr2cellarray","text":"PATHSTR2CELLARRAY - Convert a path string to a cell list of strings PATH_CELLSTR = vlt . path . pathstr2cellarray Converts the current path string to a cell list of strings in PATH_CELLSTR . One can also use the constructions : PATH_CELLSTR = vlt . path . pathstr2cellarray ( PATHSTR ) to specify a path string other than the current PATH , or PATH_CELLSTR = vlt . path . pathstr2cellarray ( PATHSTR , SEPARATOR ) to use a path separator other than the current PATHSEP . Example : Remove all paths that have 'VH_matlab_code' in them path_cellstr = vlt . path . pathstr2cellarray ; matches = strfind ( path_cellstr , 'VH_matlab_code' ); inds = find ( 1 - vlt . data . isempty_cell ( matches )); % find indexes of all matches rmpath ( path_cellstr ( inds )); path_cellstr = vlt . path . pathstr2cellarray ; % update the list to reflect the changes See also : PATH , PATHSEP , vlt . data . isempty_cell","title":"vlt.path.pathstr2cellarray"},{"location":"reference/%2Bvlt/%2Bpcb/KiCadGerber2OSHPark.m/","text":"vlt.pcb.KiCadGerber2OSHPark \u00b6 KiCadGerber2OSHPark - Convert KiCad Gerber extensions to OSH Park convention vlt . pcb . KiCadGerber2OSHPark ( DIRNAME ) Given a directory name with Gerber files , this function creates a subdirectory 'OSHPark' that has renamed Gerber files whose extensions match that expected by the OSH Park fabrication service . B . Cu . gbr -> B . Cu . gbr . GBL B . Mask . gbr -> B . Mask . gbr . GBS B . SilkS . gbr -> B . SilkS . gbr . GBO F . Cu . gbr -> F . Cu . gbr . GTL F . Mask . gbr -> F . Mask . gbr . GTS F . SilkS . gbr -> F . SilkS . gbr . GTO Edge . Cuts . gbr -> Edge . Cuts . gbr . GKO . drl -> drl . XLN","title":"vlt.pcb.KiCadGerber2OSHPark"},{"location":"reference/%2Bvlt/%2Bpcb/KiCadGerber2OSHPark.m/#vltpcbkicadgerber2oshpark","text":"KiCadGerber2OSHPark - Convert KiCad Gerber extensions to OSH Park convention vlt . pcb . KiCadGerber2OSHPark ( DIRNAME ) Given a directory name with Gerber files , this function creates a subdirectory 'OSHPark' that has renamed Gerber files whose extensions match that expected by the OSH Park fabrication service . B . Cu . gbr -> B . Cu . gbr . GBL B . Mask . gbr -> B . Mask . gbr . GBS B . SilkS . gbr -> B . SilkS . gbr . GBO F . Cu . gbr -> F . Cu . gbr . GTL F . Mask . gbr -> F . Mask . gbr . GTS F . SilkS . gbr -> F . SilkS . gbr . GTO Edge . Cuts . gbr -> Edge . Cuts . gbr . GKO . drl -> drl . XLN","title":"vlt.pcb.KiCadGerber2OSHPark"},{"location":"reference/%2Bvlt/%2Bplot/arrowplot.m/","text":"vlt.plot.arrowplot \u00b6 ARROWPLOT - Make a plot of arrow shapes, like quiver H=vlt.plot.arrowplot(X,Y,THETA,SCALE, ...) Plots arrows at positions X and Y with directions THETA (in DEGREES) and scale SCALE, according to the properties below, which can be modified by providing additional name/value pairs. The arrow will be rotated to point in THETA (in degrees, cartesian form, so 0 is rightward and angle proceeds counterclockwise). The arrow length and arrowhead length will be scaled by values in SCALE. The name/value pairs that can be specified: Property (default) : Description ------------------------------------------------------- length (1) : Line length linethickness (2) : Line thickness linecolor ([0 0 0]) : Line color (black by default) headangle (30) : Angle of arrowhead sweep back headlength (0.5) : Size of arrowhead length See also: vlt.plot.drawshape","title":"vlt.plot.arrowplot"},{"location":"reference/%2Bvlt/%2Bplot/arrowplot.m/#vltplotarrowplot","text":"ARROWPLOT - Make a plot of arrow shapes, like quiver H=vlt.plot.arrowplot(X,Y,THETA,SCALE, ...) Plots arrows at positions X and Y with directions THETA (in DEGREES) and scale SCALE, according to the properties below, which can be modified by providing additional name/value pairs. The arrow will be rotated to point in THETA (in degrees, cartesian form, so 0 is rightward and angle proceeds counterclockwise). The arrow length and arrowhead length will be scaled by values in SCALE. The name/value pairs that can be specified: Property (default) : Description ------------------------------------------------------- length (1) : Line length linethickness (2) : Line thickness linecolor ([0 0 0]) : Line color (black by default) headangle (30) : Angle of arrowhead sweep back headlength (0.5) : Size of arrowhead length See also: vlt.plot.drawshape","title":"vlt.plot.arrowplot"},{"location":"reference/%2Bvlt/%2Bplot/autohistogram.m/","text":"vlt.plot.autohistogram \u00b6 AUTOHISTOGRAM - Choose bins based on Freedman - Diaconis ' choice [COUNTS,BIN_CENTERS, BIN_EDGES, FULLCOUNTS] = vlt.plot.autohistogram(DATA) Automatically chooses bin sizes based on Freedman - Diaconis ' choice, defined to be WIDTH = 2*IQR(DATA)/CUBE ROOT OF NUMBER OF DATAPOINTS (see Histogram on Wikipedia) In the event that the BIN_CENTERS would exceed 100,000 points, then the bins are trimmed at the edges in 1 percentile increments until the number of bins is fewer than 100,000 points. Inputs: DATA, a set of samples Outputs: COUNTS, the number of DATA samples in each bin BIN_CENTERS - the center location of each bin BIN_EDGES - the bin edges used FULLCOUNTS - the full counts returned from HISTC. If the bins were reduced at the edges so that the number of bins is < 100000 then BIN_EDGES and FULLCOUNTS allows the user to determine the number of data points that fall below and above the bins. (See help HISTC)","title":"vlt.plot.autohistogram"},{"location":"reference/%2Bvlt/%2Bplot/autohistogram.m/#vltplotautohistogram","text":"AUTOHISTOGRAM - Choose bins based on Freedman - Diaconis ' choice [COUNTS,BIN_CENTERS, BIN_EDGES, FULLCOUNTS] = vlt.plot.autohistogram(DATA) Automatically chooses bin sizes based on Freedman - Diaconis ' choice, defined to be WIDTH = 2*IQR(DATA)/CUBE ROOT OF NUMBER OF DATAPOINTS (see Histogram on Wikipedia) In the event that the BIN_CENTERS would exceed 100,000 points, then the bins are trimmed at the edges in 1 percentile increments until the number of bins is fewer than 100,000 points. Inputs: DATA, a set of samples Outputs: COUNTS, the number of DATA samples in each bin BIN_CENTERS - the center location of each bin BIN_EDGES - the bin edges used FULLCOUNTS - the full counts returned from HISTC. If the bins were reduced at the edges so that the number of bins is < 100000 then BIN_EDGES and FULLCOUNTS allows the user to determine the number of data points that fall below and above the bins. (See help HISTC)","title":"vlt.plot.autohistogram"},{"location":"reference/%2Bvlt/%2Bplot/autoplacetext.m/","text":"vlt.plot.autoplacetext \u00b6 AUTOPLACETEXT - Automatically place text within the current axes H = vlt.plot.autoplacetext(TEXTSTRING) At the present time, this function places the text string TEXTSTRING (which can be a simple string, or a cell list of strings) at the location 80% high, 50% centered, in the current axes. This function could be improved to examine the axes and put the text in a \"non-busy\" location.","title":"vlt.plot.autoplacetext"},{"location":"reference/%2Bvlt/%2Bplot/autoplacetext.m/#vltplotautoplacetext","text":"AUTOPLACETEXT - Automatically place text within the current axes H = vlt.plot.autoplacetext(TEXTSTRING) At the present time, this function places the text string TEXTSTRING (which can be a simple string, or a cell list of strings) at the location 80% high, 50% centered, in the current axes. This function could be improved to examine the axes and put the text in a \"non-busy\" location.","title":"vlt.plot.autoplacetext"},{"location":"reference/%2Bvlt/%2Bplot/cleanfig.m/","text":"vlt.plot.cleanfig \u00b6 vlt . plot . cleanfig - Cleans a figure for saving in guide vlt . plot . cleanfig ( FIGNUM , UNITS ) Cleans all string entries from 'edit' and 'popup' uitools , and sets units of all uitools to UNITS . Useful for saving a figure after editing it .","title":"vlt.plot.cleanfig"},{"location":"reference/%2Bvlt/%2Bplot/cleanfig.m/#vltplotcleanfig","text":"vlt . plot . cleanfig - Cleans a figure for saving in guide vlt . plot . cleanfig ( FIGNUM , UNITS ) Cleans all string entries from 'edit' and 'popup' uitools , and sets units of all uitools to UNITS . Useful for saving a figure after editing it .","title":"vlt.plot.cleanfig"},{"location":"reference/%2Bvlt/%2Bplot/colorlist.m/","text":"vlt.plot.colorlist \u00b6 COLORLIST - Grab a color or group of colors from a list C = vlt . plot . colorlist Returns an Nx3 list of colors . By default , this function returns the normal 7 colors that Matlab uses as the default ColorOrder for new axes . or C = vlt . plot . colorlist ( N ) Returns a 1 x3 color chosen from the color list . The Nth entry is chosen . If N is greater than the number of colors in the list , the selection 'wraps around' back to the beginning of the list . This function also takes name / value pairs that extend its functionality : Parameter ( default ) | Description ------------------------------------------------------ ColorList ( 7 x3 default | The color list to choose from axes | Examples : jet ( 256 ) , gray ( 256 ) ColorOrder ) | DoNotWrap ( 0 ) | Directs the function not to wrap the | selection around the list if N | is greater than the number of colors . | Instead , an error will occur .","title":"vlt.plot.colorlist"},{"location":"reference/%2Bvlt/%2Bplot/colorlist.m/#vltplotcolorlist","text":"COLORLIST - Grab a color or group of colors from a list C = vlt . plot . colorlist Returns an Nx3 list of colors . By default , this function returns the normal 7 colors that Matlab uses as the default ColorOrder for new axes . or C = vlt . plot . colorlist ( N ) Returns a 1 x3 color chosen from the color list . The Nth entry is chosen . If N is greater than the number of colors in the list , the selection 'wraps around' back to the beginning of the list . This function also takes name / value pairs that extend its functionality : Parameter ( default ) | Description ------------------------------------------------------ ColorList ( 7 x3 default | The color list to choose from axes | Examples : jet ( 256 ) , gray ( 256 ) ColorOrder ) | DoNotWrap ( 0 ) | Directs the function not to wrap the | selection around the list if N | is greater than the number of colors . | Instead , an error will occur .","title":"vlt.plot.colorlist"},{"location":"reference/%2Bvlt/%2Bplot/ctable.m/","text":"vlt.plot.ctable \u00b6 vlt . plot . ctable Creates a color table from a colormap . CT = vlt . plot . ctable ( CMAP [, SZ ] ) Returns a color table matrix from the colormap CMAP . The color table is 3 xSZ , and if size is not specified SZ is assumed to be 256 . Each entry of the colortable CT ( i + 1 , j + 1 , k + 1 ) contains the index of the closest color in the colormap cmap , where i , j , and k run from 1 ... SZ .","title":"vlt.plot.ctable"},{"location":"reference/%2Bvlt/%2Bplot/ctable.m/#vltplotctable","text":"vlt . plot . ctable Creates a color table from a colormap . CT = vlt . plot . ctable ( CMAP [, SZ ] ) Returns a color table matrix from the colormap CMAP . The color table is 3 xSZ , and if size is not specified SZ is assumed to be 256 . Each entry of the colortable CT ( i + 1 , j + 1 , k + 1 ) contains the index of the closest color in the colormap cmap , where i , j , and k run from 1 ... SZ .","title":"vlt.plot.ctable"},{"location":"reference/%2Bvlt/%2Bplot/cumhist.m/","text":"vlt.plot.cumhist \u00b6 vlt . plot . cumhist - Make data for a cumulative histogram plot [ X , Y ] = vlt . plot . cumhist ( DATA , XRANGE , PERCENT_DELTA ) Generates X and Y variables suitable for plotting with the plot function . Y values are generated for percentages ranging from 0 to 100 % in steps of PERCENT_DELTA . The XRANGE for the plot is specified in XRANGE = [ lowvalue highvalue ]. Example : r = randn ( 1000 , 1 ); % 1000 normally - distributed random numbers xrange = [ -4 4 ]; percent_delta = 0.1 ; % use steps of 0.1 % [ X , Y ] = vlt . plot . cumhist ( r , xrange , percent_delta ); figure ; plot ( X , Y , ' k - ' ); hold on ; plot ([ -4 4 ],[ 50 50 ], ' k -- ' ); % add ' median ' ( 50 %- tile ) dashed line box off ; ylabel ( ' Percentage ' ); xlabel ( ' Values ' ); See also : PRCTILE , CUMSUM , HIST","title":"vlt.plot.cumhist"},{"location":"reference/%2Bvlt/%2Bplot/cumhist.m/#vltplotcumhist","text":"vlt . plot . cumhist - Make data for a cumulative histogram plot [ X , Y ] = vlt . plot . cumhist ( DATA , XRANGE , PERCENT_DELTA ) Generates X and Y variables suitable for plotting with the plot function . Y values are generated for percentages ranging from 0 to 100 % in steps of PERCENT_DELTA . The XRANGE for the plot is specified in XRANGE = [ lowvalue highvalue ]. Example : r = randn ( 1000 , 1 ); % 1000 normally - distributed random numbers xrange = [ -4 4 ]; percent_delta = 0.1 ; % use steps of 0.1 % [ X , Y ] = vlt . plot . cumhist ( r , xrange , percent_delta ); figure ; plot ( X , Y , ' k - ' ); hold on ; plot ([ -4 4 ],[ 50 50 ], ' k -- ' ); % add ' median ' ( 50 %- tile ) dashed line box off ; ylabel ( ' Percentage ' ); xlabel ( ' Values ' ); See also : PRCTILE , CUMSUM , HIST","title":"vlt.plot.cumhist"},{"location":"reference/%2Bvlt/%2Bplot/drawbarinimage.m/","text":"vlt.plot.drawbarinimage \u00b6 vlt . plot . drawbarinimage - Draw bar in image Draws a bar of a particular orientation and size in an image at the location specified . NEWIMAGE = vlt . plot . drawbarinimage ( IMAGE , COLOR , CENTER ,... SIZE , THICKNESS , ORIENTATION ) Draws a bar of color COLOR in an image IMAGE . The bar will have LENGTH , THICKNESS and ORIENTATION ( in degrees ). The bar will be centered at CENTER = [ X Y ]","title":"vlt.plot.drawbarinimage"},{"location":"reference/%2Bvlt/%2Bplot/drawbarinimage.m/#vltplotdrawbarinimage","text":"vlt . plot . drawbarinimage - Draw bar in image Draws a bar of a particular orientation and size in an image at the location specified . NEWIMAGE = vlt . plot . drawbarinimage ( IMAGE , COLOR , CENTER ,... SIZE , THICKNESS , ORIENTATION ) Draws a bar of color COLOR in an image IMAGE . The bar will have LENGTH , THICKNESS and ORIENTATION ( in degrees ). The bar will be centered at CENTER = [ X Y ]","title":"vlt.plot.drawbarinimage"},{"location":"reference/%2Bvlt/%2Bplot/drawshape.m/","text":"vlt.plot.drawshape \u00b6 vlt . plot . drawshape -- Draw a simple shape in an image or as a vector plot H = vlt . plot . drawshape ( SHAPE ) Draws a shape using plots in current axes ( vector mode ). H is a list of handles to the plots . INDS = vlt . plot . drawshape ( SHAPE , MESHX , MESHY ) Returns a set of indexes that will make SHAPE on a bitmap with coordinate system MESHX x MESHY . ( See ' help mesh ' .) SHAPE should be a struct with fields that vary according to the shape requested . Each shape should have a field ' shape ' that describes the shape , and appropriate fields that describe the attributes of that shape . Known shapes are described below . Note that colors should be entered as RGB for vector graphics and a value for SHAPE . shape = ' ellipse ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color , use empty if no line . fillcolor = [ r g b ] or [ n ] % fill color , use empty [] if no fill . orientation = [ theta ]; % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' rect ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color . fillcolor = [ r g b ] or [ n ] % fill color , use empty ([]) if no fill . orientation = [ theta ] % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' arrow ' . posxy = [ x y ] % center position . length = [ x ] % line length . linethickness = [ x ] % thickness of line . linecolor = [ r g b ] or [ n ] % line color . direction = [ theta ] % direction in cartesian angles , degrees ( 0 is right ) . headangle = [ theta ] % angle of head sweep back ( e . g ., 30 ) . headlength = [ x ] % head length ( e . g ., length / 2 )","title":"vlt.plot.drawshape"},{"location":"reference/%2Bvlt/%2Bplot/drawshape.m/#vltplotdrawshape","text":"vlt . plot . drawshape -- Draw a simple shape in an image or as a vector plot H = vlt . plot . drawshape ( SHAPE ) Draws a shape using plots in current axes ( vector mode ). H is a list of handles to the plots . INDS = vlt . plot . drawshape ( SHAPE , MESHX , MESHY ) Returns a set of indexes that will make SHAPE on a bitmap with coordinate system MESHX x MESHY . ( See ' help mesh ' .) SHAPE should be a struct with fields that vary according to the shape requested . Each shape should have a field ' shape ' that describes the shape , and appropriate fields that describe the attributes of that shape . Known shapes are described below . Note that colors should be entered as RGB for vector graphics and a value for SHAPE . shape = ' ellipse ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color , use empty if no line . fillcolor = [ r g b ] or [ n ] % fill color , use empty [] if no fill . orientation = [ theta ]; % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' rect ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color . fillcolor = [ r g b ] or [ n ] % fill color , use empty ([]) if no fill . orientation = [ theta ] % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' arrow ' . posxy = [ x y ] % center position . length = [ x ] % line length . linethickness = [ x ] % thickness of line . linecolor = [ r g b ] or [ n ] % line color . direction = [ theta ] % direction in cartesian angles , degrees ( 0 is right ) . headangle = [ theta ] % angle of head sweep back ( e . g ., 30 ) . headlength = [ x ] % head length ( e . g ., length / 2 )","title":"vlt.plot.drawshape"},{"location":"reference/%2Bvlt/%2Bplot/hist2d.m/","text":"vlt.plot.hist2d \u00b6 function mHist = hist2d ( [vY, vX], vYEdge, vXEdge ) 2 Dimensional Histogram Counts number of points in the bins defined by vYEdge , vXEdge . size ( vX ) == size ( vY ) == [ n , 1 ] size ( mHist ) == [ length ( vYEdge ) - 1 , length ( vXEdge ) - 1 ] EXAMPLE mYX = rand ( 100 , 2 ); vXEdge = linspace ( 0 , 1 , 10 ); vYEdge = linspace ( 0 , 1 , 20 ); mHist2d = vlt . plot . hist2d ( mYX , vYEdge , vXEdge ); nXBins = length ( vXEdge ); nYBins = length ( vYEdge ); vXLabel = 0.5 * ( vXEdge ( 1 :( nXBins - 1 )) + vXEdge ( 2 : nXBins )); vYLabel = 0.5 * ( vYEdge ( 1 :( nYBins - 1 )) + vYEdge ( 2 : nYBins )); pcolor ( vXLabel , vYLabel , mHist2d ); colorbar","title":"vlt.plot.hist2d"},{"location":"reference/%2Bvlt/%2Bplot/hist2d.m/#vltplothist2d","text":"function mHist = hist2d ( [vY, vX], vYEdge, vXEdge ) 2 Dimensional Histogram Counts number of points in the bins defined by vYEdge , vXEdge . size ( vX ) == size ( vY ) == [ n , 1 ] size ( mHist ) == [ length ( vYEdge ) - 1 , length ( vXEdge ) - 1 ] EXAMPLE mYX = rand ( 100 , 2 ); vXEdge = linspace ( 0 , 1 , 10 ); vYEdge = linspace ( 0 , 1 , 20 ); mHist2d = vlt . plot . hist2d ( mYX , vYEdge , vXEdge ); nXBins = length ( vXEdge ); nYBins = length ( vYEdge ); vXLabel = 0.5 * ( vXEdge ( 1 :( nXBins - 1 )) + vXEdge ( 2 : nXBins )); vYLabel = 0.5 * ( vYEdge ( 1 :( nYBins - 1 )) + vYEdge ( 2 : nYBins )); pcolor ( vXLabel , vYLabel , mHist2d ); colorbar","title":"vlt.plot.hist2d"},{"location":"reference/%2Bvlt/%2Bplot/hist2line.m/","text":"vlt.plot.hist2line \u00b6 HIST2LINE - generate a line plot from a histogram that will plot the histogram [X,Y] = vlt.plot.hist2line(BINS, COUNTS) Generates a line plot with values X, Y from the histogram with bin edges BINS and bin counts COUNTS. BINS should have one more entry than DATA, since DATA(i) is the number of points between BINS(i) and BINS(i+1). See also: BAR, BARH, HIST, HISTC, vlt.plot.shiftedbar","title":"vlt.plot.hist2line"},{"location":"reference/%2Bvlt/%2Bplot/hist2line.m/#vltplothist2line","text":"HIST2LINE - generate a line plot from a histogram that will plot the histogram [X,Y] = vlt.plot.hist2line(BINS, COUNTS) Generates a line plot with values X, Y from the histogram with bin edges BINS and bin counts COUNTS. BINS should have one more entry than DATA, since DATA(i) is the number of points between BINS(i) and BINS(i+1). See also: BAR, BARH, HIST, HISTC, vlt.plot.shiftedbar","title":"vlt.plot.hist2line"},{"location":"reference/%2Bvlt/%2Bplot/imagedisplay.m/","text":"vlt.plot.imagedisplay \u00b6 vlt . plot . imagedisplay - Display an image and allow user to adjust H = vlt . plot . imagedisplay ( IMAGE , [...] ) Displays the image IMAGE in the current figure . There are buttons provided for adjusting the image scale , including an autoscale button . One may also provide additional arguments in name / value pairs ( e . g ., ' InitialScale ' , [ 0 255 ]) : ' InitialScale ' [ low high ] the high and low bounds for scaling ( initially [ 0 255 ]) ' AutoScale ' , 0 / 1 should autoscale button be visible ? ( initially 1 ) ' Units ' , Units of position ( e . g ., ' pixels ' or ' normalized ' ; default ' normalized ' ) ' Position ' , position of image in figure ( initially [ 0.1 0.1 0.8 0.8 ]) ' ScaleEdits ' 0 / 1 should scale edit boxes be visible ? ( initially 1 ) ' Title ' A title string ' fig ' The figure ( new is created by default )","title":"vlt.plot.imagedisplay"},{"location":"reference/%2Bvlt/%2Bplot/imagedisplay.m/#vltplotimagedisplay","text":"vlt . plot . imagedisplay - Display an image and allow user to adjust H = vlt . plot . imagedisplay ( IMAGE , [...] ) Displays the image IMAGE in the current figure . There are buttons provided for adjusting the image scale , including an autoscale button . One may also provide additional arguments in name / value pairs ( e . g ., ' InitialScale ' , [ 0 255 ]) : ' InitialScale ' [ low high ] the high and low bounds for scaling ( initially [ 0 255 ]) ' AutoScale ' , 0 / 1 should autoscale button be visible ? ( initially 1 ) ' Units ' , Units of position ( e . g ., ' pixels ' or ' normalized ' ; default ' normalized ' ) ' Position ' , position of image in figure ( initially [ 0.1 0.1 0.8 0.8 ]) ' ScaleEdits ' 0 / 1 should scale edit boxes be visible ? ( initially 1 ) ' Title ' A title string ' fig ' The figure ( new is created by default )","title":"vlt.plot.imagedisplay"},{"location":"reference/%2Bvlt/%2Bplot/intline.m/","text":"vlt.plot.intline \u00b6 INTLINE Integer-coordinate line drawing algorithm. [X, Y] = vlt.plot.intline(X1, X2, Y1, Y2) computes an approximation to the line segment joining (X1, Y1) and (X2, Y2) with integer coordinates. X1, X2, Y1, and Y2 should be integers. vlt.plot.intline is reversible; that is, vlt.plot.intline(X1, X2, Y1, Y2) produces the same results as FLIPUD(vlt.plot.intline(X2, X1, Y2, Y1)).","title":"vlt.plot.intline"},{"location":"reference/%2Bvlt/%2Bplot/intline.m/#vltplotintline","text":"INTLINE Integer-coordinate line drawing algorithm. [X, Y] = vlt.plot.intline(X1, X2, Y1, Y2) computes an approximation to the line segment joining (X1, Y1) and (X2, Y2) with integer coordinates. X1, X2, Y1, and Y2 should be integers. vlt.plot.intline is reversible; that is, vlt.plot.intline(X1, X2, Y1, Y2) produces the same results as FLIPUD(vlt.plot.intline(X2, X1, Y2, Y1)).","title":"vlt.plot.intline"},{"location":"reference/%2Bvlt/%2Bplot/matchaxes.m/","text":"vlt.plot.matchaxes \u00b6 MATCHAXES - Set the axis limits on a set of axes to the same value vlt . plot . matchaxes ( AXESLIST , XMIN , XMAX , YMIN , YMAX ) For a list of axes handles AXESHANDLES , this function sets them all to the same AXIS values . If XMIN , XMAX , YMIN , YMAX are numerical values then those values are used . A string can also be passed for XMIN , XMAX , YMIN , or YMAX ( or any combination ). The string can be : string : | Description --------------------------------------------------------------------- ' axis ' | The function uses the minimum ( for XMIN , | YMIN ) or maximum ( for XMAX , YMAX ) of the | values currently on the axes . ' close ' | The function uses the the min ( or max ) value | of the data plotted on the axes . Note that this function doesn ' t install any code that will maintain these axes relationships ( if you change one axis , the others will not automatically change ). It simply sets the AXIS values at the time it is called . If XMIN == XMAX or YMIN == YMAX ( for example , if the data points all have one value ) then vlt . plot . matchaxes subtracts 1 from the minimum and adds 1 to the maximum to avoid an error , and a warning is given . Example : Rescale 2 axes so the Y axes are matched ( from 0 to 1 ) and the X axes are based on the maximum and minimum of the 2 axes specified . % click in the first axes myaxes1 = gca ; % click in the second axes myaxes2 = gca ; vlt . plot . matchaxes ([ myaxes1 myaxes2 ], ' axis ',' axis ' , 0 , 1 ); See also : AXES , AXIS","title":"vlt.plot.matchaxes"},{"location":"reference/%2Bvlt/%2Bplot/matchaxes.m/#vltplotmatchaxes","text":"MATCHAXES - Set the axis limits on a set of axes to the same value vlt . plot . matchaxes ( AXESLIST , XMIN , XMAX , YMIN , YMAX ) For a list of axes handles AXESHANDLES , this function sets them all to the same AXIS values . If XMIN , XMAX , YMIN , YMAX are numerical values then those values are used . A string can also be passed for XMIN , XMAX , YMIN , or YMAX ( or any combination ). The string can be : string : | Description --------------------------------------------------------------------- ' axis ' | The function uses the minimum ( for XMIN , | YMIN ) or maximum ( for XMAX , YMAX ) of the | values currently on the axes . ' close ' | The function uses the the min ( or max ) value | of the data plotted on the axes . Note that this function doesn ' t install any code that will maintain these axes relationships ( if you change one axis , the others will not automatically change ). It simply sets the AXIS values at the time it is called . If XMIN == XMAX or YMIN == YMAX ( for example , if the data points all have one value ) then vlt . plot . matchaxes subtracts 1 from the minimum and adds 1 to the maximum to avoid an error , and a warning is given . Example : Rescale 2 axes so the Y axes are matched ( from 0 to 1 ) and the X axes are based on the maximum and minimum of the 2 axes specified . % click in the first axes myaxes1 = gca ; % click in the second axes myaxes2 = gca ; vlt . plot . matchaxes ([ myaxes1 myaxes2 ], ' axis ',' axis ' , 0 , 1 ); See also : AXES , AXIS","title":"vlt.plot.matchaxes"},{"location":"reference/%2Bvlt/%2Bplot/median_within_between_plot.m/","text":"vlt.plot.median_within_between_plot \u00b6 MEDIAN_WITHIN_BETWEEN_PLOT - Plot an index for many experiments , different conditions [ H , DATAPOINTS ] = vlt . plot . median_within_between_plot ( DATA , EXPERIMENT_INDEXES , LABELS ) Plots index values from individual experiments that are grouped into different experimental conditions . For each condition , indexes from individual animals are plotted in columns . A bigger space is left between animals that are in different experimental groups . Median values for each animal and each group are highlighted with a horizontal bar . Inputs : There are 2 ways of specifying the data . Method 1 : DATA should be a cell array of index values for different conditions . If there N conditions , then DATA should have N entries . Each entry DATA { n } should have the index values from a single experimental condition . EXPERIMENT_INDEXES { n } indicates the experiment number that produced each data point in DATA { n } . Method 2 : DATA is an array of values . EXPERIMENT_INDEXES is an Mx2 matrix ; the first column of EXPERIMENT_INDEXES should be the experiment index number , and the second column of EXPERIMENT_INDEXES should be the condition number . LABELS { n } should be the label for the conditions . Outputs : H is a set of handles to the plots . DATAPOINTS is a structure with the following fields : experiment : the experiment that corresponds to the point condition : the condition of the point index : the index of the point within the condition x : the x position on the plot y : the y position on the plot ( might be transformed from the raw data )","title":"vlt.plot.median_within_between_plot"},{"location":"reference/%2Bvlt/%2Bplot/median_within_between_plot.m/#vltplotmedian_within_between_plot","text":"MEDIAN_WITHIN_BETWEEN_PLOT - Plot an index for many experiments , different conditions [ H , DATAPOINTS ] = vlt . plot . median_within_between_plot ( DATA , EXPERIMENT_INDEXES , LABELS ) Plots index values from individual experiments that are grouped into different experimental conditions . For each condition , indexes from individual animals are plotted in columns . A bigger space is left between animals that are in different experimental groups . Median values for each animal and each group are highlighted with a horizontal bar . Inputs : There are 2 ways of specifying the data . Method 1 : DATA should be a cell array of index values for different conditions . If there N conditions , then DATA should have N entries . Each entry DATA { n } should have the index values from a single experimental condition . EXPERIMENT_INDEXES { n } indicates the experiment number that produced each data point in DATA { n } . Method 2 : DATA is an array of values . EXPERIMENT_INDEXES is an Mx2 matrix ; the first column of EXPERIMENT_INDEXES should be the experiment index number , and the second column of EXPERIMENT_INDEXES should be the condition number . LABELS { n } should be the label for the conditions . Outputs : H is a set of handles to the plots . DATAPOINTS is a structure with the following fields : experiment : the experiment that corresponds to the point condition : the condition of the point index : the index of the point within the condition x : the x position on the plot y : the y position on the plot ( might be transformed from the raw data )","title":"vlt.plot.median_within_between_plot"},{"location":"reference/%2Bvlt/%2Bplot/movetoback.m/","text":"vlt.plot.movetoback \u00b6 vlt . plot . movetoback - Move a plot to the \"back\" of the \"paper\" vlt . plot . movetoback ( PLOT_H ) Moves the pot specified by the plot handle PLOT_H to the \"back\" of the \"paper\" in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 vlt . plot . movetoback ( h2 ); % now the red line is in \"back\" PLOT_H can be a single handle or an array of handles .","title":"vlt.plot.movetoback"},{"location":"reference/%2Bvlt/%2Bplot/movetoback.m/#vltplotmovetoback","text":"vlt . plot . movetoback - Move a plot to the \"back\" of the \"paper\" vlt . plot . movetoback ( PLOT_H ) Moves the pot specified by the plot handle PLOT_H to the \"back\" of the \"paper\" in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 vlt . plot . movetoback ( h2 ); % now the red line is in \"back\" PLOT_H can be a single handle or an array of handles .","title":"vlt.plot.movetoback"},{"location":"reference/%2Bvlt/%2Bplot/movetofront.m/","text":"vlt.plot.movetofront \u00b6 vlt . plot . movetofront - Move a plot to the \"front\" of the \"paper\" vlt . plot . movetofront ( PLOT_H ) Moves the plot specified by the plot handle PLOT_H to the \"front\" of the paper in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 vlt . plot . movetofront ( h1 ); % now the black line is in \"front\" PLOT_H can be a single handle or an array of handles .","title":"vlt.plot.movetofront"},{"location":"reference/%2Bvlt/%2Bplot/movetofront.m/#vltplotmovetofront","text":"vlt . plot . movetofront - Move a plot to the \"front\" of the \"paper\" vlt . plot . movetofront ( PLOT_H ) Moves the plot specified by the plot handle PLOT_H to the \"front\" of the paper in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 vlt . plot . movetofront ( h1 ); % now the black line is in \"front\" PLOT_H can be a single handle or an array of handles .","title":"vlt.plot.movetofront"},{"location":"reference/%2Bvlt/%2Bplot/myerrorbar.m/","text":"vlt.plot.myerrorbar \u00b6 MYERRORBAR Error bar plot . ERRORBAR ( X , Y , L , U ) plots the graph of vector X vs . vector Y with error bars specified by the vectors L and U . L and U contain the lower and upper error ranges for each point in Y . Each error bar is L ( i ) + U ( i ) long and is drawn a distance of U ( i ) above and L ( i ) below the points in ( X , Y ) . The vectors X , Y , L and U must all be the same length . If X , Y , L and U are matrices then each column produces a separate line . ERRORBAR ( X , Y , E ) or ERRORBAR ( Y , E ) plots Y with error bars [ Y - E Y + E ] . ERRORBAR ( ... , 'LineSpec' ) uses the color and linestyle specified by the string 'LineSpec' . See PLOT for possibilities . ERRORBAR ( ... , TEE ) gives the 'TEE' width , in the same units as X variable H = ERRORBAR ( ... ) returns a vector of line handles . For example , x = 1 : 10 ; y = sin ( x ); e = std ( y ) * ones ( size ( x )); errorbar ( x , y , e ) draws symmetric error bars of unit standard deviation .","title":"vlt.plot.myerrorbar"},{"location":"reference/%2Bvlt/%2Bplot/myerrorbar.m/#vltplotmyerrorbar","text":"MYERRORBAR Error bar plot . ERRORBAR ( X , Y , L , U ) plots the graph of vector X vs . vector Y with error bars specified by the vectors L and U . L and U contain the lower and upper error ranges for each point in Y . Each error bar is L ( i ) + U ( i ) long and is drawn a distance of U ( i ) above and L ( i ) below the points in ( X , Y ) . The vectors X , Y , L and U must all be the same length . If X , Y , L and U are matrices then each column produces a separate line . ERRORBAR ( X , Y , E ) or ERRORBAR ( Y , E ) plots Y with error bars [ Y - E Y + E ] . ERRORBAR ( ... , 'LineSpec' ) uses the color and linestyle specified by the string 'LineSpec' . See PLOT for possibilities . ERRORBAR ( ... , TEE ) gives the 'TEE' width , in the same units as X variable H = ERRORBAR ( ... ) returns a vector of line handles . For example , x = 1 : 10 ; y = sin ( x ); e = std ( y ) * ones ( size ( x )); errorbar ( x , y , e ) draws symmetric error bars of unit standard deviation .","title":"vlt.plot.myerrorbar"},{"location":"reference/%2Bvlt/%2Bplot/plot_multichan.m/","text":"vlt.plot.plot_multichan \u00b6 PLOT_MULTICHAN - Plots multiple channels H = vlt . plot . plot_multichan ( DATA , T , SPACE ) Plots multiple channels of DATA ( assumed to be NUMSAMPLES X NUMCHANNELS ) T is the time for each sample and SPACE is the space to put between channels .","title":"vlt.plot.plot_multichan"},{"location":"reference/%2Bvlt/%2Bplot/plot_multichan.m/#vltplotplot_multichan","text":"PLOT_MULTICHAN - Plots multiple channels H = vlt . plot . plot_multichan ( DATA , T , SPACE ) Plots multiple channels of DATA ( assumed to be NUMSAMPLES X NUMCHANNELS ) T is the time for each sample and SPACE is the space to put between channels .","title":"vlt.plot.plot_multichan"},{"location":"reference/%2Bvlt/%2Bplot/plotbargraphwithdata.m/","text":"vlt.plot.plotbargraphwithdata \u00b6 PLOTMEANBAR - Plot a bar graph indicating mean , standard error , and raw data H = vlt . plot . plotbargraphwithdata ( DATA , ...) Plots a bar graph with height equals to the mean value of the the mean value of each dataset in the cell array DATA { i }. The standard error of the mean is shown with error bars offset by XOFFSET . The raw data is plotted offset by XOFFSET . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ( linspace ( 1 ,... | The location on the x axis where the bars numel ( data ),, numel ( data ))) | should be drawn ([ xstart xend ]) barcolor ([ 0.4 0.4 0.4 ]) | Color of the bar graph ( RGB ) datacolor ([ 0 0 0 ]) | Color of the raw data ( RGB ) stderrcolor ([ 0 0 0 ]) | Color of the std error bars ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? userawdata ( 1 ) | 0 / 1 Should we plot the raw data ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot symbolsize ( 6 ) | Symbol size symbol ( 'o' ) | Symbol to use xoffset ( 0.25 ) | X offset for plotting standard error , raw data measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median ' , e . g .","title":"vlt.plot.plotbargraphwithdata"},{"location":"reference/%2Bvlt/%2Bplot/plotbargraphwithdata.m/#vltplotplotbargraphwithdata","text":"PLOTMEANBAR - Plot a bar graph indicating mean , standard error , and raw data H = vlt . plot . plotbargraphwithdata ( DATA , ...) Plots a bar graph with height equals to the mean value of the the mean value of each dataset in the cell array DATA { i }. The standard error of the mean is shown with error bars offset by XOFFSET . The raw data is plotted offset by XOFFSET . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ( linspace ( 1 ,... | The location on the x axis where the bars numel ( data ),, numel ( data ))) | should be drawn ([ xstart xend ]) barcolor ([ 0.4 0.4 0.4 ]) | Color of the bar graph ( RGB ) datacolor ([ 0 0 0 ]) | Color of the raw data ( RGB ) stderrcolor ([ 0 0 0 ]) | Color of the std error bars ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? userawdata ( 1 ) | 0 / 1 Should we plot the raw data ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot symbolsize ( 6 ) | Symbol size symbol ( 'o' ) | Symbol to use xoffset ( 0.25 ) | X offset for plotting standard error , raw data measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median ' , e . g .","title":"vlt.plot.plotbargraphwithdata"},{"location":"reference/%2Bvlt/%2Bplot/plotmeanbar.m/","text":"vlt.plot.plotmeanbar \u00b6 PLOTMEANBAR - Plot a horizontal bar indicating mean ( or standard error ) of a dataset H = vlt . plot . plotmeanbar ( DATA , ...) Plots the mean value of data as a horizontal bar , and , optionally , a vertical bar indicating the standard error . Returns a handle ( s ) H to the plot . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ([ 0 1 ]) | The location on the x axis where the line | should be drawn ([ xstart xend ]) color ([ 0 0 0 ]) | Color of the bar ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median '","title":"vlt.plot.plotmeanbar"},{"location":"reference/%2Bvlt/%2Bplot/plotmeanbar.m/#vltplotplotmeanbar","text":"PLOTMEANBAR - Plot a horizontal bar indicating mean ( or standard error ) of a dataset H = vlt . plot . plotmeanbar ( DATA , ...) Plots the mean value of data as a horizontal bar , and , optionally , a vertical bar indicating the standard error . Returns a handle ( s ) H to the plot . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ([ 0 1 ]) | The location on the x axis where the line | should be drawn ([ xstart xend ]) color ([ 0 0 0 ]) | Color of the bar ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median '","title":"vlt.plot.plotmeanbar"},{"location":"reference/%2Bvlt/%2Bplot/plotoribox.m/","text":"vlt.plot.plotoribox \u00b6 PLOTORIBOX - Plot an oriented box ( as a patch ) on a graph H = vlt . plot . plotoribox ( X , Y , ORI , WIDTH , HEIGHT , REVY ) Plots an oriented bar centered on the position X , Y with orientation ORI ( in degrees , in compass coordinates ; that is , 0 degrees is a horizontal bar , and the bar tilts in a clockwise manner with increasing angle ). The bar has the width WIDTH and height HEIGHT . If REVY is 1 , then we assume that the Y axis direction is reversed , and the orientated bar is mirror-reversed in Y . This function can also take extra parameters as NAME / VALUE pairs . PARAMETER ( default ): | DESCRIPTION : --------------------------------------------------------- col ( [ 0 0 0 ] ) | Fill color of the bar ( default is | black [ 0 0 0 ] ; white would be | [ 1 1 1 ]","title":"vlt.plot.plotoribox"},{"location":"reference/%2Bvlt/%2Bplot/plotoribox.m/#vltplotplotoribox","text":"PLOTORIBOX - Plot an oriented box ( as a patch ) on a graph H = vlt . plot . plotoribox ( X , Y , ORI , WIDTH , HEIGHT , REVY ) Plots an oriented bar centered on the position X , Y with orientation ORI ( in degrees , in compass coordinates ; that is , 0 degrees is a horizontal bar , and the bar tilts in a clockwise manner with increasing angle ). The bar has the width WIDTH and height HEIGHT . If REVY is 1 , then we assume that the Y axis direction is reversed , and the orientated bar is mirror-reversed in Y . This function can also take extra parameters as NAME / VALUE pairs . PARAMETER ( default ): | DESCRIPTION : --------------------------------------------------------- col ( [ 0 0 0 ] ) | Fill color of the bar ( default is | black [ 0 0 0 ] ; white would be | [ 1 1 1 ]","title":"vlt.plot.plotoribox"},{"location":"reference/%2Bvlt/%2Bplot/plotshade.m/","text":"vlt.plot.plotshade \u00b6 PLOTSHADE - Make a plot with region above or below a line shaded H = vlt . plot . plotshade ( X , Y , SHADELINE , COLOR , LOCATIONSTRING ) Creates a Matlab PATCH object that colors the area of a plot that lies above or below the line Y = SHADELINE , using color COLOR ( RGB triple , where each element is in [ 0..1 ]. LOCATIONSTRING should be ' above ' or ' below ' to indicate whether the shading should occur above or below the SHADELINE . A flat line at SHADELINE is drawn at locations where the data should not be shaded ( developer note: an option to avoid these lines could be added in the future ). If SHADELINE is not provided , 0 is assumed . If COLOR is not provided , [ 0 0 0 ] ( black ) is assumed . LOCATIONSTRING should be ' above ' or ' below ' ( assumed ' below ' if it is not provided ). Note that vlt . plot . plotshade does not plot the original points x / y . If that is desired , the user should plot the line in a separate step . Example: x = 0 : 0.01 : 10 ; y = sin ( 2 * pi * x ) + 3 ; shadeline = 3 ; figure ; plot ( x , y ,' k - '); hold on ; vlt . plot . plotshade ( x , y , shadeline );","title":"vlt.plot.plotshade"},{"location":"reference/%2Bvlt/%2Bplot/plotshade.m/#vltplotplotshade","text":"PLOTSHADE - Make a plot with region above or below a line shaded H = vlt . plot . plotshade ( X , Y , SHADELINE , COLOR , LOCATIONSTRING ) Creates a Matlab PATCH object that colors the area of a plot that lies above or below the line Y = SHADELINE , using color COLOR ( RGB triple , where each element is in [ 0..1 ]. LOCATIONSTRING should be ' above ' or ' below ' to indicate whether the shading should occur above or below the SHADELINE . A flat line at SHADELINE is drawn at locations where the data should not be shaded ( developer note: an option to avoid these lines could be added in the future ). If SHADELINE is not provided , 0 is assumed . If COLOR is not provided , [ 0 0 0 ] ( black ) is assumed . LOCATIONSTRING should be ' above ' or ' below ' ( assumed ' below ' if it is not provided ). Note that vlt . plot . plotshade does not plot the original points x / y . If that is desired , the user should plot the line in a separate step . Example: x = 0 : 0.01 : 10 ; y = sin ( 2 * pi * x ) + 3 ; shadeline = 3 ; figure ; plot ( x , y ,' k - '); hold on ; vlt . plot . plotshade ( x , y , shadeline );","title":"vlt.plot.plotshade"},{"location":"reference/%2Bvlt/%2Bplot/posterize.m/","text":"vlt.plot.posterize \u00b6 vlt . plot . posterize - Change plot characteristics appropriate for posters vlt . plot . posterize ( FIGNUM , ... ) Changes plot characteristics appropriate for a poster . By default : '_axes_fontsize' is set to 10 '_axes_xlabel_fontsize' is set to 13 '_axes_ylabel_fontsize' is set to 13 '_axes_title_fontsize' is set to 13 'fontname' is set to arial '_axes_box' is set to 'off' If additional arguments are provided in name / value pairs , then the function will attempt to set fields with each name to the value specified . If the variable name has the form '_TYPE_FIELDNAME' , then only fields of handles of type TYPE will be changed . This can be extended to '_TYPE_HANDLENAME_FIELDNAME' and '_TYPE_HANDLENAME_..._HANDLE_NAME_FIELDNAME' Examples : vlt . plot . posterize ( FIGNUM , 'linewidth' , 2 ) will set the value of the field 'linewidth' to 2 in all handles that possess it . vlt . plot . posterize ( FIGNUM , '_axes_fontsize' , 20 ) sets the value of the field 'fontsize' in all handles of type 'axes' . vlt . plot . posterize ( FIGNUM , '_axes_xlabel_fontsize' , 13 ) sets the value of the field 'fontsize' in all handles called 'xlabel' in objects of type 'axes'","title":"vlt.plot.posterize"},{"location":"reference/%2Bvlt/%2Bplot/posterize.m/#vltplotposterize","text":"vlt . plot . posterize - Change plot characteristics appropriate for posters vlt . plot . posterize ( FIGNUM , ... ) Changes plot characteristics appropriate for a poster . By default : '_axes_fontsize' is set to 10 '_axes_xlabel_fontsize' is set to 13 '_axes_ylabel_fontsize' is set to 13 '_axes_title_fontsize' is set to 13 'fontname' is set to arial '_axes_box' is set to 'off' If additional arguments are provided in name / value pairs , then the function will attempt to set fields with each name to the value specified . If the variable name has the form '_TYPE_FIELDNAME' , then only fields of handles of type TYPE will be changed . This can be extended to '_TYPE_HANDLENAME_FIELDNAME' and '_TYPE_HANDLENAME_..._HANDLE_NAME_FIELDNAME' Examples : vlt . plot . posterize ( FIGNUM , 'linewidth' , 2 ) will set the value of the field 'linewidth' to 2 in all handles that possess it . vlt . plot . posterize ( FIGNUM , '_axes_fontsize' , 20 ) sets the value of the field 'fontsize' in all handles of type 'axes' . vlt . plot . posterize ( FIGNUM , '_axes_xlabel_fontsize' , 13 ) sets the value of the field 'fontsize' in all handles called 'xlabel' in objects of type 'axes'","title":"vlt.plot.posterize"},{"location":"reference/%2Bvlt/%2Bplot/quickhist.m/","text":"vlt.plot.quickhist \u00b6 vlt.plot.quickhist is a function. [N, x] = vlt.plot.quickhist(data, binedges)","title":"vlt.plot.quickhist"},{"location":"reference/%2Bvlt/%2Bplot/quickhist.m/#vltplotquickhist","text":"vlt.plot.quickhist is a function. [N, x] = vlt.plot.quickhist(data, binedges)","title":"vlt.plot.quickhist"},{"location":"reference/%2Bvlt/%2Bplot/scatterplot.m/","text":"vlt.plot.scatterplot \u00b6 SCATTERPLOT -- plot data points vlt . plot . scatterplot ( X ) draws a scatter plot with a dot for each row in X . If X has more than two columns then each dimension is plotted against each other one to form a triangular set of subplots in the current figure . OPTIONS : 'class' - vector containing a class label for each point . If any ( or all ) of markercolor , markersize or markerstyle are cell arrays the label is used to index the cell array to set the marker appearance . 'color' - color for marker border and fill ( if used ) . Defaults to cell array of 'ColorOrder' property of axes . 'fill' - boolean indicating whether to fill marker 'marker' - marker symbol to use 'markeredgecolor' - color for marker border : may be a string or [ r , g , b ] vector 'markerfacecolor' - color for marker fill : may be a string or [ r , g , b ] vector 'markersize' - marker size ( default is 1 ) 'projection' - plot only the specified dimensions 'shrink' - resize the axes to exactly surround the points ( on by default )","title":"vlt.plot.scatterplot"},{"location":"reference/%2Bvlt/%2Bplot/scatterplot.m/#vltplotscatterplot","text":"SCATTERPLOT -- plot data points vlt . plot . scatterplot ( X ) draws a scatter plot with a dot for each row in X . If X has more than two columns then each dimension is plotted against each other one to form a triangular set of subplots in the current figure . OPTIONS : 'class' - vector containing a class label for each point . If any ( or all ) of markercolor , markersize or markerstyle are cell arrays the label is used to index the cell array to set the marker appearance . 'color' - color for marker border and fill ( if used ) . Defaults to cell array of 'ColorOrder' property of axes . 'fill' - boolean indicating whether to fill marker 'marker' - marker symbol to use 'markeredgecolor' - color for marker border : may be a string or [ r , g , b ] vector 'markerfacecolor' - color for marker fill : may be a string or [ r , g , b ] vector 'markersize' - marker size ( default is 1 ) 'projection' - plot only the specified dimensions 'shrink' - resize the axes to exactly surround the points ( on by default )","title":"vlt.plot.scatterplot"},{"location":"reference/%2Bvlt/%2Bplot/shiftedbar.m/","text":"vlt.plot.shiftedbar \u00b6 vlt . plot . shiftedbar - Shifted bar graph HB = vlt . plot . shiftedbar ( BINS , DATA , SHFT , COL ) Draws a bar graph that is shifted from the X - axis by SHFT and using color COL ( a 1 x3 RGB color ) . If BINS and DATA have multiple rows , then multiple graphs are drawn , and SHFT can be a vector giving the offset for each graph and COL can be nx3 , describing the color for each graph . HB is the set of patch handles created during the drawing . vlt . plot . shiftedbar assumes one is plotting histogram data , so BINS should have one more column than DATA , since DATA ( i , j ) is the number of points between BINS ( i , j ) and BINS ( i , j + 1 ) . See also : BAR , BARH , HIST , HISTC","title":"vlt.plot.shiftedbar"},{"location":"reference/%2Bvlt/%2Bplot/shiftedbar.m/#vltplotshiftedbar","text":"vlt . plot . shiftedbar - Shifted bar graph HB = vlt . plot . shiftedbar ( BINS , DATA , SHFT , COL ) Draws a bar graph that is shifted from the X - axis by SHFT and using color COL ( a 1 x3 RGB color ) . If BINS and DATA have multiple rows , then multiple graphs are drawn , and SHFT can be a vector giving the offset for each graph and COL can be nx3 , describing the color for each graph . HB is the set of patch handles created during the drawing . vlt . plot . shiftedbar assumes one is plotting histogram data , so BINS should have one more column than DATA , since DATA ( i , j ) is the number of points between BINS ( i , j ) and BINS ( i , j + 1 ) . See also : BAR , BARH , HIST , HISTC","title":"vlt.plot.shiftedbar"},{"location":"reference/%2Bvlt/%2Bplot/supersubplot.m/","text":"vlt.plot.supersubplot \u00b6 SUPERSUBPLOT - Organize axes across multiple figures AX_H = vlt . plot . supersubplot ( FIG , M , N , P ) Returns a set of axes that can be arranged across multiple figures . Inputs : FIG - figure number of the first figure in series M - The number of rows of plots in each figure N - the number of columns of plots in each figure P - the plot number to use , where the numbers go from left to right , top to bottom , and then continue across figures . Outputs : AX_H - the axes handle Example : fig = figure ; ax = vlt . plot . supersubplot ( fig , 3 , 3 , 12 ); % will return a subplot in position 3 % on a second figure See also : SUBPLOT , AXES","title":"vlt.plot.supersubplot"},{"location":"reference/%2Bvlt/%2Bplot/supersubplot.m/#vltplotsupersubplot","text":"SUPERSUBPLOT - Organize axes across multiple figures AX_H = vlt . plot . supersubplot ( FIG , M , N , P ) Returns a set of axes that can be arranged across multiple figures . Inputs : FIG - figure number of the first figure in series M - The number of rows of plots in each figure N - the number of columns of plots in each figure P - the plot number to use , where the numbers go from left to right , top to bottom , and then continue across figures . Outputs : AX_H - the axes handle Example : fig = figure ; ax = vlt . plot . supersubplot ( fig , 3 , 3 , 12 ); % will return a subplot in position 3 % on a second figure See also : SUBPLOT , AXES","title":"vlt.plot.supersubplot"},{"location":"reference/%2Bvlt/%2Bpython/app3.m/","text":"vlt.python.app3 \u00b6 vlt . python . app3 - return the path to the local python3 distribution to use APP3_PATH = vlt . python . app3 () Return the app path of the local python3 distribution . The path can be edited in vhlab_configuration / matlab_python3 . m .","title":"vlt.python.app3"},{"location":"reference/%2Bvlt/%2Bpython/app3.m/#vltpythonapp3","text":"vlt . python . app3 - return the path to the local python3 distribution to use APP3_PATH = vlt . python . app3 () Return the app path of the local python3 distribution . The path can be edited in vhlab_configuration / matlab_python3 . m .","title":"vlt.python.app3"},{"location":"reference/%2Bvlt/%2Bpython/conda.m/","text":"vlt.python.conda \u00b6 vlt . python . conda - return the path to the local conda binary to use CONDA_PATH = vlt . python . conda () Return the app path of the local conda distribution . The path can be edited in vhlab_configuration / matlab_python3 . m . The variable to be edited in matlab_python3 . m should be conda_path = PATH ;","title":"vlt.python.conda"},{"location":"reference/%2Bvlt/%2Bpython/conda.m/#vltpythonconda","text":"vlt . python . conda - return the path to the local conda binary to use CONDA_PATH = vlt . python . conda () Return the app path of the local conda distribution . The path can be edited in vhlab_configuration / matlab_python3 . m . The variable to be edited in matlab_python3 . m should be conda_path = PATH ;","title":"vlt.python.conda"},{"location":"reference/%2Bvlt/%2Bpython/condarun3.m/","text":"vlt.python.condarun3 \u00b6 vlt . python . condarun3 - Run a python3 script in a conda environment [ status , result ] = vlt . python . condarun3 ( ENV , SCRIPT ) Run a python3 script from the SYSTEM command in Matlab . The command line program \"conda\" will be used to run the script . Example : mydir = tempdir ; vlt . file . str2text ( [ tempdir filesep 'myscript.py' ] , 'a=1; print(\"Running python\"); ' ); [ status , result ] = vlt . python . condarun3 ( 'base' , [ tempdir filesep 'myscript.py' ] )","title":"vlt.python.condarun3"},{"location":"reference/%2Bvlt/%2Bpython/condarun3.m/#vltpythoncondarun3","text":"vlt . python . condarun3 - Run a python3 script in a conda environment [ status , result ] = vlt . python . condarun3 ( ENV , SCRIPT ) Run a python3 script from the SYSTEM command in Matlab . The command line program \"conda\" will be used to run the script . Example : mydir = tempdir ; vlt . file . str2text ( [ tempdir filesep 'myscript.py' ] , 'a=1; print(\"Running python\"); ' ); [ status , result ] = vlt . python . condarun3 ( 'base' , [ tempdir filesep 'myscript.py' ] )","title":"vlt.python.condarun3"},{"location":"reference/%2Bvlt/%2Bpython/run3.m/","text":"vlt.python.run3 \u00b6 vlt . python . run3 - Run a python3 script [ status , result ] = vlt . python . run3 ( SCRIPT ) Run a python3 script from the SYSTEM command in Matlab . The character string SCRIPT will be run with the executable that is returned from vlt . python . app3 (). Example : mydir = tempdir ; vlt . file . str2text ( [ tempdir filesep 'myscript.py' ] , 'a=1; print(\"Running python\"); ' ); [ status , result ] = vlt . python . run3 ( [ tempdir filesep 'myscript.py' ] )","title":"vlt.python.run3"},{"location":"reference/%2Bvlt/%2Bpython/run3.m/#vltpythonrun3","text":"vlt . python . run3 - Run a python3 script [ status , result ] = vlt . python . run3 ( SCRIPT ) Run a python3 script from the SYSTEM command in Matlab . The character string SCRIPT will be run with the executable that is returned from vlt . python . app3 (). Example : mydir = tempdir ; vlt . file . str2text ( [ tempdir filesep 'myscript.py' ] , 'a=1; print(\"Running python\"); ' ); [ status , result ] = vlt . python . run3 ( [ tempdir filesep 'myscript.py' ] )","title":"vlt.python.run3"},{"location":"reference/%2Bvlt/%2Bsignal/correlation_stepfunc.m/","text":"vlt.signal.correlation_stepfunc \u00b6 vlt . signal . correlation_stepfunc - Perform correlation between a time series and a step function CORR = CORRELATION ( T1 , SIGNAL1 , CORR_TIMES , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. WARNING : At present , this function produces tiny differences between XCORR of the step function and SIGNAL1 . I am at a loss to explain it ... The correlation function is : Integral ({ t from T1 ( 1 ) to T1 ( end )}, dt * SIGNAL1 * SIGNAL2 ) ( Dayan and Abbott 2005 , equation in chapter 1 ) and the discrete version is : Let dt = T1 ( 2 ) - T1 ( 1 ) ( use signal 1 's sample interval) CORR ( tau ) = sum over all times t in T1 : dt * SIGNAL1 ( t ) * SIGNAL2 ( t - tau ) where TAU assumes all values listed in the vector CORR_TIMES . See also : XCORR , vlt . math . stepfunc , vlt . signal . xcorr_stepfunc","title":"vlt.signal.correlation_stepfunc"},{"location":"reference/%2Bvlt/%2Bsignal/correlation_stepfunc.m/#vltsignalcorrelation_stepfunc","text":"vlt . signal . correlation_stepfunc - Perform correlation between a time series and a step function CORR = CORRELATION ( T1 , SIGNAL1 , CORR_TIMES , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. WARNING : At present , this function produces tiny differences between XCORR of the step function and SIGNAL1 . I am at a loss to explain it ... The correlation function is : Integral ({ t from T1 ( 1 ) to T1 ( end )}, dt * SIGNAL1 * SIGNAL2 ) ( Dayan and Abbott 2005 , equation in chapter 1 ) and the discrete version is : Let dt = T1 ( 2 ) - T1 ( 1 ) ( use signal 1 's sample interval) CORR ( tau ) = sum over all times t in T1 : dt * SIGNAL1 ( t ) * SIGNAL2 ( t - tau ) where TAU assumes all values listed in the vector CORR_TIMES . See also : XCORR , vlt . math . stepfunc , vlt . signal . xcorr_stepfunc","title":"vlt.signal.correlation_stepfunc"},{"location":"reference/%2Bvlt/%2Bsignal/data2intervals.m/","text":"vlt.signal.data2intervals \u00b6 DATA2INTERVALS - Identify data recorded during specified intervals [ DATA_OUT , T_OUT ] = vlt . signal . data2intervals ( DATA , T , INTERVALS ) This identifies data observations that were recorded in specified time intervals . The input observations DATA are expected to be a cell list of M vectors ; each vector is assumed to reflect a different element such as a neuron . T is also a cell list of M vectors , and each value in T should reflect the time of an observation in DATA . INTERVALS should be a Nx2 matrix of time intervals , such as INTERVALS = [ t11 t12 ; t21 t22 ; t31 t32 ; ... ]; DATA_OUT is a cell list of size N x M . Each element DATA_OUT { i , p } contains all observations in DATA { p } that occured during the interval [ interval ( i , 1 ) ... interval ( i , 2 )] . T_OUT is a cell list of size N x M . Each element T { i , p } contains the time of all observation in DATA_OUT { i , p } .","title":"vlt.signal.data2intervals"},{"location":"reference/%2Bvlt/%2Bsignal/data2intervals.m/#vltsignaldata2intervals","text":"DATA2INTERVALS - Identify data recorded during specified intervals [ DATA_OUT , T_OUT ] = vlt . signal . data2intervals ( DATA , T , INTERVALS ) This identifies data observations that were recorded in specified time intervals . The input observations DATA are expected to be a cell list of M vectors ; each vector is assumed to reflect a different element such as a neuron . T is also a cell list of M vectors , and each value in T should reflect the time of an observation in DATA . INTERVALS should be a Nx2 matrix of time intervals , such as INTERVALS = [ t11 t12 ; t21 t22 ; t31 t32 ; ... ]; DATA_OUT is a cell list of size N x M . Each element DATA_OUT { i , p } contains all observations in DATA { p } that occured during the interval [ interval ( i , 1 ) ... interval ( i , 2 )] . T_OUT is a cell list of size N x M . Each element T { i , p } contains the time of all observation in DATA_OUT { i , p } .","title":"vlt.signal.data2intervals"},{"location":"reference/%2Bvlt/%2Bsignal/decompose_time.m/","text":"vlt.signal.decompose_time \u00b6 DECOMPOSE_TIME - Unwrap or desegment a concatenated recording into pieces NEWTIMES = vlt . signal . decompose_time ( TIMESTAMPS , TIME_INTERVALS ) Decomposes / desegements time stamps that are from a concatenated recording . It is assumed that TIMESTAMPS are a set of time stamps from a recording that has been concatenated from many smaller recordings . The beginning and end times of the concatenated recordings are provided in TIME_INTERVALS . Each row of TIME_INTERVALS should have the start and stop time ( in the same units as TIMESTAMPS ) of the recordings that comprise the concatenated recordings . Example : myrecording1 = [ 0 1 ]; % first recording started at 0 , ended at 1 myrecording2 = [ 2 3 ]; % second recording started at 2 , ended at 3 % concaneted record of these recordings would have duration 2 timestamps = [ 0.5 1.5 ]; % event at 1.5 really occured at 2.5 units in real time newtimes = vlt . signal . decompose_time ( timestamps ,[ myrecording1 ; myrecording2 ])","title":"vlt.signal.decompose_time"},{"location":"reference/%2Bvlt/%2Bsignal/decompose_time.m/#vltsignaldecompose_time","text":"DECOMPOSE_TIME - Unwrap or desegment a concatenated recording into pieces NEWTIMES = vlt . signal . decompose_time ( TIMESTAMPS , TIME_INTERVALS ) Decomposes / desegements time stamps that are from a concatenated recording . It is assumed that TIMESTAMPS are a set of time stamps from a recording that has been concatenated from many smaller recordings . The beginning and end times of the concatenated recordings are provided in TIME_INTERVALS . Each row of TIME_INTERVALS should have the start and stop time ( in the same units as TIMESTAMPS ) of the recordings that comprise the concatenated recordings . Example : myrecording1 = [ 0 1 ]; % first recording started at 0 , ended at 1 myrecording2 = [ 2 3 ]; % second recording started at 2 , ended at 3 % concaneted record of these recordings would have duration 2 timestamps = [ 0.5 1.5 ]; % event at 1.5 really occured at 2.5 units in real time newtimes = vlt . signal . decompose_time ( timestamps ,[ myrecording1 ; myrecording2 ])","title":"vlt.signal.decompose_time"},{"location":"reference/%2Bvlt/%2Bsignal/detrend_median.m/","text":"vlt.signal.detrend_median \u00b6 DETREND_MEDIAN - Remove a median trend from data D = vlt . signal . detrend_median ( S , SI , T ) Removes the result of a sliding median function of duration T from the sampled data S with sampling interval SI . The number of samples used for the sliding median function will be rounded to the nearest whole sample . The answer is returned in D . The median is sampled at intervals equal to 1 / 10 the windowsize . See also : DETREND , vlt . math . slidingwindowfunc","title":"vlt.signal.detrend_median"},{"location":"reference/%2Bvlt/%2Bsignal/detrend_median.m/#vltsignaldetrend_median","text":"DETREND_MEDIAN - Remove a median trend from data D = vlt . signal . detrend_median ( S , SI , T ) Removes the result of a sliding median function of duration T from the sampled data S with sampling interval SI . The number of samples used for the sliding median function will be rounded to the nearest whole sample . The answer is returned in D . The median is sampled at intervals equal to 1 / 10 the windowsize . See also : DETREND , vlt . math . slidingwindowfunc","title":"vlt.signal.detrend_median"},{"location":"reference/%2Bvlt/%2Bsignal/dotdisc.m/","text":"vlt.signal.dotdisc \u00b6 DOTDISC - Dot discriminator , an advanced window discriminator EVENT_SAMPLES = vlt . signal . dotdisc ( DATA , DOTS ) Detect events with \"dots\" , a form of advanced window discrimination . DATA the data to be examined . DOTS - An N x 3 matrix with the \"dots\" to be used for the discrimination . The first row is [ THRESH SIGN 0 ] indicating that all events larger than THRESH ( in the direction of SIGN , which can be 1 or - 1 ) will be considered . Each additional row is [ THRESH SIGN OFFSET ], and only events that have a signal of size THRESH ( in the direction of SIGN ) at the sample location OFFSET relative to the highest / lowest point that was determined in the first row will be selected . EVENT_SAMPLES returns the sample numbers of events that are described by the DOTS . If more than one adjacent sample passes the dot tests , then the sample number corresponds to the point in the middle of the points that pass . This is implemented as a mex function .","title":"vlt.signal.dotdisc"},{"location":"reference/%2Bvlt/%2Bsignal/dotdisc.m/#vltsignaldotdisc","text":"DOTDISC - Dot discriminator , an advanced window discriminator EVENT_SAMPLES = vlt . signal . dotdisc ( DATA , DOTS ) Detect events with \"dots\" , a form of advanced window discrimination . DATA the data to be examined . DOTS - An N x 3 matrix with the \"dots\" to be used for the discrimination . The first row is [ THRESH SIGN 0 ] indicating that all events larger than THRESH ( in the direction of SIGN , which can be 1 or - 1 ) will be considered . Each additional row is [ THRESH SIGN OFFSET ], and only events that have a signal of size THRESH ( in the direction of SIGN ) at the sample location OFFSET relative to the highest / lowest point that was determined in the first row will be selected . EVENT_SAMPLES returns the sample numbers of events that are described by the DOTS . If more than one adjacent sample passes the dot tests , then the sample number corresponds to the point in the middle of the points that pass . This is implemented as a mex function .","title":"vlt.signal.dotdisc"},{"location":"reference/%2Bvlt/%2Bsignal/dual_led_filters.m/","text":"vlt.signal.dual_led_filters \u00b6 LED2FILTERS - Design filters for detecting dual LEDs [ FILTERS , X , Y ] = vlt . signal . dual_led_filters ( DA , SEP , RAD ) Designs a pair of circular filters , at a range of orientations , for detecting a pair of bright LEDs in an image . Input arguments : DA - The separation between different filters in orientation ( e . g . , 22.5 ) SEP - The physical separation between the the circles , in pixels ( e . g . , 85 ) RAD - The radius of each circle ( e . g . , 15 ) Outputs : Filters - the output filters , as a 3 d stack of filters . Each 2 d element of the 2 d stack contains the filter for one possible orientation of the dual LEDs . X - An X coordinate mesh for the filters Y - A Y coordinate mesh for the filters Example : Create a family of filters and display them [ filters , x , y ] = vlt . signal . dual_led_filters ( 22.5 , 85 , 15 ); figure ; colormap ( gray ( 256 )); for i = 1 : size ( filters , 3 ), image ( x (:), y (:), 255 * filters (:,:, i )); pause ( 1 ); end ;","title":"vlt.signal.dual_led_filters"},{"location":"reference/%2Bvlt/%2Bsignal/dual_led_filters.m/#vltsignaldual_led_filters","text":"LED2FILTERS - Design filters for detecting dual LEDs [ FILTERS , X , Y ] = vlt . signal . dual_led_filters ( DA , SEP , RAD ) Designs a pair of circular filters , at a range of orientations , for detecting a pair of bright LEDs in an image . Input arguments : DA - The separation between different filters in orientation ( e . g . , 22.5 ) SEP - The physical separation between the the circles , in pixels ( e . g . , 85 ) RAD - The radius of each circle ( e . g . , 15 ) Outputs : Filters - the output filters , as a 3 d stack of filters . Each 2 d element of the 2 d stack contains the filter for one possible orientation of the dual LEDs . X - An X coordinate mesh for the filters Y - A Y coordinate mesh for the filters Example : Create a family of filters and display them [ filters , x , y ] = vlt . signal . dual_led_filters ( 22.5 , 85 , 15 ); figure ; colormap ( gray ( 256 )); for i = 1 : size ( filters , 3 ), image ( x (:), y (:), 255 * filters (:,:, i )); pause ( 1 ); end ;","title":"vlt.signal.dual_led_filters"},{"location":"reference/%2Bvlt/%2Bsignal/fermi.m/","text":"vlt.signal.fermi \u00b6 FERMI creates a 2 D Fermi filter . FFILTER = vlt . signal . fermi ( XDIM , CUTOFF , TRANS_WIDTH ) calculates a 2 D Fermi filter on a grid with dimensions XDIM * XDIM . The cutoff frequency is defined by CUTOFF and represents the radius ( in pixels ) of the circular symmetric function at which the amplitude drops below 0.5 TRANS_WIDTH defines the width of the transition . Author : Wally Block , UW - Madison 02 / 23 / 01. Call : ffilter = vlt . signal . fermi ( xdim , cutoff , trans_width );","title":"vlt.signal.fermi"},{"location":"reference/%2Bvlt/%2Bsignal/fermi.m/#vltsignalfermi","text":"FERMI creates a 2 D Fermi filter . FFILTER = vlt . signal . fermi ( XDIM , CUTOFF , TRANS_WIDTH ) calculates a 2 D Fermi filter on a grid with dimensions XDIM * XDIM . The cutoff frequency is defined by CUTOFF and represents the radius ( in pixels ) of the circular symmetric function at which the amplitude drops below 0.5 TRANS_WIDTH defines the width of the transition . Author : Wally Block , UW - Madison 02 / 23 / 01. Call : ffilter = vlt . signal . fermi ( xdim , cutoff , trans_width );","title":"vlt.signal.fermi"},{"location":"reference/%2Bvlt/%2Bsignal/filterwaveform.m/","text":"vlt.signal.filterwaveform \u00b6 [ D ] = vlt . signal . filterwaveform ( DATA , PARAMETERS ) Filters a one - dimensional waveform . PARAMETERS is a struct containing the following fields : method = one of 'conv' ( 1 ) or 'filtfilt' ( 2 ). B = the B part of the filter ( or the stencil to convolve ) A = the A part of the filter filtfilt will call the function filtfilt with the filter parameters B and A , while conv will convolve the data with B and remove the boundary points -- to ensure that DATA does not change size , use only odd - length kernels .","title":"vlt.signal.filterwaveform"},{"location":"reference/%2Bvlt/%2Bsignal/filterwaveform.m/#vltsignalfilterwaveform","text":"[ D ] = vlt . signal . filterwaveform ( DATA , PARAMETERS ) Filters a one - dimensional waveform . PARAMETERS is a struct containing the following fields : method = one of 'conv' ( 1 ) or 'filtfilt' ( 2 ). B = the B part of the filter ( or the stencil to convolve ) A = the A part of the filter filtfilt will call the function filtfilt with the filter parameters B and A , while conv will convolve the data with B and remove the boundary points -- to ensure that DATA does not change size , use only odd - length kernels .","title":"vlt.signal.filterwaveform"},{"location":"reference/%2Bvlt/%2Bsignal/oversample.m/","text":"vlt.signal.oversample \u00b6 OVERSAMPLE - Calculate sample values for oversampling XN = vlt . signal . oversample ( X , N ) For a signal X that takes values X ( 1 ), X ( 2 ), etc , this function calculates the linearly interpolated values of X with N times oversampling . Example : X = [ 0 1 ]; Xn = vlt . signal . oversample ( X , 5 ) % Xn is [ 0 0.25 0.5 0.75 1.0 ]","title":"vlt.signal.oversample"},{"location":"reference/%2Bvlt/%2Bsignal/oversample.m/#vltsignaloversample","text":"OVERSAMPLE - Calculate sample values for oversampling XN = vlt . signal . oversample ( X , N ) For a signal X that takes values X ( 1 ), X ( 2 ), etc , this function calculates the linearly interpolated values of X with N times oversampling . Example : X = [ 0 1 ]; Xn = vlt . signal . oversample ( X , 5 ) % Xn is [ 0 0.25 0.5 0.75 1.0 ]","title":"vlt.signal.oversample"},{"location":"reference/%2Bvlt/%2Bsignal/point2samplelabel.m/","text":"vlt.signal.point2samplelabel \u00b6 POINT2SAMPLE - Convert a continuous point to a sample number for regularly sampled data S = vlt . signal . point2samplelabel ( TI , DT , [ T0 ] ) Given an array of time values TI , returns the closest sample for a signal that is regularly sampled at interval DT . The closest sample number is determined by rounding . Samples are assumed to be numbered as S = T0 + N * DT ( Notice that these sample labels can be negative or 0 ). T0 is the time of the first sample of the signal . If T0 is not provided , it is assumed to be 0. Example : dt = 0.001 ; T = 0 : dt : 40 ; S = vlt . signal . point2samplelabel ( T ( 20 ), dt ) % returns 20 See also : vlt . signal . round2sample","title":"vlt.signal.point2samplelabel"},{"location":"reference/%2Bvlt/%2Bsignal/point2samplelabel.m/#vltsignalpoint2samplelabel","text":"POINT2SAMPLE - Convert a continuous point to a sample number for regularly sampled data S = vlt . signal . point2samplelabel ( TI , DT , [ T0 ] ) Given an array of time values TI , returns the closest sample for a signal that is regularly sampled at interval DT . The closest sample number is determined by rounding . Samples are assumed to be numbered as S = T0 + N * DT ( Notice that these sample labels can be negative or 0 ). T0 is the time of the first sample of the signal . If T0 is not provided , it is assumed to be 0. Example : dt = 0.001 ; T = 0 : dt : 40 ; S = vlt . signal . point2samplelabel ( T ( 20 ), dt ) % returns 20 See also : vlt . signal . round2sample","title":"vlt.signal.point2samplelabel"},{"location":"reference/%2Bvlt/%2Bsignal/refractory.m/","text":"vlt.signal.refractory \u00b6 REFRACTORY - Impose a refractory period on events [ OUT_TIMES , OUT_INDEXES ] = vlt . signal . refractory ( IN_TIMES , REFRACTORY_PERIOD ) This function will remove events from the vector IN_TIMES that occur more frequently than REFRACTORY_PERIOD . IN_TIMES should contain the times of events ( in any units , whether they be units of time or sample numbers ) . REFRACTORY_PERIOD is the time after one event when another event cannot be said to happen . Any events occuring within REFRACTORY_PERIOD of a previous event will be removed . OUT_TIMES are the times that meet the refractory criteria . OUT_INDEXES are the index values of the points in IN_TIMES that meet the criteria , such that OUT_TIMES = IN_TIMES ( OUT_INDEXES )","title":"vlt.signal.refractory"},{"location":"reference/%2Bvlt/%2Bsignal/refractory.m/#vltsignalrefractory","text":"REFRACTORY - Impose a refractory period on events [ OUT_TIMES , OUT_INDEXES ] = vlt . signal . refractory ( IN_TIMES , REFRACTORY_PERIOD ) This function will remove events from the vector IN_TIMES that occur more frequently than REFRACTORY_PERIOD . IN_TIMES should contain the times of events ( in any units , whether they be units of time or sample numbers ) . REFRACTORY_PERIOD is the time after one event when another event cannot be said to happen . Any events occuring within REFRACTORY_PERIOD of a previous event will be removed . OUT_TIMES are the times that meet the refractory criteria . OUT_INDEXES are the index values of the points in IN_TIMES that meet the criteria , such that OUT_TIMES = IN_TIMES ( OUT_INDEXES )","title":"vlt.signal.refractory"},{"location":"reference/%2Bvlt/%2Bsignal/remove60hz.m/","text":"vlt.signal.remove60hz \u00b6 REMOVE60HZ remove 60 Hz noise DATA_OUT = vlt . signal . remove60hz ( DATA_IN , SAMPLERATE ) Removes 60 Hz noise via filtering with the methods and parameters described below . DATA_IN must be a vector . User beware : check the output of this function carefully with your data , to be sure that it doesn 't produce garbage. High frequencies ( like spikes ) can often be disturbed by certain methods employed here ( 'sgolay' ), so this is best done on low frequency data ( for example , membrane potential with spikes removed ) . The method and parameters of the function can be modified with name / value pairs : Parameter ( default ): | Description -------------------------------------------------------------- METHOD ( 'sgolay' ) | If 'sgolay' : | Use Savitzky - Golay filter | Relies on SOGOLAYFILT | If 'cheby1' : | Use chebychev1 type filter | Relies on CHEBY1 and FILTFILT | ( Signal Processing Toolbox ) | If 'ellip' : | Use elliptical filter | Relies on ELLIP and FILTFILT | If 'ellip+sgolay' , then the algorithm | uses a blend of the 'ellip' and | 'sgolay' methods . The signal is | first high - pass filtered above | 'ellipsgolay_high' . This high - pass | signal is then removed from the data , | and the remaining low - pass signal | is passed through the standard | 'sgolay' mode . Finally , the high | frequencies that were identified | in the 'high-pass' filter are added back . sgolay_freq ( 60 ) | For 'sgolay' , the frequency to remove . | Stop ([ 55 65 ]) | For 'cheby1' and 'ellip' , the | stop filter frequencies R ( 0.5 ) | For 'cheby1' and 'ellip' , R | decibles of peak - | to - peak ripple in passband Rs ( 20 ) | For 'ellip' , at least Rs decibles | of attentuation in the stop band Order ( 3 ) | For 'cheby1' and 'ellip' , the filter | order ellipsgolay_high ( 65 ) | For 'ellip+sgolay' , the high pass frequency If you get NaN for your output data , try reducing the filter order . Contributions : Wes Alford , Steve Van Hooser","title":"vlt.signal.remove60hz"},{"location":"reference/%2Bvlt/%2Bsignal/remove60hz.m/#vltsignalremove60hz","text":"REMOVE60HZ remove 60 Hz noise DATA_OUT = vlt . signal . remove60hz ( DATA_IN , SAMPLERATE ) Removes 60 Hz noise via filtering with the methods and parameters described below . DATA_IN must be a vector . User beware : check the output of this function carefully with your data , to be sure that it doesn 't produce garbage. High frequencies ( like spikes ) can often be disturbed by certain methods employed here ( 'sgolay' ), so this is best done on low frequency data ( for example , membrane potential with spikes removed ) . The method and parameters of the function can be modified with name / value pairs : Parameter ( default ): | Description -------------------------------------------------------------- METHOD ( 'sgolay' ) | If 'sgolay' : | Use Savitzky - Golay filter | Relies on SOGOLAYFILT | If 'cheby1' : | Use chebychev1 type filter | Relies on CHEBY1 and FILTFILT | ( Signal Processing Toolbox ) | If 'ellip' : | Use elliptical filter | Relies on ELLIP and FILTFILT | If 'ellip+sgolay' , then the algorithm | uses a blend of the 'ellip' and | 'sgolay' methods . The signal is | first high - pass filtered above | 'ellipsgolay_high' . This high - pass | signal is then removed from the data , | and the remaining low - pass signal | is passed through the standard | 'sgolay' mode . Finally , the high | frequencies that were identified | in the 'high-pass' filter are added back . sgolay_freq ( 60 ) | For 'sgolay' , the frequency to remove . | Stop ([ 55 65 ]) | For 'cheby1' and 'ellip' , the | stop filter frequencies R ( 0.5 ) | For 'cheby1' and 'ellip' , R | decibles of peak - | to - peak ripple in passband Rs ( 20 ) | For 'ellip' , at least Rs decibles | of attentuation in the stop band Order ( 3 ) | For 'cheby1' and 'ellip' , the filter | order ellipsgolay_high ( 65 ) | For 'ellip+sgolay' , the high pass frequency If you get NaN for your output data , try reducing the filter order . Contributions : Wes Alford , Steve Van Hooser","title":"vlt.signal.remove60hz"},{"location":"reference/%2Bvlt/%2Bsignal/removespikes.m/","text":"vlt.signal.removespikes \u00b6 REMOVESPIKES - Remove spikes from voltage trace w / linear interpolation DATA_OUT = vlt . signal . removespikes ( DATA , T , SPIKETIMES , ... ) Inputs : DATA - The voltage data values ( time series data ) ( must be bigger than 3 data points ) T - Either the time of each data sample in DATA , or a 1 x2 vector with T ( 1 ) as the time of the first sample , and T ( 2 ) as the sample interval . For both methods , the samples are assumed to be taken at regular sample intervals . SPIKETIMES - Spike times ( in same time units as T ) Outputs : DATA_OUT - The data with the spikes removed and filled in by linear inpolation Optional inputs : One can provide additional inputs to this function with name / value pairs . For example , to change the time T0 before each spike that is removed or the time T1 after each spike that is removed , use : DATA_OUT = vlt . signal . removespikes ( DATA , T , SPIKETIMES , 'T0' , t0 , 'T1' , t1 ) Parameters that can be modified : Name ( default value ): | Meaning ------------------------------------------------------------------- SPIKE_INTERP_METHOD ( 1 ) | If 1 , then use linear interpolation ( via Matlab function INTERP1 ) SPIKE_BEGINNING_END_METHOD ( 1 ) | If 1 , then use pre - and post spike time to find the base | of the spike before and after the spike occurs | ( uses parameters t0 and t1 below ) t0 ( 0.003 ) | If 1 x1 : Time before spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2 : The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g . , [ 0.001 0.003 ] | considers times between 1 ms and 3 ms ) t1 ( 0.005 ) | If 1 x1 : Time after spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2 : The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g . , [ 0.001 0.003 ] | considers times between 1 ms and 3 ms )","title":"vlt.signal.removespikes"},{"location":"reference/%2Bvlt/%2Bsignal/removespikes.m/#vltsignalremovespikes","text":"REMOVESPIKES - Remove spikes from voltage trace w / linear interpolation DATA_OUT = vlt . signal . removespikes ( DATA , T , SPIKETIMES , ... ) Inputs : DATA - The voltage data values ( time series data ) ( must be bigger than 3 data points ) T - Either the time of each data sample in DATA , or a 1 x2 vector with T ( 1 ) as the time of the first sample , and T ( 2 ) as the sample interval . For both methods , the samples are assumed to be taken at regular sample intervals . SPIKETIMES - Spike times ( in same time units as T ) Outputs : DATA_OUT - The data with the spikes removed and filled in by linear inpolation Optional inputs : One can provide additional inputs to this function with name / value pairs . For example , to change the time T0 before each spike that is removed or the time T1 after each spike that is removed , use : DATA_OUT = vlt . signal . removespikes ( DATA , T , SPIKETIMES , 'T0' , t0 , 'T1' , t1 ) Parameters that can be modified : Name ( default value ): | Meaning ------------------------------------------------------------------- SPIKE_INTERP_METHOD ( 1 ) | If 1 , then use linear interpolation ( via Matlab function INTERP1 ) SPIKE_BEGINNING_END_METHOD ( 1 ) | If 1 , then use pre - and post spike time to find the base | of the spike before and after the spike occurs | ( uses parameters t0 and t1 below ) t0 ( 0.003 ) | If 1 x1 : Time before spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2 : The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g . , [ 0.001 0.003 ] | considers times between 1 ms and 3 ms ) t1 ( 0.005 ) | If 1 x1 : Time after spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2 : The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g . , [ 0.001 0.003 ] | considers times between 1 ms and 3 ms )","title":"vlt.signal.removespikes"},{"location":"reference/%2Bvlt/%2Bsignal/round2sample.m/","text":"vlt.signal.round2sample \u00b6 ROUND2SAMPLE - Round a continuous point to the nearest sampled value for a regularly sampled signal TR = vlt . signal . round2sample ( TI , DT [, T0 ]) Given a signal sampled at regular intervals DT , and given a set of time points TI , calculates the closest sample times TR that are multiples of DT . T0 is the time of the first sample . If it is not provided then it is assumed to be 0. Example : DT = 0.001 ; TI = 0.00100000001 ; TR = vlt . signal . round2sample ( TI , DT ) % returns 0.001 See also : vlt . signal . point2samplelabel","title":"vlt.signal.round2sample"},{"location":"reference/%2Bvlt/%2Bsignal/round2sample.m/#vltsignalround2sample","text":"ROUND2SAMPLE - Round a continuous point to the nearest sampled value for a regularly sampled signal TR = vlt . signal . round2sample ( TI , DT [, T0 ]) Given a signal sampled at regular intervals DT , and given a set of time points TI , calculates the closest sample times TR that are multiples of DT . T0 is the time of the first sample . If it is not provided then it is assumed to be 0. Example : DT = 0.001 ; TI = 0.00100000001 ; TR = vlt . signal . round2sample ( TI , DT ) % returns 0.001 See also : vlt . signal . point2samplelabel","title":"vlt.signal.round2sample"},{"location":"reference/%2Bvlt/%2Bsignal/sample2value.m/","text":"vlt.signal.sample2value \u00b6 vlt . signal . sample2value - give the value corresponding to a sample number for a fixed sampling rate ( sample2value ) V = SAMPLE2VALUE ( S , SR , V1 ) Given a sample number ( or array of sample numbers ) S and a fixed sampling rate SR ( in samples / sec ) and the value of sample number 1 , returns the value V of the sample . See also : vlt . signal . value2sample Example : v = vlt . signal . sample2value ( 1001 , 1000 , 0 ) % v is 1.0","title":"vlt.signal.sample2value"},{"location":"reference/%2Bvlt/%2Bsignal/sample2value.m/#vltsignalsample2value","text":"vlt . signal . sample2value - give the value corresponding to a sample number for a fixed sampling rate ( sample2value ) V = SAMPLE2VALUE ( S , SR , V1 ) Given a sample number ( or array of sample numbers ) S and a fixed sampling rate SR ( in samples / sec ) and the value of sample number 1 , returns the value V of the sample . See also : vlt . signal . value2sample Example : v = vlt . signal . sample2value ( 1001 , 1000 , 0 ) % v is 1.0","title":"vlt.signal.sample2value"},{"location":"reference/%2Bvlt/%2Bsignal/samplesinepochs.m/","text":"vlt.signal.samplesinepochs \u00b6 SAMPLESINEPOCHS - Identify samples that are within the given recording epochs [ SAMPLES_IN , SAMPLEINDEXES , SAMPLESNOTINEPOCHS ] = vlt . signal . samplesinepochs ( SAMPLE_NUMBERS , EPOCHSTARTSAMPLES , EPOCHSTART , EPOCHSTOP ) Given a list of SAMPLE_NUMBERS , determines which are in a set of epochs and returns them in SAMPLES_IN and returns the index numbers of these samples in SAMPLEINDEXES . The recording epochs are specified by start sample numbers : EPOCHSTARTSAMPLES is an array with the sample number that begins each epoch . EPOCHSTART is the Epoch number we want to start including . EPOCHSTOP is the last Epoch number we want to stop including . Example : SN = [ 1 2 3 4 5 6 7 8 9 10 ]; EpStartSamples = [ 1 5 9 ]; % epochs start at samples 1 , 5 , and 9 EpStart = 1 ; EpStop = 2 ; SI = vlt . signal . samplesinepochs ( SN , EpStartSamples , EpStart , EpStop ) % SI = [ 1 2 3 4 5 6 7 8 ] % samples in first 2 epochs","title":"vlt.signal.samplesinepochs"},{"location":"reference/%2Bvlt/%2Bsignal/samplesinepochs.m/#vltsignalsamplesinepochs","text":"SAMPLESINEPOCHS - Identify samples that are within the given recording epochs [ SAMPLES_IN , SAMPLEINDEXES , SAMPLESNOTINEPOCHS ] = vlt . signal . samplesinepochs ( SAMPLE_NUMBERS , EPOCHSTARTSAMPLES , EPOCHSTART , EPOCHSTOP ) Given a list of SAMPLE_NUMBERS , determines which are in a set of epochs and returns them in SAMPLES_IN and returns the index numbers of these samples in SAMPLEINDEXES . The recording epochs are specified by start sample numbers : EPOCHSTARTSAMPLES is an array with the sample number that begins each epoch . EPOCHSTART is the Epoch number we want to start including . EPOCHSTOP is the last Epoch number we want to stop including . Example : SN = [ 1 2 3 4 5 6 7 8 9 10 ]; EpStartSamples = [ 1 5 9 ]; % epochs start at samples 1 , 5 , and 9 EpStart = 1 ; EpStop = 2 ; SI = vlt . signal . samplesinepochs ( SN , EpStartSamples , EpStart , EpStop ) % SI = [ 1 2 3 4 5 6 7 8 ] % samples in first 2 epochs","title":"vlt.signal.samplesinepochs"},{"location":"reference/%2Bvlt/%2Bsignal/step_autocorrelation.m/","text":"vlt.signal.step_autocorrelation \u00b6 STEP_AUTOCORRELATION - Mathematical function describing autocorrelation of a step function SAC = vlt . signal . step_autocorrelation ( ALPHA , N , n ) Produces the mathematically determined autocorrelation function of a process that , with probability alpha , produces a unit pulse of width N samples . n is the lag of the autocorrelation to be computed , and can be a vector . Example : alpha = 0.2 ; N = 10 ; n = - 50 : 50 ; sac = vlt . signal . step_autocorrelation ( alpha , N , n ); figure ; plot ( n , sac , '-o' );","title":"vlt.signal.step_autocorrelation"},{"location":"reference/%2Bvlt/%2Bsignal/step_autocorrelation.m/#vltsignalstep_autocorrelation","text":"STEP_AUTOCORRELATION - Mathematical function describing autocorrelation of a step function SAC = vlt . signal . step_autocorrelation ( ALPHA , N , n ) Produces the mathematically determined autocorrelation function of a process that , with probability alpha , produces a unit pulse of width N samples . n is the lag of the autocorrelation to be computed , and can be a vector . Example : alpha = 0.2 ; N = 10 ; n = - 50 : 50 ; sac = vlt . signal . step_autocorrelation ( alpha , N , n ); figure ; plot ( n , sac , '-o' );","title":"vlt.signal.step_autocorrelation"},{"location":"reference/%2Bvlt/%2Bsignal/step_autocorrelation_ztrans_discrete.m/","text":"vlt.signal.step_autocorrelation_ztrans_discrete \u00b6 STEP_AUTOCORRElATION_ZTRANS_DISCRETE Evaluate the z - transform of the step - autocorrelation function OUT = vlt . signal . step_autocorrelation_ztrans_discrete ( ALPHA , N , Z ) Evalutes the vlt . signal . step_autocorrelation z - transform for a given value of the pulse height ALPHA and pulse width N ( samples ), and a given value of Z . Z may be an array .","title":"vlt.signal.step_autocorrelation_ztrans_discrete"},{"location":"reference/%2Bvlt/%2Bsignal/step_autocorrelation_ztrans_discrete.m/#vltsignalstep_autocorrelation_ztrans_discrete","text":"STEP_AUTOCORRElATION_ZTRANS_DISCRETE Evaluate the z - transform of the step - autocorrelation function OUT = vlt . signal . step_autocorrelation_ztrans_discrete ( ALPHA , N , Z ) Evalutes the vlt . signal . step_autocorrelation z - transform for a given value of the pulse height ALPHA and pulse width N ( samples ), and a given value of Z . Z may be an array .","title":"vlt.signal.step_autocorrelation_ztrans_discrete"},{"location":"reference/%2Bvlt/%2Bsignal/step_whitening_filter.m/","text":"vlt.signal.step_whitening_filter \u00b6 STEP_WHITENING_FILTER - Compute the optimal FIR filter for Wiener filtering a step [ RINV,R ] = vlt . signal . step_whitening_filter ( ALPHA , N , M ) Computes the inverse of the correlation matrix of a STEP signal for a Wiener filter . Suppose we have a signal d [ n ] , and we wish to make the best linear projection y [ n ] from a signal x [ n ] onto d [ n ] . What is the optimal filter h [ n ] such that y [ n ] = sum ( h [ 1:M ] . * x [ n-[1:M ] ] ) Suppose further that we know that x [ n ] is comprised of STEPs of - 1 , 0 , or 1 , with probability alpha , 1 - 2 * alpha , and alpha , respectively , and exhibits duration N . Then the auto - correlation matrix of the signal x [ n ] is returned in R . R ( i + 1 , j + 1 ) = expectation ( x [ n-i ] x [ n-j ] ) And Rinv is the inverse of this matrix . This matrix can be used to find the optimal filter h [ n ] : h [ n ] = Rinv * P , where P is the correlation of d [ n ] with x [ n ] .","title":"vlt.signal.step_whitening_filter"},{"location":"reference/%2Bvlt/%2Bsignal/step_whitening_filter.m/#vltsignalstep_whitening_filter","text":"STEP_WHITENING_FILTER - Compute the optimal FIR filter for Wiener filtering a step [ RINV,R ] = vlt . signal . step_whitening_filter ( ALPHA , N , M ) Computes the inverse of the correlation matrix of a STEP signal for a Wiener filter . Suppose we have a signal d [ n ] , and we wish to make the best linear projection y [ n ] from a signal x [ n ] onto d [ n ] . What is the optimal filter h [ n ] such that y [ n ] = sum ( h [ 1:M ] . * x [ n-[1:M ] ] ) Suppose further that we know that x [ n ] is comprised of STEPs of - 1 , 0 , or 1 , with probability alpha , 1 - 2 * alpha , and alpha , respectively , and exhibits duration N . Then the auto - correlation matrix of the signal x [ n ] is returned in R . R ( i + 1 , j + 1 ) = expectation ( x [ n-i ] x [ n-j ] ) And Rinv is the inverse of this matrix . This matrix can be used to find the optimal filter h [ n ] : h [ n ] = Rinv * P , where P is the correlation of d [ n ] with x [ n ] .","title":"vlt.signal.step_whitening_filter"},{"location":"reference/%2Bvlt/%2Bsignal/threshold_crossings.m/","text":"vlt.signal.threshold_crossings \u00b6 THRESHOLD_CROSSINGS Detect threshold crossings in data INDEX_VALUES = vlt . signal . threshold_crossings ( INPUT , THRESHOLD ) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD . The index values where this occurs are returned in INDEX_VALUES .","title":"vlt.signal.threshold_crossings"},{"location":"reference/%2Bvlt/%2Bsignal/threshold_crossings.m/#vltsignalthreshold_crossings","text":"THRESHOLD_CROSSINGS Detect threshold crossings in data INDEX_VALUES = vlt . signal . threshold_crossings ( INPUT , THRESHOLD ) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD . The index values where this occurs are returned in INDEX_VALUES .","title":"vlt.signal.threshold_crossings"},{"location":"reference/%2Bvlt/%2Bsignal/threshold_crossings_epochs.m/","text":"vlt.signal.threshold_crossings_epochs \u00b6 THRESHOLD_CROSSINGS_EPOCHS Detect threshold crossing epochs in data and the corresponding peaks [ INDEXES_UP , INDEXES_DOWN , INDEXES_PEAKS ] = vlt . signal . threshold_crossings_epochs ( INPUT , THRESHOLD ) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD , and returns these index values in INDEXES_UP . Note that any threshold crossing that is unaccompanied by a subsequent downward transition is not counted . Next , it finds all places where the data INPUT transitions from above the threshold to below threshold , and returns these index values in INDEXES_DOWN . Note that downward transitions must be associated with an upward transitions , and are excluded if the first samples are above threshold . ( That is , the first downward transition must follow an upward transition present in INPUT . ) Finally , the indexes corresponding to the locations with the largest suprathreshold values between each UP and DOWN transition are returned in INDEXES_PEAK . See also : vlt . signal . threshold_crossings","title":"vlt.signal.threshold_crossings_epochs"},{"location":"reference/%2Bvlt/%2Bsignal/threshold_crossings_epochs.m/#vltsignalthreshold_crossings_epochs","text":"THRESHOLD_CROSSINGS_EPOCHS Detect threshold crossing epochs in data and the corresponding peaks [ INDEXES_UP , INDEXES_DOWN , INDEXES_PEAKS ] = vlt . signal . threshold_crossings_epochs ( INPUT , THRESHOLD ) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD , and returns these index values in INDEXES_UP . Note that any threshold crossing that is unaccompanied by a subsequent downward transition is not counted . Next , it finds all places where the data INPUT transitions from above the threshold to below threshold , and returns these index values in INDEXES_DOWN . Note that downward transitions must be associated with an upward transitions , and are excluded if the first samples are above threshold . ( That is , the first downward transition must follow an upward transition present in INPUT . ) Finally , the indexes corresponding to the locations with the largest suprathreshold values between each UP and DOWN transition are returned in INDEXES_PEAK . See also : vlt . signal . threshold_crossings","title":"vlt.signal.threshold_crossings_epochs"},{"location":"reference/%2Bvlt/%2Bsignal/value2sample.m/","text":"vlt.signal.value2sample \u00b6 vlt . signal . value2sample - give the sample number corresponding to a quantity that is sampled at a fixed rate ( value2sample ) S = VALUE2SAMPLE ( V , SR , V1 ) Given a value ( or array of values ) that are sampled at a fixed sampling rate SR ( in samples / sec ), and given the value of sample number 1 , returns the sample numbers . See also : vlt . signal . sample2value Example : s = vlt . signal . value2sample ( 1 , 1000 , 0 ) % s is 1001","title":"vlt.signal.value2sample"},{"location":"reference/%2Bvlt/%2Bsignal/value2sample.m/#vltsignalvalue2sample","text":"vlt . signal . value2sample - give the sample number corresponding to a quantity that is sampled at a fixed rate ( value2sample ) S = VALUE2SAMPLE ( V , SR , V1 ) Given a value ( or array of values ) that are sampled at a fixed sampling rate SR ( in samples / sec ), and given the value of sample number 1 , returns the sample numbers . See also : vlt . signal . sample2value Example : s = vlt . signal . value2sample ( 1 , 1000 , 0 ) % s is 1001","title":"vlt.signal.value2sample"},{"location":"reference/%2Bvlt/%2Bsignal/whitening_filter_from_autocorr.m/","text":"vlt.signal.whitening_filter_from_autocorr \u00b6 WHITENING_FILTER_FROM_AUTOCORR - Compute whitening filter from inverse covariance matrix from autocorrelation of signal [ RINV , R ] = vlt . signal . whitening_filter_from_autocorr ( AUTOCORR , M ) Uses the inverse of the covariance matrix derived from the autocorrelation of a signal to generate a whitening filter . Given an autocorrelation of a signal in the form of a vector with lags 1. . N , this function creates a covariance matrix R with dimension M and its inverse , RINV . If M is greater than M , then the matrix R is zero padded .","title":"vlt.signal.whitening_filter_from_autocorr"},{"location":"reference/%2Bvlt/%2Bsignal/whitening_filter_from_autocorr.m/#vltsignalwhitening_filter_from_autocorr","text":"WHITENING_FILTER_FROM_AUTOCORR - Compute whitening filter from inverse covariance matrix from autocorrelation of signal [ RINV , R ] = vlt . signal . whitening_filter_from_autocorr ( AUTOCORR , M ) Uses the inverse of the covariance matrix derived from the autocorrelation of a signal to generate a whitening filter . Given an autocorrelation of a signal in the form of a vector with lags 1. . N , this function creates a covariance matrix R with dimension M and its inverse , RINV . If M is greater than M , then the matrix R is zero padded .","title":"vlt.signal.whitening_filter_from_autocorr"},{"location":"reference/%2Bvlt/%2Bsignal/wiener_demo.m/","text":"vlt.signal.wiener_demo \u00b6 WIENER_DEMO - Demonstration of filter reconstruction using Wiener filtering Given a signal x [ n ] that is filtered by some unknown process , derive the least square best filter such that y [ n ] * myfilter + noise = x [ n ] modified from : Digital Signal Processing Using MATLAB for Students and Researchers John W . Leis ( Wiley , 2011 ) The following parameters of the example can be modified by passing name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------------- N ( 10000 ) | Number of points b ( [ 1 0.8 -0.4 0.1 ] ) | Filter parameters ( computed using filter ) L ( 4 ) | Coefficient length of divided signal NewNoise ( 0 ) | Should we filter the original noise or new noise ?","title":"vlt.signal.wiener_demo"},{"location":"reference/%2Bvlt/%2Bsignal/wiener_demo.m/#vltsignalwiener_demo","text":"WIENER_DEMO - Demonstration of filter reconstruction using Wiener filtering Given a signal x [ n ] that is filtered by some unknown process , derive the least square best filter such that y [ n ] * myfilter + noise = x [ n ] modified from : Digital Signal Processing Using MATLAB for Students and Researchers John W . Leis ( Wiley , 2011 ) The following parameters of the example can be modified by passing name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------------- N ( 10000 ) | Number of points b ( [ 1 0.8 -0.4 0.1 ] ) | Filter parameters ( computed using filter ) L ( 4 ) | Coefficient length of divided signal NewNoise ( 0 ) | Should we filter the original noise or new noise ?","title":"vlt.signal.wiener_demo"},{"location":"reference/%2Bvlt/%2Bsignal/xcorr_discrete.m/","text":"vlt.signal.xcorr_discrete \u00b6 XCORR_DISCRETE - Calculate the cross - correlation between two signals without FFT XC = vlt . signal . xcorr_discrete ( SIGNAL1 , SIGNAL2 , N , NORMSTRING ) Computes the cross - correlation between SIGNAL1 and SIGNAL2 for lags up to N . If NORMSTRING is left off , then the correlation is not normalized . Otherwise it is normalized according to the following values of NORMSTRING : 'none' : no normalization 'biased' : divides by length of SIGNAL1 'unbiased' : divides by the absolute value of length of SIGNAL - LAG","title":"vlt.signal.xcorr_discrete"},{"location":"reference/%2Bvlt/%2Bsignal/xcorr_discrete.m/#vltsignalxcorr_discrete","text":"XCORR_DISCRETE - Calculate the cross - correlation between two signals without FFT XC = vlt . signal . xcorr_discrete ( SIGNAL1 , SIGNAL2 , N , NORMSTRING ) Computes the cross - correlation between SIGNAL1 and SIGNAL2 for lags up to N . If NORMSTRING is left off , then the correlation is not normalized . Otherwise it is normalized according to the following values of NORMSTRING : 'none' : no normalization 'biased' : divides by length of SIGNAL1 'unbiased' : divides by the absolute value of length of SIGNAL - LAG","title":"vlt.signal.xcorr_discrete"},{"location":"reference/%2Bvlt/%2Bsignal/xcorr_stepfunc.m/","text":"vlt.signal.xcorr_stepfunc \u00b6 XCORR_STEPFUNC - Perform correlation between a time series and a step function [ CORR , LAGS ] = vlt . signal . xcorr_stepfunc ( T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. MAXLAG is the maximum lag to examine ( in samples of SIGNAL1 ) See also : XCORR , vlt . math . stepfunc , vlt . signal . correlation_stepfunc","title":"vlt.signal.xcorr_stepfunc"},{"location":"reference/%2Bvlt/%2Bsignal/xcorr_stepfunc.m/#vltsignalxcorr_stepfunc","text":"XCORR_STEPFUNC - Perform correlation between a time series and a step function [ CORR , LAGS ] = vlt . signal . xcorr_stepfunc ( T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. MAXLAG is the maximum lag to examine ( in samples of SIGNAL1 ) See also : XCORR , vlt . math . stepfunc , vlt . signal . correlation_stepfunc","title":"vlt.signal.xcorr_stepfunc"},{"location":"reference/%2Bvlt/%2Bsignal/xcorr_stepfuncstepfunc.m/","text":"vlt.signal.xcorr_stepfuncstepfunc \u00b6 XCORR_STEPFUNC - Perform correlation between a step function and a step function [ CORR , LAGS ] = vlt . signal . xcorr_stepfuncstepfunc ( TE , T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between an N step - function SIGNAL1 that changes values at times T1 and is at times T1 , and the N step - function signal SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL1 and SIGNAL2 that are out of the range are set to 0. TE are the times over which to evalute the step functions , and the time between successive values of TE is equal to 1 sample in the returned cross - correlation . MAXLAG is the maximum lag to examine ( in samples of TE ) . The XCORR normalization is 'biased' . The correlation is returned in CORR . It has 1 column per dimension of the two step functions . ( Programmer note : there is a probably a better algorithm for this . ) See also : XCORR , vlt . signal . xcorr_stepfunc , vlt . math . stepfunc , vlt . signal . correlation_stepfunc","title":"vlt.signal.xcorr_stepfuncstepfunc"},{"location":"reference/%2Bvlt/%2Bsignal/xcorr_stepfuncstepfunc.m/#vltsignalxcorr_stepfuncstepfunc","text":"XCORR_STEPFUNC - Perform correlation between a step function and a step function [ CORR , LAGS ] = vlt . signal . xcorr_stepfuncstepfunc ( TE , T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between an N step - function SIGNAL1 that changes values at times T1 and is at times T1 , and the N step - function signal SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL1 and SIGNAL2 that are out of the range are set to 0. TE are the times over which to evalute the step functions , and the time between successive values of TE is equal to 1 sample in the returned cross - correlation . MAXLAG is the maximum lag to examine ( in samples of TE ) . The XCORR normalization is 'biased' . The correlation is returned in CORR . It has 1 column per dimension of the two step functions . ( Programmer note : there is a probably a better algorithm for this . ) See also : XCORR , vlt . signal . xcorr_stepfunc , vlt . math . stepfunc , vlt . signal . correlation_stepfunc","title":"vlt.signal.xcorr_stepfuncstepfunc"},{"location":"reference/%2Bvlt/%2Bsignal/ztrans_discrete.m/","text":"vlt.signal.ztrans_discrete \u00b6 ZTRANS_DISCRETE Evaluate the discrete Z transform for a value of z OUT = vlt . signal . ztrans_discrete ( N , V , Z ) Given an array of sample locations N and an array of corresponding values V , computes the Z - transform and evaluates the result at Z . Z can be an array . The Z - transform is X ( Z ) = sum { all_N }{ V ( n ) * z ^ ( - n )}","title":"vlt.signal.ztrans_discrete"},{"location":"reference/%2Bvlt/%2Bsignal/ztrans_discrete.m/#vltsignalztrans_discrete","text":"ZTRANS_DISCRETE Evaluate the discrete Z transform for a value of z OUT = vlt . signal . ztrans_discrete ( N , V , Z ) Given an array of sample locations N and an array of corresponding values V , computes the Z - transform and evaluates the result at Z . Z can be an array . The Z - transform is X ( Z ) = sum { all_N }{ V ( n ) * z ^ ( - n )}","title":"vlt.signal.ztrans_discrete"},{"location":"reference/%2Bvlt/%2Bspreadsheet/spreadsheet_filterbydate.m/","text":"vlt.spreadsheet.spreadsheet_filterbydate \u00b6 SPREADSHEET - Filter a spreadsheet for fields defined by a Timestamp field SPREADSHEET_OUT = vlt . spreadsheet . spreadsheet_filterbydate ( SPREADSHEET_IN , DATELOW , DATEHIGH , ... ) Filters a spreadsheet ( cell array ) SPREADSHEET_IN to exclude rows that have a 'timestamp' field entry outside of the range DATELOW to DATEHIGH . DATELOW and DATEHIGH can be any date string that is recognized by the Matlab function DATENUM . ( For example , 'YYYY-MM-DD' is acceptable and unambiguous . ) This function can also take name / value pairs that modify its behavior . Parameter ( default ) | Description ------------------------------------------------------------------------------- FirstRowIsHeader ( 1 ) | Is the first row a header ? LeaveHeader ( 1 ) | Leave the header in the filtered spreadsheet TimestampColumnLabel | The label of the timestamp column ( 'Timestamp' ) | TimestampColumnNumber | The column of the timestamp column . If empty , will be ( '' ) | searched for using TimestampColumnLabel . See also : DATENUM , vlt . data . namevaluepair","title":"vlt.spreadsheet.spreadsheet_filterbydate"},{"location":"reference/%2Bvlt/%2Bspreadsheet/spreadsheet_filterbydate.m/#vltspreadsheetspreadsheet_filterbydate","text":"SPREADSHEET - Filter a spreadsheet for fields defined by a Timestamp field SPREADSHEET_OUT = vlt . spreadsheet . spreadsheet_filterbydate ( SPREADSHEET_IN , DATELOW , DATEHIGH , ... ) Filters a spreadsheet ( cell array ) SPREADSHEET_IN to exclude rows that have a 'timestamp' field entry outside of the range DATELOW to DATEHIGH . DATELOW and DATEHIGH can be any date string that is recognized by the Matlab function DATENUM . ( For example , 'YYYY-MM-DD' is acceptable and unambiguous . ) This function can also take name / value pairs that modify its behavior . Parameter ( default ) | Description ------------------------------------------------------------------------------- FirstRowIsHeader ( 1 ) | Is the first row a header ? LeaveHeader ( 1 ) | Leave the header in the filtered spreadsheet TimestampColumnLabel | The label of the timestamp column ( 'Timestamp' ) | TimestampColumnNumber | The column of the timestamp column . If empty , will be ( '' ) | searched for using TimestampColumnLabel . See also : DATENUM , vlt . data . namevaluepair","title":"vlt.spreadsheet.spreadsheet_filterbydate"},{"location":"reference/%2Bvlt/%2Bspreadsheet/spreadsheet_multiplechoice.m/","text":"vlt.spreadsheet.spreadsheet_multiplechoice \u00b6 SPREADSHEET_MULTIPLECHOICE - Return answers to a multiple choice spreadsheet question ANSWERS = vlt . spreadsheet . spreadsheet_multiplechoice ( SPREADSHEET , QUESTION , ... ) Returns a structure with responses to a multiple choice \"question\" in the header row of a spreadsheet . The header row is assumed to be the first row . The structure ANSWERS has 3 fields : question ( the question asked ) , choices ( a cell array of strings of the choices ) , and results ( a vector of how many choices of each type were made ) . This function can also take name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------- choices ( [] ) | If the user wishes to provide the choices , one | can . This is useful for prescribing the order | of the choices , or for indicating the possibility of | choices that are not represented in the data . If empty , | then choices will be determined empircally by the entries | in the spreadsheet . See also : NAMEVALUEPAIRS","title":"vlt.spreadsheet.spreadsheet_multiplechoice"},{"location":"reference/%2Bvlt/%2Bspreadsheet/spreadsheet_multiplechoice.m/#vltspreadsheetspreadsheet_multiplechoice","text":"SPREADSHEET_MULTIPLECHOICE - Return answers to a multiple choice spreadsheet question ANSWERS = vlt . spreadsheet . spreadsheet_multiplechoice ( SPREADSHEET , QUESTION , ... ) Returns a structure with responses to a multiple choice \"question\" in the header row of a spreadsheet . The header row is assumed to be the first row . The structure ANSWERS has 3 fields : question ( the question asked ) , choices ( a cell array of strings of the choices ) , and results ( a vector of how many choices of each type were made ) . This function can also take name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------- choices ( [] ) | If the user wishes to provide the choices , one | can . This is useful for prescribing the order | of the choices , or for indicating the possibility of | choices that are not represented in the data . If empty , | then choices will be determined empircally by the entries | in the spreadsheet . See also : NAMEVALUEPAIRS","title":"vlt.spreadsheet.spreadsheet_multiplechoice"},{"location":"reference/%2Bvlt/%2Bstats/chi2class.m/","text":"vlt.stats.chi2class \u00b6 CHI2CLASS - Tests whether observations are distributed equally among classes [ P , CHI2 , E ] = vlt . stats . chi2class ( D ) Returns the p value and chi-square value of the test of the null hypothesis that cells are distributed equally among classes in several groups . E is the expected number of members of each group if there are no differences among the experimental groups . D should be the grouping matrix . Each row of D should have the class memberships for an experimental group . Example : Suppose we want to examine whether the gender distribution of computer science majors differs from that of English majors in a small college . Suppose that there are 90 male and 10 female computer science majors and 40 male and 60 female English majors . D = [ 90 10 ; 40 60 ] ; [ p , chi2 , E ] = vlt . stats . chi2class ( D )","title":"vlt.stats.chi2class"},{"location":"reference/%2Bvlt/%2Bstats/chi2class.m/#vltstatschi2class","text":"CHI2CLASS - Tests whether observations are distributed equally among classes [ P , CHI2 , E ] = vlt . stats . chi2class ( D ) Returns the p value and chi-square value of the test of the null hypothesis that cells are distributed equally among classes in several groups . E is the expected number of members of each group if there are no differences among the experimental groups . D should be the grouping matrix . Each row of D should have the class memberships for an experimental group . Example : Suppose we want to examine whether the gender distribution of computer science majors differs from that of English majors in a small college . Suppose that there are 90 male and 10 female computer science majors and 40 male and 60 female English majors . D = [ 90 10 ; 40 60 ] ; [ p , chi2 , E ] = vlt . stats . chi2class ( D )","title":"vlt.stats.chi2class"},{"location":"reference/%2Bvlt/%2Bstats/chi2uniformtest.m/","text":"vlt.stats.chi2uniformtest \u00b6 CHI2UNIFORMTEST - Test for uniformity of distribution of data in bins [ P , V , DF ] = vlt . stats . chi2uniformtest ( D ) For data classified in discrete bins D ( 1 ) , D ( 2 ) , this returns the probability of the null hypothesis that the \"true\" number of data points in D ( 1 ) == D ( 2 ) == D ( 3 ) etc and that the observed differences are due to statistical sampling .","title":"vlt.stats.chi2uniformtest"},{"location":"reference/%2Bvlt/%2Bstats/chi2uniformtest.m/#vltstatschi2uniformtest","text":"CHI2UNIFORMTEST - Test for uniformity of distribution of data in bins [ P , V , DF ] = vlt . stats . chi2uniformtest ( D ) For data classified in discrete bins D ( 1 ) , D ( 2 ) , this returns the probability of the null hypothesis that the \"true\" number of data points in D ( 1 ) == D ( 2 ) == D ( 3 ) etc and that the observed differences are due to statistical sampling .","title":"vlt.stats.chi2uniformtest"},{"location":"reference/%2Bvlt/%2Bstats/discrimin_iterative.m/","text":"vlt.stats.discrimin_iterative \u00b6 vlt.stats.discrimin_iterative is a function. [a, c, P] = vlt.stats.discrimin_iterative(DATA, G)","title":"vlt.stats.discrimin_iterative"},{"location":"reference/%2Bvlt/%2Bstats/discrimin_iterative.m/#vltstatsdiscrimin_iterative","text":"vlt.stats.discrimin_iterative is a function. [a, c, P] = vlt.stats.discrimin_iterative(DATA, G)","title":"vlt.stats.discrimin_iterative"},{"location":"reference/%2Bvlt/%2Bstats/discrimin_iterative_err.m/","text":"vlt.stats.discrimin_iterative_err \u00b6 vlt.stats.discrimin_iterative_err is a function. err = vlt.stats.discrimin_iterative_err(X, data, g)","title":"vlt.stats.discrimin_iterative_err"},{"location":"reference/%2Bvlt/%2Bstats/discrimin_iterative_err.m/#vltstatsdiscrimin_iterative_err","text":"vlt.stats.discrimin_iterative_err is a function. err = vlt.stats.discrimin_iterative_err(X, data, g)","title":"vlt.stats.discrimin_iterative_err"},{"location":"reference/%2Bvlt/%2Bstats/gof_Zoccolan.m/","text":"vlt.stats.gof_Zoccolan \u00b6 vlt . stats . gof_Zoccolan - Goodness of Fit from Zoccolan et al . , 2005 [ GF , Vres , Vexpl , Vnoise ] = vlt . stats . gof_Zoccolan ( TRIALDATA , FIT ) Returns goodness of fit that describes how much of the explainable variation ( i . e . , that not due to noise across trials ) is explained by a given fit . TRIALDATA should have M columns and N rows . Each column should have individual responses for one particular stimulus . If any values are NAN then these trials are excluded . FIT is a fit to the mean response to each stimulus and should be 1 xN . GF is the goodness of fit measure from 0 to 1 Vres is the residual variance left over from the fit Vexpl is the explainable variance Vnoise is the variance of the noise Ref : Zoccolan DE , Cox DD , DiCarlo , JJ . J Neurosci 25 : 8150 - 8164 2005.","title":"vlt.stats.gof_Zoccolan"},{"location":"reference/%2Bvlt/%2Bstats/gof_Zoccolan.m/#vltstatsgof_zoccolan","text":"vlt . stats . gof_Zoccolan - Goodness of Fit from Zoccolan et al . , 2005 [ GF , Vres , Vexpl , Vnoise ] = vlt . stats . gof_Zoccolan ( TRIALDATA , FIT ) Returns goodness of fit that describes how much of the explainable variation ( i . e . , that not due to noise across trials ) is explained by a given fit . TRIALDATA should have M columns and N rows . Each column should have individual responses for one particular stimulus . If any values are NAN then these trials are excluded . FIT is a fit to the mean response to each stimulus and should be 1 xN . GF is the goodness of fit measure from 0 to 1 Vres is the residual variance left over from the fit Vexpl is the explainable variance Vnoise is the variance of the noise Ref : Zoccolan DE , Cox DD , DiCarlo , JJ . J Neurosci 25 : 8150 - 8164 2005.","title":"vlt.stats.gof_Zoccolan"},{"location":"reference/%2Bvlt/%2Bstats/gof_dicarlo_totalpower.m/","text":"vlt.stats.gof_dicarlo_totalpower \u00b6 GOF_DICARLO_TOTALPOWER - Goodness of Fit from DiCarlo et al . 1988 [ GF , WS ] = vlt . stats . gof_dicarlo_totalpower ( RAWDATA , FIT , NUMFITPARAMS ) Computes an analog to the \"explanable variance\" goodness - of - fit in DiCarlo et al . 1988 , except using the total power of a response and fit ( not sum of squares around the mean ) . Imagine a measured process Y ( t ) reflects some underlying function F ( t ) plus noise ( due to measurement or process ) N ( t ) . Then the sum of squares ( Y ( t ) ^ 2 ) for all t is ( Y ( t ) ^ 2 ) = ( F ( t ) ^ 2 ) + ( N ( t )) ^ 2 + 2 * F ( t ) * N ( t ) . If we further assume that the expected value of N ( t ) is 0 , then on average ( Y ( t ) ^ 2 ) = F ( t ) ^ 2 + N ( t ) ^ 2. Because of the noise N ( t ), the power ( signal around 0 ) in Y ( t ) due to this noise is unexplanable by any model . The power of Y ( t ) is then Y ( t ) .^ 2 == F ( t ) .^ 2 + N ( t ) .^ 2 but the explanable power ( power of F ) is F ( t ) .^ 2 == Y ( t ) .^ 2 - N ( t ) .^ 2 The goodness of fit GF describes how much of this explanable power of Y ( which is the power of F ) is explained by a fit H . GF = ( FIT_EXPLAINED_POWER ) / ( EXPLANABLE_POWER ) The entire workspace is returned as a structure in WS . Related to : Ref : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey This function accepts name / value pairs that alter its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------------------ NoiseEstimation ( 'median' ) | How will we estimate the noise ? Can be 'median' or 'std' . | If it is 'median' , then vlt . stats . std_from_median ( X ) is used . | If it is 'STD' , then STD ( X ) is used .","title":"vlt.stats.gof_dicarlo_totalpower"},{"location":"reference/%2Bvlt/%2Bstats/gof_dicarlo_totalpower.m/#vltstatsgof_dicarlo_totalpower","text":"GOF_DICARLO_TOTALPOWER - Goodness of Fit from DiCarlo et al . 1988 [ GF , WS ] = vlt . stats . gof_dicarlo_totalpower ( RAWDATA , FIT , NUMFITPARAMS ) Computes an analog to the \"explanable variance\" goodness - of - fit in DiCarlo et al . 1988 , except using the total power of a response and fit ( not sum of squares around the mean ) . Imagine a measured process Y ( t ) reflects some underlying function F ( t ) plus noise ( due to measurement or process ) N ( t ) . Then the sum of squares ( Y ( t ) ^ 2 ) for all t is ( Y ( t ) ^ 2 ) = ( F ( t ) ^ 2 ) + ( N ( t )) ^ 2 + 2 * F ( t ) * N ( t ) . If we further assume that the expected value of N ( t ) is 0 , then on average ( Y ( t ) ^ 2 ) = F ( t ) ^ 2 + N ( t ) ^ 2. Because of the noise N ( t ), the power ( signal around 0 ) in Y ( t ) due to this noise is unexplanable by any model . The power of Y ( t ) is then Y ( t ) .^ 2 == F ( t ) .^ 2 + N ( t ) .^ 2 but the explanable power ( power of F ) is F ( t ) .^ 2 == Y ( t ) .^ 2 - N ( t ) .^ 2 The goodness of fit GF describes how much of this explanable power of Y ( which is the power of F ) is explained by a fit H . GF = ( FIT_EXPLAINED_POWER ) / ( EXPLANABLE_POWER ) The entire workspace is returned as a structure in WS . Related to : Ref : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey This function accepts name / value pairs that alter its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------------------ NoiseEstimation ( 'median' ) | How will we estimate the noise ? Can be 'median' or 'std' . | If it is 'median' , then vlt . stats . std_from_median ( X ) is used . | If it is 'STD' , then STD ( X ) is used .","title":"vlt.stats.gof_dicarlo_totalpower"},{"location":"reference/%2Bvlt/%2Bstats/gof_dicarlo_totalpower_biastest.m/","text":"vlt.stats.gof_dicarlo_totalpower_biastest \u00b6 GOF_DICARLO_TOTALPOWER_BIASTEST The total power measure derived in vlt . stats . gof_dicarlo_totalpower has a bias that is explored here . One needs to read the code . Note that this function is named for a related measure in an appendix of a 1988 paper : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey","title":"vlt.stats.gof_dicarlo_totalpower_biastest"},{"location":"reference/%2Bvlt/%2Bstats/gof_dicarlo_totalpower_biastest.m/#vltstatsgof_dicarlo_totalpower_biastest","text":"GOF_DICARLO_TOTALPOWER_BIASTEST The total power measure derived in vlt . stats . gof_dicarlo_totalpower has a bias that is explored here . One needs to read the code . Note that this function is named for a related measure in an appendix of a 1988 paper : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey","title":"vlt.stats.gof_dicarlo_totalpower_biastest"},{"location":"reference/%2Bvlt/%2Bstats/gof_totalpower.m/","text":"vlt.stats.gof_totalpower \u00b6 GOF_TOTALPOWER - Simple computation of how much 'power' of a signal is accounted for by a fit [ GF , TOTAL_POWER , FIT_POWER , RES_POWER , RES ] = vlt . stats . gof_totalpower ( S , F ) Computes the amount of total power of a signal , the total power of a F of S , and the fraction of the total power that is described by the fit . No effort is made to account for how much of the signal S may be noise . Total power is computed by taking the average value of the square of the signal S and the square of the signal F . This differs from the coefficient of determination , where the mean is subtracted . GF = ( FIT_POWER ) / ( TOTAL_POWER ) RES_POWER is the power of the residual RES which is S - F . S and F are expected to be vectors .","title":"vlt.stats.gof_totalpower"},{"location":"reference/%2Bvlt/%2Bstats/gof_totalpower.m/#vltstatsgof_totalpower","text":"GOF_TOTALPOWER - Simple computation of how much 'power' of a signal is accounted for by a fit [ GF , TOTAL_POWER , FIT_POWER , RES_POWER , RES ] = vlt . stats . gof_totalpower ( S , F ) Computes the amount of total power of a signal , the total power of a F of S , and the fraction of the total power that is described by the fit . No effort is made to account for how much of the signal S may be noise . Total power is computed by taking the average value of the square of the signal S and the square of the signal F . This differs from the coefficient of determination , where the mean is subtracted . GF = ( FIT_POWER ) / ( TOTAL_POWER ) RES_POWER is the power of the residual RES which is S - F . S and F are expected to be vectors .","title":"vlt.stats.gof_totalpower"},{"location":"reference/%2Bvlt/%2Bstats/hartigansdipsigniftest.m/","text":"vlt.stats.hartigansdipsigniftest \u00b6 function [dip,p_value, xlow,xup]=HartigansDipSignifTest ( xpdf,nboot ) calculates Hartigan ' s DIP statistic and its significance for the empirical p . d . f XPDF ( vector of sample values ). This routine calls the matlab routine 'HartigansDipTest' that actually calculates the DIP NBOOT is the user - supplied sample size of boot - strap Code by F . Mechler ( 27 August 2002 )","title":"vlt.stats.hartigansdipsigniftest"},{"location":"reference/%2Bvlt/%2Bstats/hartigansdipsigniftest.m/#vltstatshartigansdipsigniftest","text":"function [dip,p_value, xlow,xup]=HartigansDipSignifTest ( xpdf,nboot ) calculates Hartigan ' s DIP statistic and its significance for the empirical p . d . f XPDF ( vector of sample values ). This routine calls the matlab routine 'HartigansDipTest' that actually calculates the DIP NBOOT is the user - supplied sample size of boot - strap Code by F . Mechler ( 27 August 2002 )","title":"vlt.stats.hartigansdipsigniftest"},{"location":"reference/%2Bvlt/%2Bstats/hartigansdiptest.m/","text":"vlt.stats.hartigansdiptest \u00b6 function [dip,xl,xu, ifault, gcm, lcm, mn, mj]=HartigansDipTest ( xpdf ) This is a direct translation by F . Mechler ( August 27 2002 ) into MATLAB from the original FORTRAN code of Hartigan ' s Subroutine DIPTST algorithm Ref : Algorithm AS 217 APPL . STATIST . ( 1985 ) Vol . 34. No . 3 pg 322 - 325 Appended by F . Mechler ( September 2 2002 ) to deal with a perfectly unimodal input This check the original Hartigan algorithm omitted , which leads to an infinite cycle HartigansDipTest , like DIPTST , does the dip calculation for an ordered vector XPDF using the greatest convex minorant ( gcm ) and the least concave majorant ( lcm ), skipping through the data using the change points of these distributions . It returns the 'DIP' statistic , and 7 more optional results , which include the modal interval ( XL , XU ), ann error flag IFAULT ( > 0 flags an error ) as well as the minorant and majorant fits GCM , LCM , and the corresponding support indices MN , and MJ","title":"vlt.stats.hartigansdiptest"},{"location":"reference/%2Bvlt/%2Bstats/hartigansdiptest.m/#vltstatshartigansdiptest","text":"function [dip,xl,xu, ifault, gcm, lcm, mn, mj]=HartigansDipTest ( xpdf ) This is a direct translation by F . Mechler ( August 27 2002 ) into MATLAB from the original FORTRAN code of Hartigan ' s Subroutine DIPTST algorithm Ref : Algorithm AS 217 APPL . STATIST . ( 1985 ) Vol . 34. No . 3 pg 322 - 325 Appended by F . Mechler ( September 2 2002 ) to deal with a perfectly unimodal input This check the original Hartigan algorithm omitted , which leads to an infinite cycle HartigansDipTest , like DIPTST , does the dip calculation for an ordered vector XPDF using the greatest convex minorant ( gcm ) and the least concave majorant ( lcm ), skipping through the data using the change points of these distributions . It returns the 'DIP' statistic , and 7 more optional results , which include the modal interval ( XL , XU ), ann error flag IFAULT ( > 0 flags an error ) as well as the minorant and majorant fits GCM , LCM , and the corresponding support indices MN , and MJ","title":"vlt.stats.hartigansdiptest"},{"location":"reference/%2Bvlt/%2Bstats/hist_percentile.m/","text":"vlt.stats.hist_percentile \u00b6 HIST_PERCENTILE - Produce a percentile for data values that fall between bins PRCTILES = HIST_PERCENTILES ( BINS , DATA1 , DATA2 , PERCENT_VALUE ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the PERCENT_VALUE percentile of the corresponding values in DATA2 are returned in PRCTILES ( i ) .","title":"vlt.stats.hist_percentile"},{"location":"reference/%2Bvlt/%2Bstats/hist_percentile.m/#vltstatshist_percentile","text":"HIST_PERCENTILE - Produce a percentile for data values that fall between bins PRCTILES = HIST_PERCENTILES ( BINS , DATA1 , DATA2 , PERCENT_VALUE ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the PERCENT_VALUE percentile of the corresponding values in DATA2 are returned in PRCTILES ( i ) .","title":"vlt.stats.hist_percentile"},{"location":"reference/%2Bvlt/%2Bstats/hist_std.m/","text":"vlt.stats.hist_std \u00b6 HIST_PERCENTILE - Produce standard deviation for data values that fall between bins STDDEV = vlt . stats . hist_std ( BINS , DATA1 , DATA2 ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the standard deviation of the corresponding values in DATA2 are returned in STDDEV ( i ) .","title":"vlt.stats.hist_std"},{"location":"reference/%2Bvlt/%2Bstats/hist_std.m/#vltstatshist_std","text":"HIST_PERCENTILE - Produce standard deviation for data values that fall between bins STDDEV = vlt . stats . hist_std ( BINS , DATA1 , DATA2 ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the standard deviation of the corresponding values in DATA2 are returned in STDDEV ( i ) .","title":"vlt.stats.hist_std"},{"location":"reference/%2Bvlt/%2Bstats/hotellingt2test.m/","text":"vlt.stats.hotellingt2test \u00b6 vlt . stats . hotellingt2test - Hotelling T ^ 2 test for multivariate samples [ H , P ] = vlt . stats . hotellingt2test ( X , MU ) [ H , P ] = vlt . stats . hotellingt2test ( X , MU , ALPHA ) Performs Hotelling 's T^2 test on multivariate samples X to determine if the data have mean MU . X should be a NxP matrix with N observations of P - dimensional data , and the mean MU to be tested should be 1 xP . ALPHA , the significance level , is 0.05 by default . H is 1 if the null hypothesis ( that the mean of X is equal to MU ) can be rejected at significance level ALPHA . P is the actual P value . The code is based on HotellingT2 . m by A . Trujillo - Ortiz and R . Hernandez - Walls . That software is available at TheMathWorks free file exchange site .","title":"vlt.stats.hotellingt2test"},{"location":"reference/%2Bvlt/%2Bstats/hotellingt2test.m/#vltstatshotellingt2test","text":"vlt . stats . hotellingt2test - Hotelling T ^ 2 test for multivariate samples [ H , P ] = vlt . stats . hotellingt2test ( X , MU ) [ H , P ] = vlt . stats . hotellingt2test ( X , MU , ALPHA ) Performs Hotelling 's T^2 test on multivariate samples X to determine if the data have mean MU . X should be a NxP matrix with N observations of P - dimensional data , and the mean MU to be tested should be 1 xP . ALPHA , the significance level , is 0.05 by default . H is 1 if the null hypothesis ( that the mean of X is equal to MU ) can be rejected at significance level ALPHA . P is the actual P value . The code is based on HotellingT2 . m by A . Trujillo - Ortiz and R . Hernandez - Walls . That software is available at TheMathWorks free file exchange site .","title":"vlt.stats.hotellingt2test"},{"location":"reference/%2Bvlt/%2Bstats/kolmogorov_smirnov_cdf.m/","text":"vlt.stats.kolmogorov_smirnov_cdf \u00b6 vlt . stats . kolmogorov_smirnov_cdf ( X , TOL ) Return the CDF at X of the Kolmogorov - Smirnov distribution , Inf Q ( x ) = SUM ( - 1 ) ^ k exp ( - 2 k ^ 2 x ^ 2 ) k = - Inf for X > 0 . The optional parameter TOL specifies the precision up to which the series should be evaluated ; the default is TOL = `eps'. Ported from octave 2 . 1 . 35","title":"vlt.stats.kolmogorov_smirnov_cdf"},{"location":"reference/%2Bvlt/%2Bstats/kolmogorov_smirnov_cdf.m/#vltstatskolmogorov_smirnov_cdf","text":"vlt . stats . kolmogorov_smirnov_cdf ( X , TOL ) Return the CDF at X of the Kolmogorov - Smirnov distribution , Inf Q ( x ) = SUM ( - 1 ) ^ k exp ( - 2 k ^ 2 x ^ 2 ) k = - Inf for X > 0 . The optional parameter TOL specifies the precision up to which the series should be evaluated ; the default is TOL = `eps'. Ported from octave 2 . 1 . 35","title":"vlt.stats.kolmogorov_smirnov_cdf"},{"location":"reference/%2Bvlt/%2Bstats/kolmogorov_smirnov_test.m/","text":"vlt.stats.kolmogorov_smirnov_test \u00b6 vlt . stats . kolmogorov_smirnov_test Kolmogorov - smirnov test [ PVAL . KS ] = vlt . stats . kolmogorov_smirnov_test ( X , HYP , DIST , PARAMS ) Computes liklihood data X were generated by distribution DIST with parameters PARAMS . Three alternative hypotheses ( HYP ) are available : 'notequal' ( the data are not equal ) '<' X < DIST w / parameters PARAMS '>' X > DIST w / parameters PARAMS See CDF for information about legal DIST names and parameters . Ported from Octave version 2 . 1 . 35","title":"vlt.stats.kolmogorov_smirnov_test"},{"location":"reference/%2Bvlt/%2Bstats/kolmogorov_smirnov_test.m/#vltstatskolmogorov_smirnov_test","text":"vlt . stats . kolmogorov_smirnov_test Kolmogorov - smirnov test [ PVAL . KS ] = vlt . stats . kolmogorov_smirnov_test ( X , HYP , DIST , PARAMS ) Computes liklihood data X were generated by distribution DIST with parameters PARAMS . Three alternative hypotheses ( HYP ) are available : 'notequal' ( the data are not equal ) '<' X < DIST w / parameters PARAMS '>' X > DIST w / parameters PARAMS See CDF for information about legal DIST names and parameters . Ported from Octave version 2 . 1 . 35","title":"vlt.stats.kolmogorov_smirnov_test"},{"location":"reference/%2Bvlt/%2Bstats/kruskal_wallis_mv.m/","text":"vlt.stats.kruskal_wallis_mv \u00b6 KRUSKAL_WALLIS_MV ( VARARGIN ) Perform a Kruskal - Wallis one - factor 'analysis of variance' for multivariate data . [ PVAL , KW , DF ] = vlt . stats . kruskal_wallis_mv ( X1 , ... , XK ) Returns the probability ( PVAL ) of the null hypothesis that the distributions of X1 , ... , XK are equal . The multivariate points Xi should be arranged in column form . The KW statistic and degrees of freedom DF are returned . The Kruskal - Wallis test is a rank test based on the order of the datapoints rather than their value ( see ANOVA1 ) . We implement the test described by Choi and Marden and choose the kernel to be ( X - Y ) /|| ( X - Y ) || ( see the reference ) . Reference : Choi and Marden , J . Amer . Stat . Assoc . , 92 : 1581 - 1590 warning : this has been tested for normal distributions and seems to perform reasonably , but I could not find example data for which the authors had performed analysis ; upshot : this is not 100 % tested","title":"vlt.stats.kruskal_wallis_mv"},{"location":"reference/%2Bvlt/%2Bstats/kruskal_wallis_mv.m/#vltstatskruskal_wallis_mv","text":"KRUSKAL_WALLIS_MV ( VARARGIN ) Perform a Kruskal - Wallis one - factor 'analysis of variance' for multivariate data . [ PVAL , KW , DF ] = vlt . stats . kruskal_wallis_mv ( X1 , ... , XK ) Returns the probability ( PVAL ) of the null hypothesis that the distributions of X1 , ... , XK are equal . The multivariate points Xi should be arranged in column form . The KW statistic and degrees of freedom DF are returned . The Kruskal - Wallis test is a rank test based on the order of the datapoints rather than their value ( see ANOVA1 ) . We implement the test described by Choi and Marden and choose the kernel to be ( X - Y ) /|| ( X - Y ) || ( see the reference ) . Reference : Choi and Marden , J . Amer . Stat . Assoc . , 92 : 1581 - 1590 warning : this has been tested for normal distributions and seems to perform reasonably , but I could not find example data for which the authors had performed analysis ; upshot : this is not 100 % tested","title":"vlt.stats.kruskal_wallis_mv"},{"location":"reference/%2Bvlt/%2Bstats/kruskal_wallis_test.m/","text":"vlt.stats.kruskal_wallis_test \u00b6 KRUSKAL_WALLIS_TEST - Kruskal - Wallis one - factor analysis of variance Perform a Kruskal - Wallis one - factor \"analysis of variance\" . [ PVAL , K , DF ] = vlt . stats . kruskal_wallis_test ( X1 , ... , XK ) Suppose a variable is observed for @ var { k } > 1 different groups , and let X1 , ... , XK be the corresponding data vectors . Under the null hypothesis that the ranks in the pooled sample are not affected by the group memberships , the test statistic K is approximately chi - square with DF = K - 1 degrees of freedom . The p - value ( 1 minus the CDF of this distribution at K ) is returned in PVAL } . If no output argument is given , the p - value is displayed . [ From Octave 2.5 . 1 ] ( 2024 - 04 - 23 : NaN values will be removed . SDV ) Author : KH < Kurt . Hornik @ ci . tuwien . ac . at > Description : Kruskal - Wallis test","title":"vlt.stats.kruskal_wallis_test"},{"location":"reference/%2Bvlt/%2Bstats/kruskal_wallis_test.m/#vltstatskruskal_wallis_test","text":"KRUSKAL_WALLIS_TEST - Kruskal - Wallis one - factor analysis of variance Perform a Kruskal - Wallis one - factor \"analysis of variance\" . [ PVAL , K , DF ] = vlt . stats . kruskal_wallis_test ( X1 , ... , XK ) Suppose a variable is observed for @ var { k } > 1 different groups , and let X1 , ... , XK be the corresponding data vectors . Under the null hypothesis that the ranks in the pooled sample are not affected by the group memberships , the test statistic K is approximately chi - square with DF = K - 1 degrees of freedom . The p - value ( 1 minus the CDF of this distribution at K ) is returned in PVAL } . If no output argument is given , the p - value is displayed . [ From Octave 2.5 . 1 ] ( 2024 - 04 - 23 : NaN values will be removed . SDV ) Author : KH < Kurt . Hornik @ ci . tuwien . ac . at > Description : Kruskal - Wallis test","title":"vlt.stats.kruskal_wallis_test"},{"location":"reference/%2Bvlt/%2Bstats/ks2_cdf.m/","text":"vlt.stats.ks2_cdf \u00b6 KS2_CDF - Cumulative density function of Kolmogorov - Smivnov 2 sample test CDF = vlt . stats . ks2_cdf ( N1 , N2 , KS_DIFF ) Returns the cumulative density function for 2 samples of size N1 and N2 respectively as a function of the difference between the 2 distributions KS_DIFF . Approximation has been borrowed from MATLAB 's KSTEST2 function.","title":"vlt.stats.ks2_cdf"},{"location":"reference/%2Bvlt/%2Bstats/ks2_cdf.m/#vltstatsks2_cdf","text":"KS2_CDF - Cumulative density function of Kolmogorov - Smivnov 2 sample test CDF = vlt . stats . ks2_cdf ( N1 , N2 , KS_DIFF ) Returns the cumulative density function for 2 samples of size N1 and N2 respectively as a function of the difference between the 2 distributions KS_DIFF . Approximation has been borrowed from MATLAB 's KSTEST2 function.","title":"vlt.stats.ks2_cdf"},{"location":"reference/%2Bvlt/%2Bstats/ks_cdf_conf.m/","text":"vlt.stats.ks_cdf_conf \u00b6 KS_CDF_CONF Kolmogorov - Smirnov confidence interval for a data set . [ Xvalues , sampleCDF , minCDF , maxCDF ] = vlt . stats . ks_cdf_conf ( X1 , ALPHA ) performs a Kolmogorov - Smirnov ( K - S ) test to determine the confidence interval for independent random samples X1 . ALPHA is the desired significance level ( default = 0 . 05 ) ; observations , indicated by NaNs ( Not - a - Number ) , are ignored . The asymptotic P - value becomes very accurate for large sample sizes , and is believed to be reasonably accurate for sample sizes N1 and N2 such that ( N1 * N2 ) / ( N1 + N2 ) >= 4 . Created by SDV , based on KSTEST2 by the MathWorks See also KSTEST , KSTEST2 , CDFPLOT .","title":"vlt.stats.ks_cdf_conf"},{"location":"reference/%2Bvlt/%2Bstats/ks_cdf_conf.m/#vltstatsks_cdf_conf","text":"KS_CDF_CONF Kolmogorov - Smirnov confidence interval for a data set . [ Xvalues , sampleCDF , minCDF , maxCDF ] = vlt . stats . ks_cdf_conf ( X1 , ALPHA ) performs a Kolmogorov - Smirnov ( K - S ) test to determine the confidence interval for independent random samples X1 . ALPHA is the desired significance level ( default = 0 . 05 ) ; observations , indicated by NaNs ( Not - a - Number ) , are ignored . The asymptotic P - value becomes very accurate for large sample sizes , and is believed to be reasonably accurate for sample sizes N1 and N2 such that ( N1 * N2 ) / ( N1 + N2 ) >= 4 . Created by SDV , based on KSTEST2 by the MathWorks See also KSTEST , KSTEST2 , CDFPLOT .","title":"vlt.stats.ks_cdf_conf"},{"location":"reference/%2Bvlt/%2Bstats/ks_cdf_conf_plot.m/","text":"vlt.stats.ks_cdf_conf_plot \u00b6 KS_CDF_CONF_PLOT - Plot gray patch of confidence around a CDF H = vlt . stats . ks_cdf_conf_plot ( XVALUES , MINCDF , MAXCDF , XMIN , XMAX ) ; Plots a gray 'patch' around a sample CDF indicating the confidence in the true distribution . It is assumed the XVALUES , MINCDF , and MAXCDF are returned from vlt . stats . ks_cdf_conf . Use XMIN and XMAX to specify the minimum and maximum X values used for the plot .","title":"vlt.stats.ks_cdf_conf_plot"},{"location":"reference/%2Bvlt/%2Bstats/ks_cdf_conf_plot.m/#vltstatsks_cdf_conf_plot","text":"KS_CDF_CONF_PLOT - Plot gray patch of confidence around a CDF H = vlt . stats . ks_cdf_conf_plot ( XVALUES , MINCDF , MAXCDF , XMIN , XMAX ) ; Plots a gray 'patch' around a sample CDF indicating the confidence in the true distribution . It is assumed the XVALUES , MINCDF , and MAXCDF are returned from vlt . stats . ks_cdf_conf . Use XMIN and XMAX to specify the minimum and maximum X values used for the plot .","title":"vlt.stats.ks_cdf_conf_plot"},{"location":"reference/%2Bvlt/%2Bstats/lm_category.m/","text":"vlt.stats.lm_category \u00b6 LM_CATEGORY - calculate a linear model for a variable measured in different fixed categories LM = LM_CATEGORY ( TBL , CATEGORIES_NAME , Y_NAME , Y_OP , REFERENCE_CATEGORY , [ RANKORDER ]) Create a linear model of the property Y_NAME that occurs in a column in the table TBL . The model fits Y as a function of the categories listed in the TBL column CATEGORIES_NAME , using REFERENCE_CATEOGORY as a reference . The raw values in the table are processed through Y_OP , which evaluates a column of Y elements . If RANKORDER is provided and is 1 , then the ranks ( sort order ) values of Y are used instead of the raw values . Example : load carsmall tbl = table ( Model_Year , MPG ); Y_op = 'Y' ; % just use Y % compute standard linear model lm = vlt . stats . lm_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 0 ) % compute non - parametric linear model lm_ = vlt . stats . lm_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 1 )","title":"vlt.stats.lm_category"},{"location":"reference/%2Bvlt/%2Bstats/lm_category.m/#vltstatslm_category","text":"LM_CATEGORY - calculate a linear model for a variable measured in different fixed categories LM = LM_CATEGORY ( TBL , CATEGORIES_NAME , Y_NAME , Y_OP , REFERENCE_CATEGORY , [ RANKORDER ]) Create a linear model of the property Y_NAME that occurs in a column in the table TBL . The model fits Y as a function of the categories listed in the TBL column CATEGORIES_NAME , using REFERENCE_CATEOGORY as a reference . The raw values in the table are processed through Y_OP , which evaluates a column of Y elements . If RANKORDER is provided and is 1 , then the ranks ( sort order ) values of Y are used instead of the raw values . Example : load carsmall tbl = table ( Model_Year , MPG ); Y_op = 'Y' ; % just use Y % compute standard linear model lm = vlt . stats . lm_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 0 ) % compute non - parametric linear model lm_ = vlt . stats . lm_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 1 )","title":"vlt.stats.lm_category"},{"location":"reference/%2Bvlt/%2Bstats/lme_category.m/","text":"vlt.stats.lme_category \u00b6 LME_CATEGORY - calculate a mixed linear model for a variable measured in different fixed categories and random effects across group LME = LME_CATEGORY ( TBL , CATEGORIES_NAME , Y_NAME , Y_OP , REFERENCE_CATEGORY , GROUP_NAME , [ RANKORDER ], [ LOGDATA ]) Create a linear model of the property Y_NAME that occurs in a column in the table TBL , controlling for random effects that vary across the table column called GROUP_NAME . The model fits Y as a function of the categories listed in the TBL column CATEGORIES_NAME , using REFERENCE_CATEOGORY as a reference . If RANKORDER is provided and is 1 , then the ranks ( sort order ) values of Y are used instead of the raw values . Example : load carsmall tbl = table ( Mfg , Model_Year , MPG ); Y_op = 'Y' ; % compute standard linear model [ lme , newtable ] = vlt . stats . lme_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 'Mfg' , 0 ) % compute non - parametric linear model [ lme_ , newtable_ ] = vlt . stats . lme_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 'Mfg' , 1 )","title":"vlt.stats.lme_category"},{"location":"reference/%2Bvlt/%2Bstats/lme_category.m/#vltstatslme_category","text":"LME_CATEGORY - calculate a mixed linear model for a variable measured in different fixed categories and random effects across group LME = LME_CATEGORY ( TBL , CATEGORIES_NAME , Y_NAME , Y_OP , REFERENCE_CATEGORY , GROUP_NAME , [ RANKORDER ], [ LOGDATA ]) Create a linear model of the property Y_NAME that occurs in a column in the table TBL , controlling for random effects that vary across the table column called GROUP_NAME . The model fits Y as a function of the categories listed in the TBL column CATEGORIES_NAME , using REFERENCE_CATEOGORY as a reference . If RANKORDER is provided and is 1 , then the ranks ( sort order ) values of Y are used instead of the raw values . Example : load carsmall tbl = table ( Mfg , Model_Year , MPG ); Y_op = 'Y' ; % compute standard linear model [ lme , newtable ] = vlt . stats . lme_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 'Mfg' , 0 ) % compute non - parametric linear model [ lme_ , newtable_ ] = vlt . stats . lme_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 'Mfg' , 1 )","title":"vlt.stats.lme_category"},{"location":"reference/%2Bvlt/%2Bstats/manova.m/","text":"vlt.stats.manova \u00b6 vlt . stats . manova - Multivariate Analysis of Variance [ STATS , H ] = vlt . stats . manova ( X , G ), or [ STATS , H ] = vlt . stats . manova ( X , G , ALPHA ) Determines whether the means of groups of multivariate data points are the same , using Wilks ' criterion. Each N-dimensional data point is a row in X, so that X is NxP , where P is the total number of data points . Each data point belongs to a group , indicated in vector G , which should be 1 XP . ALPHA is level of significance , and , If ALPHA is not given , 0.01 is assumed . STATS is a struct with the following elements : DF_between = degrees of freedom among samplesm , or ( K - 1 ), K == num of groups DF_within = degrees of freedom within samples , or N - K DF_TOTAL = total degrees of freedom N - 1 B = matrix of sum of squares and products ( SSP ) between samples W = matrix of SSP within samples T = matrix of total SSP , note that T == W + B ratio = | W |/| T | , or ratio to be compared to Wilks ' statistic P = Probability of data under hypothesis that means are equal H = 0 if means are SAME , 1 if DIFFERENT X__ = Grand mean of data X_ = Mean of each group ( KxP ) N = Number of items in each group ( Kx1 ) E = Eigenvalues for canonical variate projection ( inv ( W ) * B ) V = Eigenvectors corresp . to these eigenvalues VV = Eigenvectors normalized ( by W / ( N - K )) for canonical v . proj . See Chapter 12 of _Multivariate Analysis_ , KV Mardia , JT Kent , JM Bibby , Academic Press , London , 1979. Note : The eigenvector corresponding to the largest eigenvalue of inv ( W ) * B is the first canonical variate or Fisher 's linear discriminant function. Projecting onto this variate is useful for visualizing the differences among groups of data . The other canonical variates are the eigenvectors corresponding to the eigenvalues in descending order of magnitude . ( See sec . 11.5 of above book . ) Steve Van Hooser , 2003","title":"vlt.stats.manova"},{"location":"reference/%2Bvlt/%2Bstats/manova.m/#vltstatsmanova","text":"vlt . stats . manova - Multivariate Analysis of Variance [ STATS , H ] = vlt . stats . manova ( X , G ), or [ STATS , H ] = vlt . stats . manova ( X , G , ALPHA ) Determines whether the means of groups of multivariate data points are the same , using Wilks ' criterion. Each N-dimensional data point is a row in X, so that X is NxP , where P is the total number of data points . Each data point belongs to a group , indicated in vector G , which should be 1 XP . ALPHA is level of significance , and , If ALPHA is not given , 0.01 is assumed . STATS is a struct with the following elements : DF_between = degrees of freedom among samplesm , or ( K - 1 ), K == num of groups DF_within = degrees of freedom within samples , or N - K DF_TOTAL = total degrees of freedom N - 1 B = matrix of sum of squares and products ( SSP ) between samples W = matrix of SSP within samples T = matrix of total SSP , note that T == W + B ratio = | W |/| T | , or ratio to be compared to Wilks ' statistic P = Probability of data under hypothesis that means are equal H = 0 if means are SAME , 1 if DIFFERENT X__ = Grand mean of data X_ = Mean of each group ( KxP ) N = Number of items in each group ( Kx1 ) E = Eigenvalues for canonical variate projection ( inv ( W ) * B ) V = Eigenvectors corresp . to these eigenvalues VV = Eigenvectors normalized ( by W / ( N - K )) for canonical v . proj . See Chapter 12 of _Multivariate Analysis_ , KV Mardia , JT Kent , JM Bibby , Academic Press , London , 1979. Note : The eigenvector corresponding to the largest eigenvalue of inv ( W ) * B is the first canonical variate or Fisher 's linear discriminant function. Projecting onto this variate is useful for visualizing the differences among groups of data . The other canonical variates are the eigenvectors corresponding to the eigenvalues in descending order of magnitude . ( See sec . 11.5 of above book . ) Steve Van Hooser , 2003","title":"vlt.stats.manova"},{"location":"reference/%2Bvlt/%2Bstats/mwustat.m/","text":"vlt.stats.mwustat \u00b6 [ u , z , P ] = mwustat ( data1 , data2 ) vlt . stats . mwustat . m : given vectors data1 and data2 , the Mann - Whitney U statistic is returned along with the significance statistic Z . The Z value should be compared to T ( alpha , infinity ) for samples larger than 40 data points , otherwise The U value should be compared to a table of the U distribution . This implementation assumes a precision in measurements that renders tie values ( i . e ., > 1 occurence of the same value ) unlikely . If tie values are expected , this function should be modified . Adapted from Biostatistical Analysis , Zar JH , Prentice - Hall , 1974 . This script was written by Carsten D . Hohnke , currently at BCS at MIT u - the U statistic z - the z - score for U P - the p - value for that z thesign - the sign of the difference ( data2 - data1 ) : + 1 if Rank2 > Rank1 NOTE : Is this the correct order ?","title":"vlt.stats.mwustat"},{"location":"reference/%2Bvlt/%2Bstats/mwustat.m/#vltstatsmwustat","text":"[ u , z , P ] = mwustat ( data1 , data2 ) vlt . stats . mwustat . m : given vectors data1 and data2 , the Mann - Whitney U statistic is returned along with the significance statistic Z . The Z value should be compared to T ( alpha , infinity ) for samples larger than 40 data points , otherwise The U value should be compared to a table of the U distribution . This implementation assumes a precision in measurements that renders tie values ( i . e ., > 1 occurence of the same value ) unlikely . If tie values are expected , this function should be modified . Adapted from Biostatistical Analysis , Zar JH , Prentice - Hall , 1974 . This script was written by Carsten D . Hohnke , currently at BCS at MIT u - the U statistic z - the z - score for U P - the p - value for that z thesign - the sign of the difference ( data2 - data1 ) : + 1 if Rank2 > Rank1 NOTE : Is this the correct order ?","title":"vlt.stats.mwustat"},{"location":"reference/%2Bvlt/%2Bstats/myanova.m/","text":"vlt.stats.myanova \u00b6 vlt . stats . myanova - One - way analysis of variance with posthoc comparisons vlt . stats . myanova performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . If the null hypothesis is rejected , then it makes posthoc comparisons with a modified t - test . [ P, H, COMP ] = vlt . stats . myanova ( X , G , [ SIG ] ) has vector inputs X and G . G contains the group number for each point in X . SIG is the significanc level to use ( default is 0.05 ). P is the probability of the null hypothesis , H is 1 if the null hypothesis is rejected and 0 otherwise , and COMP is an NxN matrix of significant comparisons among the groups , where N is the total number of groups ( determined by the number of unique elements in G ).","title":"vlt.stats.myanova"},{"location":"reference/%2Bvlt/%2Bstats/myanova.m/#vltstatsmyanova","text":"vlt . stats . myanova - One - way analysis of variance with posthoc comparisons vlt . stats . myanova performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . If the null hypothesis is rejected , then it makes posthoc comparisons with a modified t - test . [ P, H, COMP ] = vlt . stats . myanova ( X , G , [ SIG ] ) has vector inputs X and G . G contains the group number for each point in X . SIG is the significanc level to use ( default is 0.05 ). P is the probability of the null hypothesis , H is 1 if the null hypothesis is rejected and 0 otherwise , and COMP is an NxN matrix of significant comparisons among the groups , where N is the total number of groups ( determined by the number of unique elements in G ).","title":"vlt.stats.myanova"},{"location":"reference/%2Bvlt/%2Bstats/myanova1.m/","text":"vlt.stats.myanova1 \u00b6 ANOVA1 One - way analysis of variance ( ANOVA ) . ANOVA1 performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . P = ANOVA1 ( X ) for matrix , X , treats each column as a separate group , and determines whether the population means of the columns are equal . This one - input form of ANOVA1 is appropriate when each group has the same number of elements ( balanced ANOVA ) . P = ANOVA1 ( X , GROUP ) has vector inputs X and GROUP . The vector , GROUP , identifies the group of the corresponding element of X . This two - input form of ANOVA1 has no restrictions on the number of elements in each group . ANOVA1 prints the standard one - way ANOVA table in Figure 1 and displays a boxplot in Figure2 .","title":"vlt.stats.myanova1"},{"location":"reference/%2Bvlt/%2Bstats/myanova1.m/#vltstatsmyanova1","text":"ANOVA1 One - way analysis of variance ( ANOVA ) . ANOVA1 performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . P = ANOVA1 ( X ) for matrix , X , treats each column as a separate group , and determines whether the population means of the columns are equal . This one - input form of ANOVA1 is appropriate when each group has the same number of elements ( balanced ANOVA ) . P = ANOVA1 ( X , GROUP ) has vector inputs X and GROUP . The vector , GROUP , identifies the group of the corresponding element of X . This two - input form of ANOVA1 has no restrictions on the number of elements in each group . ANOVA1 prints the standard one - way ANOVA table in Figure 1 and displays a boxplot in Figure2 .","title":"vlt.stats.myanova1"},{"location":"reference/%2Bvlt/%2Bstats/nested_f.m/","text":"vlt.stats.nested_f \u00b6 vlt.stats.nested_f is a function. [p, F] = vlt.stats.nested_f(SE1, p1, SE2, p2, ndata)","title":"vlt.stats.nested_f"},{"location":"reference/%2Bvlt/%2Bstats/nested_f.m/#vltstatsnested_f","text":"vlt.stats.nested_f is a function. [p, F] = vlt.stats.nested_f(SE1, p1, SE2, p2, ndata)","title":"vlt.stats.nested_f"},{"location":"reference/%2Bvlt/%2Bstats/nestedftest.m/","text":"vlt.stats.nestedftest \u00b6 NESTEDFTEST - Compute Nested F test statistic for 2 nested models [ P , F ] = vlt . stats . nestedftest ( SE1 , P1 , SE2 , P2 , NDATA ) Performs a Nested F test for 2 model fits to the same data , where the first model is \"nested\" inside the second ( that is , the first model is a simplified version of the second , and can be obtained from the second model by setting parameters in the second to particular values ). SE1: The total squared error between the first model and the data . P1: The number of parameters in the first model . SE2: The total squared error between the second model and the data . P2: The number of parameters in the second model . NDATA: The number of data values used to calculate SE1 , SE2 . P: The p-value of the F test . If this is less than your alpha ( say , 0.05 ) then the second model is a significantly better fit than the first . F: The value of the F statistic . See: http: // en . wikipedia . org / wiki / F-test #Regression_problems","title":"vlt.stats.nestedftest"},{"location":"reference/%2Bvlt/%2Bstats/nestedftest.m/#vltstatsnestedftest","text":"NESTEDFTEST - Compute Nested F test statistic for 2 nested models [ P , F ] = vlt . stats . nestedftest ( SE1 , P1 , SE2 , P2 , NDATA ) Performs a Nested F test for 2 model fits to the same data , where the first model is \"nested\" inside the second ( that is , the first model is a simplified version of the second , and can be obtained from the second model by setting parameters in the second to particular values ). SE1: The total squared error between the first model and the data . P1: The number of parameters in the first model . SE2: The total squared error between the second model and the data . P2: The number of parameters in the second model . NDATA: The number of data values used to calculate SE1 , SE2 . P: The p-value of the F test . If this is less than your alpha ( say , 0.05 ) then the second model is a significantly better fit than the first . F: The value of the F statistic . See: http: // en . wikipedia . org / wiki / F-test #Regression_problems","title":"vlt.stats.nestedftest"},{"location":"reference/%2Bvlt/%2Bstats/plot_lme_category.m/","text":"vlt.stats.plot_lme_category \u00b6 LME_CATEGORY - calculate a mixed linear model for a variable measured in different fixed categories and random effects across group [ H , PLOT_INFO ] = PLOT_LME_CATEGORY ( LME_ , LMETABLE , CATEGORIES_NAME , Y_NAME , REFERENCE_CATEGORY , GROUP_NAME , ... ); Plot ( in the current axes ) the data in a random effects model . Each data point in the table LMETABLE column Y_NAME is plotted by GROUP and CATEGORY . The LME model mean value for each group and category is shown with a horizontal bar . The category means are shown with a thick horizontal bar and the standard error of the mean is shown as a thick vertical bar . Note that there is no Y_OP input to this function . Any Y_OP was already applied in the call to vlt . stats . lme_category . This function takes name / value pairs that modify the default behavior . See also : PLOT_LME_CATEGORY_OPTIONS , vlt . stats . plot_lme_category_options Example : load carsmall tbl = table ( Mfg , Model_Year , Model , MPG ); Y_op = 'Y' ; % just use Y % compute standard linear mixed effects model [ lme , newtable ] = vlt . stats . lme_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 'Mfg' , 0 ); figure ; [ h , plot_info ] = vlt . stats . plot_lme_category ( lme , newtable , 'Model_Year' , 'MPG' , '70' , 'Mfg' ); box off ;","title":"vlt.stats.plot_lme_category"},{"location":"reference/%2Bvlt/%2Bstats/plot_lme_category.m/#vltstatsplot_lme_category","text":"LME_CATEGORY - calculate a mixed linear model for a variable measured in different fixed categories and random effects across group [ H , PLOT_INFO ] = PLOT_LME_CATEGORY ( LME_ , LMETABLE , CATEGORIES_NAME , Y_NAME , REFERENCE_CATEGORY , GROUP_NAME , ... ); Plot ( in the current axes ) the data in a random effects model . Each data point in the table LMETABLE column Y_NAME is plotted by GROUP and CATEGORY . The LME model mean value for each group and category is shown with a horizontal bar . The category means are shown with a thick horizontal bar and the standard error of the mean is shown as a thick vertical bar . Note that there is no Y_OP input to this function . Any Y_OP was already applied in the call to vlt . stats . lme_category . This function takes name / value pairs that modify the default behavior . See also : PLOT_LME_CATEGORY_OPTIONS , vlt . stats . plot_lme_category_options Example : load carsmall tbl = table ( Mfg , Model_Year , Model , MPG ); Y_op = 'Y' ; % just use Y % compute standard linear mixed effects model [ lme , newtable ] = vlt . stats . lme_category ( tbl , 'Model_Year' , 'MPG' , Y_op , '70' , 'Mfg' , 0 ); figure ; [ h , plot_info ] = vlt . stats . plot_lme_category ( lme , newtable , 'Model_Year' , 'MPG' , '70' , 'Mfg' ); box off ;","title":"vlt.stats.plot_lme_category"},{"location":"reference/%2Bvlt/%2Bstats/power_index.m/","text":"vlt.stats.power_index \u00b6 POWER_INDEX - Compute the number of observations needed to find a change N = vlt . stats . power_index ( MN , STDDEV , CHANGE , G , CONF ) Uses Monte Carlo techniques to estimate number of samples needed to see a change of size CHANGE from a mean of MN across G groups , assuming the samples have normally distributed noise with standard deviation of STDDEV , with a confidence of CONF . An ANOVA1 is used to look for differences across the G groups in the simulated data . See also : ANOVA1","title":"vlt.stats.power_index"},{"location":"reference/%2Bvlt/%2Bstats/power_index.m/#vltstatspower_index","text":"POWER_INDEX - Compute the number of observations needed to find a change N = vlt . stats . power_index ( MN , STDDEV , CHANGE , G , CONF ) Uses Monte Carlo techniques to estimate number of samples needed to see a change of size CHANGE from a mean of MN across G groups , assuming the samples have normally distributed noise with standard deviation of STDDEV , with a confidence of CONF . An ANOVA1 is used to look for differences across the G groups in the simulated data . See also : ANOVA1","title":"vlt.stats.power_index"},{"location":"reference/%2Bvlt/%2Bstats/pseudorandomorder.m/","text":"vlt.stats.pseudorandomorder \u00b6 PSEUDORANDOMORDER - random order where all stims are represented in each trial ORDER = vlt . stats . pseudorandomorder ( STIMS , TRIALREPS ) Returns ( in ORDER ) a random order of stimulus presentation for stimuli numbered 1 to STIMS . Each trial ( of which there are TRIALREPS ) will have exactly 1 presentation of each stimulus .","title":"vlt.stats.pseudorandomorder"},{"location":"reference/%2Bvlt/%2Bstats/pseudorandomorder.m/#vltstatspseudorandomorder","text":"PSEUDORANDOMORDER - random order where all stims are represented in each trial ORDER = vlt . stats . pseudorandomorder ( STIMS , TRIALREPS ) Returns ( in ORDER ) a random order of stimulus presentation for stimuli numbered 1 to STIMS . Each trial ( of which there are TRIALREPS ) will have exactly 1 presentation of each stimulus .","title":"vlt.stats.pseudorandomorder"},{"location":"reference/%2Bvlt/%2Bstats/quickregression.m/","text":"vlt.stats.quickregression \u00b6 QUICKREGRESSSION - Computes best fit to a line and confidence interval on slope [ SLOPE , OFFSET , SLOPE_CONFINTERVAL , ... RESID , RESIDINT , STATS ] = vlt . stats . quickregression ( X , Y , ALPHA ) Returns the best fit Y = SLOPE * X + OFFSET Also returns ( 1 - ALPHA ) confidence intervals around SLOPE and residuals , residual intervals , and STATS . NAN entries are ignored . See also: POLYFIT , REGRESS , QUICKREGRESIONPVALUE","title":"vlt.stats.quickregression"},{"location":"reference/%2Bvlt/%2Bstats/quickregression.m/#vltstatsquickregression","text":"QUICKREGRESSSION - Computes best fit to a line and confidence interval on slope [ SLOPE , OFFSET , SLOPE_CONFINTERVAL , ... RESID , RESIDINT , STATS ] = vlt . stats . quickregression ( X , Y , ALPHA ) Returns the best fit Y = SLOPE * X + OFFSET Also returns ( 1 - ALPHA ) confidence intervals around SLOPE and residuals , residual intervals , and STATS . NAN entries are ignored . See also: POLYFIT , REGRESS , QUICKREGRESIONPVALUE","title":"vlt.stats.quickregression"},{"location":"reference/%2Bvlt/%2Bstats/quickregressionpvalue.m/","text":"vlt.stats.quickregressionpvalue \u00b6 QUICKREGRESSSIONPVALUE - Estimate p value of the null hypothesis that slope == 0 P = vlt . stats . quickregressionpvalue ( X , Y , [ NUM_STEPS ] ) Takes NUM_STEPS to estimate the P value that the slope of the regression line between X and Y is 0. This estimate is made by calling vlt . stats . quickregression with different ALPHA values , and examining the confidence intervals . If NUM_STEPS is not provided , 30 steps are taken . NAN entries are ignored . See also : vlt . stats . quickregression , REGRESS","title":"vlt.stats.quickregressionpvalue"},{"location":"reference/%2Bvlt/%2Bstats/quickregressionpvalue.m/#vltstatsquickregressionpvalue","text":"QUICKREGRESSSIONPVALUE - Estimate p value of the null hypothesis that slope == 0 P = vlt . stats . quickregressionpvalue ( X , Y , [ NUM_STEPS ] ) Takes NUM_STEPS to estimate the P value that the slope of the regression line between X and Y is 0. This estimate is made by calling vlt . stats . quickregression with different ALPHA values , and examining the confidence intervals . If NUM_STEPS is not provided , 30 steps are taken . NAN entries are ignored . See also : vlt . stats . quickregression , REGRESS","title":"vlt.stats.quickregressionpvalue"},{"location":"reference/%2Bvlt/%2Bstats/ranks.m/","text":"vlt.stats.ranks \u00b6 RANKS - Returns vector of ranks of X adjusted for ties Y = vlt . stats . ranks ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X [ From Octave 2.5.1 ] Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Description : Compute ranks This code is rather ugly , but is there an easy way to get the ranks adjusted for ties from sort ?","title":"vlt.stats.ranks"},{"location":"reference/%2Bvlt/%2Bstats/ranks.m/#vltstatsranks","text":"RANKS - Returns vector of ranks of X adjusted for ties Y = vlt . stats . ranks ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X [ From Octave 2.5.1 ] Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Description : Compute ranks This code is rather ugly , but is there an easy way to get the ranks adjusted for ties from sort ?","title":"vlt.stats.ranks"},{"location":"reference/%2Bvlt/%2Bstats/ranks2.m/","text":"vlt.stats.ranks2 \u00b6 RANKS2 - Returns vector of ranks of X adjusted for ties , assuming ties rare Y = vlt . stats . ranks2 ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X Some code from Octave 2.5.1 Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Modified 9 / 9 / 2004 by SDV for speed ; assumes ties are rare . SEE ALSO : vlt . data . sortorder ( does not deal with ties )","title":"vlt.stats.ranks2"},{"location":"reference/%2Bvlt/%2Bstats/ranks2.m/#vltstatsranks2","text":"RANKS2 - Returns vector of ranks of X adjusted for ties , assuming ties rare Y = vlt . stats . ranks2 ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X Some code from Octave 2.5.1 Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Modified 9 / 9 / 2004 by SDV for speed ; assumes ties are rare . SEE ALSO : vlt . data . sortorder ( does not deal with ties )","title":"vlt.stats.ranks2"},{"location":"reference/%2Bvlt/%2Bstats/resample_responses.m/","text":"vlt.stats.resample_responses \u00b6 vlt . stats . resample_responses - Resample responses for montecarlo simulations NEWRESPS = vlt . stats . resample_responses ( TRIALDATA , MODE , REPS ) Generates a simulated set of responses . TRIALDATA - A matrix size NUM_STIMS x NTRIALS If no data is available for a given trail , it can be coded as NaN . NaN values will be ignored . If MODE == 1 , then simulated samples are generated with a random number generator given the measured mean and variance of each stimulus . If MODE == 2 , then the data are resampled with replacement , as would be appropriate for bootstrap analysis . REPS - The number of simulated trials to generate . Based on code by Mark Mazurek","title":"vlt.stats.resample_responses"},{"location":"reference/%2Bvlt/%2Bstats/resample_responses.m/#vltstatsresample_responses","text":"vlt . stats . resample_responses - Resample responses for montecarlo simulations NEWRESPS = vlt . stats . resample_responses ( TRIALDATA , MODE , REPS ) Generates a simulated set of responses . TRIALDATA - A matrix size NUM_STIMS x NTRIALS If no data is available for a given trail , it can be coded as NaN . NaN values will be ignored . If MODE == 1 , then simulated samples are generated with a random number generator given the measured mean and variance of each stimulus . If MODE == 2 , then the data are resampled with replacement , as would be appropriate for bootstrap analysis . REPS - The number of simulated trials to generate . Based on code by Mark Mazurek","title":"vlt.stats.resample_responses"},{"location":"reference/%2Bvlt/%2Bstats/roc_analysis.m/","text":"vlt.stats.roc_analysis \u00b6 ROC_ANALYSIS - Receiver operating characteristics [ DISCRIM , PROB_TRUE_ACCEPT , PROB_FALSE_ACCEPT , XVALUES ,... CONFUSION , SAMPLE1CUM , SAMPLE2CUM ] = vlt . stats . roc_analysis ( SAMPLE1 , SAMPLE2 ) Performs ROC analysis to see how sensitivity and false positives trade off if the task is to say which distribution a given value is likely to have arisen from . ( see http : // en . wikipedia . org / wiki / Receiver_operating_characteristic ) For each value of X present in the samples SAMPLE1 and SAMPLE2 , ROC returns the resulting probability of a \"true accept\" ( we say the value is from SAMPLE2 and it is ) and the resulting probability of a \"false accept\" ( we say the sample is from SAMPLE2 but it 's really from SAMPLE1). Inputs: SAMPLE1 - an array of sample data SAMPLE2 - an array of sample data Outputs: DISCRIM - Likelihood of discriminating the 2 distributions (accuracy) for each possible threshold X TRUE_POSITIVE_RATE - The rate a true accept (sensitivity) (TP_x./(TP_x+FN_x)) FALSE_POSITIVE_RATE - The rate of a false accept (FP_x./(FP_x+TN_x)) XVALUES - The X-axis values for the cumulative density functions CONFUSION - A structure with the \"confusion matrix\" assuming each value of X is used as a threshold. It has fields: confusion.TP_x: (true positive) likelihood sample is X or greater and comes from sample 2 confusion.FN_x: (false negative) likelihood sample is less than X and comes from sample 2 TN_X: (true negative) likelihood sample is less than X and comes from sample 1 confusion.FP_x: (false positive) likelihood sample is X or greater and comes from sample 1 SAMPLE1CUM - The cumulative sums of SAMPLE1 SAMPLE2CUM - The cumulative sums SAMPLE2","title":"vlt.stats.roc_analysis"},{"location":"reference/%2Bvlt/%2Bstats/roc_analysis.m/#vltstatsroc_analysis","text":"ROC_ANALYSIS - Receiver operating characteristics [ DISCRIM , PROB_TRUE_ACCEPT , PROB_FALSE_ACCEPT , XVALUES ,... CONFUSION , SAMPLE1CUM , SAMPLE2CUM ] = vlt . stats . roc_analysis ( SAMPLE1 , SAMPLE2 ) Performs ROC analysis to see how sensitivity and false positives trade off if the task is to say which distribution a given value is likely to have arisen from . ( see http : // en . wikipedia . org / wiki / Receiver_operating_characteristic ) For each value of X present in the samples SAMPLE1 and SAMPLE2 , ROC returns the resulting probability of a \"true accept\" ( we say the value is from SAMPLE2 and it is ) and the resulting probability of a \"false accept\" ( we say the sample is from SAMPLE2 but it 's really from SAMPLE1). Inputs: SAMPLE1 - an array of sample data SAMPLE2 - an array of sample data Outputs: DISCRIM - Likelihood of discriminating the 2 distributions (accuracy) for each possible threshold X TRUE_POSITIVE_RATE - The rate a true accept (sensitivity) (TP_x./(TP_x+FN_x)) FALSE_POSITIVE_RATE - The rate of a false accept (FP_x./(FP_x+TN_x)) XVALUES - The X-axis values for the cumulative density functions CONFUSION - A structure with the \"confusion matrix\" assuming each value of X is used as a threshold. It has fields: confusion.TP_x: (true positive) likelihood sample is X or greater and comes from sample 2 confusion.FN_x: (false negative) likelihood sample is less than X and comes from sample 2 TN_X: (true negative) likelihood sample is less than X and comes from sample 1 confusion.FP_x: (false positive) likelihood sample is X or greater and comes from sample 1 SAMPLE1CUM - The cumulative sums of SAMPLE1 SAMPLE2CUM - The cumulative sums SAMPLE2","title":"vlt.stats.roc_analysis"},{"location":"reference/%2Bvlt/%2Bstats/roc_stats.m/","text":"vlt.stats.roc_stats \u00b6 ROC_STATS - Receiver operator characteristic for 2 groups OUT = ROC_STATS ( GROUP1 , GROUP2 ) Performs ROC analysis for single real numbered observations in GROUP1 and GROUP2 . GROUP1 is considered the 'signal' and GROUP2 is considered the 'noise' . This calculates several statistics in the structure OUT : ------------------------------------------------------------- Fieldname : | Description ------------------------------------------------------------- tpr | True positive rate at thresholds in th fpr | False positive rate at thresholds in th th | Thresholds acc_eq | Accuracy at each threshold if mixtures are equally likely acc_em | Accuracy at each threshold if mixtures match the empirically provided mixtures acc_eq_max | Accuracy rate at best threshold if mixtures are equally likely acc_eq_max_th | Threshold where accuracy is highest if mixtures are equally likely acc_em_max | Accuracy rate at best thresholds if mixtures match the empircally provided mixtures acc_em_max_th | Threshold where accuracy is highest if mixtures match empircally provided mixtures See also : ROC","title":"vlt.stats.roc_stats"},{"location":"reference/%2Bvlt/%2Bstats/roc_stats.m/#vltstatsroc_stats","text":"ROC_STATS - Receiver operator characteristic for 2 groups OUT = ROC_STATS ( GROUP1 , GROUP2 ) Performs ROC analysis for single real numbered observations in GROUP1 and GROUP2 . GROUP1 is considered the 'signal' and GROUP2 is considered the 'noise' . This calculates several statistics in the structure OUT : ------------------------------------------------------------- Fieldname : | Description ------------------------------------------------------------- tpr | True positive rate at thresholds in th fpr | False positive rate at thresholds in th th | Thresholds acc_eq | Accuracy at each threshold if mixtures are equally likely acc_em | Accuracy at each threshold if mixtures match the empirically provided mixtures acc_eq_max | Accuracy rate at best threshold if mixtures are equally likely acc_eq_max_th | Threshold where accuracy is highest if mixtures are equally likely acc_em_max | Accuracy rate at best thresholds if mixtures match the empircally provided mixtures acc_em_max_th | Threshold where accuracy is highest if mixtures match empircally provided mixtures See also : ROC","title":"vlt.stats.roc_stats"},{"location":"reference/%2Bvlt/%2Bstats/std_from_median.m/","text":"vlt.stats.std_from_median \u00b6 STD_FROM_MEDIAN - calculate standard deviation of gaussian process from median SD = vlt . stats . std_from_median ( X , ... ) Estimates the standard deviation SD of a gaussian process that generated samples X using the median method . SD = MEDIAN ( ABS ( X ), ... ) / 0.6745 Any additional arguments to vlt . stats . std_from_median are passed to MEDIAN , so that the median can be taken across rows , columns , or other dimensions ( see HELP MEDIAN ) . Proof : Recall : the median is the 0.5 point of a cumulative density function . The cumulative density function for a gaussian - distributed random variable is 0.5 * [ 1 + ERF ( X / SQRT ( 2 * sd ^ 2 ))] . This CDF is based on the symmetry of the ERF () function . It starst at 0.5 and adds or substracts the value of ERF as necessary . For the CDF of the absolute value of X , we can simply take twice the portion that depends on ERF ( X ): CDF ( | X | ) = ERF ( X / ( SQRT ( 2 * SD ^ 2 ))) . Now we want to find the X that corresponds to the median or : CDF ( | X | ) == 0.5 == ERF ( X / SQRT ( 2 * SD ^ 2 )) . Let x = N * SD . Then , 0.5 == ERF ( N * SD / SQRT ( 2 * SD ^ 2 )) == ERF ( N / SQRT ( 2 )) . This is solved numerically and N = 0.6745 . So at the median X is 0.6745 * SD . Analyically , MEDIAN ( | X | ) = 0.6745 * SD , or SD = MEDIAN ( | X | ) / 0.6745 . Ref : Quiroga RQ , Nadasdy Z , Ben - Shaul Y . Neural Comput . 2004 Aug ; 16 ( 8 ): 1661 - 87. Unsupervised spike detection and sorting with wavelets and superparamagnetic clustering . See also : MEDIAN","title":"vlt.stats.std_from_median"},{"location":"reference/%2Bvlt/%2Bstats/std_from_median.m/#vltstatsstd_from_median","text":"STD_FROM_MEDIAN - calculate standard deviation of gaussian process from median SD = vlt . stats . std_from_median ( X , ... ) Estimates the standard deviation SD of a gaussian process that generated samples X using the median method . SD = MEDIAN ( ABS ( X ), ... ) / 0.6745 Any additional arguments to vlt . stats . std_from_median are passed to MEDIAN , so that the median can be taken across rows , columns , or other dimensions ( see HELP MEDIAN ) . Proof : Recall : the median is the 0.5 point of a cumulative density function . The cumulative density function for a gaussian - distributed random variable is 0.5 * [ 1 + ERF ( X / SQRT ( 2 * sd ^ 2 ))] . This CDF is based on the symmetry of the ERF () function . It starst at 0.5 and adds or substracts the value of ERF as necessary . For the CDF of the absolute value of X , we can simply take twice the portion that depends on ERF ( X ): CDF ( | X | ) = ERF ( X / ( SQRT ( 2 * SD ^ 2 ))) . Now we want to find the X that corresponds to the median or : CDF ( | X | ) == 0.5 == ERF ( X / SQRT ( 2 * SD ^ 2 )) . Let x = N * SD . Then , 0.5 == ERF ( N * SD / SQRT ( 2 * SD ^ 2 )) == ERF ( N / SQRT ( 2 )) . This is solved numerically and N = 0.6745 . So at the median X is 0.6745 * SD . Analyically , MEDIAN ( | X | ) = 0.6745 * SD , or SD = MEDIAN ( | X | ) / 0.6745 . Ref : Quiroga RQ , Nadasdy Z , Ben - Shaul Y . Neural Comput . 2004 Aug ; 16 ( 8 ): 1661 - 87. Unsupervised spike detection and sorting with wavelets and superparamagnetic clustering . See also : MEDIAN","title":"vlt.stats.std_from_median"},{"location":"reference/%2Bvlt/%2Bstats/stderr.m/","text":"vlt.stats.stderr \u00b6 STDERR - Standard error of a vector of data SE = vlt.stats.stderr(DATA); Computes standard error of each column. SE = std(DATA)./repmat(sqrt(size(DATA,1)),1,size(DATA,2)); See also: STD, NANSTD","title":"vlt.stats.stderr"},{"location":"reference/%2Bvlt/%2Bstats/stderr.m/#vltstatsstderr","text":"STDERR - Standard error of a vector of data SE = vlt.stats.stderr(DATA); Computes standard error of each column. SE = std(DATA)./repmat(sqrt(size(DATA,1)),1,size(DATA,2)); See also: STD, NANSTD","title":"vlt.stats.stderr"},{"location":"reference/%2Bvlt/%2Bstats/twocurves_bhfdr.m/","text":"vlt.stats.twocurves_bhfdr \u00b6 TWOCURVES_BHFDR - compare significance between 2 curves using the Benjamini-Hochberg false discovery rejection [ADJUSTED_P, RAW_P] = vlt.stats.twocurves_bhfdr(CURVE1_EXAMPLES, CURVE2_EXAMPLES) Given two data sets (CURVEN_EXAMPLES, which trace out a curve with each curve observation in a column vector), this function calculates RAW_P, the raw, uncorrected p value of a TTEST2 between the curves, and the adjusted p value ADJUSTED_P using the Behmamini-Hochberg (1995) procedure by calling MAFDR.","title":"vlt.stats.twocurves_bhfdr"},{"location":"reference/%2Bvlt/%2Bstats/twocurves_bhfdr.m/#vltstatstwocurves_bhfdr","text":"TWOCURVES_BHFDR - compare significance between 2 curves using the Benjamini-Hochberg false discovery rejection [ADJUSTED_P, RAW_P] = vlt.stats.twocurves_bhfdr(CURVE1_EXAMPLES, CURVE2_EXAMPLES) Given two data sets (CURVEN_EXAMPLES, which trace out a curve with each curve observation in a column vector), this function calculates RAW_P, the raw, uncorrected p value of a TTEST2 between the curves, and the adjusted p value ADJUSTED_P using the Behmamini-Hochberg (1995) procedure by calling MAFDR.","title":"vlt.stats.twocurves_bhfdr"},{"location":"reference/%2Bvlt/%2Bstring/bracelevel.m/","text":"vlt.string.bracelevel \u00b6 BRACELEVEL - Determine the enclosure depth level for text within braces LEVEL = vlt . string . bracelevel ( STR ) For the string STR , returns an equally long array of numbers LEVEL that indicates the enclosure depth . The enclosure depth answers how many levels deep each character is within parentheses . One can also call : LEVEL = vlt . string . bracelevel ( STR , BRACELEFT , BRACERIGHT ) And specify the LEFTBRACE and RIGHTBRACE characters . Examples : str = 'this is (a test of (depth))' ; level = vlt . string . bracelevel ( str ) str2 = 'this is [a test of [depth]]' ; level = vlt . string . bracelevel ( str , '[' , ']' )","title":"vlt.string.bracelevel"},{"location":"reference/%2Bvlt/%2Bstring/bracelevel.m/#vltstringbracelevel","text":"BRACELEVEL - Determine the enclosure depth level for text within braces LEVEL = vlt . string . bracelevel ( STR ) For the string STR , returns an equally long array of numbers LEVEL that indicates the enclosure depth . The enclosure depth answers how many levels deep each character is within parentheses . One can also call : LEVEL = vlt . string . bracelevel ( STR , BRACELEFT , BRACERIGHT ) And specify the LEFTBRACE and RIGHTBRACE characters . Examples : str = 'this is (a test of (depth))' ; level = vlt . string . bracelevel ( str ) str2 = 'this is [a test of [depth]]' ; level = vlt . string . bracelevel ( str , '[' , ']' )","title":"vlt.string.bracelevel"},{"location":"reference/%2Bvlt/%2Bstring/bracematch.m/","text":"vlt.string.bracematch \u00b6 BRACEMATCH - Match parenthesis in a text string [ POS_MATCH , BRACEDEPTH ] = vlt . string . bracematch ( STR , POS ) Finds the right parenthesis ')' that matches the left paranthesis '(' in string STR at position POS . One can modify the behavior of this function by passing name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- braceleft ( '(' ) | The character to be the left parenthesis | ( other examples , ' [ ', ' { ', ' < ') braceright (' ) ') | The character to be the right parenthesis | (other examples, ' ] ' , '}' , '>' ) bracedepth ( [] ) | To save time , if one has computed the | brace level using the function vlt . string . bracelevel , | one can pass it here . If empty , the | brace level will be recalculated . Examples : str = 'this is (a test of (depth))' ; match1 = vlt . string . bracematch ( str , 9 ) match2 = vlt . string . bracematch ( str , 20 ) See also : vlt . string . bracelevel","title":"vlt.string.bracematch"},{"location":"reference/%2Bvlt/%2Bstring/bracematch.m/#vltstringbracematch","text":"BRACEMATCH - Match parenthesis in a text string [ POS_MATCH , BRACEDEPTH ] = vlt . string . bracematch ( STR , POS ) Finds the right parenthesis ')' that matches the left paranthesis '(' in string STR at position POS . One can modify the behavior of this function by passing name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- braceleft ( '(' ) | The character to be the left parenthesis | ( other examples , ' [ ', ' { ', ' < ') braceright (' ) ') | The character to be the right parenthesis | (other examples, ' ] ' , '}' , '>' ) bracedepth ( [] ) | To save time , if one has computed the | brace level using the function vlt . string . bracelevel , | one can pass it here . If empty , the | brace level will be recalculated . Examples : str = 'this is (a test of (depth))' ; match1 = vlt . string . bracematch ( str , 9 ) match2 = vlt . string . bracematch ( str , 20 ) See also : vlt . string . bracelevel","title":"vlt.string.bracematch"},{"location":"reference/%2Bvlt/%2Bstring/intseq2str.m/","text":"vlt.string.intseq2str \u00b6 INTSEQ2STR - Convert an array of integers to a compact string , maintaining sequence STR = vlt . string . intseq2str ( A ) Converts the sequence of integers in array A to a compact , human - readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : A = [ 1 2 3 7 10 ] str = vlt . string . intseq2str ( A ) % str == '1-3,7,10' See also : INT2STR , vlt . string . str2intseq","title":"vlt.string.intseq2str"},{"location":"reference/%2Bvlt/%2Bstring/intseq2str.m/#vltstringintseq2str","text":"INTSEQ2STR - Convert an array of integers to a compact string , maintaining sequence STR = vlt . string . intseq2str ( A ) Converts the sequence of integers in array A to a compact , human - readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : A = [ 1 2 3 7 10 ] str = vlt . string . intseq2str ( A ) % str == '1-3,7,10' See also : INT2STR , vlt . string . str2intseq","title":"vlt.string.intseq2str"},{"location":"reference/%2Bvlt/%2Bstring/ismatlabstring.m/","text":"vlt.string.ismatlabstring \u00b6 ISMATLABSTRING - is a character within a Matlab string ? TF = vlt . string . ismatlabstring ( STR , [ STARTISWITHINSTRING ] ) Returns 0 / 1 for each character of STR as to whether or not the character is within a Matlab string literal . The quotes are considered to be part of the string . It is normally assumed that the beginning of STR is not already considered to be part of a Matlab string . The user can pass STARTISWITHINSTRING as 1 to indicate that the first character of STR should be taken to be within a Matlab string . Examples : str = [ 'myvar=5; a = ''my string'';' ] vlt . string . ismatlabstring ( str ) 000000000000011111111100 str = [ 'myvar=5; a = [''my '''' '' int2str(5) '' string''; ] '] vlt . string . ismatlabstring ( str )","title":"vlt.string.ismatlabstring"},{"location":"reference/%2Bvlt/%2Bstring/ismatlabstring.m/#vltstringismatlabstring","text":"ISMATLABSTRING - is a character within a Matlab string ? TF = vlt . string . ismatlabstring ( STR , [ STARTISWITHINSTRING ] ) Returns 0 / 1 for each character of STR as to whether or not the character is within a Matlab string literal . The quotes are considered to be part of the string . It is normally assumed that the beginning of STR is not already considered to be part of a Matlab string . The user can pass STARTISWITHINSTRING as 1 to indicate that the first character of STR should be taken to be within a Matlab string . Examples : str = [ 'myvar=5; a = ''my string'';' ] vlt . string . ismatlabstring ( str ) 000000000000011111111100 str = [ 'myvar=5; a = [''my '''' '' int2str(5) '' string''; ] '] vlt . string . ismatlabstring ( str )","title":"vlt.string.ismatlabstring"},{"location":"reference/%2Bvlt/%2Bstring/line_n.m/","text":"vlt.string.line_n \u00b6 LINE_N - Get the Nth line of a character string [ LINE_N_STR , POS , EOL_MARKS ] = vlt . string . line_n ( STR , N , ... ) Returns the Nth line of a multiline string STR . LINE_N_STR is the string contents of the Nth line , without the end of line character . The position of the beginning of the Nth line within the string STR is returned in POS . The function also returns all of the locations of the end of line marks EOL_MARKS . If the last character of STR is not an end - of - line , then the function adds an end - of - line character to the end of the string ( and this is returned in EOL_MARKS ) . The behavior of the function can be altered by adding name / value pairs : Name ( default value ): | Description ----------------------------------------------------------------------- eol ( sprintf ( ' \\n ' )) | End of line character , could also use ' \\r ' eol_marks ([]) | If it is non - empty , then the program | skips the search for eol_marks and | uses the provided variable . This is useful | if the user is going to call vlt . string . line_n | many times ; one can save the search time | in subsequent calls . Example : str = sprintf ( 'This is a test. \\n This is line two. \\n This is line 3.' ) vlt . string . line_n ( str , 1 ) vlt . string . line_n ( str , 2 ) vlt . string . line_n ( str , 3 )","title":"vlt.string.line_n"},{"location":"reference/%2Bvlt/%2Bstring/line_n.m/#vltstringline_n","text":"LINE_N - Get the Nth line of a character string [ LINE_N_STR , POS , EOL_MARKS ] = vlt . string . line_n ( STR , N , ... ) Returns the Nth line of a multiline string STR . LINE_N_STR is the string contents of the Nth line , without the end of line character . The position of the beginning of the Nth line within the string STR is returned in POS . The function also returns all of the locations of the end of line marks EOL_MARKS . If the last character of STR is not an end - of - line , then the function adds an end - of - line character to the end of the string ( and this is returned in EOL_MARKS ) . The behavior of the function can be altered by adding name / value pairs : Name ( default value ): | Description ----------------------------------------------------------------------- eol ( sprintf ( ' \\n ' )) | End of line character , could also use ' \\r ' eol_marks ([]) | If it is non - empty , then the program | skips the search for eol_marks and | uses the provided variable . This is useful | if the user is going to call vlt . string . line_n | many times ; one can save the search time | in subsequent calls . Example : str = sprintf ( 'This is a test. \\n This is line two. \\n This is line 3.' ) vlt . string . line_n ( str , 1 ) vlt . string . line_n ( str , 2 ) vlt . string . line_n ( str , 3 )","title":"vlt.string.line_n"},{"location":"reference/%2Bvlt/%2Bstring/quotelevel.m/","text":"vlt.string.quotelevel \u00b6 QUOTELEVEL - Determine the enclosure depth level for text within quotes ( 0 = outside quotes , 1 = inside quotes ) LEVEL = vlt . string . quotelevel ( STR ) For the string STR , returns an equally long array of numbers LEVEL that indicates whether or not the text is inside quotes . One can also call : LEVEL = vlt . string . quotelevel ( STR , QUOTESYMBOL ) to specify a different symbol than '\"' to be used for the quote . Examples : str = 'this is \"a test\" of quote depth' ; level = vlt . string . quotelevel ( str ) str2 = 'this is ''a test'' of quote depth' ; level2 = vlt . string . quotelevel ( str2 , '''' ) % Note that '''' produces a single ' as a string in Matlab","title":"vlt.string.quotelevel"},{"location":"reference/%2Bvlt/%2Bstring/quotelevel.m/#vltstringquotelevel","text":"QUOTELEVEL - Determine the enclosure depth level for text within quotes ( 0 = outside quotes , 1 = inside quotes ) LEVEL = vlt . string . quotelevel ( STR ) For the string STR , returns an equally long array of numbers LEVEL that indicates whether or not the text is inside quotes . One can also call : LEVEL = vlt . string . quotelevel ( STR , QUOTESYMBOL ) to specify a different symbol than '\"' to be used for the quote . Examples : str = 'this is \"a test\" of quote depth' ; level = vlt . string . quotelevel ( str ) str2 = 'this is ''a test'' of quote depth' ; level2 = vlt . string . quotelevel ( str2 , '''' ) % Note that '''' produces a single ' as a string in Matlab","title":"vlt.string.quotelevel"},{"location":"reference/%2Bvlt/%2Bstring/splitindex.m/","text":"vlt.string.splitindex \u00b6 SPLITINDEX - split a string at specific index values into a cell array of strings CELLSTR = vlt . string . splitindex ( STR , INDEXES ) Splits a string into a cell array of strings at the index values indicated in INDEXES . See also : split , strsplit Example : str = 'A,B,C' ; indexes = find ( str == ',' ); cellstr = vlt . string . splitindex ( str , indexes ) % { 'A','B','C' }","title":"vlt.string.splitindex"},{"location":"reference/%2Bvlt/%2Bstring/splitindex.m/#vltstringsplitindex","text":"SPLITINDEX - split a string at specific index values into a cell array of strings CELLSTR = vlt . string . splitindex ( STR , INDEXES ) Splits a string into a cell array of strings at the index values indicated in INDEXES . See also : split , strsplit Example : str = 'A,B,C' ; indexes = find ( str == ',' ); cellstr = vlt . string . splitindex ( str , indexes ) % { 'A','B','C' }","title":"vlt.string.splitindex"},{"location":"reference/%2Bvlt/%2Bstring/str2intseq.m/","text":"vlt.string.str2intseq \u00b6 STR2INTSEQ - Recover a sequence of integers from a string A = vlt . string . str2intseq ( STR ) Given a string that specifies a list of integers , with a dash ( '-' ) indicating a run of sequential integers in order , and a comma ( ',' ) indicating integers that are not ( necessarily ) sequential . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : str = '1-3,7,10,12' ; a = vlt . string . str2intseq ( str ); % a == [1 2 3 7 10 12]","title":"vlt.string.str2intseq"},{"location":"reference/%2Bvlt/%2Bstring/str2intseq.m/#vltstringstr2intseq","text":"STR2INTSEQ - Recover a sequence of integers from a string A = vlt . string . str2intseq ( STR ) Given a string that specifies a list of integers , with a dash ( '-' ) indicating a run of sequential integers in order , and a comma ( ',' ) indicating integers that are not ( necessarily ) sequential . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : str = '1-3,7,10,12' ; a = vlt . string . str2intseq ( str ); % a == [1 2 3 7 10 12]","title":"vlt.string.str2intseq"},{"location":"reference/%2Bvlt/%2Bstring/strcmp_substitution.m/","text":"vlt.string.strcmp_substitution \u00b6 STRCMP_SUBSTITUTION - Checks strings for match with ability to substitute a symbol for a string [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = vlt . string . strcmp_substitution ( S1 , S2 , ... ) Compares S1 and S2 and returns in TF a logical 1 if they are of the same form and logical 0 otherwise . These strings are of the same form if a ) S1 and S2 are identical b ) S2 is a regular expression match of S1 ( see REGEXP ) c ) S2 matches S1 when the symbol '#' in S1 is replaced by some string in S2 , either as a direct comparison with STRCMP or a regular expression match with REGEXP . In this case , SUBSTITUTE_STRING , the string that can replace the SubstituteStringSymbol '#' is also returned . In any case , the entire matched string MATCH_STRING will be returned . The function also has the form : [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = vlt . string . strcmp_substitution ( S1 , A , ... ) where A is a cell array of strings . TF will be a vector of 0 / 1 s the same length as A , and SUBSTITUTE_STRING will be a cell array of the suitable substitute strings . One can also specify the substitute string to be used ( that is , not allow it to vary ) by adding the name / value pair 'SubstituteString' , THESTRING as extra arguments to the function . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SubstituteStringSymbol ( '#' ) | The symbol to indicate the substitute string UseSubstituteString ( 1 ) | Should we use the SubstituteString option ? SubstituteString ( '' ) | Force the function to use this string as the only acceptable | replacement for SubstituteStringSymbol ForceCellOutput ( 0 ) | 0 / 1 should we output a cell even if we receive single strings as S1 , S2 ? Examples : s1 = [ '.*\\.ext\\>' ]; % equivalent of *. ext on the command line s2 = { 'myfile1.ext' 'myfile2.ext' 'myotherfile.ext1' }; [ tf , matchstring , substring ] = vlt . string . strcmp_substitution ( s1 , s2 , 'UseSubstituteString' , 0 ) s1 = [ 'stimtimes#.txt' ]; s2 = { 'dummy.ext' 'stimtimes123.txt' 'stimtimes.txt' 'stimtimes456.txt' } [ tf , matchstring , substring ] = vlt . string . strcmp_substitution ( s1 , s2 )","title":"vlt.string.strcmp_substitution"},{"location":"reference/%2Bvlt/%2Bstring/strcmp_substitution.m/#vltstringstrcmp_substitution","text":"STRCMP_SUBSTITUTION - Checks strings for match with ability to substitute a symbol for a string [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = vlt . string . strcmp_substitution ( S1 , S2 , ... ) Compares S1 and S2 and returns in TF a logical 1 if they are of the same form and logical 0 otherwise . These strings are of the same form if a ) S1 and S2 are identical b ) S2 is a regular expression match of S1 ( see REGEXP ) c ) S2 matches S1 when the symbol '#' in S1 is replaced by some string in S2 , either as a direct comparison with STRCMP or a regular expression match with REGEXP . In this case , SUBSTITUTE_STRING , the string that can replace the SubstituteStringSymbol '#' is also returned . In any case , the entire matched string MATCH_STRING will be returned . The function also has the form : [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = vlt . string . strcmp_substitution ( S1 , A , ... ) where A is a cell array of strings . TF will be a vector of 0 / 1 s the same length as A , and SUBSTITUTE_STRING will be a cell array of the suitable substitute strings . One can also specify the substitute string to be used ( that is , not allow it to vary ) by adding the name / value pair 'SubstituteString' , THESTRING as extra arguments to the function . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SubstituteStringSymbol ( '#' ) | The symbol to indicate the substitute string UseSubstituteString ( 1 ) | Should we use the SubstituteString option ? SubstituteString ( '' ) | Force the function to use this string as the only acceptable | replacement for SubstituteStringSymbol ForceCellOutput ( 0 ) | 0 / 1 should we output a cell even if we receive single strings as S1 , S2 ? Examples : s1 = [ '.*\\.ext\\>' ]; % equivalent of *. ext on the command line s2 = { 'myfile1.ext' 'myfile2.ext' 'myotherfile.ext1' }; [ tf , matchstring , substring ] = vlt . string . strcmp_substitution ( s1 , s2 , 'UseSubstituteString' , 0 ) s1 = [ 'stimtimes#.txt' ]; s2 = { 'dummy.ext' 'stimtimes123.txt' 'stimtimes.txt' 'stimtimes456.txt' } [ tf , matchstring , substring ] = vlt . string . strcmp_substitution ( s1 , s2 )","title":"vlt.string.strcmp_substitution"},{"location":"reference/%2Bvlt/%2Bstring/trimsymbol.m/","text":"vlt.string.trimsymbol \u00b6 TRIMSYMBOL - Trim a symbol ( or symbols ) from a string NEWSTR = vlt . string . trimsymbol ( STR , SYMBOL ) Removes the character symbols in the array SYMBOL from the character string STR , and return the result in NEWSTR . If STR is a cell array of strings , then each string in the cell array will be processed separately . Example : mystr = '*myhighlightedname#' newstr = vlt . string . trimsymbol ( mystr , '*#' ) % newstr = 'myhighlightedname'","title":"vlt.string.trimsymbol"},{"location":"reference/%2Bvlt/%2Bstring/trimsymbol.m/#vltstringtrimsymbol","text":"TRIMSYMBOL - Trim a symbol ( or symbols ) from a string NEWSTR = vlt . string . trimsymbol ( STR , SYMBOL ) Removes the character symbols in the array SYMBOL from the character string STR , and return the result in NEWSTR . If STR is a cell array of strings , then each string in the cell array will be processed separately . Example : mystr = '*myhighlightedname#' newstr = vlt . string . trimsymbol ( mystr , '*#' ) % newstr = 'myhighlightedname'","title":"vlt.string.trimsymbol"},{"location":"reference/%2Bvlt/%2Bstring/trimws.m/","text":"vlt.string.trimws \u00b6 TRIMWS - Trim leading whitespace from a string NEWSTR = vlt . string . trimws ( STR ) Trims leading spaces from a string . There is probably no reason for this function to exist , as the Matlab function STRTRIM seems to perform its function . This function is provided for backward compatibility . I recommend simply using STRTRIM rather than this function , as it will probably be removed in a future release . The only difference between STRTRIM and vlt . string . trimws is that vlt . string . trimws only operates on leading spaces , whereas STRTRIM removes trailing whitespace and also operates on any whitespace character as defined by the function ISSPACE . Example : m = vlt . string . trimws ( ' this string has leading whitespace' ) See also : STRTRIM , ISSPACE","title":"vlt.string.trimws"},{"location":"reference/%2Bvlt/%2Bstring/trimws.m/#vltstringtrimws","text":"TRIMWS - Trim leading whitespace from a string NEWSTR = vlt . string . trimws ( STR ) Trims leading spaces from a string . There is probably no reason for this function to exist , as the Matlab function STRTRIM seems to perform its function . This function is provided for backward compatibility . I recommend simply using STRTRIM rather than this function , as it will probably be removed in a future release . The only difference between STRTRIM and vlt . string . trimws is that vlt . string . trimws only operates on leading spaces , whereas STRTRIM removes trailing whitespace and also operates on any whitespace character as defined by the function ISSPACE . Example : m = vlt . string . trimws ( ' this string has leading whitespace' ) See also : STRTRIM , ISSPACE","title":"vlt.string.trimws"},{"location":"reference/%2Bvlt/%2Bstring/version_decode.m/","text":"vlt.string.version_decode \u00b6 VERSION_DECODE - Decode a version string ( a . b . c . d ) into a number V = vlt . string . version_decode ( VERSION_STRING ) Decodes a version string 'a.b.c.d' into a vector of integers V = [ a b c d ] Example : version_string = '5.0.32.100' ; v = vlt . string . version_decode ( version_string ) % v = [ 5 0 32 100]","title":"vlt.string.version_decode"},{"location":"reference/%2Bvlt/%2Bstring/version_decode.m/#vltstringversion_decode","text":"VERSION_DECODE - Decode a version string ( a . b . c . d ) into a number V = vlt . string . version_decode ( VERSION_STRING ) Decodes a version string 'a.b.c.d' into a vector of integers V = [ a b c d ] Example : version_string = '5.0.32.100' ; v = vlt . string . version_decode ( version_string ) % v = [ 5 0 32 100]","title":"vlt.string.version_decode"},{"location":"reference/%2Bvlt/%2Btime/datevecdiff.m/","text":"vlt.time.datevecdiff \u00b6 DATEVECDIFF - Compute difference in date vectors , in seconds D = vlt . time . datevecdiff ( V1 , V2 ) Compute the difference between 2 date vectors , V = V2-V1 V1 and V2 should be date vectors in the style of DATEVEC ( V1 = [ year month date hour minute seconds ] ) ( V2 = [ year month date hour minute seconds ] ) Example : V1 = [ 2013 12 25 0 0 0 ] ; V2 = [ 2014 12 25 0 0 0 ] ; D = vlt . time . datevecdiff ( V1 , V2 ) See also : NOW , DATEVEC","title":"vlt.time.datevecdiff"},{"location":"reference/%2Bvlt/%2Btime/datevecdiff.m/#vlttimedatevecdiff","text":"DATEVECDIFF - Compute difference in date vectors , in seconds D = vlt . time . datevecdiff ( V1 , V2 ) Compute the difference between 2 date vectors , V = V2-V1 V1 and V2 should be date vectors in the style of DATEVEC ( V1 = [ year month date hour minute seconds ] ) ( V2 = [ year month date hour minute seconds ] ) Example : V1 = [ 2013 12 25 0 0 0 ] ; V2 = [ 2014 12 25 0 0 0 ] ; D = vlt . time . datevecdiff ( V1 , V2 ) See also : NOW , DATEVEC","title":"vlt.time.datevecdiff"},{"location":"reference/%2Bvlt/%2Btime/dowait.m/","text":"vlt.time.dowait \u00b6 DOWAIT - Pause for a particular amount of time based on platform vlt . time . dowait ( HOWLONG ) Waits the specified amount of time . If it is on a non - Mac , this function assumes it is on a unix machine and call sleep on the shell which does not use any processor time . Otherwise , it calls Matlab 's pause function. See also: PAUSE, man sleep","title":"vlt.time.dowait"},{"location":"reference/%2Bvlt/%2Btime/dowait.m/#vlttimedowait","text":"DOWAIT - Pause for a particular amount of time based on platform vlt . time . dowait ( HOWLONG ) Waits the specified amount of time . If it is on a non - Mac , this function assumes it is on a unix machine and call sleep on the shell which does not use any processor time . Otherwise , it calls Matlab 's pause function. See also: PAUSE, man sleep","title":"vlt.time.dowait"},{"location":"reference/%2Bvlt/%2Btime/fulltimestamp2datevec.m/","text":"vlt.time.fulltimestamp2datevec \u00b6 FULLTIMESTAMP2DATEVEC - Convert full time stamp yyyy - mm - ddTHH : MM : SS - TIMEZONE , to a date vector [ V , TZ ] = vlt . time . fulltimestamp2datevec ( FULLTIMESTAMP_STR ) Converts a full time stamp in the format yyyy - mm - ddTHH : MM : SSTIMEZONE The date vector V has the same format as the Matlab DATEVEC routine : V = [ year month day hour minute seconds ] TZ is the time zone offset from GMT ( e . g ., EST is GMT -5 ), in vector format [ hour minute ]. Example : fulltimestamp_str = ' 2013-11-27 T10 : 35 : 35.0695379 -05 : 00 ' ; [ V , TZ ] = vlt . time . fulltimestamp2datevec ( fulltimestamp_str ) See also : DATEVEC , DATESTRING","title":"vlt.time.fulltimestamp2datevec"},{"location":"reference/%2Bvlt/%2Btime/fulltimestamp2datevec.m/#vlttimefulltimestamp2datevec","text":"FULLTIMESTAMP2DATEVEC - Convert full time stamp yyyy - mm - ddTHH : MM : SS - TIMEZONE , to a date vector [ V , TZ ] = vlt . time . fulltimestamp2datevec ( FULLTIMESTAMP_STR ) Converts a full time stamp in the format yyyy - mm - ddTHH : MM : SSTIMEZONE The date vector V has the same format as the Matlab DATEVEC routine : V = [ year month day hour minute seconds ] TZ is the time zone offset from GMT ( e . g ., EST is GMT -5 ), in vector format [ hour minute ]. Example : fulltimestamp_str = ' 2013-11-27 T10 : 35 : 35.0695379 -05 : 00 ' ; [ V , TZ ] = vlt . time . fulltimestamp2datevec ( fulltimestamp_str ) See also : DATEVEC , DATESTRING","title":"vlt.time.fulltimestamp2datevec"},{"location":"reference/%2Bvlt/%2Bui/basicuitools_defs.m/","text":"vlt.ui.basicuitools_defs \u00b6 BASICUITOOLS_DEFS - Basic user interface uitools setup UIDEFS = vlt . ui . basicuitools_defs Returns a basic defined set of specifications for the commonly used user interface controls . The foreground and background colors are compatible with the current Matlab version . This function also accepts name / value pairs that modify the default options . Parameter ( default ) : Description ------------------------------------------------------------------------ callbackstr ( '' ) | Callback function for all active controls | ( 'popup' , 'button' , 'slider' , 'list' , 'radiobutton' , ... | 'togglebutton' ) uiBackgroundColor ( 0.94 * [ 1 1 1 ]) | Background color for all except 'frame' frameBackgroundColor ( 0.8 * [ 1 1 1 ]) | Background color for 'frame' uiUnits ( 'pixels' ) | Units for controls ( could be 'normalized' , 'points' ) | Example : uidefs = vlt . ui . basicuitools_defs ; See also : UICONTROL","title":"vlt.ui.basicuitools_defs"},{"location":"reference/%2Bvlt/%2Bui/basicuitools_defs.m/#vltuibasicuitools_defs","text":"BASICUITOOLS_DEFS - Basic user interface uitools setup UIDEFS = vlt . ui . basicuitools_defs Returns a basic defined set of specifications for the commonly used user interface controls . The foreground and background colors are compatible with the current Matlab version . This function also accepts name / value pairs that modify the default options . Parameter ( default ) : Description ------------------------------------------------------------------------ callbackstr ( '' ) | Callback function for all active controls | ( 'popup' , 'button' , 'slider' , 'list' , 'radiobutton' , ... | 'togglebutton' ) uiBackgroundColor ( 0.94 * [ 1 1 1 ]) | Background color for all except 'frame' frameBackgroundColor ( 0.8 * [ 1 1 1 ]) | Background color for 'frame' uiUnits ( 'pixels' ) | Units for controls ( could be 'normalized' , 'points' ) | Example : uidefs = vlt . ui . basicuitools_defs ; See also : UICONTROL","title":"vlt.ui.basicuitools_defs"},{"location":"reference/%2Bvlt/%2Bui/callbacknametag.m/","text":"vlt.ui.callbacknametag \u00b6 CALLBACKNAMETAG - Callback to run a specified function with name and 'command' based on tag vlt.ui.callbacknametag(FUNCTIONNAME, NAME, ...) Calls the function FUNCTIONNAME with first argument NAME, followed by a name/ref pair argument 'command',TAG, where TAG is the TAG of the UICONTROL that was clicked. Any additional arguments passed to vlt.ui.callbacknametag will be passed along to the function call to FUNCTIONNAME.","title":"vlt.ui.callbacknametag"},{"location":"reference/%2Bvlt/%2Bui/callbacknametag.m/#vltuicallbacknametag","text":"CALLBACKNAMETAG - Callback to run a specified function with name and 'command' based on tag vlt.ui.callbacknametag(FUNCTIONNAME, NAME, ...) Calls the function FUNCTIONNAME with first argument NAME, followed by a name/ref pair argument 'command',TAG, where TAG is the TAG of the UICONTROL that was clicked. Any additional arguments passed to vlt.ui.callbacknametag will be passed along to the function call to FUNCTIONNAME.","title":"vlt.ui.callbacknametag"},{"location":"reference/%2Bvlt/%2Bui/checksyntaxsize.m/","text":"vlt.ui.checksyntaxsize \u00b6 vlt . ui . checksyntaxsize - Checks syntax and size of uitools string arguments [ B , VALS ] = vlt . ui . checksyntaxsize ( THEFIG , TAGLIST , SIZELIST ,[ ERRORMSG , VARNAMELIST ]) Examines strings of user interface tools in figure THEFIG . TAGLIST is a cell list of 'Tag' fields to look at , and SIZELIST is a cell list of the expected sizes for the arguments ( leave an element empty to skip the examination for that field ) . If a syntax error is found , B is 0 and VALS is an empty cell . Otherwise , the values resulting from evaluating each string is returned in the cell list VALS . Optionally , an error dialog is presented to the user describing the syntax or size error ( if ERRORMSG is provided and is 1 ), and the field is referenced in this message either by its tag or by the corresponding entry in VARNAMELIST if it is provided .","title":"vlt.ui.checksyntaxsize"},{"location":"reference/%2Bvlt/%2Bui/checksyntaxsize.m/#vltuichecksyntaxsize","text":"vlt . ui . checksyntaxsize - Checks syntax and size of uitools string arguments [ B , VALS ] = vlt . ui . checksyntaxsize ( THEFIG , TAGLIST , SIZELIST ,[ ERRORMSG , VARNAMELIST ]) Examines strings of user interface tools in figure THEFIG . TAGLIST is a cell list of 'Tag' fields to look at , and SIZELIST is a cell list of the expected sizes for the arguments ( leave an element empty to skip the examination for that field ) . If a syntax error is found , B is 0 and VALS is an empty cell . Otherwise , the values resulting from evaluating each string is returned in the cell list VALS . Optionally , an error dialog is presented to the user describing the syntax or size error ( if ERRORMSG is provided and is 1 ), and the field is referenced in this message either by its tag or by the corresponding entry in VARNAMELIST if it is provided .","title":"vlt.ui.checksyntaxsize"},{"location":"reference/%2Bvlt/%2Bui/dlg2struct.m/","text":"vlt.ui.dlg2struct \u00b6 DLG2STRUCT - Have a user fill in a structure with values S = vlt . ui . dlg2struct ( WINDOWNAME , FN , DESCRIPTIONS , DEFAULTS ) Prompts a user to fill in a structure with INPUTDLG . The fieldnames of the structure should be in the cell array of strings FN , and the human-readable descriptions of each field should be in the cell array of strings DESCRIPTIONS . Default values for each value should be the cell array DEFAULTS . Alternatively , DEFAULTS can be a structure with field names that match those in FN . The dialog window will have a name WINDOWNAME . S will be a struct with fields FN . If the user clicks cancel , then S will be empty ( [] ). This function is only appropriate for simple structure values such as numbers and strings . Example : mystruct . a = 5 ; mystruct . b = 1 ; desc = { 'Favorite number (1-10)', '2nd favorite number (1-10)' } ; s = vlt . ui . dlg2struct ( 'Favorite numbers' , fieldnames ( mystruct ), desc , mystruct );","title":"vlt.ui.dlg2struct"},{"location":"reference/%2Bvlt/%2Bui/dlg2struct.m/#vltuidlg2struct","text":"DLG2STRUCT - Have a user fill in a structure with values S = vlt . ui . dlg2struct ( WINDOWNAME , FN , DESCRIPTIONS , DEFAULTS ) Prompts a user to fill in a structure with INPUTDLG . The fieldnames of the structure should be in the cell array of strings FN , and the human-readable descriptions of each field should be in the cell array of strings DESCRIPTIONS . Default values for each value should be the cell array DEFAULTS . Alternatively , DEFAULTS can be a structure with field names that match those in FN . The dialog window will have a name WINDOWNAME . S will be a struct with fields FN . If the user clicks cancel , then S will be empty ( [] ). This function is only appropriate for simple structure values such as numbers and strings . Example : mystruct . a = 5 ; mystruct . b = 1 ; desc = { 'Favorite number (1-10)', '2nd favorite number (1-10)' } ; s = vlt . ui . dlg2struct ( 'Favorite numbers' , fieldnames ( mystruct ), desc , mystruct );","title":"vlt.ui.dlg2struct"},{"location":"reference/%2Bvlt/%2Bui/figurecommandcallbackstr.m/","text":"vlt.ui.figurecommandcallbackstr \u00b6 FIGURECOMMANDCALLBACKSTR - Callback string that calls function in figure tag with uicontrol command CALLBACKSTR = vlt . ui . figurecommandcallbackstr Returns a string that is a useful callback for uicontrols in graphical user interfaces . This string performs the following actions : 1 ) Obtains the name of a function , located in the figure 's tag field (say, ' myfunction ') 2 ) Calls this function with input arguments 'command' , TAG , 'fig' , f , where f is the number of the current figure , and TAG is the tag of the uicontrol that was clicked . That is , this function calls myfunction ( 'command' , TAG , 'fig' , f ) See also = : UICONTROL","title":"vlt.ui.figurecommandcallbackstr"},{"location":"reference/%2Bvlt/%2Bui/figurecommandcallbackstr.m/#vltuifigurecommandcallbackstr","text":"FIGURECOMMANDCALLBACKSTR - Callback string that calls function in figure tag with uicontrol command CALLBACKSTR = vlt . ui . figurecommandcallbackstr Returns a string that is a useful callback for uicontrols in graphical user interfaces . This string performs the following actions : 1 ) Obtains the name of a function , located in the figure 's tag field (say, ' myfunction ') 2 ) Calls this function with input arguments 'command' , TAG , 'fig' , f , where f is the number of the current figure , and TAG is the tag of the uicontrol that was clicked . That is , this function calls myfunction ( 'command' , TAG , 'fig' , f ) See also = : UICONTROL","title":"vlt.ui.figurecommandcallbackstr"},{"location":"reference/%2Bvlt/%2Bui/findclosestpointclick.m/","text":"vlt.ui.findclosestpointclick \u00b6 FINDCLOSESTPOINT - Find the closest point to where a user clicked [ I , PT ] = vlt . ui . findclosestpointclick ( POINTLIST ) or [ I , PT ] = vlt . ui . findclosestpointclick ( POINTLIST , SCALE ) Examines the 'CurrentPoint' in the current axes , and sees which of the points in POINTLIST is closest to the 'CurrentPoint' . The index of the point in POINTLIST is returned in I , and the actual X / Y pair of the point are in PT . By default , the function does not use the absolute Euclidean distance but rather scales the points by the current view on the axes . This is useful if the X scale is very different from the Y scale ; usually when clicking the user wants the closest point in screen coordinates . One can modify this behavior by passing SCALE and setting it to 0 , and true Euclidean distance will be used . By default SCALE is 1 . POINTLIST should be in the format of 1 point per row . If POINTLIST is in 3 - space ( 3 D ) then a 3 D comparison is made . If POINTLIST is in 2 - space ( 2 D ) then a 2 D comparison is made . See also : vlt . data . findclosest , vlt . data . findclosestpoint","title":"vlt.ui.findclosestpointclick"},{"location":"reference/%2Bvlt/%2Bui/findclosestpointclick.m/#vltuifindclosestpointclick","text":"FINDCLOSESTPOINT - Find the closest point to where a user clicked [ I , PT ] = vlt . ui . findclosestpointclick ( POINTLIST ) or [ I , PT ] = vlt . ui . findclosestpointclick ( POINTLIST , SCALE ) Examines the 'CurrentPoint' in the current axes , and sees which of the points in POINTLIST is closest to the 'CurrentPoint' . The index of the point in POINTLIST is returned in I , and the actual X / Y pair of the point are in PT . By default , the function does not use the absolute Euclidean distance but rather scales the points by the current view on the axes . This is useful if the X scale is very different from the Y scale ; usually when clicking the user wants the closest point in screen coordinates . One can modify this behavior by passing SCALE and setting it to 0 , and true Euclidean distance will be used . By default SCALE is 1 . POINTLIST should be in the format of 1 point per row . If POINTLIST is in 3 - space ( 3 D ) then a 3 D comparison is made . If POINTLIST is in 2 - space ( 2 D ) then a 2 D comparison is made . See also : vlt . data . findclosest , vlt . data . findclosestpoint","title":"vlt.ui.findclosestpointclick"},{"location":"reference/%2Bvlt/%2Bui/genercallback.m/","text":"vlt.ui.genercallback \u00b6 vlt . ui . genercallback - Generic callback function for user interfaces Attempts to call a function with the same name as the 'Tag' field in the figure handle with the callback object as the argument . Example : Suppose there is a button pressed in Figure 1 , and the 'Tag' field of Figure 1 is 'myFunnyPanel' . Then , the generic callback calls the function 'myFunnyPanel(gcbo)' ;","title":"vlt.ui.genercallback"},{"location":"reference/%2Bvlt/%2Bui/genercallback.m/#vltuigenercallback","text":"vlt . ui . genercallback - Generic callback function for user interfaces Attempts to call a function with the same name as the 'Tag' field in the figure handle with the callback object as the argument . Example : Suppose there is a button pressed in Figure 1 , and the 'Tag' field of Figure 1 is 'myFunnyPanel' . Then , the generic callback calls the function 'myFunnyPanel(gcbo)' ;","title":"vlt.ui.genercallback"},{"location":"reference/%2Bvlt/%2Bui/lb_getselected.m/","text":"vlt.ui.lb_getselected \u00b6 Part of the NewStim package LISTSTR = vlt . ui . lb_getselected ( LB ) Returns a list of strings containing the names of the currently selected items in the listbox LB . LB should be a handle to a listbox . Questions to vanhoosr @brandeis . edu","title":"vlt.ui.lb_getselected"},{"location":"reference/%2Bvlt/%2Bui/lb_getselected.m/#vltuilb_getselected","text":"Part of the NewStim package LISTSTR = vlt . ui . lb_getselected ( LB ) Returns a list of strings containing the names of the currently selected items in the listbox LB . LB should be a handle to a listbox . Questions to vanhoosr @brandeis . edu","title":"vlt.ui.lb_getselected"},{"location":"reference/%2Bvlt/%2Bui/myuiinit.m/","text":"vlt.ui.myuiinit \u00b6 MYUIINIT - a script to initialize workspace variables for user interfaces Initializes several structure variables that can then be passed to UICONTROL . These variables are assigned in the CALLER ( that is , if you call this function from another function , the variable names below will be assigned in the function that calls this function ) . The following variables are initialized : Name : | Description : ----------------------------------------------- 'button' | Push button control * 'txt' | Static text control 'uiedit' | Editable text control 'popup' | Popup menu control * 'checkbox' | Checkbox type control * * indicates that the 'callback' field is set to 'vlt.ui.genercallback' Horizontal alignment of 'txt' and 'edit' controls is set to 'center' All backgrounds are set to 0.8 * [ 1 1 1 ] except for 'edit' , which is set to [ 1 1 1 ] See also : UICONTROL , vlt . ui . genercallback , ASSIGNIN","title":"vlt.ui.myuiinit"},{"location":"reference/%2Bvlt/%2Bui/myuiinit.m/#vltuimyuiinit","text":"MYUIINIT - a script to initialize workspace variables for user interfaces Initializes several structure variables that can then be passed to UICONTROL . These variables are assigned in the CALLER ( that is , if you call this function from another function , the variable names below will be assigned in the function that calls this function ) . The following variables are initialized : Name : | Description : ----------------------------------------------- 'button' | Push button control * 'txt' | Static text control 'uiedit' | Editable text control 'popup' | Popup menu control * 'checkbox' | Checkbox type control * * indicates that the 'callback' field is set to 'vlt.ui.genercallback' Horizontal alignment of 'txt' and 'edit' controls is set to 'center' All backgrounds are set to 0.8 * [ 1 1 1 ] except for 'edit' , which is set to [ 1 1 1 ] See also : UICONTROL , vlt . ui . genercallback , ASSIGNIN","title":"vlt.ui.myuiinit"},{"location":"reference/%2Bvlt/%2Bui/nitemmenuselection.m/","text":"vlt.ui.nitemmenuselection \u00b6 NITEMNENUSELECTION - control multiple item selection for a popup menu [ SELECTED , B , ERRORMSG ] = vlt . ui . nitemmenuselection ( POPUPMENU_HANDLE , ...) Note that you shouldn 't allow any item names to begin with ItemPrefix{:} entries. This function' s performance is modified by name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------- ItemPrefix (... | Prefix strings to add to selected items { ' x : ',' y : ',' z : '}) | The number of prefixes determines the number | of items that can be selected simulatenously (N). value (current | The value to toggle uicontrol value) | Example: names = {' a ',' b ',' c ',' d '}; fig=figure; uicontrol(' units ',' normalized ',' position ', [ 0.1 0.1 0.2 0.5 ] ,' tag ',' mymenu ',... ' style ',' popup ',' string ',names,' callback ',' vlt . ui . nitemmenuselection ( gcbo ); ') ; selected=vlt.ui.nitemmenuselection(findobj(fig,'tag','mymenu'),'value', [] ) ;","title":"vlt.ui.nitemmenuselection"},{"location":"reference/%2Bvlt/%2Bui/nitemmenuselection.m/#vltuinitemmenuselection","text":"NITEMNENUSELECTION - control multiple item selection for a popup menu [ SELECTED , B , ERRORMSG ] = vlt . ui . nitemmenuselection ( POPUPMENU_HANDLE , ...) Note that you shouldn 't allow any item names to begin with ItemPrefix{:} entries. This function' s performance is modified by name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------- ItemPrefix (... | Prefix strings to add to selected items { ' x : ',' y : ',' z : '}) | The number of prefixes determines the number | of items that can be selected simulatenously (N). value (current | The value to toggle uicontrol value) | Example: names = {' a ',' b ',' c ',' d '}; fig=figure; uicontrol(' units ',' normalized ',' position ', [ 0.1 0.1 0.2 0.5 ] ,' tag ',' mymenu ',... ' style ',' popup ',' string ',names,' callback ',' vlt . ui . nitemmenuselection ( gcbo ); ') ; selected=vlt.ui.nitemmenuselection(findobj(fig,'tag','mymenu'),'value', [] ) ;","title":"vlt.ui.nitemmenuselection"},{"location":"reference/%2Bvlt/%2Bui/settoolbar.m/","text":"vlt.ui.settoolbar \u00b6 vlt . ui . settoolbar - Sets toolbar vlt . ui . settoolbar ( FIGNUM , TOOLSTRING ) Calls SET to set the toolbar to the value of TOOLSTRING . If matlab version is too low for the toolbar , then nothing is done .","title":"vlt.ui.settoolbar"},{"location":"reference/%2Bvlt/%2Bui/settoolbar.m/#vltuisettoolbar","text":"vlt . ui . settoolbar - Sets toolbar vlt . ui . settoolbar ( FIGNUM , TOOLSTRING ) Calls SET to set the toolbar to the value of TOOLSTRING . If matlab version is too low for the toolbar , then nothing is done .","title":"vlt.ui.settoolbar"},{"location":"reference/%2Bvlt/%2Bui/simplepopupmenucallback.m/","text":"vlt.ui.simplepopupmenucallback \u00b6 SIMPLEPOPUPMENUCALLBACK - Evaluates an expression based on the value of a popup list vlt . ui . simplepopupmenucallback ( CALLBACKLIST [ , VALUE ] ) Evaluates the expression at the VALUE index of the cell array of strings CALLBACKLIST ( that is , evalutes CALLBACKLIST { VALUE } ). If VALUE is not provided , then it is obtained from the 'value' field of the current callback object as obtained by the function GCBO . Example : uicontol ( 'Style' , 'popup' , 'String' , { 'Option 1','Option 2' } ,... 'callback' , 'vlt.ui.simplepopupmenucallback({''func1'',''func2''});' ); When Option 1 is chosen , 'func1' is called by EVAL , when Option 2 is chosen , 'func2' is called by EVAL . See also : GCBO , SUBREF , EVAL , vlt . ui . genercallback","title":"vlt.ui.simplepopupmenucallback"},{"location":"reference/%2Bvlt/%2Bui/simplepopupmenucallback.m/#vltuisimplepopupmenucallback","text":"SIMPLEPOPUPMENUCALLBACK - Evaluates an expression based on the value of a popup list vlt . ui . simplepopupmenucallback ( CALLBACKLIST [ , VALUE ] ) Evaluates the expression at the VALUE index of the cell array of strings CALLBACKLIST ( that is , evalutes CALLBACKLIST { VALUE } ). If VALUE is not provided , then it is obtained from the 'value' field of the current callback object as obtained by the function GCBO . Example : uicontol ( 'Style' , 'popup' , 'String' , { 'Option 1','Option 2' } ,... 'callback' , 'vlt.ui.simplepopupmenucallback({''func1'',''func2''});' ); When Option 1 is chosen , 'func1' is called by EVAL , when Option 2 is chosen , 'func2' is called by EVAL . See also : GCBO , SUBREF , EVAL , vlt . ui . genercallback","title":"vlt.ui.simplepopupmenucallback"},{"location":"reference/%2Bvlt/%2Bui/textbox.m/","text":"vlt.ui.textbox \u00b6 TEXTBOX - Display a string in a window and wait for a click in an OK box vlt . ui . textbox ( TITLE , STR ) Displays the text in the string STR in a new window with title TITLE . The only button is an OK button to dismiss the window .","title":"vlt.ui.textbox"},{"location":"reference/%2Bvlt/%2Bui/textbox.m/#vltuitextbox","text":"TEXTBOX - Display a string in a window and wait for a click in an OK box vlt . ui . textbox ( TITLE , STR ) Displays the text in the string STR in a new window with title TITLE . The only button is an OK button to dismiss the window .","title":"vlt.ui.textbox"},{"location":"reference/%2Bvlt/%2Bui/uigetvarname.m/","text":"vlt.ui.uigetvarname \u00b6 Part of the NewStim package NAME = vlt . ui . uigetvarname ( PROMPT , DEFAULT ) Prompts the user for a variable name until they cancel the window or enter a valid variable name . PROMPT should be a string prompting the user , and DEFAULT is the default variable name ( or use '' for blank ) . If the user clicks cancel , then the empty string is returned .","title":"vlt.ui.uigetvarname"},{"location":"reference/%2Bvlt/%2Bui/uigetvarname.m/#vltuiuigetvarname","text":"Part of the NewStim package NAME = vlt . ui . uigetvarname ( PROMPT , DEFAULT ) Prompts the user for a variable name until they cancel the window or enter a valid variable name . PROMPT should be a string prompting the user , and DEFAULT is the default variable name ( or use '' for blank ) . If the user clicks cancel , then the empty string is returned .","title":"vlt.ui.uigetvarname"},{"location":"reference/batch/simple_batch.m/","text":"simple_batch \u00b6 SIMPLE_BATCH - Run a simple batch SIMPLE_BATCH ( TEXTFILE ) Runs a simple batch script . The TEXTFILE is assumed to be a tab - delimited text file with the first row describing the fields ( described here ) : jobclaimfile -- the filename that will be created to \"claim\" the job for this Matlab pathtorun -- the directory that will be changed to with the cd command commandtorun -- the command that will be run savefile -- the output will be saved to this file errorsave -- if there is an error , the workspace will be saved to this file","title":"simple_batch"},{"location":"reference/batch/simple_batch.m/#simple_batch","text":"SIMPLE_BATCH - Run a simple batch SIMPLE_BATCH ( TEXTFILE ) Runs a simple batch script . The TEXTFILE is assumed to be a tab - delimited text file with the first row describing the fields ( described here ) : jobclaimfile -- the filename that will be created to \"claim\" the job for this Matlab pathtorun -- the directory that will be changed to with the cd command commandtorun -- the command that will be run savefile -- the output will be saved to this file errorsave -- if there is an error , the workspace will be saved to this file","title":"simple_batch"},{"location":"reference/colorspace/angle2ybgr.m/","text":"angle2ybgr \u00b6 ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = ANGLE2YBGR ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to blue at 180 degrees ( [ 0 0 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : ANGLE2YCGR Examples : ctab = angle2ybgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = angle2ybgr ( angle );","title":"angle2ybgr"},{"location":"reference/colorspace/angle2ybgr.m/#angle2ybgr","text":"ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = ANGLE2YBGR ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to blue at 180 degrees ( [ 0 0 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : ANGLE2YCGR Examples : ctab = angle2ybgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = angle2ybgr ( angle );","title":"angle2ybgr"},{"location":"reference/colorspace/angle2ycgr.m/","text":"angle2ycgr \u00b6 ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = ANGLE2YCGR ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to cyan at 180 degrees ( [ 0 1 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : ANGLE2YBGR Examples : ctab = angle2ycgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = angle2ycgr ( angle );","title":"angle2ycgr"},{"location":"reference/colorspace/angle2ycgr.m/#angle2ycgr","text":"ANGLE2YBRG - Determine color by angle 0 - 360 degrees [ CTAB, VALUE, RGB ] = ANGLE2YCGR ( [ ANGLE ] ) Returns a color table for angle values 0 : 1 : 359. If a specific ANGLE is given as an input argument , the function will also return the ( interpolated ) value of the ANGLE in the space of the color table CTAB , and the interpolated RGB value . The color space ranges from yellow ( [ 1 1 0 ] ) at 0 degrees , to green at 90 degrees ( [ 0 1 0 ] ), to cyan at 180 degrees ( [ 0 1 1 ] ), to red ( [ 1 0 0 ] ) at 270 degrees , and back to yellow at 360 degrees / 0 degrees . See also : ANGLE2YBGR Examples : ctab = angle2ycgr ; % ( can serve as a color map for angle data ) angle = 5.5 ; [ ctab, value, rgb ] = angle2ycgr ( angle );","title":"angle2ycgr"},{"location":"reference/colorspace/cmyk2rgb.m/","text":"cmyk2rgb \u00b6 CMYK2RGB - Convert CMYK to RGB RGB = CMYK2RGB(COLOR) Converts from CMYK color space to RGB space. Color values must be in 0..1. See also: RGB2CMYK Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"cmyk2rgb"},{"location":"reference/colorspace/cmyk2rgb.m/#cmyk2rgb","text":"CMYK2RGB - Convert CMYK to RGB RGB = CMYK2RGB(COLOR) Converts from CMYK color space to RGB space. Color values must be in 0..1. See also: RGB2CMYK Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"cmyk2rgb"},{"location":"reference/colorspace/rgb2cmyk.m/","text":"rgb2cmyk \u00b6 RGB2CMYK - Convert RGB to CMYK CMYK = RGB2CMYK(RGB) Converts from RGB color space to CMYK space. Color values must be in 0..1. See also: CMYK2RGB Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"rgb2cmyk"},{"location":"reference/colorspace/rgb2cmyk.m/#rgb2cmyk","text":"RGB2CMYK - Convert RGB to CMYK CMYK = RGB2CMYK(RGB) Converts from RGB color space to CMYK space. Color values must be in 0..1. See also: CMYK2RGB Derived from code posted to the web by Ch Begler at Scripps Institute of Oceanography","title":"rgb2cmyk"},{"location":"reference/config/add_config_file.m/","text":"add_config_file \u00b6 ADD_CONFIG_FILE - Add a default configuration file to the configuration directory ADD_CONFIG_FILE(CONFIG_FILENAME, CONFIG_BASENAME, ...) Makes a copy of the file CONFIG_BASENAME and places it in a file called CONFIG_FILENAME. The CONFIG_FILENAME is located in a directory called config_dirpath, which is by default determined by calling CONFIG_DIRPATH. This default behavior of this program can be modified by passing name/value pairs: NAME (default) | Description ----------------------------------------------------------- config_dirpath | Path of where the file should be (config_dirname) | saved","title":"add_config_file"},{"location":"reference/config/add_config_file.m/#add_config_file","text":"ADD_CONFIG_FILE - Add a default configuration file to the configuration directory ADD_CONFIG_FILE(CONFIG_FILENAME, CONFIG_BASENAME, ...) Makes a copy of the file CONFIG_BASENAME and places it in a file called CONFIG_FILENAME. The CONFIG_FILENAME is located in a directory called config_dirpath, which is by default determined by calling CONFIG_DIRPATH. This default behavior of this program can be modified by passing name/value pairs: NAME (default) | Description ----------------------------------------------------------- config_dirpath | Path of where the file should be (config_dirname) | saved","title":"add_config_file"},{"location":"reference/config/config_dirname.m/","text":"config_dirname \u00b6 CONFIG_DIRNAME - Return the path location of configuration files DIRNAME = CONFIG_DIRNAME Defines the default location for configuration files for vhlab - toolbox - matlab . By default , the location is in a directory called 'vhlab_configuration' that is located in the same directory as vhlab - toolbox - matlab . If the DIRNAME does not exist , it is created and added to the current Matlab path .","title":"config_dirname"},{"location":"reference/config/config_dirname.m/#config_dirname","text":"CONFIG_DIRNAME - Return the path location of configuration files DIRNAME = CONFIG_DIRNAME Defines the default location for configuration files for vhlab - toolbox - matlab . By default , the location is in a directory called 'vhlab_configuration' that is located in the same directory as vhlab - toolbox - matlab . If the DIRNAME does not exist , it is created and added to the current Matlab path .","title":"config_dirname"},{"location":"reference/daq/MCCUSB1208FS/MCCUSB1208FS_AcquireSimpleDaq.m/","text":"MCCUSB1208FS_AcquireSimpleDaq \u00b6 MCCUSB1208FS_AcquireSimpleDaq is a function. [data, newsd] = MCCUSB1208FS_AcquireSimpleDaq(sd)","title":"MCCUSB1208FS_AcquireSimpleDaq"},{"location":"reference/daq/MCCUSB1208FS/MCCUSB1208FS_AcquireSimpleDaq.m/#mccusb1208fs_acquiresimpledaq","text":"MCCUSB1208FS_AcquireSimpleDaq is a function. [data, newsd] = MCCUSB1208FS_AcquireSimpleDaq(sd)","title":"MCCUSB1208FS_AcquireSimpleDaq"},{"location":"reference/daq/MCCUSB1208FS/MCCUSB1208FS_CloseSimpleDaq.m/","text":"MCCUSB1208FS_CloseSimpleDaq \u00b6 MCCUSB1208FS_CloseSimpleDaq is a function. newsd = MCCUSB1208FS_CloseSimpleDaq(sd)","title":"MCCUSB1208FS_CloseSimpleDaq"},{"location":"reference/daq/MCCUSB1208FS/MCCUSB1208FS_CloseSimpleDaq.m/#mccusb1208fs_closesimpledaq","text":"MCCUSB1208FS_CloseSimpleDaq is a function. newsd = MCCUSB1208FS_CloseSimpleDaq(sd)","title":"MCCUSB1208FS_CloseSimpleDaq"},{"location":"reference/daq/MCCUSB1208FS/MCCUSB1208FS_OpenSimpleDaq.m/","text":"MCCUSB1208FS_OpenSimpleDaq \u00b6 MCCUSB1208FS_OpenSimpleDaq is a function. newsd = MCCUSB1208FS_OpenSimpleDaq(sd)","title":"MCCUSB1208FS_OpenSimpleDaq"},{"location":"reference/daq/MCCUSB1208FS/MCCUSB1208FS_OpenSimpleDaq.m/#mccusb1208fs_opensimpledaq","text":"MCCUSB1208FS_OpenSimpleDaq is a function. newsd = MCCUSB1208FS_OpenSimpleDaq(sd)","title":"MCCUSB1208FS_OpenSimpleDaq"},{"location":"reference/daq/dummyekgeegdaq/dummyekgeegdaq_AcquireSimpleDaq.m/","text":"dummyekgeegdaq_AcquireSimpleDaq \u00b6 dummyekgeegdaq_AcquireSimpleDaq is a function. [data, newsd] = dummyekgeegdaq_AcquireSimpleDaq(sd)","title":"dummyekgeegdaq_AcquireSimpleDaq"},{"location":"reference/daq/dummyekgeegdaq/dummyekgeegdaq_AcquireSimpleDaq.m/#dummyekgeegdaq_acquiresimpledaq","text":"dummyekgeegdaq_AcquireSimpleDaq is a function. [data, newsd] = dummyekgeegdaq_AcquireSimpleDaq(sd)","title":"dummyekgeegdaq_AcquireSimpleDaq"},{"location":"reference/daq/dummyekgeegdaq/dummyekgeegdaq_CloseSimpleDaq.m/","text":"dummyekgeegdaq_CloseSimpleDaq \u00b6 dummyekgeegdaq_CloseSimpleDaq is a function. newsd = dummyekgeegdaq_CloseSimpleDaq(sd)","title":"dummyekgeegdaq_CloseSimpleDaq"},{"location":"reference/daq/dummyekgeegdaq/dummyekgeegdaq_CloseSimpleDaq.m/#dummyekgeegdaq_closesimpledaq","text":"dummyekgeegdaq_CloseSimpleDaq is a function. newsd = dummyekgeegdaq_CloseSimpleDaq(sd)","title":"dummyekgeegdaq_CloseSimpleDaq"},{"location":"reference/daq/dummyekgeegdaq/dummyekgeegdaq_OpenSimpleDaq.m/","text":"dummyekgeegdaq_OpenSimpleDaq \u00b6 dummyekgeegdaq_OpenSimpleDaq is a function. newsd = dummyekgeegdaq_OpenSimpleDaq(sd)","title":"dummyekgeegdaq_OpenSimpleDaq"},{"location":"reference/daq/dummyekgeegdaq/dummyekgeegdaq_OpenSimpleDaq.m/#dummyekgeegdaq_opensimpledaq","text":"dummyekgeegdaq_OpenSimpleDaq is a function. newsd = dummyekgeegdaq_OpenSimpleDaq(sd)","title":"dummyekgeegdaq_OpenSimpleDaq"},{"location":"reference/daq/simpledaq/AcquireSimpleDaq.m/","text":"AcquireSimpleDaq \u00b6 ACQUIRESIMPLEDAQ - Acquires a SimpleDaq device [ DATA , NEWSD ] = ACQUIRESIMPLEDAQ ( SD ) Calls the acquire function for the SimpleDaq device SD . Literally returns [ DATA , NEWSD ] = SD . daqname_AcquireSimpleDaq ( SD ) The structure DATA will have the following fields : starttime -- the 'clock' value at the beginning of the recording ; this is the 6 element vector returned by the Matlab function CLOCK data -- a cell list of all data records , the ith of which is a matrix with entries [ t_i ; data_i_1 ; data_i_2 ; ... ] where t_i indicates the sample times of data record i ( usually with respect to starttime ; that is 0 == starttime ) and data_i_n is the value sampled on channel n .","title":"AcquireSimpleDaq"},{"location":"reference/daq/simpledaq/AcquireSimpleDaq.m/#acquiresimpledaq","text":"ACQUIRESIMPLEDAQ - Acquires a SimpleDaq device [ DATA , NEWSD ] = ACQUIRESIMPLEDAQ ( SD ) Calls the acquire function for the SimpleDaq device SD . Literally returns [ DATA , NEWSD ] = SD . daqname_AcquireSimpleDaq ( SD ) The structure DATA will have the following fields : starttime -- the 'clock' value at the beginning of the recording ; this is the 6 element vector returned by the Matlab function CLOCK data -- a cell list of all data records , the ith of which is a matrix with entries [ t_i ; data_i_1 ; data_i_2 ; ... ] where t_i indicates the sample times of data record i ( usually with respect to starttime ; that is 0 == starttime ) and data_i_n is the value sampled on channel n .","title":"AcquireSimpleDaq"},{"location":"reference/daq/simpledaq/CloseSimpleDaq.m/","text":"CloseSimpleDaq \u00b6 CLOSESIMPLEDAQ - Closes a SimpleDaq device NEWSD = CLOSESIMPLEDAQ ( SD ) Calls the close function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_CloseSimpleDaq ( SD )","title":"CloseSimpleDaq"},{"location":"reference/daq/simpledaq/CloseSimpleDaq.m/#closesimpledaq","text":"CLOSESIMPLEDAQ - Closes a SimpleDaq device NEWSD = CLOSESIMPLEDAQ ( SD ) Calls the close function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_CloseSimpleDaq ( SD )","title":"CloseSimpleDaq"},{"location":"reference/daq/simpledaq/NewSimpleDaq.m/","text":"NewSimpleDaq \u00b6 NEWSIMPLEDAQ - Creates a new SimpleDaq object SD = NEWSIMPLEDAQ ( DAQNAME , PARAMETERS ) Returns a structure with fieldnames 'daqname' and 'parameters' , set to the string DAQNAME and the variable PARAMETERS , respectfully . This structure can then be passed to the SimpleDAQ commands such as OpenSimpleDaq CloseSimpleDaq AcquireSimpleDaq SimpleDaq is a wrapper class for many types of aqcusition devices . When one calls OpenSimpleDaq , OpenSimpleDaq will in turn call DAQNAME_OpenSimpleDaq ( DAQNAME , PARAMETERS )","title":"NewSimpleDaq"},{"location":"reference/daq/simpledaq/NewSimpleDaq.m/#newsimpledaq","text":"NEWSIMPLEDAQ - Creates a new SimpleDaq object SD = NEWSIMPLEDAQ ( DAQNAME , PARAMETERS ) Returns a structure with fieldnames 'daqname' and 'parameters' , set to the string DAQNAME and the variable PARAMETERS , respectfully . This structure can then be passed to the SimpleDAQ commands such as OpenSimpleDaq CloseSimpleDaq AcquireSimpleDaq SimpleDaq is a wrapper class for many types of aqcusition devices . When one calls OpenSimpleDaq , OpenSimpleDaq will in turn call DAQNAME_OpenSimpleDaq ( DAQNAME , PARAMETERS )","title":"NewSimpleDaq"},{"location":"reference/daq/simpledaq/OpenSimpleDaq.m/","text":"OpenSimpleDaq \u00b6 OPENSIMPLEDAQ - Opens a SimpleDaq device NEWSD = OPENSIMPLEDAQ ( SD ) Calls the open function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_OpenSimpleDaq ( SD )","title":"OpenSimpleDaq"},{"location":"reference/daq/simpledaq/OpenSimpleDaq.m/#opensimpledaq","text":"OPENSIMPLEDAQ - Opens a SimpleDaq device NEWSD = OPENSIMPLEDAQ ( SD ) Calls the open function for the SimpleDaq device SD . Literally returns NEWSD = SD . daqname_OpenSimpleDaq ( SD )","title":"OpenSimpleDaq"},{"location":"reference/datastructures/assign.m/","text":"assign \u00b6 assign - make a list of assignments ( matlab 5 or higher ) ASSIGN ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"assign"},{"location":"reference/datastructures/assign.m/#assign","text":"assign - make a list of assignments ( matlab 5 or higher ) ASSIGN ( 'VAR1' , VAL1 , 'VAR2' , VAL2 , ... ) makes the assignments VAR1 = VAL1 ; VAR2 = VAL2 ; ... in the caller 's workspace. This is most useful when passing in an option list to a function . Thus in the function which starts : function foo ( x , y , varargin ) z = 0 ; assign ( varargin {:}); the variable z can be given a non - default value by calling the function like so : foo ( x , y , 'z' , 4 ); If the input is a single structure , then the structure is converted to a set of NAME / VALUE pairs and interpreted as 'VAR1' , VAL1 , etc , where VAR1 is the first field name of the input , VAL1 is the value of the field name , etc .","title":"assign"},{"location":"reference/datastructures/catCellStr.m/","text":"catCellStr \u00b6 Part of the NewStim package STR = CATCELLSTR ( CELLSTR ) Concatenates a list into one long string separated by spaces . Note that the list must be one - dimensional and also be made up entirely of character strings . Questions to vanhoosr @brandeis . edu","title":"catCellStr"},{"location":"reference/datastructures/catCellStr.m/#catcellstr","text":"Part of the NewStim package STR = CATCELLSTR ( CELLSTR ) Concatenates a list into one long string separated by spaces . Note that the list must be one - dimensional and also be made up entirely of character strings . Questions to vanhoosr @brandeis . edu","title":"catCellStr"},{"location":"reference/datastructures/catstructfields.m/","text":"catstructfields \u00b6 CATSTRUCTFIELDS - Concatenate fields from structures with equal fields STRUCT_OUT = CATSTRUCTFIELDS ( STRUCT1 , STRUCT2 [ , DIMENSION ] ) This function concatenates the contents of the field values of STRUCT1 and STRUCT2 . STRUCT1 and STRUCT2 must have identical fieldnames . DIMENSION is the dimension over which the concatenation is performed . If DIMENSION is not provided , then the function uses the largest dimension of each field as the concatenation dimension . Example : a . field1 = [ 1 2 3 ] ; a . field2 = [ 1 2 3 ] ; b . field1 = [ 4 5 6 ] ; b . field2 = [ 4 5 6 ] ; c = catstructfields ( a , b ); c . field1 % is [ 1 2 3 4 5 6 ] c . field2 % is [ 1 2 3 4 5 6 ]","title":"catstructfields"},{"location":"reference/datastructures/catstructfields.m/#catstructfields","text":"CATSTRUCTFIELDS - Concatenate fields from structures with equal fields STRUCT_OUT = CATSTRUCTFIELDS ( STRUCT1 , STRUCT2 [ , DIMENSION ] ) This function concatenates the contents of the field values of STRUCT1 and STRUCT2 . STRUCT1 and STRUCT2 must have identical fieldnames . DIMENSION is the dimension over which the concatenation is performed . If DIMENSION is not provided , then the function uses the largest dimension of each field as the concatenation dimension . Example : a . field1 = [ 1 2 3 ] ; a . field2 = [ 1 2 3 ] ; b . field1 = [ 4 5 6 ] ; b . field2 = [ 4 5 6 ] ; c = catstructfields ( a , b ); c . field1 % is [ 1 2 3 4 5 6 ] c . field2 % is [ 1 2 3 4 5 6 ]","title":"catstructfields"},{"location":"reference/datastructures/cell2group.m/","text":"cell2group \u00b6 CELL2GROUP - Turn cell data into a vector with group ID , as appropriate for ANOVA1 [ X , GROUP ] = CELL2GROUP ( INPUT_DATA ) Reorganize data that is stored in vectors in different cells of the cell array INPUT_DATA into a single vector variable X with the group identity of each variable in X indicated by the corresponding entry in GROUP . This is useful for preparing data for ANOVA1 . Example : a = { [ 1 2 3 ] ', [4 5 6]' , [ 7 8 9 ] ' }; [ x , group ] = cell2group ( a ) % x is [ 1 2 3 4 5 6 7 8 9 ] ' % group is [ 1 1 1 2 2 2 3 3 3 ] ' See also : ANOVA1","title":"cell2group"},{"location":"reference/datastructures/cell2group.m/#cell2group","text":"CELL2GROUP - Turn cell data into a vector with group ID , as appropriate for ANOVA1 [ X , GROUP ] = CELL2GROUP ( INPUT_DATA ) Reorganize data that is stored in vectors in different cells of the cell array INPUT_DATA into a single vector variable X with the group identity of each variable in X indicated by the corresponding entry in GROUP . This is useful for preparing data for ANOVA1 . Example : a = { [ 1 2 3 ] ', [4 5 6]' , [ 7 8 9 ] ' }; [ x , group ] = cell2group ( a ) % x is [ 1 2 3 4 5 6 7 8 9 ] ' % group is [ 1 1 1 2 2 2 3 3 3 ] ' See also : ANOVA1","title":"cell2group"},{"location":"reference/datastructures/cell2mlstr.m/","text":"cell2mlstr \u00b6 CELL2MLSTR - Create a text string to fully characterize a cellure STR = CELL2MLSTR ( THECELL ) Produces a string representation of a cellure that can be passed to an external program to fully encapsulate the cellure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using CELL2MLSTR . Any other objects are written using the function DISP . The cellure is written in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > where X , Y , Z are the dimension of the cellure array , and data contains the data for each cell entry , inside < and >. Within each data , values for each field separated with < and > characters . / CELL ends the cellure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = CELL2STR ( THECELL , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - cellures ( default 5 ) Example : A = { 'test' , 5 , [ 3 4 5 ]} cell2mlstr ( A )","title":"cell2mlstr"},{"location":"reference/datastructures/cell2mlstr.m/#cell2mlstr","text":"CELL2MLSTR - Create a text string to fully characterize a cellure STR = CELL2MLSTR ( THECELL ) Produces a string representation of a cellure that can be passed to an external program to fully encapsulate the cellure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using CELL2MLSTR . Any other objects are written using the function DISP . The cellure is written in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > where X , Y , Z are the dimension of the cellure array , and data contains the data for each cell entry , inside < and >. Within each data , values for each field separated with < and > characters . / CELL ends the cellure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = CELL2STR ( THECELL , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - cellures ( default 5 ) Example : A = { 'test' , 5 , [ 3 4 5 ]} cell2mlstr ( A )","title":"cell2mlstr"},{"location":"reference/datastructures/cell2str.m/","text":"cell2str \u00b6 CELL2STR - Convert 1 - D cells to a string STR = CELL2STR ( THECELL ) Converts a 1 - D cell to a string representation that can be evaluated to reproduce the cell array . At present , this function works with 1 - dimensional cells only , and only chars and matrixes Example : A = { 'test' , 'test2' , 'test3' }; str = vlt . data . cell2str ( A ) % str = '{ 'test','test2','test3'}' B = eval ( str ); vlt . data . eqlen ( A , B ), % should return 1","title":"cell2str"},{"location":"reference/datastructures/cell2str.m/#cell2str","text":"CELL2STR - Convert 1 - D cells to a string STR = CELL2STR ( THECELL ) Converts a 1 - D cell to a string representation that can be evaluated to reproduce the cell array . At present , this function works with 1 - dimensional cells only , and only chars and matrixes Example : A = { 'test' , 'test2' , 'test3' }; str = vlt . data . cell2str ( A ) % str = '{ 'test','test2','test3'}' B = eval ( str ); vlt . data . eqlen ( A , B ), % should return 1","title":"cell2str"},{"location":"reference/datastructures/celloritem.m/","text":"celloritem \u00b6 CELLORITEM - Returns the ith element of a cell list , or a single item ITEM = CELLORITEM ( VAR , [ INDEX ] , [ USEINDEXFORVAR ] ) This function examines VAR : if VAR is a cell list , then it returns the INDEXth element of VAR ; if VAR is not a cell list , then it returns VAR , unless the user specifies that the INDEXth element of var should be returned ( USEINDEXFORVAR = 1 ). If INDEX is not provided , it is assumed to be 1. If USEINDEXFORVAR is not provided , it is assumed to be 0. This can be used to allow the user the option of providing a cell list or a single entry ( Example 1 ) or to pull an item that may be stored as a cell list or a struct ( Example 2 : , a JSON encoding / decoding into Matlab is underspecified and may result in either a cell array or a struct array ). Example 1 : mylist1 = { 'Joe' , 'Larry' , 'Curly' } ; mylist2 = 'Joe' ; for i = 1 : 3 , celloritem ( mylist1 , i ), celloritem ( mylist2 , i ), end ; Example 2 : myotherlist1 = [ 1 2 3 ] ; myotherlist2 = { [ 1 ] [ 2 ] [ 3 ] } ; for i = 1 : 3 , celloritem ( myotherlist1 , i , 1 ), celloritem ( myotherlist2 , i , 1 ), end","title":"celloritem"},{"location":"reference/datastructures/celloritem.m/#celloritem","text":"CELLORITEM - Returns the ith element of a cell list , or a single item ITEM = CELLORITEM ( VAR , [ INDEX ] , [ USEINDEXFORVAR ] ) This function examines VAR : if VAR is a cell list , then it returns the INDEXth element of VAR ; if VAR is not a cell list , then it returns VAR , unless the user specifies that the INDEXth element of var should be returned ( USEINDEXFORVAR = 1 ). If INDEX is not provided , it is assumed to be 1. If USEINDEXFORVAR is not provided , it is assumed to be 0. This can be used to allow the user the option of providing a cell list or a single entry ( Example 1 ) or to pull an item that may be stored as a cell list or a struct ( Example 2 : , a JSON encoding / decoding into Matlab is underspecified and may result in either a cell array or a struct array ). Example 1 : mylist1 = { 'Joe' , 'Larry' , 'Curly' } ; mylist2 = 'Joe' ; for i = 1 : 3 , celloritem ( mylist1 , i ), celloritem ( mylist2 , i ), end ; Example 2 : myotherlist1 = [ 1 2 3 ] ; myotherlist2 = { [ 1 ] [ 2 ] [ 3 ] } ; for i = 1 : 3 , celloritem ( myotherlist1 , i , 1 ), celloritem ( myotherlist2 , i , 1 ), end","title":"celloritem"},{"location":"reference/datastructures/celltable2struct.m/","text":"celltable2struct \u00b6 CELLTABLE2STRUCT - convert a table stored in a CELL datatype to a structure S = CELLTABLE2STRUCT ( C ) Converts a table stored in the cell matrix C to a structure . It is assumed that the first row of C ( C { 1 }) has structure labels . If any of these labels are not valid Matlab variables , then they are converted to be . If rows of C { j } ( j > 1 ) have fewer entries than the header row , then all subsequent fields in the structure will have empty ([]) values . Example : % Read a tab - seperated - value file with truncated entries ( that is , %where each line ends prematurely if later fields are empty ) : o = read_tab_delimited_file ( filename ); s = celltable2struct ( o );","title":"celltable2struct"},{"location":"reference/datastructures/celltable2struct.m/#celltable2struct","text":"CELLTABLE2STRUCT - convert a table stored in a CELL datatype to a structure S = CELLTABLE2STRUCT ( C ) Converts a table stored in the cell matrix C to a structure . It is assumed that the first row of C ( C { 1 }) has structure labels . If any of these labels are not valid Matlab variables , then they are converted to be . If rows of C { j } ( j > 1 ) have fewer entries than the header row , then all subsequent fields in the structure will have empty ([]) values . Example : % Read a tab - seperated - value file with truncated entries ( that is , %where each line ends prematurely if later fields are empty ) : o = read_tab_delimited_file ( filename ); s = celltable2struct ( o );","title":"celltable2struct"},{"location":"reference/datastructures/colvec.m/","text":"colvec \u00b6 COLVEC - return a matrix reshaped as a column vector Y = COLVEC ( X ) Returns the contents of the matrix X as a column vector Y that is 1 xM , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . COLVEC is equivalent to Y = X ( : ) ; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix . See also : ROWVEC Example : A = rand ( 5 , 5 ) Y = colvec ( A ( 1 : 3 , 1 : 2 )) % returns points in rows 1 : 3 , columns 1 : 2","title":"colvec"},{"location":"reference/datastructures/colvec.m/#colvec","text":"COLVEC - return a matrix reshaped as a column vector Y = COLVEC ( X ) Returns the contents of the matrix X as a column vector Y that is 1 xM , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . COLVEC is equivalent to Y = X ( : ) ; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix . See also : ROWVEC Example : A = rand ( 5 , 5 ) Y = colvec ( A ( 1 : 3 , 1 : 2 )) % returns points in rows 1 : 3 , columns 1 : 2","title":"colvec"},{"location":"reference/datastructures/conditional.m/","text":"conditional \u00b6 CONDITIONAL - Return A or B depending on result of a true / false test C = CONDITIONAL ( TEST , A , B ) If TEST is > 0 , then C = A . Otherwise , C = B . Same as in C language : C = ( TEST ) ? A : B ; See also : SIGN . In C language : C language ternary operator , ternary conditional operator , conditional operator","title":"conditional"},{"location":"reference/datastructures/conditional.m/#conditional","text":"CONDITIONAL - Return A or B depending on result of a true / false test C = CONDITIONAL ( TEST , A , B ) If TEST is > 0 , then C = A . Otherwise , C = B . Same as in C language : C = ( TEST ) ? A : B ; See also : SIGN . In C language : C language ternary operator , ternary conditional operator , conditional operator","title":"conditional"},{"location":"reference/datastructures/conditiongroup2cell.m/","text":"conditiongroup2cell \u00b6 CONDITIONGROUP2VALUE - Convert a condition grouping matrix to a cell . [ DATA , EXPER_INDEXES ] = CONDITIONGROUP2CELL ( VALUES , EXPERIMENT_INDEXES , CONDITION_INDEXES ) Given an array of values VALUES , and another array EXPERIMENT_INDEXES that describes ( with an index number ) the experiment number that produced each entry of VALUES , and another array CONDITION_INDEXES that describes ( with an index number ) the experimental condition of each observation in VALUES , this function produces DATA - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry has a matrix of VALUES from that condition . EXPER_INDEXES - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry EXPER_INDEXES { n } ( i ) describes the experiment index number that produced the observation DATA { n } ( i ) This function is useful for preparing data in the form expected by MEDIAN_WITHIN_BETWEEN_PLOT The documentation is way longer than the code .","title":"conditiongroup2cell"},{"location":"reference/datastructures/conditiongroup2cell.m/#conditiongroup2cell","text":"CONDITIONGROUP2VALUE - Convert a condition grouping matrix to a cell . [ DATA , EXPER_INDEXES ] = CONDITIONGROUP2CELL ( VALUES , EXPERIMENT_INDEXES , CONDITION_INDEXES ) Given an array of values VALUES , and another array EXPERIMENT_INDEXES that describes ( with an index number ) the experiment number that produced each entry of VALUES , and another array CONDITION_INDEXES that describes ( with an index number ) the experimental condition of each observation in VALUES , this function produces DATA - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry has a matrix of VALUES from that condition . EXPER_INDEXES - a cell array with the number of entries equal to the number of unique values of CONDITION_INDEXES . Each entry EXPER_INDEXES { n } ( i ) describes the experiment index number that produced the observation DATA { n } ( i ) This function is useful for preparing data in the form expected by MEDIAN_WITHIN_BETWEEN_PLOT The documentation is way longer than the code .","title":"conditiongroup2cell"},{"location":"reference/datastructures/deleteallchildren.m/","text":"deleteallchildren \u00b6 DELETEALLCHILDREN DELETEALLCHILDREN ( H ) Loops over the children of H and , if they are valid handles , deletes them .","title":"deleteallchildren"},{"location":"reference/datastructures/deleteallchildren.m/#deleteallchildren","text":"DELETEALLCHILDREN DELETEALLCHILDREN ( H ) Loops over the children of H and , if they are valid handles , deletes them .","title":"deleteallchildren"},{"location":"reference/datastructures/dropnan.m/","text":"dropnan \u00b6 DROPNAN - return a vector with NaN entries dropped B = DROPNAN ( A ) Given a vector A , this function will return a vector B , which will have all non - NaN entries of A but will exclude NaN entries .","title":"dropnan"},{"location":"reference/datastructures/dropnan.m/#dropnan","text":"DROPNAN - return a vector with NaN entries dropped B = DROPNAN ( A ) Given a vector A , this function will return a vector B , which will have all non - NaN entries of A but will exclude NaN entries .","title":"dropnan"},{"location":"reference/datastructures/emptystruct.m/","text":"emptystruct \u00b6 EMPTYSTRUCT - Create a structure with given fieldnames that is empty S = EMPTYSTRUCT ( fieldname1 , fieldname2 , ...); or S = EMPTYSTRUCT ( { fieldname1, fieldname2, ... } ); Creates an empty structure with a given list of field names . This is sometimes useful for setting the fieldnames and establishing the order of the fieldnames for a structure array that will be filled later . Example : s = emptystruct ( 'field1' , 'field2' ); for i = 1 : 5 , s2 . field1 = rand ; s2 . field2 = rand ; s ( end + 1 ) = s2 ; end ; See also : VAR2STRUCT","title":"emptystruct"},{"location":"reference/datastructures/emptystruct.m/#emptystruct","text":"EMPTYSTRUCT - Create a structure with given fieldnames that is empty S = EMPTYSTRUCT ( fieldname1 , fieldname2 , ...); or S = EMPTYSTRUCT ( { fieldname1, fieldname2, ... } ); Creates an empty structure with a given list of field names . This is sometimes useful for setting the fieldnames and establishing the order of the fieldnames for a structure array that will be filled later . Example : s = emptystruct ( 'field1' , 'field2' ); for i = 1 : 5 , s2 . field1 = rand ; s2 . field2 = rand ; s ( end + 1 ) = s2 ; end ; See also : VAR2STRUCT","title":"emptystruct"},{"location":"reference/datastructures/eqemp.m/","text":"eqemp \u00b6 EQEMP B = EQEMP ( X , Y ) If both X and Y are not empty , returns X == Y . If both X and Y are empty , b = 1 . Otherwise , b = 0 ; Note that if X==Y is not defined, there will be an error. See also : EQ , EQTOT , EQLEN","title":"eqemp"},{"location":"reference/datastructures/eqemp.m/#eqemp","text":"EQEMP B = EQEMP ( X , Y ) If both X and Y are not empty , returns X == Y . If both X and Y are empty , b = 1 . Otherwise , b = 0 ; Note that if X==Y is not defined, there will be an error. See also : EQ , EQTOT , EQLEN","title":"eqemp"},{"location":"reference/datastructures/eqlen.m/","text":"eqlen \u00b6 EQLEN Returns 1 if objects to compare are equal and have same size B = EQLEN ( X , Y ) Returns 1 iff X and Y have the same length and all of the entries in X and Y are the same . Examples : EQLEN ( [ 1 ],[ 1 1 ] ) = 0 , whereas [ 1 ] == [ 1 1 ] = [ 1 1 ], EQTOT ( [ 1 ],[ 1 1 ] ) = 1 EQLEN ( [ 1 1 ],[ 1 1 ] ) = 1 EQLEN ( [],[] ) = 1 See also : EQTOT , EQEMP , EQ","title":"eqlen"},{"location":"reference/datastructures/eqlen.m/#eqlen","text":"EQLEN Returns 1 if objects to compare are equal and have same size B = EQLEN ( X , Y ) Returns 1 iff X and Y have the same length and all of the entries in X and Y are the same . Examples : EQLEN ( [ 1 ],[ 1 1 ] ) = 0 , whereas [ 1 ] == [ 1 1 ] = [ 1 1 ], EQTOT ( [ 1 ],[ 1 1 ] ) = 1 EQLEN ( [ 1 1 ],[ 1 1 ] ) = 1 EQLEN ( [],[] ) = 1 See also : EQTOT , EQEMP , EQ","title":"eqlen"},{"location":"reference/datastructures/eqtot.m/","text":"eqtot \u00b6 EQTOT B = EQTOT ( X , Y ) Returns EQEMP ( X , Y ) , except that if the result is an array of boolean values , the logical AND of all the results is returned . Example : EQTOT ( [ 4 4 4 ],[ 4 4 4 ] ) = 1 , EQTOT ( [ 1 ],[ 1 1 ] ) = 1 See also : EQEMP , EQ","title":"eqtot"},{"location":"reference/datastructures/eqtot.m/#eqtot","text":"EQTOT B = EQTOT ( X , Y ) Returns EQEMP ( X , Y ) , except that if the result is an array of boolean values , the logical AND of all the results is returned . Example : EQTOT ( [ 4 4 4 ],[ 4 4 4 ] ) = 1 , EQTOT ( [ 1 ],[ 1 1 ] ) = 1 See also : EQEMP , EQ","title":"eqtot"},{"location":"reference/datastructures/equnique.m/","text":"equnique \u00b6 EQUNIQUE - Return unique elements of an arbitrary class using EQ OUT = EQUNIQUE ( IN ) Returns the unique elements of an object array IN as a column OUT . Uses EQ to test for equality . This function is a little more general than Matlab 's UNIQUE in that it can operate on any object that implements an EQ function, not just CELL arrays. It performs no sorting, and has no requirement that elements are ordered or sortable. Example: A=struct(' A ',5,' B ' , 6 ); A = [ A A A ] ; B = equnique ( A ); % B == A ( 1 ) See also : UNIQUE","title":"equnique"},{"location":"reference/datastructures/equnique.m/#equnique","text":"EQUNIQUE - Return unique elements of an arbitrary class using EQ OUT = EQUNIQUE ( IN ) Returns the unique elements of an object array IN as a column OUT . Uses EQ to test for equality . This function is a little more general than Matlab 's UNIQUE in that it can operate on any object that implements an EQ function, not just CELL arrays. It performs no sorting, and has no requirement that elements are ordered or sortable. Example: A=struct(' A ',5,' B ' , 6 ); A = [ A A A ] ; B = equnique ( A ); % B == A ( 1 ) See also : UNIQUE","title":"equnique"},{"location":"reference/datastructures/fieldsearch.m/","text":"fieldsearch \u00b6 FIELDSEARCH - Search a structure to determine if it matches a search structure B = FIELDSEARCH ( A , SEARCHSTRUCT ) Determines if a structure A matches the search structure SEARCHSTRUCT . SEARCHSTRUCT should be a structure array with the following fields : Field : | Description ---------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields 'param1' and 'param2' . -----------------------| | 'regexp' - are there any regular expression matches between | the field value and 'param1' ? | 'exact_string' - is the field value an exact string match for 'param1' ? | 'contains_string' - is the field value a char array that contains 'param1' ? | 'exact_number' - is the field value exactly 'param1' ( same size and values ) ? | 'lessthan' - is the field value less than 'param1' ( and comparable size ) | 'lessthaneq' - is the field value less than or equal to 'param1' ( and comparable size ) | 'greaterthan' - is the field value greater than 'param1' ( and comparable size ) | 'greaterthaneq' - is the field value greater than or equal to 'param1' ( and comparable size ) | 'hasfield' - is the field present ? ( no role for 'param1' or 'param2' ) | 'hasanysubfield_contains_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that contains the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'hasanysubfield_exact_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that exactly matches the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'or' - are the searchstruct elements specified in 'param1' OR 'param2' true ? -----------------------| param1 | Search parameter 1. Meaning depends on 'operation' ( see above ) . param2 | Search parameter 2. Meaning depends on 'operation' ( see above ) . A 'comparable' size means the 2 variables can be compared . [ 1 2 3 ] >= 1 is comparable . [ 1 2 3 ] >= [ 0 0 0 ] is comparable . [ 1 2 3 ] > [ 1 2 ] is an error . Examples : A = struct ( 'a' , 'string_test' , 'b' ,[ 1 2 3 ]) b1 = fieldsearch ( A , struct ( 'field' , 'a' , 'operation' , 'contains_string' , 'param1' , 'test' , 'param2' , '' )) b2 = fieldsearch ( A , struct ( 'field' , 'b' , 'operation' , 'greaterthaneq' , 'param1' , 1 , 'param2' , '' )) B = struct ( 'values' , A ); b3 = fieldsearch ( B , struct ( 'field' , 'values' , 'operation' , 'hasanysubfield_contains_string' , 'param1' , 'a' , 'param2' , 'string_test' )) b4 = fieldsearch ( A , struct ( 'field' , '' , 'operation' , 'or' , ... 'param1' , struct ( 'field' , 'b' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ), ... 'param2' , struct ( 'field' , 'c' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ) ))","title":"fieldsearch"},{"location":"reference/datastructures/fieldsearch.m/#fieldsearch","text":"FIELDSEARCH - Search a structure to determine if it matches a search structure B = FIELDSEARCH ( A , SEARCHSTRUCT ) Determines if a structure A matches the search structure SEARCHSTRUCT . SEARCHSTRUCT should be a structure array with the following fields : Field : | Description ---------------------------------------------------------------------------- field | A character string of the field of A to examine operation | The operation to perform . This operation determines | values of fields 'param1' and 'param2' . -----------------------| | 'regexp' - are there any regular expression matches between | the field value and 'param1' ? | 'exact_string' - is the field value an exact string match for 'param1' ? | 'contains_string' - is the field value a char array that contains 'param1' ? | 'exact_number' - is the field value exactly 'param1' ( same size and values ) ? | 'lessthan' - is the field value less than 'param1' ( and comparable size ) | 'lessthaneq' - is the field value less than or equal to 'param1' ( and comparable size ) | 'greaterthan' - is the field value greater than 'param1' ( and comparable size ) | 'greaterthaneq' - is the field value greater than or equal to 'param1' ( and comparable size ) | 'hasfield' - is the field present ? ( no role for 'param1' or 'param2' ) | 'hasanysubfield_contains_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that contains the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'hasanysubfield_exact_string' - Is the field value an array of structs or cell array of structs | such that any has a field named 'param1' with a string that exactly matches the string | in 'param2' ? If 'param1' is a cell list , then 'param2' can be a cell list of contained | strings to be matched . | 'or' - are the searchstruct elements specified in 'param1' OR 'param2' true ? -----------------------| param1 | Search parameter 1. Meaning depends on 'operation' ( see above ) . param2 | Search parameter 2. Meaning depends on 'operation' ( see above ) . A 'comparable' size means the 2 variables can be compared . [ 1 2 3 ] >= 1 is comparable . [ 1 2 3 ] >= [ 0 0 0 ] is comparable . [ 1 2 3 ] > [ 1 2 ] is an error . Examples : A = struct ( 'a' , 'string_test' , 'b' ,[ 1 2 3 ]) b1 = fieldsearch ( A , struct ( 'field' , 'a' , 'operation' , 'contains_string' , 'param1' , 'test' , 'param2' , '' )) b2 = fieldsearch ( A , struct ( 'field' , 'b' , 'operation' , 'greaterthaneq' , 'param1' , 1 , 'param2' , '' )) B = struct ( 'values' , A ); b3 = fieldsearch ( B , struct ( 'field' , 'values' , 'operation' , 'hasanysubfield_contains_string' , 'param1' , 'a' , 'param2' , 'string_test' )) b4 = fieldsearch ( A , struct ( 'field' , '' , 'operation' , 'or' , ... 'param1' , struct ( 'field' , 'b' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ), ... 'param2' , struct ( 'field' , 'c' , 'operation' , 'hasfield' , 'param1' , '' , 'param2' , '' ) ))","title":"fieldsearch"},{"location":"reference/datastructures/findclosest.m/","text":"findclosest \u00b6 FINDCLOSEST - Find closest value in an array ( using absolute value ) [ I , V ] = FINDCLOSEST ( ARRAY , VALUE ) Finds the index to the closest member of ARRAY to VALUE in absolute value . It returns the index in I and the value in V . If ARRAY is empty , so are I and V . If there are multiple occurrences of VALUE within ARRAY , only the first is returned in I . See also : FIND","title":"findclosest"},{"location":"reference/datastructures/findclosest.m/#findclosest","text":"FINDCLOSEST - Find closest value in an array ( using absolute value ) [ I , V ] = FINDCLOSEST ( ARRAY , VALUE ) Finds the index to the closest member of ARRAY to VALUE in absolute value . It returns the index in I and the value in V . If ARRAY is empty , so are I and V . If there are multiple occurrences of VALUE within ARRAY , only the first is returned in I . See also : FIND","title":"findclosest"},{"location":"reference/datastructures/findclosestpoint.m/","text":"findclosestpoint \u00b6 FINDCLOSESTPOINT - Find the closest corresponding point in a list [ I , POINTC ] = FINDCLOSESTPOINT ( POINTLIST , POINT ) Finds the index and value to the closest member of POINTLIST to POINT in Euclidean distance . POINTLIST should be a list of points , with 1 row per point . It returns the index in I and the value in POINTC . If ARRAY is empointy , so are I and POINTC . If there are multiple occurances of POINT within POINTLIST , only the first is returned in I . See also : FIND , FINDCLOSEST","title":"findclosestpoint"},{"location":"reference/datastructures/findclosestpoint.m/#findclosestpoint","text":"FINDCLOSESTPOINT - Find the closest corresponding point in a list [ I , POINTC ] = FINDCLOSESTPOINT ( POINTLIST , POINT ) Finds the index and value to the closest member of POINTLIST to POINT in Euclidean distance . POINTLIST should be a list of points , with 1 row per point . It returns the index in I and the value in POINTC . If ARRAY is empointy , so are I and POINTC . If there are multiple occurances of POINT within POINTLIST , only the first is returned in I . See also : FIND , FINDCLOSEST","title":"findclosestpoint"},{"location":"reference/datastructures/findrowvec.m/","text":"findrowvec \u00b6 FINDROWVEC - finds the occurrence of a complete row in a matrix I = FINDROWVEC(A,B) Given a row vector B and a matrix A that has the same number of columns as B, I will be all rows such that all elements of A(i,:) equal those of B.","title":"findrowvec"},{"location":"reference/datastructures/findrowvec.m/#findrowvec","text":"FINDROWVEC - finds the occurrence of a complete row in a matrix I = FINDROWVEC(A,B) Given a row vector B and a matrix A that has the same number of columns as B, I will be all rows such that all elements of A(i,:) equal those of B.","title":"findrowvec"},{"location":"reference/datastructures/hasAllFields.m/","text":"hasAllFields \u00b6 Part of the NewStim package [ GOOD , ERRORMSG ] = HASALLFIELDS ( VARIABLE , FIELDNAMES , FIELDSIZES ) Checks to see if VARIABLE has all of the fieldnames in the cellstr FIELDNAMES and also checks to see if the values of those names match the dimensions given in the cell array FIELDSIZES . If you don 't care to analyze one dimension, pass -1 for that dimension. For example, r = struct ( 'test1' , 5 , 'test2' ,[ 6 1 ] ) ; s = struct ( 'test1' , 5 , 'test3' ,[ 6 1 ] ) ; [ g , e ] = hasAllFields ( r ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 1 , e = '' . [ g , e ] = hasAllFields ( s ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 0 , e = [ '''test2''' not present . '] If you didn 't care how many columns the test2 field of r was, then you could pass [ 1 - 1 ] instead of [ 1 2 ], or if you didn 't care what size it was at all then you could pass [-1 -1]. Note: At present, this function does not work on arrays of structs, only structs. As a work-around, pass the first element of a struct array to see if it is good.","title":"hasAllFields"},{"location":"reference/datastructures/hasAllFields.m/#hasallfields","text":"Part of the NewStim package [ GOOD , ERRORMSG ] = HASALLFIELDS ( VARIABLE , FIELDNAMES , FIELDSIZES ) Checks to see if VARIABLE has all of the fieldnames in the cellstr FIELDNAMES and also checks to see if the values of those names match the dimensions given in the cell array FIELDSIZES . If you don 't care to analyze one dimension, pass -1 for that dimension. For example, r = struct ( 'test1' , 5 , 'test2' ,[ 6 1 ] ) ; s = struct ( 'test1' , 5 , 'test3' ,[ 6 1 ] ) ; [ g , e ] = hasAllFields ( r ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 1 , e = '' . [ g , e ] = hasAllFields ( s ,{ 'test1' , 'test2' },{[ 1 1 ],[ 1 2 ]} ) gives g = 0 , e = [ '''test2''' not present . '] If you didn 't care how many columns the test2 field of r was, then you could pass [ 1 - 1 ] instead of [ 1 2 ], or if you didn 't care what size it was at all then you could pass [-1 -1]. Note: At present, this function does not work on arrays of structs, only structs. As a work-around, pass the first element of a struct array to see if it is good.","title":"hasAllFields"},{"location":"reference/datastructures/hashmatlabvariable.m/","text":"hashmatlabvariable \u00b6 HASHMATLABVARIABLE - create a hashed version of a Matlab variable in memory H = HASHMATLABVARIABLE ( D ) Creates a hashed value based on the binary data in the variable D . Depending upon the algorithm , the output H may vary ( see below ) . This function can be modified by name / value pairs : Parameter ( default ) | Description ------------------------------------------------------------- algorithm ( 'DataHash/MD5' ) | Algorithm to be used , a string : | 'DataHash/MD5' : | Uses the third party tool DataHash , | to obtain the MD5 checksum of | getByteStreamFromArray ( D ) . | Returns a hexidecimal string . | 'pm_hash/crc' : | Uses the Matlab function PM_HASH . | Returns a 32 bit integer ( uint32 ) . | Requires Simulink and SimScape toolboxes . Warning : For many years , PM_HASH produced the same numbers across platforms and across versions . New versions ( Matlab 2019 a for instance ) now seems to produce PM_HASH numbers that differ from earlier versions . See https : // undocumentedmatlab . com / articles / serializing - deserializing - matlab - data for information about the undocumented function getByteStreamFromArray function , upon which the default algorithm relies . See also : DataHash Example : A = randn ( 5 , 3 , 2 ); % a random number h = hashmatlabvariable ( A ) % generate a hash , a hexidecimal string h2 = hashmatlabvariable ( A , 'algorithm' , 'pm_hash/crc' ) % require Simulink / SimScape ; returns uint32","title":"hashmatlabvariable"},{"location":"reference/datastructures/hashmatlabvariable.m/#hashmatlabvariable","text":"HASHMATLABVARIABLE - create a hashed version of a Matlab variable in memory H = HASHMATLABVARIABLE ( D ) Creates a hashed value based on the binary data in the variable D . Depending upon the algorithm , the output H may vary ( see below ) . This function can be modified by name / value pairs : Parameter ( default ) | Description ------------------------------------------------------------- algorithm ( 'DataHash/MD5' ) | Algorithm to be used , a string : | 'DataHash/MD5' : | Uses the third party tool DataHash , | to obtain the MD5 checksum of | getByteStreamFromArray ( D ) . | Returns a hexidecimal string . | 'pm_hash/crc' : | Uses the Matlab function PM_HASH . | Returns a 32 bit integer ( uint32 ) . | Requires Simulink and SimScape toolboxes . Warning : For many years , PM_HASH produced the same numbers across platforms and across versions . New versions ( Matlab 2019 a for instance ) now seems to produce PM_HASH numbers that differ from earlier versions . See https : // undocumentedmatlab . com / articles / serializing - deserializing - matlab - data for information about the undocumented function getByteStreamFromArray function , upon which the default algorithm relies . See also : DataHash Example : A = randn ( 5 , 3 , 2 ); % a random number h = hashmatlabvariable ( A ) % generate a hash , a hexidecimal string h2 = hashmatlabvariable ( A , 'algorithm' , 'pm_hash/crc' ) % require Simulink / SimScape ; returns uint32","title":"hashmatlabvariable"},{"location":"reference/datastructures/isboolean.m/","text":"isboolean \u00b6 B = ISBOOLEAN(X) Returns 1 iff X is a matrix of 0's and 1's.","title":"isboolean"},{"location":"reference/datastructures/isboolean.m/#isboolean","text":"B = ISBOOLEAN(X) Returns 1 iff X is a matrix of 0's and 1's.","title":"isboolean"},{"location":"reference/datastructures/isempty_cell.m/","text":"isempty_cell \u00b6 ISEMPTY_CELL - Returns elements of a cell variable that are empty / not empty B = ISEMPTY ( THECELL ) Returns a logical array the same size as THECELL . Each entry of the array B is 1 if the contents of the cell is empty , and 0 otherwise . Example : A = { 'test' , [] ; [] 'more text' } B = isempty_cell ( A ) B = 0 1 1 0","title":"isempty_cell"},{"location":"reference/datastructures/isempty_cell.m/#isempty_cell","text":"ISEMPTY_CELL - Returns elements of a cell variable that are empty / not empty B = ISEMPTY ( THECELL ) Returns a logical array the same size as THECELL . Each entry of the array B is 1 if the contents of the cell is empty , and 0 otherwise . Example : A = { 'test' , [] ; [] 'more text' } B = isempty_cell ( A ) B = 0 1 1 0","title":"isempty_cell"},{"location":"reference/datastructures/isfullfield.m/","text":"isfullfield \u00b6 ISFULLFIELD - is there a field ( or field and subfield ) of a structure with a given name ? [ B , VALUE ] = ISFULLFIELD ( A , FIELD ) Examines the structure A to see if A . FIELD can be evaluated . If so , B is 1 and the VALUE is returned in VALUE . Otherwise , B is 0 . If B is 0 , then VALUE is empty . See also : FIELDSEARCH Example : A = struct ( 'a' , struct ( 'sub1' , 1 , 'sub2' , 2 ), 'b' , 5 ); [ b , value ] = isfullfield ( A , 'a.sub1' ) % returns b == 1 and value == 1 [ b2 , value2 ] = isfullfield ( A , 'a.sub3' ) % returns b == 0 and value == []","title":"isfullfield"},{"location":"reference/datastructures/isfullfield.m/#isfullfield","text":"ISFULLFIELD - is there a field ( or field and subfield ) of a structure with a given name ? [ B , VALUE ] = ISFULLFIELD ( A , FIELD ) Examines the structure A to see if A . FIELD can be evaluated . If so , B is 1 and the VALUE is returned in VALUE . Otherwise , B is 0 . If B is 0 , then VALUE is empty . See also : FIELDSEARCH Example : A = struct ( 'a' , struct ( 'sub1' , 1 , 'sub2' , 2 ), 'b' , 5 ); [ b , value ] = isfullfield ( A , 'a.sub1' ) % returns b == 1 and value == 1 [ b2 , value2 ] = isfullfield ( A , 'a.sub3' ) % returns b == 0 and value == []","title":"isfullfield"},{"location":"reference/datastructures/isint.m/","text":"isint \u00b6 B = ISINT(X) B = 1 iff X is a matrix of integers.","title":"isint"},{"location":"reference/datastructures/isint.m/#isint","text":"B = ISINT(X) B = 1 iff X is a matrix of integers.","title":"isint"},{"location":"reference/datastructures/islikevarname.m/","text":"islikevarname \u00b6 ISLIKEVARNAME - Is a string like a Matlab variable name ( begin with letter ) ? [ B , ERRORMSG ] = ISLIKEVARNAME ( NAME ) Checks to see if NAME is a like a valid Matlab variable name . It must a ) begin with a letter b ) not have any whitespace Unlike real Matlab variables , NAME may be a Matlab keyword . B is 1 if NAME meets the criteria and is 0 otherwise . ERRORMSG is a text message describing the problem . See also : ISVARNAME , VALID_VARNAME","title":"islikevarname"},{"location":"reference/datastructures/islikevarname.m/#islikevarname","text":"ISLIKEVARNAME - Is a string like a Matlab variable name ( begin with letter ) ? [ B , ERRORMSG ] = ISLIKEVARNAME ( NAME ) Checks to see if NAME is a like a valid Matlab variable name . It must a ) begin with a letter b ) not have any whitespace Unlike real Matlab variables , NAME may be a Matlab keyword . B is 1 if NAME meets the criteria and is 0 otherwise . ERRORMSG is a text message describing the problem . See also : ISVARNAME , VALID_VARNAME","title":"islikevarname"},{"location":"reference/datastructures/ispos.m/","text":"ispos \u00b6 B = ISPOS(X) Returns 1 iff X is a matrix of positive numbers.","title":"ispos"},{"location":"reference/datastructures/ispos.m/#ispos","text":"B = ISPOS(X) Returns 1 iff X is a matrix of positive numbers.","title":"ispos"},{"location":"reference/datastructures/isunix_sv.m/","text":"isunix_sv \u00b6 ISUNIX_SV - Returns true if we are running a Unix system If Matlab version is greater than 5 , returns ISUNIX . Else , returns ISUNIX is computer is not a PC or Mac2 .","title":"isunix_sv"},{"location":"reference/datastructures/isunix_sv.m/#isunix_sv","text":"ISUNIX_SV - Returns true if we are running a Unix system If Matlab version is greater than 5 , returns ISUNIX . Else , returns ISUNIX is computer is not a PC or Mac2 .","title":"isunix_sv"},{"location":"reference/datastructures/jsonencodenan.m/","text":"jsonencodenan \u00b6 JSONENCODENAN - encode a JSON object allowing Nan / Infinity T = JSONENCODENAN ( OBJ ) Encodes the Matlab variable OBJ into a JSON object in a manner that allows the use of NaN and - Inf and Inf . JSONENCODE is called with 1 argument or 2 ( Matlab 2018 b ) to ensure these numbers are allowed . See also : JSONENCODE","title":"jsonencodenan"},{"location":"reference/datastructures/jsonencodenan.m/#jsonencodenan","text":"JSONENCODENAN - encode a JSON object allowing Nan / Infinity T = JSONENCODENAN ( OBJ ) Encodes the Matlab variable OBJ into a JSON object in a manner that allows the use of NaN and - Inf and Inf . JSONENCODE is called with 1 argument or 2 ( Matlab 2018 b ) to ensure these numbers are allowed . See also : JSONENCODE","title":"jsonencodenan"},{"location":"reference/datastructures/listofvars.m/","text":"listofvars \u00b6 Part of the NewStim package VARLIST = LISTOFVARS ( CLASSNAME ) Returns a list of variables in the main workspace that are of type CLASSNAME . CLASSNAME should be a string like 'double' or 'stimulus' . 'ans' is never returned in this list . See also : LIST Questions to vanhoosr @ brandeis . edu","title":"listofvars"},{"location":"reference/datastructures/listofvars.m/#listofvars","text":"Part of the NewStim package VARLIST = LISTOFVARS ( CLASSNAME ) Returns a list of variables in the main workspace that are of type CLASSNAME . CLASSNAME should be a string like 'double' or 'stimulus' . 'ans' is never returned in this list . See also : LIST Questions to vanhoosr @ brandeis . edu","title":"listofvars"},{"location":"reference/datastructures/matrow2cell.m/","text":"matrow2cell \u00b6 MATROW2CELL - Convert a matrix to a cell array with each row as a cell B = MATROW2CELL ( A ) Given a matrix A , a cell array B is created such that the entries of B { i } are the ith rows of A . If A is a cell array , then no action is taken and B = A . One might want to use this when using JSONDECODE , when regularly - sized items might be returned as a matrix instead of the more general cell array .","title":"matrow2cell"},{"location":"reference/datastructures/matrow2cell.m/#matrow2cell","text":"MATROW2CELL - Convert a matrix to a cell array with each row as a cell B = MATROW2CELL ( A ) Given a matrix A , a cell array B is created such that the entries of B { i } are the ith rows of A . If A is a cell array , then no action is taken and B = A . One might want to use this when using JSONDECODE , when regularly - sized items might be returned as a matrix instead of the more general cell array .","title":"matrow2cell"},{"location":"reference/datastructures/mlstr2var.m/","text":"mlstr2var \u00b6 MLSTR2VAR - creates a Matlab variable from markup language strings ( STRUCT2MLSTR , CELL2MLSTR ) V = MLSTR2VAR ( MLSTRING ) Given a markup language string representation of Matlab structures or cells , this function produces a Matlab variable v . Matlab STRUCT types are specified in the markup language in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > and Matlab CELL types are specified in the markup language in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > Consider also : JSONENCODE , JSONDECODE See also : CELL2MLSTR , STRUCT2MLSTR , JSONDECODE","title":"mlstr2var"},{"location":"reference/datastructures/mlstr2var.m/#mlstr2var","text":"MLSTR2VAR - creates a Matlab variable from markup language strings ( STRUCT2MLSTR , CELL2MLSTR ) V = MLSTR2VAR ( MLSTRING ) Given a markup language string representation of Matlab structures or cells , this function produces a Matlab variable v . Matlab STRUCT types are specified in the markup language in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > and Matlab CELL types are specified in the markup language in the following way : < CELL size = [ X Y Z ... ] data = < value1 > < value2 > / CELL > Consider also : JSONENCODE , JSONDECODE See also : CELL2MLSTR , STRUCT2MLSTR , JSONDECODE","title":"mlstr2var"},{"location":"reference/datastructures/namevaluepair.m/","text":"namevaluepair \u00b6 NAMEVALUEPAIR - Describes the use of name / value pairs in Matlab functions In Matlab , functions often accept extra arguments in the form of NAME / VALUE pairs . For example , a function fun might accept two input arguments , and extra name / value pairs that alter the default behavior of the function . out = fun ( a , b ) ; % normal behavior out = fun ( a , b , 'gain' , 5 ) % set a parameter gain to 5 out = fun ( a , b , 'gain' , 5 , 'offset' , 3 ) % set additional parameters This capability is only available in functions that are built to accept name / value pairs ( it is not automatically available in any function ) . See also : STRUCT2NAMEVALUEAPAIR , VARARGIN , ASSIGN","title":"namevaluepair"},{"location":"reference/datastructures/namevaluepair.m/#namevaluepair","text":"NAMEVALUEPAIR - Describes the use of name / value pairs in Matlab functions In Matlab , functions often accept extra arguments in the form of NAME / VALUE pairs . For example , a function fun might accept two input arguments , and extra name / value pairs that alter the default behavior of the function . out = fun ( a , b ) ; % normal behavior out = fun ( a , b , 'gain' , 5 ) % set a parameter gain to 5 out = fun ( a , b , 'gain' , 5 , 'offset' , 3 ) % set additional parameters This capability is only available in functions that are built to accept name / value pairs ( it is not automatically available in any function ) . See also : STRUCT2NAMEVALUEAPAIR , VARARGIN , ASSIGN","title":"namevaluepair"},{"location":"reference/datastructures/nanstderr.m/","text":"nanstderr \u00b6 STDERR - Standard error of a vector of data SE = STDERR(DATA); Computes standard error of each column, ignoring NaN's. SE = nanstd(data)./sqrt(sum(1-[isnan(data)])); See also: STD, NANSTD","title":"nanstderr"},{"location":"reference/datastructures/nanstderr.m/#nanstderr","text":"STDERR - Standard error of a vector of data SE = STDERR(DATA); Computes standard error of each column, ignoring NaN's. SE = nanstd(data)./sqrt(sum(1-[isnan(data)])); See also: STD, NANSTD","title":"nanstderr"},{"location":"reference/datastructures/numornan.m/","text":"numornan \u00b6 NUMORNAN - Return a number , or a NaN if the number is empty N_OUT = NUMORNAN ( N_IN ) or N_OUT = NUMORNAN ( N_IN , DIMS ) If N_IN is not empty , then N_OUT is set to N_IN . If N_IN is empty , then a NaN is returned . If the optional input argument DIMS is provided , then the NaN matrix has dimension DIMS . If N_IN is smaller than DIMS , then N_OUT is padded to be filled with NaN .","title":"numornan"},{"location":"reference/datastructures/numornan.m/#numornan","text":"NUMORNAN - Return a number , or a NaN if the number is empty N_OUT = NUMORNAN ( N_IN ) or N_OUT = NUMORNAN ( N_IN , DIMS ) If N_IN is not empty , then N_OUT is set to N_IN . If N_IN is empty , then a NaN is returned . If the optional input argument DIMS is provided , then the NaN matrix has dimension DIMS . If N_IN is smaller than DIMS , then N_OUT is padded to be filled with NaN .","title":"numornan"},{"location":"reference/datastructures/onoff.m/","text":"onoff \u00b6 ONOFF - Returns 'on' or 'off' STR = ONOFF ( B ) If B <= 0 , STR = 'off' , else , STR = 'on'","title":"onoff"},{"location":"reference/datastructures/onoff.m/#onoff","text":"ONOFF - Returns 'on' or 'off' STR = ONOFF ( B ) If B <= 0 , STR = 'off' , else , STR = 'on'","title":"onoff"},{"location":"reference/datastructures/prettyjson.m/","text":"prettyjson \u00b6 PRETTYJSON - use Java JSONObject to produce pretty JSON output PRETTY = PRETTYJSON ( JSON_ENCODED_OBJECT , [ SPACESTOINDENTEACHLEVEL ] ) Given a JSON - encoded object ( that is , a JSON string ), this function produces a 'pretty' JSON output that is human - readable ( one line per item , for example ). SPACESTOINDENTEACHLEVEL indicates how many spaces should be used to indent each level . If it is not provided , 2 is used . This function calls JSONObject from Java , and requires the org . json . * Java classes . This library and its addition to the Java path is provided in http : // github . com / VH - Lab / vhlab - thirdparty - matlab . If you have this library you should be all set . Example : mystruct = struct ( 'a' , 5 , 'b' , 3 , 'c' , 1 ); j = jsonencodenan ( mystruct ) % produces single line j_pretty = prettyjson ( j ) % produces multiple lines % or a single line : j_pretty = prettyjson ( jsonencodenan ( mystruct ))","title":"prettyjson"},{"location":"reference/datastructures/prettyjson.m/#prettyjson","text":"PRETTYJSON - use Java JSONObject to produce pretty JSON output PRETTY = PRETTYJSON ( JSON_ENCODED_OBJECT , [ SPACESTOINDENTEACHLEVEL ] ) Given a JSON - encoded object ( that is , a JSON string ), this function produces a 'pretty' JSON output that is human - readable ( one line per item , for example ). SPACESTOINDENTEACHLEVEL indicates how many spaces should be used to indent each level . If it is not provided , 2 is used . This function calls JSONObject from Java , and requires the org . json . * Java classes . This library and its addition to the Java path is provided in http : // github . com / VH - Lab / vhlab - thirdparty - matlab . If you have this library you should be all set . Example : mystruct = struct ( 'a' , 5 , 'b' , 3 , 'c' , 1 ); j = jsonencodenan ( mystruct ) % produces single line j_pretty = prettyjson ( j ) % produces multiple lines % or a single line : j_pretty = prettyjson ( jsonencodenan ( mystruct ))","title":"prettyjson"},{"location":"reference/datastructures/rowvec.m/","text":"rowvec \u00b6 ROWVEC - return a matrix reshaped as a row vector Y = ROWVEC ( X ) Returns the contents of the matrix X as a row vector Y that is Mx1 , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . ROWVEC is equivalent to Y = X ( : ) '; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: COLVEC Example: A = rand(5,5) Y = rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"rowvec"},{"location":"reference/datastructures/rowvec.m/#rowvec","text":"ROWVEC - return a matrix reshaped as a row vector Y = ROWVEC ( X ) Returns the contents of the matrix X as a row vector Y that is Mx1 , where M is the product of all the sizes of the dimensions of X ( M = PROD ( SIZE ( X ))) . ROWVEC is equivalent to Y = X ( : ) '; This function is useful for addressing all of the elements of a matrix as a vector when X is a subset of another matrix. See also: COLVEC Example: A = rand(5,5) Y = rowvec(A(1:3,1:2)) % returns points in rows 1:3, columns 1:2","title":"rowvec"},{"location":"reference/datastructures/savevar.m/","text":"savevar \u00b6 SAVEVAR - Saves variables in a Matlab file SAVEVAR ( FILENAME , VARIABLE , VARIABLENAME , OPTIONSTRING1 , OPTIONSTRING2 , ... ) Saves the variable VARIABLE to the file FILENAME . The name of the variable in the file will be VARIABLENAME . OPTIONS is a string of options passed to the MATLAB SAVE command . For example : SAVEVAR ( 'myfile' , 5 , 'myvariable' , '-append' , '-mat' ); See also : SAVE","title":"savevar"},{"location":"reference/datastructures/savevar.m/#savevar","text":"SAVEVAR - Saves variables in a Matlab file SAVEVAR ( FILENAME , VARIABLE , VARIABLENAME , OPTIONSTRING1 , OPTIONSTRING2 , ... ) Saves the variable VARIABLE to the file FILENAME . The name of the variable in the file will be VARIABLENAME . OPTIONS is a string of options passed to the MATLAB SAVE command . For example : SAVEVAR ( 'myfile' , 5 , 'myvariable' , '-append' , '-mat' ); See also : SAVE","title":"savevar"},{"location":"reference/datastructures/simpletable.m/","text":"simpletable \u00b6 SIMPLETABLE - Simple X / Y numeric table [ NEWSIMPLETABLE , NEWCATEGORYLABELS ] = SIMPLETABLE ( OLDSIMPLETABLE , ... OLDCATEGORIES , THIS_ENTRY , THIS_CATEGORIES ) Builds a simple row - based table of data values for specified numerical categories . The function takes an existing table ( OLDSIMPLETABLE ) with numeric categories listed in OLDCATEGORIES , and adds a row THIS_ENTRY with a possibly different set of numeric categories THIS_CATEGORIES . If the catogories being added do not exist , then these entries are added to NEWCATEGORYLABELS and the preceding entries are filled with NaN for that category . At the end of the function , the table is sorted in ascending order by NEWCATEGORYLABELS . Notes : OLDCATEGORIES and THIS_CATEGORIES must each contain no repeats ( the same number can appear in both variables , but cannot appear twice in either ) . Example : oldcategories = [ 0 : pi / 2 : 2 * pi ]; oldsimpletable = [ 1 : 5 ]; X2 = [ 0 : pi / 4 : 2 * pi ]; Y2 = [ 1 : 0.5 : 5 ] + 5 ; [ newtable , newcats ] = simpletable ( oldsimpletable , oldcategories , Y2 , X2 ), See also : TABLE","title":"simpletable"},{"location":"reference/datastructures/simpletable.m/#simpletable","text":"SIMPLETABLE - Simple X / Y numeric table [ NEWSIMPLETABLE , NEWCATEGORYLABELS ] = SIMPLETABLE ( OLDSIMPLETABLE , ... OLDCATEGORIES , THIS_ENTRY , THIS_CATEGORIES ) Builds a simple row - based table of data values for specified numerical categories . The function takes an existing table ( OLDSIMPLETABLE ) with numeric categories listed in OLDCATEGORIES , and adds a row THIS_ENTRY with a possibly different set of numeric categories THIS_CATEGORIES . If the catogories being added do not exist , then these entries are added to NEWCATEGORYLABELS and the preceding entries are filled with NaN for that category . At the end of the function , the table is sorted in ascending order by NEWCATEGORYLABELS . Notes : OLDCATEGORIES and THIS_CATEGORIES must each contain no repeats ( the same number can appear in both variables , but cannot appear twice in either ) . Example : oldcategories = [ 0 : pi / 2 : 2 * pi ]; oldsimpletable = [ 1 : 5 ]; X2 = [ 0 : pi / 4 : 2 * pi ]; Y2 = [ 1 : 0.5 : 5 ] + 5 ; [ newtable , newcats ] = simpletable ( oldsimpletable , oldcategories , Y2 , X2 ), See also : TABLE","title":"simpletable"},{"location":"reference/datastructures/sizeeq.m/","text":"sizeeq \u00b6 SIZEEQ Determines if size of two variables is same B = SIZEEQ ( X , Y ) Returns 1 if the size of X and Y are equal . Otherwise , returns 0.","title":"sizeeq"},{"location":"reference/datastructures/sizeeq.m/#sizeeq","text":"SIZEEQ Determines if size of two variables is same B = SIZEEQ ( X , Y ) Returns 1 if the size of X and Y are equal . Otherwise , returns 0.","title":"sizeeq"},{"location":"reference/datastructures/sortorder.m/","text":"sortorder \u00b6 SORTORDER - return the order of the sorted data I = SORTORDER ( [ inputs ] ) Returns the index order I of the call [ B,I ] = SORT ( [ inputs ] ) See also : SORT Example : A = [ 3 2 1 ] ; I = SORTORDER ( A ) % returns 3 2 1 A ( I ) % shows sorted values","title":"sortorder"},{"location":"reference/datastructures/sortorder.m/#sortorder","text":"SORTORDER - return the order of the sorted data I = SORTORDER ( [ inputs ] ) Returns the index order I of the call [ B,I ] = SORT ( [ inputs ] ) See also : SORT Example : A = [ 3 2 1 ] ; I = SORTORDER ( A ) % returns 3 2 1 A ( I ) % shows sorted values","title":"sortorder"},{"location":"reference/datastructures/sortstruct.m/","text":"sortstruct \u00b6 SORTSTRUCT - sort structure by fieldname values [ S_sorted , indexes ] = SORTSTRUCT ( S , 'sign_fieldname1' , 'sign_fieldname2' , ... ) Sorts the structure S according to the values in successive fieldnames . Given a structure S , S_sorted is the sorted version according to the values in fieldname1 , fieldname2 , etc . sign should either be + 1 or - 1 depending upon if the data are to be sorted in ascending or descending order . Example : s = struct ( 'test1' ,[ 1 ], 'test2' , 5 ); s ( 2 ) = struct ( 'test1' ,[ 1 ], 'test2' , 4 ); [ S_sorted , indexes ] = sortstruct ( s , '+test1' , '+test2' ); % indexes == [2;1] and S_sorted = s([2;1])","title":"sortstruct"},{"location":"reference/datastructures/sortstruct.m/#sortstruct","text":"SORTSTRUCT - sort structure by fieldname values [ S_sorted , indexes ] = SORTSTRUCT ( S , 'sign_fieldname1' , 'sign_fieldname2' , ... ) Sorts the structure S according to the values in successive fieldnames . Given a structure S , S_sorted is the sorted version according to the values in fieldname1 , fieldname2 , etc . sign should either be + 1 or - 1 depending upon if the data are to be sorted in ascending or descending order . Example : s = struct ( 'test1' ,[ 1 ], 'test2' , 5 ); s ( 2 ) = struct ( 'test1' ,[ 1 ], 'test2' , 4 ); [ S_sorted , indexes ] = sortstruct ( s , '+test1' , '+test2' ); % indexes == [2;1] and S_sorted = s([2;1])","title":"sortstruct"},{"location":"reference/datastructures/str2nume.m/","text":"str2nume \u00b6 STR2NUME - Str2num that returns empty given an empty input N = STR2NUME ( STR ) Returns [] if STR is empty , otherwise returns STR2NUM ( STR ) .","title":"str2nume"},{"location":"reference/datastructures/str2nume.m/#str2nume","text":"STR2NUME - Str2num that returns empty given an empty input N = STR2NUME ( STR ) Returns [] if STR is empty , otherwise returns STR2NUM ( STR ) .","title":"str2nume"},{"location":"reference/datastructures/streq.m/","text":"streq \u00b6 STREQ ( S1 , S2 [, WC ] ) Returns 1 if S1 and S2 are equal , and 0 otherwise . The wildcard '*' may be used in S2 , and then STREQ will return 1 if S1 matches the wildcard criteria . If the user wants to use a different wildcard character other than '*' , a different wildcard character can be given in WC .","title":"streq"},{"location":"reference/datastructures/streq.m/#streq","text":"STREQ ( S1 , S2 [, WC ] ) Returns 1 if S1 and S2 are equal , and 0 otherwise . The wildcard '*' may be used in S2 , and then STREQ will return 1 if S1 matches the wildcard criteria . If the user wants to use a different wildcard character other than '*' , a different wildcard character can be given in WC .","title":"streq"},{"location":"reference/datastructures/string2cell.m/","text":"string2cell \u00b6 STRING2CELL = Convert a delimited list to a cell array of strings C = STRING2CELL ( STRING , SEPARATOR ) Converts a separator-delimited string list to a cell array of strings . STRING should be a separator-delimited list , such as 't00001, t00002, t00003' . SEPARATOR is the character that separates the items , such as ',' or ';' . Additional parameters can be provided as name / value pairs : STRING2CELL ( STRING , SEPARATOR , 'NAME' , VALUE ) Parameter name : | Description : -------------------------- | ----------------------------------------- TRIMWS ( 0 / 1 , default 1 ) | Should we trim whitespace for these elements ? Example : string = 't00001, t00002, t00003, t00004' ; c = string2cell ( string , ',' ); c % display c , equals { 't00001','t00002','t00003','t00004' } See also : DLMREAD , TDFREAD","title":"string2cell"},{"location":"reference/datastructures/string2cell.m/#string2cell","text":"STRING2CELL = Convert a delimited list to a cell array of strings C = STRING2CELL ( STRING , SEPARATOR ) Converts a separator-delimited string list to a cell array of strings . STRING should be a separator-delimited list , such as 't00001, t00002, t00003' . SEPARATOR is the character that separates the items , such as ',' or ';' . Additional parameters can be provided as name / value pairs : STRING2CELL ( STRING , SEPARATOR , 'NAME' , VALUE ) Parameter name : | Description : -------------------------- | ----------------------------------------- TRIMWS ( 0 / 1 , default 1 ) | Should we trim whitespace for these elements ? Example : string = 't00001, t00002, t00003, t00004' ; c = string2cell ( string , ',' ); c % display c , equals { 't00001','t00002','t00003','t00004' } See also : DLMREAD , TDFREAD","title":"string2cell"},{"location":"reference/datastructures/struct2mlstr.m/","text":"struct2mlstr \u00b6 STRUCT2MLSTR - Create a text string to fully characterize a structure STR = STRUCT2MLSTR ( THESTRUCT ) Produces a string representation of a structure that can be passed to an external program to fully encapsulate the structure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using CELL2MLSTR . Any other objects are written using the function DISP . The structure is written in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > where X , Y , Z are the dimension of the structure array fieldname1 , fieldname2 , etc . are the fieldnames of the structure , and data contains the data for each struct entry , inside < and >. Within each data , values for each field separated with < and > characters . / STRUCT ends the structure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = STRUCT2MLSTR ( THESTRUCT , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - structures ( default 5 ) Consider also : JSONENCODE , JSONDECODE See also : MLSTR2VAR , CELL2MLSTR , STRUCT2STR , JSONENCODE","title":"struct2mlstr"},{"location":"reference/datastructures/struct2mlstr.m/#struct2mlstr","text":"STRUCT2MLSTR - Create a text string to fully characterize a structure STR = STRUCT2MLSTR ( THESTRUCT ) Produces a string representation of a structure that can be passed to an external program to fully encapsulate the structure . Character strings are written directly , integers are written using MAT2STR , numbers are written using MAT2STR , cells are written using CELL2MLSTR . Any other objects are written using the function DISP . The structure is written in the following way : < STRUCT size = [ X Y Z ... ] fields = { 'fieldname1' , 'fieldname2' , ... } data = << value1 >< value2 >...< valuen >> << value1 >< value2 >...< valuen >> / STRUCT > where X , Y , Z are the dimension of the structure array fieldname1 , fieldname2 , etc . are the fieldnames of the structure , and data contains the data for each struct entry , inside < and >. Within each data , values for each field separated with < and > characters . / STRUCT ends the structure . Newline characters are produced after 'data=' and after each variable entry ( ' \\n ' ) . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = STRUCT2MLSTR ( THESTRUCT , 'NAME1' , VALUE1 , ... ) Parameters : | Description --------------------------------------------------------------- precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) varname | Variable name , entered before data = line as name = indent | Indentation ( default 0 ) indentshift | How much to indent sub - structures ( default 5 ) Consider also : JSONENCODE , JSONDECODE See also : MLSTR2VAR , CELL2MLSTR , STRUCT2STR , JSONENCODE","title":"struct2mlstr"},{"location":"reference/datastructures/struct2namevaluepair.m/","text":"struct2namevaluepair \u00b6 STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name / value pairs NV = STRUCT2NAMEVALUEPAIR ( THESTRUCT ) Convert a structure to a cell array of name / value pairs . This is useful for passing name / value pairs to functions that accept them as extra arguments . Each field name of the structure is used as the 'name' , and the value is used as the 'value' . Example : myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also : VARARGIN , ASSIGN , STRUCT","title":"struct2namevaluepair"},{"location":"reference/datastructures/struct2namevaluepair.m/#struct2namevaluepair","text":"STRUCT2NAMEVALUEPAIR - Convert a structure to a cell array of name / value pairs NV = STRUCT2NAMEVALUEPAIR ( THESTRUCT ) Convert a structure to a cell array of name / value pairs . This is useful for passing name / value pairs to functions that accept them as extra arguments . Each field name of the structure is used as the 'name' , and the value is used as the 'value' . Example : myStruct . param1 = 1 ; myStruct . param2 = 2 ; nv = struct2namevaluepair ( myStruct ) % nv = {'param1', 1, 'param2', 2} See also : VARARGIN , ASSIGN , STRUCT","title":"struct2namevaluepair"},{"location":"reference/datastructures/struct2str.m/","text":"struct2str \u00b6 STRUCT2STR - Create a short text string to summarize a structure STR = STRUCT2STR ( THESTRUCT ) Produces a string representation of a structure . Character strings are written directly , integers are written using INT2STR , and numbers are written using NUM2STR . Any other objects are written using the function DISP . If a single structure element is passed as THESTRUCT , then a single string is returned . If an array or matrix of structure elements is passed , then a cell array / matrix of strings is returned . One can force the routine to return a cell array in the case of a a single structure with the 'forcecell' option below . This is useful for displaying a structure in a listbox or for writing the structure to a file as text . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = STRUCT2STR ( THESTRUCT , 'NAME1' , VALUE1 ,... ) Parameters : | Description --------------------------------------------------------------- separator | The separator between fields ( default ' : ' ) forcecell | Should STR be a cell array of strings even if | a single structure element is used as THESTRUCT | ( Default 0 , can be 1 ) headerrow | Should we have a header row ? ( Default 0 , can be 1 ) | In this case STR is always returned as a | cell array of strings precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) See also : STRUCT2CHAR , CHAR2STRUCT , MLSTR2VAR","title":"struct2str"},{"location":"reference/datastructures/struct2str.m/#struct2str","text":"STRUCT2STR - Create a short text string to summarize a structure STR = STRUCT2STR ( THESTRUCT ) Produces a string representation of a structure . Character strings are written directly , integers are written using INT2STR , and numbers are written using NUM2STR . Any other objects are written using the function DISP . If a single structure element is passed as THESTRUCT , then a single string is returned . If an array or matrix of structure elements is passed , then a cell array / matrix of strings is returned . One can force the routine to return a cell array in the case of a a single structure with the 'forcecell' option below . This is useful for displaying a structure in a listbox or for writing the structure to a file as text . The default parameters may be overridden by passing NAME / VALUE pairs as additional arguments , as in : STR = STRUCT2STR ( THESTRUCT , 'NAME1' , VALUE1 ,... ) Parameters : | Description --------------------------------------------------------------- separator | The separator between fields ( default ' : ' ) forcecell | Should STR be a cell array of strings even if | a single structure element is used as THESTRUCT | ( Default 0 , can be 1 ) headerrow | Should we have a header row ? ( Default 0 , can be 1 ) | In this case STR is always returned as a | cell array of strings precision | Precision we should use for mat2str ( default 15 ) | ( this is the number of digits we should use ) See also : STRUCT2CHAR , CHAR2STRUCT , MLSTR2VAR","title":"struct2str"},{"location":"reference/datastructures/struct2tabstr.m/","text":"struct2tabstr \u00b6 STRUCT2TABSTR - convert a struct to a tab - delimited string S = STRUCT2TABSTR ( A ) Given a Matlab STRUCT variable A , this function creates a tab - delimited string with the values of the structure . Values are read from the FIELDNAMES of the structure in turn . If they are of type 'char' , then they are added to the string S directly . Otherwise , they are converted using MAT2STR . See also : LOADSTRUCTARRAY , SAVESTRUCTARRAY , TABSTR2STRUCT Example : a . fielda = 5 ; a . fieldb = 'my string data' ; s = struct2tabstr ( a ) % convert back a2 = tabstr2struct ( s , { 'fielda' , 'fieldb' } )","title":"struct2tabstr"},{"location":"reference/datastructures/struct2tabstr.m/#struct2tabstr","text":"STRUCT2TABSTR - convert a struct to a tab - delimited string S = STRUCT2TABSTR ( A ) Given a Matlab STRUCT variable A , this function creates a tab - delimited string with the values of the structure . Values are read from the FIELDNAMES of the structure in turn . If they are of type 'char' , then they are added to the string S directly . Otherwise , they are converted using MAT2STR . See also : LOADSTRUCTARRAY , SAVESTRUCTARRAY , TABSTR2STRUCT Example : a . fielda = 5 ; a . fieldb = 'my string data' ; s = struct2tabstr ( a ) % convert back a2 = tabstr2struct ( s , { 'fielda' , 'fieldb' } )","title":"struct2tabstr"},{"location":"reference/datastructures/struct2var.m/","text":"struct2var \u00b6 STRUCT2VAR - Assign variables to the fieldnames and data values of a structure STRUCT2VAR ( S ) Assigns variables to have the name of all the fieldnames of structure S with values equal to the corresponding value in structure S . If there are already variables with the given name , they are overwritten . Example : s . a = 5 ; s . b = 6 ; struct2var ( s ); a % now a = 5 b % now b = 6 See also : VAR2STRUCT","title":"struct2var"},{"location":"reference/datastructures/struct2var.m/#struct2var","text":"STRUCT2VAR - Assign variables to the fieldnames and data values of a structure STRUCT2VAR ( S ) Assigns variables to have the name of all the fieldnames of structure S with values equal to the corresponding value in structure S . If there are already variables with the given name , they are overwritten . Example : s . a = 5 ; s . b = 6 ; struct2var ( s ); a % now a = 5 b % now b = 6 See also : VAR2STRUCT","title":"struct2var"},{"location":"reference/datastructures/structdiff.m/","text":"structdiff \u00b6 structdiff is a function. c = structdiff(a, b)","title":"structdiff"},{"location":"reference/datastructures/structdiff.m/#structdiff","text":"structdiff is a function. c = structdiff(a, b)","title":"structdiff"},{"location":"reference/datastructures/structfindfield.m/","text":"structfindfield \u00b6 STRUCTFINDFIELD - find structure entries in a cell list with a field equal to value INDEX = STRUCTFINDFIELD(CELLLISTOFSTRUCTS, FIELD, VALUE) Examines a cell list of structures CELLLISTOFSTRUCTS and returns the index values of those that contain a field FIELD with value equal to VALUE.","title":"structfindfield"},{"location":"reference/datastructures/structfindfield.m/#structfindfield","text":"STRUCTFINDFIELD - find structure entries in a cell list with a field equal to value INDEX = STRUCTFINDFIELD(CELLLISTOFSTRUCTS, FIELD, VALUE) Examines a cell list of structures CELLLISTOFSTRUCTS and returns the index values of those that contain a field FIELD with value equal to VALUE.","title":"structfindfield"},{"location":"reference/datastructures/structmerge.m/","text":"structmerge \u00b6 STRUCTMERGE - Merge struct variables into a common struct S_OUT = STRUCTMERGE ( S1 , S2 , ... ) Merges the structures S1 and S2 into a common structure S_OUT such that S_OUT has all of the fields of S1 and S2 . When S1 and S2 share the same fieldname , the value of S2 is taken . The fieldnames will be re - ordered to be in alphabetical order . The behavior of the function can be altered by passing additional arguments as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------ ErrorIfNewField ( 0 ) | ( 0 / 1 ) Is it an error if S2 contains a | field that is not present in S1 ? DoAlphabetical ( 1 ) | ( 0 / 1 ) Alphabetize the field names in the result See also : STRUCT","title":"structmerge"},{"location":"reference/datastructures/structmerge.m/#structmerge","text":"STRUCTMERGE - Merge struct variables into a common struct S_OUT = STRUCTMERGE ( S1 , S2 , ... ) Merges the structures S1 and S2 into a common structure S_OUT such that S_OUT has all of the fields of S1 and S2 . When S1 and S2 share the same fieldname , the value of S2 is taken . The fieldnames will be re - ordered to be in alphabetical order . The behavior of the function can be altered by passing additional arguments as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------ ErrorIfNewField ( 0 ) | ( 0 / 1 ) Is it an error if S2 contains a | field that is not present in S1 ? DoAlphabetical ( 1 ) | ( 0 / 1 ) Alphabetize the field names in the result See also : STRUCT","title":"structmerge"},{"location":"reference/datastructures/structwhatvaries.m/","text":"structwhatvaries \u00b6 STRUCTWHATVARIES - Identify what varies among a cell list of structure objects DESCR = STRUCTWHATVARIES ( CELLLISTOFSTRUCTURES ) Given a cell list of structures , returns a list of the fieldnames that vary in value across the cell list .","title":"structwhatvaries"},{"location":"reference/datastructures/structwhatvaries.m/#structwhatvaries","text":"STRUCTWHATVARIES - Identify what varies among a cell list of structure objects DESCR = STRUCTWHATVARIES ( CELLLISTOFSTRUCTURES ) Given a cell list of structures , returns a list of the fieldnames that vary in value across the cell list .","title":"structwhatvaries"},{"location":"reference/datastructures/tabstr2struct.m/","text":"tabstr2struct \u00b6 TABSTR2STRUCT - convert a tab-separated set of strings to a STRUCT entry A = TABSTR2STRUCT ( S , FIELDS ) Given a cell array of strings FIELDS of field names , creates a STRUCT array where the values of each field are specified in a tab-delimited string . Each string is first examined to see if it is a number ( using STR2NUM ). If so , then the value is stored as a double . Otherwise , the value is stored as a string . Exceptions : a ) If the string happens to have two '/' characters or matches the form yyyy-dd-mm , then it is assumed to be a date and is interpreted as a string . b ) If the string should happen to be correspond to a non-numeric object in Matlab , we assume the user wants to specify the string rather than an empty matlab type ( for example , STR2NUM ( 'struct' ) yields an empty structure ). See also : LOADSTRUCTARRAY , SAVESTRUCTARRAY , DLMREAD , DLMWRITE , STRUCT2TABSTR Example : s = [ '5' char ( 9 ) 'my string data' ] ; fn = { 'fielda','fieldb' } ; a = tabstr2struct ( s , fn )","title":"tabstr2struct"},{"location":"reference/datastructures/tabstr2struct.m/#tabstr2struct","text":"TABSTR2STRUCT - convert a tab-separated set of strings to a STRUCT entry A = TABSTR2STRUCT ( S , FIELDS ) Given a cell array of strings FIELDS of field names , creates a STRUCT array where the values of each field are specified in a tab-delimited string . Each string is first examined to see if it is a number ( using STR2NUM ). If so , then the value is stored as a double . Otherwise , the value is stored as a string . Exceptions : a ) If the string happens to have two '/' characters or matches the form yyyy-dd-mm , then it is assumed to be a date and is interpreted as a string . b ) If the string should happen to be correspond to a non-numeric object in Matlab , we assume the user wants to specify the string rather than an empty matlab type ( for example , STR2NUM ( 'struct' ) yields an empty structure ). See also : LOADSTRUCTARRAY , SAVESTRUCTARRAY , DLMREAD , DLMWRITE , STRUCT2TABSTR Example : s = [ '5' char ( 9 ) 'my string data' ] ; fn = { 'fielda','fieldb' } ; a = tabstr2struct ( s , fn )","title":"tabstr2struct"},{"location":"reference/datastructures/text2struct.m/","text":"text2struct \u00b6 TEXT2STRUCT - Convert a text string to a structure S = TEXT2STRUCT ( STR ) Given a full , multi-line string , converts to Matlab structures . Each line of the text string STR should have a field name , a colon ( ':' ) and values following . If the user wishes to specify a substructure , provide a '<' following the name of the substructure . Multiple structures can be specified by leaving a blank line between structure descriptions . If there is more than 1 struct to convert , then S is a cell list of all of the structures described in STR . Note : At this time , this function does not handle cell lists , which is too bad . Someone should add this . Example input : eol = sprintf ( '\\n' ); % end of line character str = [ 'type: spiketimelistel' eol ... % indicates that the field type has a value of 'spiketimelistel' 'T: 0' eol ... % indicates that the field 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the field dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' 'spiketimelistel: <' eol ... % a substructure called spiketimelistel 'spiketimelist: 0.0001' eol ... % the field in the substructure '>' eol ... % indicate end of substructure eol ] ; % blank line ends the structure ( not necessary for last structure in list ) mystruct = text2struct ( str ); The function can be modified by the addition of name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- WarnOnBadField ( 0 ) | 0 / 1 Produce a warning when a field name | that cannot be a Matlab field name | is encountered . ErrorOnBadField ( 0 ) | 0 / 1 Produce an error when a field name | that cannot be a Matlab field name | is encountered ( otherwise that entry | is ignored ) BraceLeft ( '<' ) | The left brace character BraceRight ( '>' ) | The right brace character See also : CHAR2STRUCT","title":"text2struct"},{"location":"reference/datastructures/text2struct.m/#text2struct","text":"TEXT2STRUCT - Convert a text string to a structure S = TEXT2STRUCT ( STR ) Given a full , multi-line string , converts to Matlab structures . Each line of the text string STR should have a field name , a colon ( ':' ) and values following . If the user wishes to specify a substructure , provide a '<' following the name of the substructure . Multiple structures can be specified by leaving a blank line between structure descriptions . If there is more than 1 struct to convert , then S is a cell list of all of the structures described in STR . Note : At this time , this function does not handle cell lists , which is too bad . Someone should add this . Example input : eol = sprintf ( '\\n' ); % end of line character str = [ 'type: spiketimelistel' eol ... % indicates that the field type has a value of 'spiketimelistel' 'T: 0' eol ... % indicates that the field 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the field dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' 'spiketimelistel: <' eol ... % a substructure called spiketimelistel 'spiketimelist: 0.0001' eol ... % the field in the substructure '>' eol ... % indicate end of substructure eol ] ; % blank line ends the structure ( not necessary for last structure in list ) mystruct = text2struct ( str ); The function can be modified by the addition of name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- WarnOnBadField ( 0 ) | 0 / 1 Produce a warning when a field name | that cannot be a Matlab field name | is encountered . ErrorOnBadField ( 0 ) | 0 / 1 Produce an error when a field name | that cannot be a Matlab field name | is encountered ( otherwise that entry | is ignored ) BraceLeft ( '<' ) | The left brace character BraceRight ( '>' ) | The right brace character See also : CHAR2STRUCT","title":"text2struct"},{"location":"reference/datastructures/uniq.m/","text":"uniq \u00b6 uniq - find the unique elements in a vector y = uniq (x) returns a vector shorter than x with all sequential occurances but the first of the same element eliminated. cf. the unix uniq command. Also see SORT.","title":"uniq"},{"location":"reference/datastructures/uniq.m/#uniq","text":"uniq - find the unique elements in a vector y = uniq (x) returns a vector shorter than x with all sequential occurances but the first of the same element eliminated. cf. the unix uniq command. Also see SORT.","title":"uniq"},{"location":"reference/datastructures/valid_varname.m/","text":"valid_varname \u00b6 Part of the NewStim package B = VALIDVARNAME ( VARNAME ) Returns 1 if VARNAME is a valid variable name in Matlab , or returns 0 otherwise . Note : There is now a Matlab function that does this : ISVARNAME See also : ISVARNAME , MATLAB . LANG . MAKEVALIDNAME","title":"valid_varname"},{"location":"reference/datastructures/valid_varname.m/#valid_varname","text":"Part of the NewStim package B = VALIDVARNAME ( VARNAME ) Returns 1 if VARNAME is a valid variable name in Matlab , or returns 0 otherwise . Note : There is now a Matlab function that does this : ISVARNAME See also : ISVARNAME , MATLAB . LANG . MAKEVALIDNAME","title":"valid_varname"},{"location":"reference/datastructures/var2struct.m/","text":"var2struct \u00b6 VAR2STRUCT - Export variable ( s ) to a structure OUTPUT = VAR2STRUCT ( 'NAME1' , 'NAME2' , ... ) Saves local workspace variables as a structure . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has 3 variables , A = 5 , B = 6 , C = 7 ; output = var2struct ( 'a' , 'b' ) produces output = a : 5 b : 6","title":"var2struct"},{"location":"reference/datastructures/var2struct.m/#var2struct","text":"VAR2STRUCT - Export variable ( s ) to a structure OUTPUT = VAR2STRUCT ( 'NAME1' , 'NAME2' , ... ) Saves local workspace variables as a structure . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has 3 variables , A = 5 , B = 6 , C = 7 ; output = var2struct ( 'a' , 'b' ) produces output = a : 5 b : 6","title":"var2struct"},{"location":"reference/datastructures/workspace2struct.m/","text":"workspace2struct \u00b6 WORKSPACE2STRUCT - Export the current workspace to a structure OUTPUT = WORKSPACE2STRUCT Saves the local workspace as a structure for easy export . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has one variable A , equal to 5. output = workspace2struct produces output = a : 5","title":"workspace2struct"},{"location":"reference/datastructures/workspace2struct.m/#workspace2struct","text":"WORKSPACE2STRUCT - Export the current workspace to a structure OUTPUT = WORKSPACE2STRUCT Saves the local workspace as a structure for easy export . Each variable is added a field to the structure OUTPUT . Example : Imagine your workspace has one variable A , equal to 5. output = workspace2struct produces output = a : 5","title":"workspace2struct"},{"location":"reference/datastructures/%40cell/eq.m/","text":"eq \u00b6 does element by element comparison Documentation for cell / eq doc cell / eq","title":"eq"},{"location":"reference/datastructures/%40cell/eq.m/#eq","text":"does element by element comparison Documentation for cell / eq doc cell / eq","title":"eq"},{"location":"reference/datastructures/%40cell/equnique.m/","text":"equnique \u00b6 EQUNIQUE - Return unique elements of an arbitrary class using EQ OUT = EQUNIQUE ( IN ) Returns the unique elements of an object array IN as a column OUT . Uses EQ to test for equality . This function is a little more general than Matlab ' s UNIQUE in that it can operate on any object that implements an EQ function , not just CELL arrays . It performs no sorting , and has no requirement that elements are ordered or sortable . Example : A = { [ 1 2 ] [ 1 ] [ 1 ] [ 3 4 5 ] } B = equnique ( A ); % B == A ( [ 1 2 4 ] ) See also : UNIQUE Documentation for cell / equnique doc cell / equnique","title":"equnique"},{"location":"reference/datastructures/%40cell/equnique.m/#equnique","text":"EQUNIQUE - Return unique elements of an arbitrary class using EQ OUT = EQUNIQUE ( IN ) Returns the unique elements of an object array IN as a column OUT . Uses EQ to test for equality . This function is a little more general than Matlab ' s UNIQUE in that it can operate on any object that implements an EQ function , not just CELL arrays . It performs no sorting , and has no requirement that elements are ordered or sortable . Example : A = { [ 1 2 ] [ 1 ] [ 1 ] [ 3 4 5 ] } B = equnique ( A ); % B == A ( [ 1 2 4 ] ) See also : UNIQUE Documentation for cell / equnique doc cell / equnique","title":"equnique"},{"location":"reference/datastructures/%40single/abs.m/","text":"abs \u00b6 ABS Absolute value . ABS ( X ) is the absolute value of the elements of X . When X is complex , ABS ( X ) is the complex modulus ( magnitude ) of the elements of X . See also SIGN , ANGLE , UNWRAP , HYPOT . Documentation for single / abs doc single / abs","title":"abs"},{"location":"reference/datastructures/%40single/abs.m/#abs","text":"ABS Absolute value . ABS ( X ) is the absolute value of the elements of X . When X is complex , ABS ( X ) is the complex modulus ( magnitude ) of the elements of X . See also SIGN , ANGLE , UNWRAP , HYPOT . Documentation for single / abs doc single / abs","title":"abs"},{"location":"reference/datastructures/%40single/minus.m/","text":"minus \u00b6 - Minus. X - Y subtracts matrix Y from X. X and Y must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. C = MINUS(A,B) is called for the syntax 'A - B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. Documentation for single/minus doc single/minus","title":"minus"},{"location":"reference/datastructures/%40single/minus.m/#minus","text":"- Minus. X - Y subtracts matrix Y from X. X and Y must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. C = MINUS(A,B) is called for the syntax 'A - B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. Documentation for single/minus doc single/minus","title":"minus"},{"location":"reference/datastructures/%40single/mrdivide.m/","text":"mrdivide \u00b6 / Right matrix divide. B/A is the matrix division of A into B, which is roughly the same as B*INV(A) , except it is computed in a different way. More precisely, B/A = (A'\\B')'. See MLDIVIDE for details. C = MRDIVIDE(B,A) is called for the syntax 'B / A' when B or A is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. See also MLDIVIDE, RDIVIDE, LDIVIDE, PAGEMRDIVIDE. Documentation for single/mrdivide doc single/mrdivide","title":"mrdivide"},{"location":"reference/datastructures/%40single/mrdivide.m/#mrdivide","text":"/ Right matrix divide. B/A is the matrix division of A into B, which is roughly the same as B*INV(A) , except it is computed in a different way. More precisely, B/A = (A'\\B')'. See MLDIVIDE for details. C = MRDIVIDE(B,A) is called for the syntax 'B / A' when B or A is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. See also MLDIVIDE, RDIVIDE, LDIVIDE, PAGEMRDIVIDE. Documentation for single/mrdivide doc single/mrdivide","title":"mrdivide"},{"location":"reference/datastructures/%40single/plus.m/","text":"plus \u00b6 + Plus. X + Y adds matrices X and Y. X and Y must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. C = PLUS(A,B) is called for the syntax 'A + B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. Documentation for single/plus doc single/plus","title":"plus"},{"location":"reference/datastructures/%40single/plus.m/#plus","text":"+ Plus. X + Y adds matrices X and Y. X and Y must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. C = PLUS(A,B) is called for the syntax 'A + B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. Documentation for single/plus doc single/plus","title":"plus"},{"location":"reference/datastructures/%40single/rdivide.m/","text":"rdivide \u00b6 ./ Right array divide. A./B divides each element of A by the corresponding element of B. A and B must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. The element-wise operators ./ and .\\ are related to each other by the equation A./B = B.\\A. C = RDIVIDE(A,B) is called for the syntax 'A ./ B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. See also LDIVIDE, MLDIVIDE, MRDIVIDE. Documentation for single/rdivide doc single/rdivide","title":"rdivide"},{"location":"reference/datastructures/%40single/rdivide.m/#rdivide","text":"./ Right array divide. A./B divides each element of A by the corresponding element of B. A and B must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. The element-wise operators ./ and .\\ are related to each other by the equation A./B = B.\\A. C = RDIVIDE(A,B) is called for the syntax 'A ./ B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. See also LDIVIDE, MLDIVIDE, MRDIVIDE. Documentation for single/rdivide doc single/rdivide","title":"rdivide"},{"location":"reference/datastructures/%40struct/eq.m/","text":"eq \u00b6 EQ - are two structures equal ? B = EQ ( X , Y ) Returns 1 if and only if the structures X and Y have the same fieldnames and all fields have the same values . Documentation for struct / eq doc struct / eq","title":"eq"},{"location":"reference/datastructures/%40struct/eq.m/#eq","text":"EQ - are two structures equal ? B = EQ ( X , Y ) Returns 1 if and only if the structures X and Y have the same fieldnames and all fields have the same values . Documentation for struct / eq doc struct / eq","title":"eq"},{"location":"reference/datastructures/%40struct/ne.m/","text":"ne \u00b6 ~= Not equal. A ~= B does element by element comparisons between A and B and returns an array with elements set to logical 1 (TRUE) where the relation is true and elements set to logical 0 (FALSE) where it is not. A and B must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. C = NE(A,B) is called for the syntax 'A ~= B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. Documentation for struct/ne doc struct/ne","title":"ne"},{"location":"reference/datastructures/%40struct/ne.m/#ne","text":"~= Not equal. A ~= B does element by element comparisons between A and B and returns an array with elements set to logical 1 (TRUE) where the relation is true and elements set to logical 0 (FALSE) where it is not. A and B must have compatible sizes. In the simplest cases, they can be the same size or one can be a scalar. Two inputs have compatible sizes if, for every dimension, the dimension sizes of the inputs are either the same or one of them is 1. C = NE(A,B) is called for the syntax 'A ~= B' when A or B is an object. See <a href= \"matlab:helpview('matlab','MATLAB_OPS')\" > MATLAB Operators and Special Characters </a> for more details. Documentation for struct/ne doc struct/ne","title":"ne"},{"location":"reference/file/cellstr2text.m/","text":"cellstr2text \u00b6 CELLSTR2TEXT - Write a cell string to a text file CELLSTR2TEXT(FILENAME, CS) Writes the cell array of strings CS to the new text file FILENAME. One entry is written per line.","title":"cellstr2text"},{"location":"reference/file/cellstr2text.m/#cellstr2text","text":"CELLSTR2TEXT - Write a cell string to a text file CELLSTR2TEXT(FILENAME, CS) Writes the cell array of strings CS to the new text file FILENAME. One entry is written per line.","title":"cellstr2text"},{"location":"reference/file/checkout_lock_file.m/","text":"checkout_lock_file \u00b6 CHECKOUT_LOCK_FILE Try to establish control of a lock file [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME ) This function tries to check out the file FILENAME so that different programs do not perform some operation at the same time . This is a quick and dirty semaphore implementation ( see Wikipedia if unfamilar with semaphores ). The LOCKFILE will also EXPIRE in 1 hour unless otherwise specified below . A KEY is returned , which is necessary to pass to to RELEASE_LOCK_FILE . This function tries to create an empty file called FILENAME . If the file is NOT already present and the creation successful , the file will be created and FID will return the file ID ( see help fopen ). If instead the file already exists , the function will check every 1 second for 30 iterations to see if the file disappears . If the function is never able to create a new file because the old file exists , then the function will give up and return FID < 0. IMPORTANT : RESPONSIBLE CLEANUP : It is important that if the program that calls CHECKOUT_LOCK_FILE is able to create the file ( that is , FID > 0 ), then it should call RELEASE_LOCK_FILE to remove the lock file . IMPORANT : FILE CLOSURE : If 2 output arguments are given ( that is , KEY is examined ), then the lock file is closed before CHECKOUT_LOCK_FILE exits . If KEY is not requested in output , then the FID is left open for backwards compatibility . Depricated release instructions ( new code should not use ): 1 ) close the file with fclose ( FID ) and 2 ) delete the file FILENAME that is created with delete ( FILENAME ). If FID < 0 , then it should NOT delete the file FILENAME because it is checked out by some other program . The function can be called with additional output arguments : [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME , CHECKLOOPS ) Alters the number of times the function will check ( at 1 second intervals ) to see if FILENAME has disappeared . [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME , CHECKLOOPS , THROWERROR ) If THROWERROR is 1 , the function will return an error instead of returning FID < 0. [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME , CHECKLOOPS , THROWERROR , EXPIRATION_SECONDS ) This mode allows one to specifically set the expiration time in seconds . CHECKOUT_LOCK_FILE will examine the file for the expiration time and ignore and remove the lock file if it is \"expired\" . By default , EXPIRATION_SECONDS is 3600. Example : % I want to make sure only my program writes to myfile.txt. % All of my programs that write to myfile.txt will \"check out\" the % file by creating myfile.txt-lock. mylockfile = [ userpath filesep 'myfile.txt-lock' ]; [ lockfid , key ] = checkout_lock_file ( mylockfile ); if lockfid > 0 , % do something release_lock_file ( mylockfile , key ); else , error ([ 'Never got control of ' mylockfile '; it was busy.' ]); end ; See also: RELEASE_LOCK_FILE, FOPEN, DELETE","title":"checkout_lock_file"},{"location":"reference/file/checkout_lock_file.m/#checkout_lock_file","text":"CHECKOUT_LOCK_FILE Try to establish control of a lock file [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME ) This function tries to check out the file FILENAME so that different programs do not perform some operation at the same time . This is a quick and dirty semaphore implementation ( see Wikipedia if unfamilar with semaphores ). The LOCKFILE will also EXPIRE in 1 hour unless otherwise specified below . A KEY is returned , which is necessary to pass to to RELEASE_LOCK_FILE . This function tries to create an empty file called FILENAME . If the file is NOT already present and the creation successful , the file will be created and FID will return the file ID ( see help fopen ). If instead the file already exists , the function will check every 1 second for 30 iterations to see if the file disappears . If the function is never able to create a new file because the old file exists , then the function will give up and return FID < 0. IMPORTANT : RESPONSIBLE CLEANUP : It is important that if the program that calls CHECKOUT_LOCK_FILE is able to create the file ( that is , FID > 0 ), then it should call RELEASE_LOCK_FILE to remove the lock file . IMPORANT : FILE CLOSURE : If 2 output arguments are given ( that is , KEY is examined ), then the lock file is closed before CHECKOUT_LOCK_FILE exits . If KEY is not requested in output , then the FID is left open for backwards compatibility . Depricated release instructions ( new code should not use ): 1 ) close the file with fclose ( FID ) and 2 ) delete the file FILENAME that is created with delete ( FILENAME ). If FID < 0 , then it should NOT delete the file FILENAME because it is checked out by some other program . The function can be called with additional output arguments : [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME , CHECKLOOPS ) Alters the number of times the function will check ( at 1 second intervals ) to see if FILENAME has disappeared . [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME , CHECKLOOPS , THROWERROR ) If THROWERROR is 1 , the function will return an error instead of returning FID < 0. [ FID , KEY ] = CHECKOUT_LOCK_FILE ( FILENAME , CHECKLOOPS , THROWERROR , EXPIRATION_SECONDS ) This mode allows one to specifically set the expiration time in seconds . CHECKOUT_LOCK_FILE will examine the file for the expiration time and ignore and remove the lock file if it is \"expired\" . By default , EXPIRATION_SECONDS is 3600. Example : % I want to make sure only my program writes to myfile.txt. % All of my programs that write to myfile.txt will \"check out\" the % file by creating myfile.txt-lock. mylockfile = [ userpath filesep 'myfile.txt-lock' ]; [ lockfid , key ] = checkout_lock_file ( mylockfile ); if lockfid > 0 , % do something release_lock_file ( mylockfile , key ); else , error ([ 'Never got control of ' mylockfile '; it was busy.' ]); end ; See also: RELEASE_LOCK_FILE, FOPEN, DELETE","title":"checkout_lock_file"},{"location":"reference/file/combinepdf.m/","text":"combinepdf \u00b6 COMBINEPDF - Merge PDF ( portable document format ) files on Mac OS X COMBINEPDF ( MERGEFILENAME , FILE1 , FILE2 , ... ) On Mac OS X , this function calls the command line tool / System / Library / Automator / Combine PDF Pages . action / Contents / Resources / join . py to merge PDF files . INPUTS : MERGEFILENAME is the name of the merged file . If it exists , it will be deleted . The filenames to be merged ( FILE1 , FILE2 , ... ) are passed as additional arguments . The filenames should either be in full path format or should be in the local directory . This function will fail on platforms other than Mac OS X .","title":"combinepdf"},{"location":"reference/file/combinepdf.m/#combinepdf","text":"COMBINEPDF - Merge PDF ( portable document format ) files on Mac OS X COMBINEPDF ( MERGEFILENAME , FILE1 , FILE2 , ... ) On Mac OS X , this function calls the command line tool / System / Library / Automator / Combine PDF Pages . action / Contents / Resources / join . py to merge PDF files . INPUTS : MERGEFILENAME is the name of the merged file . If it exists , it will be deleted . The filenames to be merged ( FILE1 , FILE2 , ... ) are passed as additional arguments . The filenames should either be in full path format or should be in the local directory . This function will fail on platforms other than Mac OS X .","title":"combinepdf"},{"location":"reference/file/dirlist_trimdots.m/","text":"dirlist_trimdots \u00b6 DIR_TRIMDOTS - Trim strings '.' or '..' from a list of directory strings DIRLIST = DIRLIST_TRIMDOTS ( DIRLIST_OR_DIRLISTSTRUCT , [ OUTPUT_STRUCT ] ) When one obtains output from the MATLAB DIR function , the list sometimes includes the POSIX directories '.' ( an abbreviation for the current directory ) and '..' ( an abbreviation for the parent directory ). This function trims those entries from the directory list ( a cell array of strings ) and returns all other entries . One can also pass the direct output from the MATLAB DIR function , and the directory list will be extracted . The function stops when it has found both '.' and '..' ; if these entries occur more than once they will not be removed . Also removes '.DS_Store' ( Apple desktop information ). If the argument OUTPUT_STRUCT is present and is 1 , and if DIRLIST_OR_DIRLISTSTRUCT is a structure returned from the function DIR , then the output will be a structure of the same type with the '.' and '..' ( and '.DS_Store' ) removed . See also : DIR , DIRSTRIP Example : D = dir dirnumbers = find ( [ D.isdir ] ) % return indexes that correspond to directories % display all of these directories dirlist = { D ( dirnumbers ). name } % now trim dirlist = dirlist_trimdots ( dirlist )","title":"dirlist_trimdots"},{"location":"reference/file/dirlist_trimdots.m/#dirlist_trimdots","text":"DIR_TRIMDOTS - Trim strings '.' or '..' from a list of directory strings DIRLIST = DIRLIST_TRIMDOTS ( DIRLIST_OR_DIRLISTSTRUCT , [ OUTPUT_STRUCT ] ) When one obtains output from the MATLAB DIR function , the list sometimes includes the POSIX directories '.' ( an abbreviation for the current directory ) and '..' ( an abbreviation for the parent directory ). This function trims those entries from the directory list ( a cell array of strings ) and returns all other entries . One can also pass the direct output from the MATLAB DIR function , and the directory list will be extracted . The function stops when it has found both '.' and '..' ; if these entries occur more than once they will not be removed . Also removes '.DS_Store' ( Apple desktop information ). If the argument OUTPUT_STRUCT is present and is 1 , and if DIRLIST_OR_DIRLISTSTRUCT is a structure returned from the function DIR , then the output will be a structure of the same type with the '.' and '..' ( and '.DS_Store' ) removed . See also : DIR , DIRSTRIP Example : D = dir dirnumbers = find ( [ D.isdir ] ) % return indexes that correspond to directories % display all of these directories dirlist = { D ( dirnumbers ). name } % now trim dirlist = dirlist_trimdots ( dirlist )","title":"dirlist_trimdots"},{"location":"reference/file/dirstrip.m/","text":"dirstrip \u00b6 D = DIRSTRIP ( DS ) Removes '.' and '..' from a directory structure returned by the function \"DIR\" . Also removes '. DS_Store ' ( Apple desktop information ) and '. git ' ( GitHub ) from the list . This will return all file names , including regular files . To return only directories , see DIRLIST_TRIMDOTS . See also: DIR , DIRLIST_TRIMDOTS","title":"dirstrip"},{"location":"reference/file/dirstrip.m/#dirstrip","text":"D = DIRSTRIP ( DS ) Removes '.' and '..' from a directory structure returned by the function \"DIR\" . Also removes '. DS_Store ' ( Apple desktop information ) and '. git ' ( GitHub ) from the list . This will return all file names , including regular files . To return only directories , see DIRLIST_TRIMDOTS . See also: DIR , DIRLIST_TRIMDOTS","title":"dirstrip"},{"location":"reference/file/drivepath.m/","text":"drivepath \u00b6 DRIVEPATH - What is the default name of the directory that contains drives / media / volumes ? P = DRIVEPATH Returns the name of the default name of the directory that contains drives or media or volumes on this operating system . If the platform ( returned in COMPUTER ) , then P is Platform string | P ---------------------------------------------------------- 'GLNXA64' | '/media' 'MACI64' | '/Volumes' 'PCWIN64' | '' See also : COMPUTER","title":"drivepath"},{"location":"reference/file/drivepath.m/#drivepath","text":"DRIVEPATH - What is the default name of the directory that contains drives / media / volumes ? P = DRIVEPATH Returns the name of the default name of the directory that contains drives or media or volumes on this operating system . If the platform ( returned in COMPUTER ) , then P is Platform string | P ---------------------------------------------------------- 'GLNXA64' | '/media' 'MACI64' | '/Volumes' 'PCWIN64' | '' See also : COMPUTER","title":"drivepath"},{"location":"reference/file/dumbjsondb.m/","text":"CLASS dumbjsondb \u00b6 DUMBJSONDB - a very simple and slow JSON - based database with associated binary files DUMBJSONDB implements a very simple JSON - based document database . Each document is represented as a JSON file . Each document also has an associated binary file that can be read / written . The search capabilities of DUMBJSONDB are very rudimentory , and every document is read in for examination . Therefore , searching DUMBJSONDB will be very slow . Furthermore , as all of the documents are stored in a single directory , the database size will be limited to the number of files that are permitted in a single directory by the file system divided by 3 ( there is a . JSON file , a binary file , and a metadata file for each document ). Example : Create and test a DUMBJSONDB object in the current directory . % create a new db db = dumbjsondb ( 'new' , [ pwd filesep 'mydb.json' ] ); % add some new entries for i = 1 : 5 , a . id = 2000 + i ; a . value = i ; db . add ( a ); end ; % read latest version of all the entries ids = db . alldocids ; for i = 1 : numel ( ids ), db . read ( ids { i } ), % display the entry end % search for a document [ docs,doc_versions ] = db . search ( {} , { 'value' , 5 } ) % search for a document that doesn 't exist because ' 5 ' is a string [docs,doc_versions] = db.search({},{' value ',' 5 '}) % use the struct version of search [docs,doc_versions] = db.search({},struct(' field ',' value ',' operation ',' greaterthan ',' param1 ',1,' param2 ',[])) % remove an entry db.remove(2002); % update 2005 to new version, saving old version a.value = 20; db.add(a,' Overwrite ',2); % will automatically update version number % read first and latest version of all the entries ids = db.alldocids; for i=1:numel(ids), disp([' 0 th version : ']); db.read(ids{i},0), % display the 0th version disp([' Latest version : ']); db.read(ids{i}), % display the entry end % add binary information to binary file [fid,key] = db.openbinaryfile(2005); if fid>0, fwrite(fid,' this is a test ',' char '); [fid] = db.closebinaryfile(fid, key, 2005); end % read the binary file [fid, key] = db.openbinaryfile(2005); if fid>0, fseek(fid,0,' bof '); % go to beginning of file output=char(fread(fid,14,' char '))' , [ fid ] = db . closebinaryfile ( fid , key , 2005 ); end % remove all entries db . clear ( 'Yes' ); Superclasses \u00b6 none Properties \u00b6 Property Description paramfilename The full pathname of the parameter file dirname The directory name where files are stored (same directory as parameter file) unique_object_id_field The field of each object that indicates the unique ID for each database entry Methods \u00b6 Method Description add add a document to a DUMBJSONDB alldocids return all doc unique id numbers for a DUMBJSONDB clear remove/delete all records from a DUBMJSONDB closebinaryfile close and unlock the binary file associated with a DUMBJSONDB document docstats document stats including document version and whether or not the document has a binary file docversions find all document versions for a DUMBJSONDB dumbjsondb create a DUMBJSONDB object latestdocversion return most recent documnet version number openbinaryfile return the FID for the binary file associated with a DUMBJSONDB document read READ the JSON document corresponding to a particular document unique id remove REMOVE or delete the JSON document corresponding to a particular document unique id search perform a search of DUMBJSONDB documents Methods help \u00b6 add - add a document to a DUMBJSONDB DUMBJSONDB_OBJ = ADD ( DUMBJSONDB_OBJ , DOC_OBJECT , .... ) Add a document to the database DUMBJSONDB_OBJ . DOC_OBJECT should be a Matlab object . It will be encoded to a JSON representation and saved . This function also accepts name / value pairs that modify the adding behavior : Parameter ( default ) | Description --------------------------------------------------------------------------- 'Overwrite' ( 1 ) | Use 1 to overwrite current version | 0 to return an error instead of overwriting | 2 to add the document as a new version 'doc_version' ( latest ) | Use a specific number to write a specific version See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS alldocids - return all doc unique id numbers for a DUMBJSONDB DOC_UNIQUE_ID = ALLDOCIDS ( DUMBJSONDB_OBJ ) Return a cell array of all document unique ID ( s ) ( char strings ) for the DUMBJSONDB object DUMBJSONDB_OBJ . clear - remove/delete all records from a DUBMJSONDB CLEAR ( DUMBJSONDB_OBJ , [ AREYOUSURE ] ) Removes all documents from the DUMBJSONDB object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : DUMBJSONDB / REMOVE closebinaryfile - close and unlock the binary file associated with a DUMBJSONDB document [ FID ] = CLOSEBINARYFILE ( DUMBJSONDB_OBJ , FID , KEY , DOC_UNIQUE_ID , [ DOC_VERSION ] ) Closes the binary file associated with DUMBJSONDB that has file identifier FID , DOC_UNIQUE_ID and DOC_VERSION . If DOC_VERSION is not provided , the lastest will be used . This function closes the file and deletes the lock file . KEY is the key that is returned by OPENBINARYFILE , and is needed to release the lock on the binary file . FID is set to - 1 on exit . See also : DUMBJSONDB / OPENBINARYFILE , CHECKOUT_LOCK_FILE if the file is open , close it docstats - document stats including document version and whether or not the document has a binary file [ DOC_UNIQUE_ID , DOCBINARYFILE ] = DOCSTATS ( DUMBJSONDB_OBJ , DOCUMENT_OBJ ) Returns several pieces of information about the Matlab structure / object DOCUMENT_OBJ : DOC_UNIQUE_ID is the document unique id ( specified in the property 'document_unique_id' of DUMBJSONDB_OBJ ). DOCBINARYFILE is 1 if and only if DOC has the field specified in property 'hasbinaryfilefield' and the value is 1 ; otherwise DOCBINARYFILE is 0 . docversions - find all document versions for a DUMBJSONDB V = DOCVERSIONS ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return all version numbers for a given DUMBJSONDB and a DOC_UNIQUE_ID . Documents without version control that exist have version 0 . V will be an array of integers with all version numbers . If there are no documents that match DOC_UNIQUE_ID , then empty is returned . dumbjsondb - create a DUMBJSONDB object DUMBJSONDB_OBJ = DUMBJSONDB ( COMMAND , ... ) Create a DUMBJSONDB object via one of several routes . COMMAND options | Description ---------------------------------------------------------------------------------------- 'Load' | Second argument should be full path filename of the saved parameter file 'New' | Second argument should be full path filename of the saved parameter file , ( None ) | Creates an empty object . This file also accepts additional name / value pairs for arguments 3 .. end . Parameter ( default ) | Description ---------------------------------------------------------------------------------------- dirname ( '.dumbjsondb' ) | The directory name , relative to the parameter file unique_object_id_field ( 'id' ) | The field name in the database for the unique object identifier See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS Documentation for dumbjsondb / dumbjsondb doc dumbjsondb latestdocversion - return most recent documnet version number [ L , V ] = LATESTDOCVERSION ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return the latest version ( L ) of the document with the document unique ID equal to DOC_UNIQUE_ID . A full array of available version numbers V is also returned . If there are no versions , L is empty . See also : DUMBJSONDB / DOCVERSIONS openbinaryfile - return the FID for the binary file associated with a DUMBJSONDB document [ FID, KEY, DOC_VERSION ] = OPENBINARYFILE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [ , DOC_VERSION ] ) Attempts to obtain the lock and open the binary file associated with DOC_UNIQUE_ID and DOC_VERSION for reading / writing . If DOC_VERSION is not present , then the lastest version is used . All the binary files are in 'big-endian' format and are opened as such by OPENBINARYFILE . If there is no such file , an error is generated . If the file is locked by another program , then FID is - 1. File lock is achieved using CHECKOUT_LOCK_FILE . The lock file must be closed and deleted after FID is closed so that other programs can use the file . This service is performed by CLOSEBINARYFILE . KEY is a random key that is needed to close the file ( releases the lock ). Example : [ fid, key ]= mydb . openbinaryfile ( doc_unique_id ); if fid > 0 , try , % do something , e . g ., fwrite ( fid , 'my data' , 'char' ); [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); catch , [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); error ( [ 'Could not do what I wanted to do.' ] ) end end See also : DUMBJSONDB / CLOSEBINARYFILE , DUMBJSONDB / READ , CHECKOUT_LOCK_FILE , FREAD , FWRITE read - READ the JSON document corresponding to a particular document unique id [ DOCUMENT , VERSION ] = READ ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [, VERSION ] ) Reads and decodes the document corresponding to the document unique id DOC_UNIQUE_ID . If VERSION is provided , then the requested version is read . If it is not provided , then the latest version is provided . VERSION can be between 0 and hex2dec ( 'FFFFF' ) . DOCUMENT is the Matlab object generated by the decoded JSON file . VERSION is the actual version that was read . If there is no such document , then DOCUMENT and VERSION will be empty ( [] ) . See also : DUMBJSONDB , DUMBJSONDB / ADD , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS remove - REMOVE or delete the JSON document corresponding to a particular document unique id DUMBJSONDB_OBJ = REMOVE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID , VERSION ) Removes the document corresponding to the document unique id DOC_UNIQUE_ID and version VERSION . If VERSION is provided , then the requested version is removed . If it is not provided , or is equal to the string 'all' , then ALL versions are deleted . See also : DUMBJSONDB / CLEAR search - perform a search of DUMBJSONDB documents [ DOCS , DOC_VERSIONS ] = SEARCH ( DUMBJSONDB_OBJ , SCOPE , SEARCHPARAMS ) Performs a search of DUMBJSONDB_OBJ to find matching documents . SCOPE is a cell array of name / value pairs that modify the search scope: SCOPE parameter ( default ) : Description ---------------------------------------------------------------------- version (' latest ') : Which versions should be searched ? Can be : a specific number , ' latest ', or ' all ' SEARCHPARAMS should be either be {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... } or a search structure appropriate for FIELDSEARCH . The document parameters PARAM1 , PARAM2 are examined for matches . If VALUEN is a string , then a regular expression is evaluated to determine the match . If valueN is not a string , then the the items must match exactly . DOCS is a cell array of JSON - decoded documents . DOC_VERSIONS is an array of the corresponding document versions . Case is not considered . Examples: indexes = search ( mydb , ' type ',' nsd_spikedata '); indexes = search ( mydb , ' type ',' nsd_spike ( * .)'); See also: REGEXPI","title":"dumbjsondb"},{"location":"reference/file/dumbjsondb.m/#class-dumbjsondb","text":"DUMBJSONDB - a very simple and slow JSON - based database with associated binary files DUMBJSONDB implements a very simple JSON - based document database . Each document is represented as a JSON file . Each document also has an associated binary file that can be read / written . The search capabilities of DUMBJSONDB are very rudimentory , and every document is read in for examination . Therefore , searching DUMBJSONDB will be very slow . Furthermore , as all of the documents are stored in a single directory , the database size will be limited to the number of files that are permitted in a single directory by the file system divided by 3 ( there is a . JSON file , a binary file , and a metadata file for each document ). Example : Create and test a DUMBJSONDB object in the current directory . % create a new db db = dumbjsondb ( 'new' , [ pwd filesep 'mydb.json' ] ); % add some new entries for i = 1 : 5 , a . id = 2000 + i ; a . value = i ; db . add ( a ); end ; % read latest version of all the entries ids = db . alldocids ; for i = 1 : numel ( ids ), db . read ( ids { i } ), % display the entry end % search for a document [ docs,doc_versions ] = db . search ( {} , { 'value' , 5 } ) % search for a document that doesn 't exist because ' 5 ' is a string [docs,doc_versions] = db.search({},{' value ',' 5 '}) % use the struct version of search [docs,doc_versions] = db.search({},struct(' field ',' value ',' operation ',' greaterthan ',' param1 ',1,' param2 ',[])) % remove an entry db.remove(2002); % update 2005 to new version, saving old version a.value = 20; db.add(a,' Overwrite ',2); % will automatically update version number % read first and latest version of all the entries ids = db.alldocids; for i=1:numel(ids), disp([' 0 th version : ']); db.read(ids{i},0), % display the 0th version disp([' Latest version : ']); db.read(ids{i}), % display the entry end % add binary information to binary file [fid,key] = db.openbinaryfile(2005); if fid>0, fwrite(fid,' this is a test ',' char '); [fid] = db.closebinaryfile(fid, key, 2005); end % read the binary file [fid, key] = db.openbinaryfile(2005); if fid>0, fseek(fid,0,' bof '); % go to beginning of file output=char(fread(fid,14,' char '))' , [ fid ] = db . closebinaryfile ( fid , key , 2005 ); end % remove all entries db . clear ( 'Yes' );","title":"CLASS dumbjsondb"},{"location":"reference/file/dumbjsondb.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/file/dumbjsondb.m/#properties","text":"Property Description paramfilename The full pathname of the parameter file dirname The directory name where files are stored (same directory as parameter file) unique_object_id_field The field of each object that indicates the unique ID for each database entry","title":"Properties"},{"location":"reference/file/dumbjsondb.m/#methods","text":"Method Description add add a document to a DUMBJSONDB alldocids return all doc unique id numbers for a DUMBJSONDB clear remove/delete all records from a DUBMJSONDB closebinaryfile close and unlock the binary file associated with a DUMBJSONDB document docstats document stats including document version and whether or not the document has a binary file docversions find all document versions for a DUMBJSONDB dumbjsondb create a DUMBJSONDB object latestdocversion return most recent documnet version number openbinaryfile return the FID for the binary file associated with a DUMBJSONDB document read READ the JSON document corresponding to a particular document unique id remove REMOVE or delete the JSON document corresponding to a particular document unique id search perform a search of DUMBJSONDB documents","title":"Methods"},{"location":"reference/file/dumbjsondb.m/#methods-help","text":"add - add a document to a DUMBJSONDB DUMBJSONDB_OBJ = ADD ( DUMBJSONDB_OBJ , DOC_OBJECT , .... ) Add a document to the database DUMBJSONDB_OBJ . DOC_OBJECT should be a Matlab object . It will be encoded to a JSON representation and saved . This function also accepts name / value pairs that modify the adding behavior : Parameter ( default ) | Description --------------------------------------------------------------------------- 'Overwrite' ( 1 ) | Use 1 to overwrite current version | 0 to return an error instead of overwriting | 2 to add the document as a new version 'doc_version' ( latest ) | Use a specific number to write a specific version See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS alldocids - return all doc unique id numbers for a DUMBJSONDB DOC_UNIQUE_ID = ALLDOCIDS ( DUMBJSONDB_OBJ ) Return a cell array of all document unique ID ( s ) ( char strings ) for the DUMBJSONDB object DUMBJSONDB_OBJ . clear - remove/delete all records from a DUBMJSONDB CLEAR ( DUMBJSONDB_OBJ , [ AREYOUSURE ] ) Removes all documents from the DUMBJSONDB object . Use with care . If AREYOUSURE is 'yes' then the function will proceed . Otherwise , it will not . See also : DUMBJSONDB / REMOVE closebinaryfile - close and unlock the binary file associated with a DUMBJSONDB document [ FID ] = CLOSEBINARYFILE ( DUMBJSONDB_OBJ , FID , KEY , DOC_UNIQUE_ID , [ DOC_VERSION ] ) Closes the binary file associated with DUMBJSONDB that has file identifier FID , DOC_UNIQUE_ID and DOC_VERSION . If DOC_VERSION is not provided , the lastest will be used . This function closes the file and deletes the lock file . KEY is the key that is returned by OPENBINARYFILE , and is needed to release the lock on the binary file . FID is set to - 1 on exit . See also : DUMBJSONDB / OPENBINARYFILE , CHECKOUT_LOCK_FILE if the file is open , close it docstats - document stats including document version and whether or not the document has a binary file [ DOC_UNIQUE_ID , DOCBINARYFILE ] = DOCSTATS ( DUMBJSONDB_OBJ , DOCUMENT_OBJ ) Returns several pieces of information about the Matlab structure / object DOCUMENT_OBJ : DOC_UNIQUE_ID is the document unique id ( specified in the property 'document_unique_id' of DUMBJSONDB_OBJ ). DOCBINARYFILE is 1 if and only if DOC has the field specified in property 'hasbinaryfilefield' and the value is 1 ; otherwise DOCBINARYFILE is 0 . docversions - find all document versions for a DUMBJSONDB V = DOCVERSIONS ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return all version numbers for a given DUMBJSONDB and a DOC_UNIQUE_ID . Documents without version control that exist have version 0 . V will be an array of integers with all version numbers . If there are no documents that match DOC_UNIQUE_ID , then empty is returned . dumbjsondb - create a DUMBJSONDB object DUMBJSONDB_OBJ = DUMBJSONDB ( COMMAND , ... ) Create a DUMBJSONDB object via one of several routes . COMMAND options | Description ---------------------------------------------------------------------------------------- 'Load' | Second argument should be full path filename of the saved parameter file 'New' | Second argument should be full path filename of the saved parameter file , ( None ) | Creates an empty object . This file also accepts additional name / value pairs for arguments 3 .. end . Parameter ( default ) | Description ---------------------------------------------------------------------------------------- dirname ( '.dumbjsondb' ) | The directory name , relative to the parameter file unique_object_id_field ( 'id' ) | The field name in the database for the unique object identifier See also : DUMBJSONDB , DUMBJSONDB / READ , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS Documentation for dumbjsondb / dumbjsondb doc dumbjsondb latestdocversion - return most recent documnet version number [ L , V ] = LATESTDOCVERSION ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID ) Return the latest version ( L ) of the document with the document unique ID equal to DOC_UNIQUE_ID . A full array of available version numbers V is also returned . If there are no versions , L is empty . See also : DUMBJSONDB / DOCVERSIONS openbinaryfile - return the FID for the binary file associated with a DUMBJSONDB document [ FID, KEY, DOC_VERSION ] = OPENBINARYFILE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [ , DOC_VERSION ] ) Attempts to obtain the lock and open the binary file associated with DOC_UNIQUE_ID and DOC_VERSION for reading / writing . If DOC_VERSION is not present , then the lastest version is used . All the binary files are in 'big-endian' format and are opened as such by OPENBINARYFILE . If there is no such file , an error is generated . If the file is locked by another program , then FID is - 1. File lock is achieved using CHECKOUT_LOCK_FILE . The lock file must be closed and deleted after FID is closed so that other programs can use the file . This service is performed by CLOSEBINARYFILE . KEY is a random key that is needed to close the file ( releases the lock ). Example : [ fid, key ]= mydb . openbinaryfile ( doc_unique_id ); if fid > 0 , try , % do something , e . g ., fwrite ( fid , 'my data' , 'char' ); [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); catch , [ fid ] = mydb . closebinaryfile ( fid , key , doc_unique_id ); error ( [ 'Could not do what I wanted to do.' ] ) end end See also : DUMBJSONDB / CLOSEBINARYFILE , DUMBJSONDB / READ , CHECKOUT_LOCK_FILE , FREAD , FWRITE read - READ the JSON document corresponding to a particular document unique id [ DOCUMENT , VERSION ] = READ ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID [, VERSION ] ) Reads and decodes the document corresponding to the document unique id DOC_UNIQUE_ID . If VERSION is provided , then the requested version is read . If it is not provided , then the latest version is provided . VERSION can be between 0 and hex2dec ( 'FFFFF' ) . DOCUMENT is the Matlab object generated by the decoded JSON file . VERSION is the actual version that was read . If there is no such document , then DOCUMENT and VERSION will be empty ( [] ) . See also : DUMBJSONDB , DUMBJSONDB / ADD , DUMBJSONDB / REMOVE , DUMBJSONDB / DOCVERSIONS , DUMBJSONDB / ALLDOCIDS remove - REMOVE or delete the JSON document corresponding to a particular document unique id DUMBJSONDB_OBJ = REMOVE ( DUMBJSONDB_OBJ , DOC_UNIQUE_ID , VERSION ) Removes the document corresponding to the document unique id DOC_UNIQUE_ID and version VERSION . If VERSION is provided , then the requested version is removed . If it is not provided , or is equal to the string 'all' , then ALL versions are deleted . See also : DUMBJSONDB / CLEAR search - perform a search of DUMBJSONDB documents [ DOCS , DOC_VERSIONS ] = SEARCH ( DUMBJSONDB_OBJ , SCOPE , SEARCHPARAMS ) Performs a search of DUMBJSONDB_OBJ to find matching documents . SCOPE is a cell array of name / value pairs that modify the search scope: SCOPE parameter ( default ) : Description ---------------------------------------------------------------------- version (' latest ') : Which versions should be searched ? Can be : a specific number , ' latest ', or ' all ' SEARCHPARAMS should be either be {' PARAM1 ', VALUE1 , ' PARAM2 ', VALUE2 , ... } or a search structure appropriate for FIELDSEARCH . The document parameters PARAM1 , PARAM2 are examined for matches . If VALUEN is a string , then a regular expression is evaluated to determine the match . If valueN is not a string , then the the items must match exactly . DOCS is a cell array of JSON - decoded documents . DOC_VERSIONS is an array of the corresponding document versions . Case is not considered . Examples: indexes = search ( mydb , ' type ',' nsd_spikedata '); indexes = search ( mydb , ' type ',' nsd_spike ( * .)'); See also: REGEXPI","title":"Methods help"},{"location":"reference/file/filebackup.m/","text":"filebackup \u00b6 FILEBACKUP - Create a backup of a file BACKUPNAME = FILEBACKUP ( FNAME ) Creates a backup file of the file named FNAME ( full path ). The new file is named [ FNAME '_bkupNNN' EXT ] , where NNN is a number . The number NNN is chosen such that no file has that name ( for example , if there is a file 001 , then the new file created is 002 , etc ). The name of the backup file is BACKUPNAME . The behavior of the function can be modified with extra name / value pairs : PARAMETER NAME ( default ) | DESCRIPTION ----------------------------------------------------------------- DeleteOrig ( 0 ) | Delete the original file ? Digits ( 3 ) | Number of digits to use ErrorIfDigitsExceeded ( 1 ) | Produce an error if the number of digits | is exceeded . ( If no error is produced , then | no backup is made .) Example : fname = 'C:\\Users\\me\\mytest.txt' ; backupname = filebackup ( fname ); % will be 'C:\\Users\\me\\mytest_bkup001.txt'","title":"filebackup"},{"location":"reference/file/filebackup.m/#filebackup","text":"FILEBACKUP - Create a backup of a file BACKUPNAME = FILEBACKUP ( FNAME ) Creates a backup file of the file named FNAME ( full path ). The new file is named [ FNAME '_bkupNNN' EXT ] , where NNN is a number . The number NNN is chosen such that no file has that name ( for example , if there is a file 001 , then the new file created is 002 , etc ). The name of the backup file is BACKUPNAME . The behavior of the function can be modified with extra name / value pairs : PARAMETER NAME ( default ) | DESCRIPTION ----------------------------------------------------------------- DeleteOrig ( 0 ) | Delete the original file ? Digits ( 3 ) | Number of digits to use ErrorIfDigitsExceeded ( 1 ) | Produce an error if the number of digits | is exceeded . ( If no error is produced , then | no backup is made .) Example : fname = 'C:\\Users\\me\\mytest.txt' ; backupname = filebackup ( fname ); % will be 'C:\\Users\\me\\mytest_bkup001.txt'","title":"filebackup"},{"location":"reference/file/filediff.m/","text":"filediff \u00b6 FILEDIFF - return the output of the system tool 'diff' [ B , D ] = FILEDIFF ( FILE1 , FILE2 ) Returns the output of the system tool [ 'diff file1 file2]' , if 'diff' exists . B is 0 if the files do not differ , and 1 if they do differ . The output of the function ( the text notes of the differences ) are returned in D .","title":"filediff"},{"location":"reference/file/filediff.m/#filediff","text":"FILEDIFF - return the output of the system tool 'diff' [ B , D ] = FILEDIFF ( FILE1 , FILE2 ) Returns the output of the system tool [ 'diff file1 file2]' , if 'diff' exists . B is 0 if the files do not differ , and 1 if they do differ . The output of the function ( the text notes of the differences ) are returned in D .","title":"filediff"},{"location":"reference/file/fileid_value.m/","text":"fileid_value \u00b6 FILEID_VALUE - return the value of an FID whether it is an FID or inside a FILEOBJ FID = FILEID_VALUE ( FID_OR_FILEOBJ ) Given a value which may be a FID or a FILEOBJ object , return either the FID or the FID field of the FILEOBJ object . Allows one to test 'if fileid_value(f)<0' without knowing if f is a Matlab file identifier or a FILEOBJ .","title":"fileid_value"},{"location":"reference/file/fileid_value.m/#fileid_value","text":"FILEID_VALUE - return the value of an FID whether it is an FID or inside a FILEOBJ FID = FILEID_VALUE ( FID_OR_FILEOBJ ) Given a value which may be a FID or a FILEOBJ object , return either the FID or the FID field of the FILEOBJ object . Allows one to test 'if fileid_value(f)<0' without knowing if f is a Matlab file identifier or a FILEOBJ .","title":"fileid_value"},{"location":"reference/file/filename_value.m/","text":"filename_value \u00b6 FILENAME_VALUE - return the string of a filename whether it is a filename or inside a FILEOBJ FILENAME = FILENAME_VALUE ( FILENAME_OR_FILEOBJ ) Given a value which may be a FILENAME or a FILEOBJ object , return either the FILENAME or the FULLPATHFILENAME field of the FILEOBJ object .","title":"filename_value"},{"location":"reference/file/filename_value.m/#filename_value","text":"FILENAME_VALUE - return the string of a filename whether it is a filename or inside a FILEOBJ FILENAME = FILENAME_VALUE ( FILENAME_OR_FILEOBJ ) Given a value which may be a FILENAME or a FILEOBJ object , return either the FILENAME or the FULLPATHFILENAME field of the FILEOBJ object .","title":"filename_value"},{"location":"reference/file/filenamesearchreplace.m/","text":"filenamesearchreplace \u00b6 FILENAMESEARCHREPLACE - Seach and replace filenames within a directory FILENAMESEARCHREPLACE ( DIRNAME , SEARCHSTRS , REPLACESTRS , ... ) This function searches all files in the directory DIRNAME for matches of any string in the cell array of strings SEARCHSTRS . If it finds a match , then it creates a new file with the search string replaced by the corresponding entry in the cell array of strings REPLACESTRS . This function also can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- deleteOriginals ( 0 ) | Should original file be deleted ? useOutputDir ( 0 ) | Should we write to a different output directory ? OutputDirPath ( DIRNAME ) | The parent path of the output directory OutputDir ( 'subfolder' ) | The name of the output directry in OutputDirPath | ( will be created if it doesn ' t exist ) noOp ( 0 ) | If 1 , this will not perform the operation but will | display its intended action recursive ( 0 ) | Should we call this recursively on subdirectories ? See also : NAMEVALUEPAIR Example : Suppose mydirname has a file '.ext1' . filenamesearchreplace ( mydirname ,{ '.ext1' },{ '.ext2' }, 'deleteOriginals' , 1 ) % renames any files with '.ext1' to have '.ext2', deleting old files","title":"filenamesearchreplace"},{"location":"reference/file/filenamesearchreplace.m/#filenamesearchreplace","text":"FILENAMESEARCHREPLACE - Seach and replace filenames within a directory FILENAMESEARCHREPLACE ( DIRNAME , SEARCHSTRS , REPLACESTRS , ... ) This function searches all files in the directory DIRNAME for matches of any string in the cell array of strings SEARCHSTRS . If it finds a match , then it creates a new file with the search string replaced by the corresponding entry in the cell array of strings REPLACESTRS . This function also can be modified by name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------- deleteOriginals ( 0 ) | Should original file be deleted ? useOutputDir ( 0 ) | Should we write to a different output directory ? OutputDirPath ( DIRNAME ) | The parent path of the output directory OutputDir ( 'subfolder' ) | The name of the output directry in OutputDirPath | ( will be created if it doesn ' t exist ) noOp ( 0 ) | If 1 , this will not perform the operation but will | display its intended action recursive ( 0 ) | Should we call this recursively on subdirectories ? See also : NAMEVALUEPAIR Example : Suppose mydirname has a file '.ext1' . filenamesearchreplace ( mydirname ,{ '.ext1' },{ '.ext2' }, 'deleteOriginals' , 1 ) % renames any files with '.ext1' to have '.ext2', deleting old files","title":"filenamesearchreplace"},{"location":"reference/file/fileobj.m/","text":"CLASS fileobj \u00b6 FILEOBJ - a Matlab binary file object ; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen , fread , fwrite , fseek , fclose , and ftell . Why do this ? One could imagine one day separating the process of reading and writing a data stream from the file system . For example , one could write to GRIDFS by overriding these functions , and the user 's code would never have to know. Superclasses \u00b6 handle Properties \u00b6 Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian' Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for fileobj / addlistener is inherited from superclass handle delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE ( FILEOBJ_OBJ ) Deletes the handle FILEOBJ_OBJ . If the file ( FILEOBJ_OBJ . fid ) is open , it is closed first . See also : HANDLE / DELETE , FILEOBJ / FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / eq is inherited from superclass handle fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE ( FILEOBJ_OBJ ) Close a file associated with a FILEOBJ . Attempt to close the file and then set FILEOBJ_OBJ . fid to - 1 . feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ ( ... ) Creates an empty FILEOBJ object . If FILENAME is provided , then the filename is stored . Documentation for fileobj / fileobj doc fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , FILEOBJ Help for fileobj / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also FILEOBJ , FILEOBJ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for fileobj / findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be 'bof' or - 1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / LE , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also FILEOBJ , FILEOBJ / DELETE Help for fileobj / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for fileobj / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / NE Help for fileobj / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / LT Help for fileobj / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also FILEOBJ , FILEOBJ / ADDLISTENER , FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for fileobj / notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' )","title":"fileobj"},{"location":"reference/file/fileobj.m/#class-fileobj","text":"FILEOBJ - a Matlab binary file object ; an interface to fopen, fread, fwrite, fseek, fclose, ftell This is an object interface to fopen , fread , fwrite , fseek , fclose , and ftell . Why do this ? One could imagine one day separating the process of reading and writing a data stream from the file system . For example , one could write to GRIDFS by overriding these functions , and the user 's code would never have to know.","title":"CLASS fileobj"},{"location":"reference/file/fileobj.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/file/fileobj.m/#properties","text":"Property Description fullpathfilename fid permission machineformat 'big-endian' or 'little-endian'","title":"Properties"},{"location":"reference/file/fileobj.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete delete a FILEOBJ_OBJ, closing file first if need be eq == (EQ) Test handle equality. fclose close a FILEOBJ feof test to see if a FILEOBJ is at END-OF-FILE ferror return the last file error message for FILEOBJ fgetl get a line from a FILEOBJ fgets get a line from a FILEOBJ fileobj create a new binary file object fileparts return filename parts for the file associated with FILEOBJ findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. fopen open a FILEOBJ fprintf print data to a FILEOBJ_OBJ fread read data from a FILEOBJ frewind 'rewind' a FILEOBJ back to the beginning fscanf scan data from a FILEOBJ_OBJ fseek seek to a location within a FILEOBJ ftell find current location within a FILEOBJ fwrite write data to a FILEOBJ ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. setproperties set the properties of a FILEOBJ","title":"Methods"},{"location":"reference/file/fileobj.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for fileobj / addlistener is inherited from superclass handle delete - delete a FILEOBJ_OBJ, closing file first if need be DELETE ( FILEOBJ_OBJ ) Deletes the handle FILEOBJ_OBJ . If the file ( FILEOBJ_OBJ . fid ) is open , it is closed first . See also : HANDLE / DELETE , FILEOBJ / FCLOSE eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / eq is inherited from superclass handle fclose - close a FILEOBJ FILEOBJ_OBJ = FCLOSE ( FILEOBJ_OBJ ) Close a file associated with a FILEOBJ . Attempt to close the file and then set FILEOBJ_OBJ . fid to - 1 . feof - test to see if a FILEOBJ is at END-OF-FILE B = FEOF ( FILEOBJ_OBJ ) Returns 1 if FILEOBJ_OBJ is at its end of file , 0 otherwise . See also : FSEEK , FILEOBJ / FSEEK , FTELL ferror - return the last file error message for FILEOBJ [ MESSAGE , ERRORNUM ] = FERROR ( FILEOBJ_OBJ , COMMAND ) Return the most recent file error MESSAGE and ERRORNUM for the file associated with FERROR . fgetl - get a line from a FILEOBJ TLINE = FGETL ( FILEOBJ_OBJ ) Returns the next line ( not including NEWLINE character ) just like FGETL . See also : FGETL fgets - get a line from a FILEOBJ TLINE = FGETS ( FILEOBJ_OBJ , [ NCHAR ] ) Returns the next line ( including NEWLINE character ) just like FGETS . See also : FGETS fileobj - create a new binary file object FILEOBJ_OBJ = FILEOBJ ( ... ) Creates an empty FILEOBJ object . If FILENAME is provided , then the filename is stored . Documentation for fileobj / fileobj doc fileobj fileparts - return filename parts for the file associated with FILEOBJ [PATHSTR,NAME,EXT] = FILEPARTS(FILEOBJ_OBJ) Returns FILEPARTS of the 'fullpathfilename' field of FILEOBJ. findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , FILEOBJ Help for fileobj / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also FILEOBJ , FILEOBJ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for fileobj / findprop is inherited from superclass handle fopen - open a FILEOBJ FILEOBJ_OBJ = FOPEN ( FILEOBJ_OBJ , [ , PERMISSION ] , [ MACHINEFORMAT ] , [ FILENAME ] ) Opens the file associated with a FILEOBJ_OBJ object . If FILENAME , PERMISSION , and MACHINEFORMAT are given , then those variables of FILEOBJ_OBJ are updated . If they are not given , then the existing values in the FILEOBJ_OBJ are used . Note that the order of the input arguments differs from FOPEN , so that the object can be called in place of an FID ( e . g ., fid = fopen ( myvariable ), where myvariable is either a file name or a FILEOBJ object ). If the operation is successful , then FILEOBJ_OBJ . fid is greater than 3. Otherwise , FILEOBJ_OBJ . fid is - 1. See also : FOPEN , FILEOBJ / FCLOSE , FCLOSE fprintf - print data to a FILEOBJ_OBJ [ COUNT ] = FPRINTF ( FID , FORMAT , A , ...) Call FPRINTF ( see FPRINTF for inputs ) for the file associated with FILEOBJ_OBJ . fread - read data from a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , COUNT , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to read COUNT elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FREAD for a full description of these input arguments . See also : FREAD frewind - 'rewind' a FILEOBJ back to the beginning FREWIND(FILEOBJ_OBJ) Seeks to the beginning of the file. See also: FSEEK, FILEOBJ/FSEEK, FTELL fscanf - scan data from a FILEOBJ_OBJ [ A,COUNT ] = FSCANF ( FID , FORMAT , [ SIZEA ] ) Call FSCANF ( see FSCANF for inputs ) for the file associated with FILEOBJ_OBJ . fseek - seek to a location within a FILEOBJ B = FSEEK ( FILEOBJ_OBJ , OFFSET , REFERENCE ) Seeks the file to the location OFFSET ( in bytes ) relative to REFERENCE . REFERENCE can be 'bof' or - 1 Beginning of file 'cof' or 0 Current position in file 'eof' or 1 End of file B is 0 on success and - 1 on failure . See also : FSEEK , FILEOBJ / FTELL ftell - find current location within a FILEOBJ LOCATION = FTELL ( FILEOBJ_OBJ ) Returns the current location ( in bytes ) relative to the beginning of the file . If the query fails , - 1 is returned . See also : FSEEK , FILEOBJ / FSEEK , FTELL fwrite - write data to a FILEOBJ COUNT = FWRITE ( FILEOBJ_OBJ , DATA , [ PRECISION ] , [ SKIP ] , [ MACHINEFORMAT ] ) Attempts to write DATA elements with resolution PRECISION . If PRECISION is not provided , then 'char' is assumed . If SKIP is provided , then SKIP is in number of bytes , unless PRECISION is in bits , in which case SKIP is in bits . MACHINEFORMAT is the machine format to use . See FWRITE for a full description of these input arguments . See also : FWRITE ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / LE , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / gt is inherited from superclass handle isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also FILEOBJ , FILEOBJ / DELETE Help for fileobj / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LT , FILEOBJ / NE Help for fileobj / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , FILEOBJ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for fileobj / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / NE Help for fileobj / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also FILEOBJ , FILEOBJ / EQ , FILEOBJ / GE , FILEOBJ / GT , FILEOBJ / LE , FILEOBJ / LT Help for fileobj / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also FILEOBJ , FILEOBJ / ADDLISTENER , FILEOBJ / LISTENER , EVENT . EVENTDATA , EVENTS Help for fileobj / notify is inherited from superclass handle setproperties - set the properties of a FILEOBJ FILEOBJ_OBJ = SETPROPERTIES ( FILEOBJ_OBJ , 'PROPERTY1' , VALUE1 , ...) Sets the properties of a FILEOBJ with name / value pairs . Properties are : fullpathfilename ; % the full path file name of the file fid ; % The Matlab file identifier permission ; % The file permission machineformat % big-endian ( 'b' ), little-endian ( 'l' ), or native ( 'n' )","title":"Methods help"},{"location":"reference/file/filesepconversion.m/","text":"filesepconversion \u00b6 FILESEPCONVERSION - convert from one FILESEP platform to another NEWFILESTRING = FILESEPCONVERSION ( FILESTRING , ORIG_FILESEP , NEW_FILESEP ) Converts a file string from one filepath convention to another . FILESTRING is a file path string like 'myfolder/myfile.txt' . ORIG_FILESEP is the original file separator , like '/' NEW_FILESEP is the new file separator , like '\\' Right now this function just performs a substitution . It is unknown if they are situations with escape characters ( because '\\' is often used as an escape character ) that will fail with this function .","title":"filesepconversion"},{"location":"reference/file/filesepconversion.m/#filesepconversion","text":"FILESEPCONVERSION - convert from one FILESEP platform to another NEWFILESTRING = FILESEPCONVERSION ( FILESTRING , ORIG_FILESEP , NEW_FILESEP ) Converts a file string from one filepath convention to another . FILESTRING is a file path string like 'myfolder/myfile.txt' . ORIG_FILESEP is the original file separator , like '/' NEW_FILESEP is the new file separator , like '\\' Right now this function just performs a substitution . It is unknown if they are situations with escape characters ( because '\\' is often used as an escape character ) that will fail with this function .","title":"filesepconversion"},{"location":"reference/file/findfilegroups.m/","text":"findfilegroups \u00b6 FINDFILEGROUPS - Find a group of files based on parameters FILELIST = FINDFILEGROUPS ( PARENTDIR , FILEPARAMETERS , ... ) Finds groups of files based on parameters . FILEPARAMETERS should be a cell list of file name search parameters . These parameters can include regular expresion wildcards ( '.*' ) and symbols that indicate that the same string needs to be present across files ( '#' ) . Searches will return matches of these groups of files in PARENTDIR and all of its subdirectories . FILELIST is a cell array of all of the instances of these file groups . That is , FILELIST { i } is the ith instance of these file groups . The full path file names are returned in the entries of FILELIST { i } . That is , FILELIST { i }{ j } is the jth file in the ith instance of the file groups . The parent directory is searched first for matches , and then all subdirectories are searched . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SameStringSearchSymbol ( '#' ) | The symbol to be used to indicate the the same | string across files UseSameStringSearchSymbol ( 1 ) | Should we use the same string search field ? UseLiteralCharacter ( 1 ) | Use the LiteralCharacter SearchParentFirst ( 1 ) | Should we search the parent before the subdirectories of the | parent ? Otherwise , subdirectories are searched first . SearchParent ( 1 ) | Should we search the parent ? SearchDepth ( Inf ) | How many directories 'deep' should we search ? | 0 means parent only , 1 means one folder in , ... Examples : ffg_prefix = [ userpath filesep 'tools' filesep 'vhlab-toolbox-matlab' ... filesep 'file' filesep 'test_dirs' filesep ]; % location of test directories % finds all files with '.ext' extension . fileparameters = { '.*\\.ext\\>' }; filelist = findfilegroups ([ ffg_prefix 'findfilegroupstest1' ], fileparameters ); % list all files to see which subset ( s ) was ( were ) selected : dir (([ ffg_prefix 'findfilegroupstest1' filesep '**/*' ])) % finds all sets of files 'myfile.ext1' and 'myfile.ext2' when these files % co - occur in the same subdirectory of PARENTDIR fileparameters = { 'myfile.ext1' , 'myfile.ext2' }; % finds all sets of files filelist = findfilegroups ([ ffg_prefix 'findfilegroupstest2' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest2' filesep '**/*' ])) % finds all sets of files 'myfile_#.ext1' and 'myfile_#.ext2' , where # is % the same string , and when these files co - occur in the same subdirectory . % For example , if the files 'stimtimes1.txt' and 'reference1.txt' were in the same % subdirectory , these would be returned together . fileparameters = { 'myfile_#.ext1' , 'myfile_#.ext2' } filelist = findfilegroups ([ ffg_prefix 'findfilegroupstest3' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest3' filesep '**/*' ])) See also : STRCMP_SUBSTITUTE","title":"findfilegroups"},{"location":"reference/file/findfilegroups.m/#findfilegroups","text":"FINDFILEGROUPS - Find a group of files based on parameters FILELIST = FINDFILEGROUPS ( PARENTDIR , FILEPARAMETERS , ... ) Finds groups of files based on parameters . FILEPARAMETERS should be a cell list of file name search parameters . These parameters can include regular expresion wildcards ( '.*' ) and symbols that indicate that the same string needs to be present across files ( '#' ) . Searches will return matches of these groups of files in PARENTDIR and all of its subdirectories . FILELIST is a cell array of all of the instances of these file groups . That is , FILELIST { i } is the ith instance of these file groups . The full path file names are returned in the entries of FILELIST { i } . That is , FILELIST { i }{ j } is the jth file in the ith instance of the file groups . The parent directory is searched first for matches , and then all subdirectories are searched . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SameStringSearchSymbol ( '#' ) | The symbol to be used to indicate the the same | string across files UseSameStringSearchSymbol ( 1 ) | Should we use the same string search field ? UseLiteralCharacter ( 1 ) | Use the LiteralCharacter SearchParentFirst ( 1 ) | Should we search the parent before the subdirectories of the | parent ? Otherwise , subdirectories are searched first . SearchParent ( 1 ) | Should we search the parent ? SearchDepth ( Inf ) | How many directories 'deep' should we search ? | 0 means parent only , 1 means one folder in , ... Examples : ffg_prefix = [ userpath filesep 'tools' filesep 'vhlab-toolbox-matlab' ... filesep 'file' filesep 'test_dirs' filesep ]; % location of test directories % finds all files with '.ext' extension . fileparameters = { '.*\\.ext\\>' }; filelist = findfilegroups ([ ffg_prefix 'findfilegroupstest1' ], fileparameters ); % list all files to see which subset ( s ) was ( were ) selected : dir (([ ffg_prefix 'findfilegroupstest1' filesep '**/*' ])) % finds all sets of files 'myfile.ext1' and 'myfile.ext2' when these files % co - occur in the same subdirectory of PARENTDIR fileparameters = { 'myfile.ext1' , 'myfile.ext2' }; % finds all sets of files filelist = findfilegroups ([ ffg_prefix 'findfilegroupstest2' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest2' filesep '**/*' ])) % finds all sets of files 'myfile_#.ext1' and 'myfile_#.ext2' , where # is % the same string , and when these files co - occur in the same subdirectory . % For example , if the files 'stimtimes1.txt' and 'reference1.txt' were in the same % subdirectory , these would be returned together . fileparameters = { 'myfile_#.ext1' , 'myfile_#.ext2' } filelist = findfilegroups ([ ffg_prefix 'findfilegroupstest3' ], fileparameters ); dir (([ ffg_prefix 'findfilegroupstest3' filesep '**/*' ])) See also : STRCMP_SUBSTITUTE","title":"findfilegroups"},{"location":"reference/file/findfiletype.m/","text":"findfiletype \u00b6 FINDFILETYPE - Find all files of a given extension in a folder FILENAMES = FINDFILETYPE(PATHNAME, EXTENSION) Find all the files with a given extension in a folder PATHNAME, including subfolders of PATHNAME.","title":"findfiletype"},{"location":"reference/file/findfiletype.m/#findfiletype","text":"FINDFILETYPE - Find all files of a given extension in a folder FILENAMES = FINDFILETYPE(PATHNAME, EXTENSION) Find all the files with a given extension in a folder PATHNAME, including subfolders of PATHNAME.","title":"findfiletype"},{"location":"reference/file/fixpath.m/","text":"fixpath \u00b6 PATHN = FIXPATH ( PATHSTR ) Checks the string PATHSTR to see if it ends in FILESEP ( '/' on the Unix platform , ':' on Macintosh OS9 , '\\' on Windows ) . PATHN is simply PATHSTR with a FILESEP attached at the end if necessary . See also : FILESEP","title":"fixpath"},{"location":"reference/file/fixpath.m/#fixpath","text":"PATHN = FIXPATH ( PATHSTR ) Checks the string PATHSTR to see if it ends in FILESEP ( '/' on the Unix platform , ':' on Macintosh OS9 , '\\' on Windows ) . PATHN is simply PATHSTR with a FILESEP attached at the end if necessary . See also : FILESEP","title":"fixpath"},{"location":"reference/file/fixtilde.m/","text":"fixtilde \u00b6 FIXTILDE - Removes ~ from filenames and replaces with user home directory NEWNAME = FIXTILDE ( FILENAME ) Removes '~' symbol for a user 's home directory in unix and replaces it with the actual path. e . g . FIXTILDE ( '~/myfile' ) returns '/home/username/myfile' If the tilde is not the leading character then no changes are made .","title":"fixtilde"},{"location":"reference/file/fixtilde.m/#fixtilde","text":"FIXTILDE - Removes ~ from filenames and replaces with user home directory NEWNAME = FIXTILDE ( FILENAME ) Removes '~' symbol for a user 's home directory in unix and replaces it with the actual path. e . g . FIXTILDE ( '~/myfile' ) returns '/home/username/myfile' If the tilde is not the leading character then no changes are made .","title":"fixtilde"},{"location":"reference/file/fullfilename.m/","text":"fullfilename \u00b6 FULLFILENAME - return the full path file name of a file FULLNAME = FULLFILENAME ( FILENAME , [ USEWHICH ] ) Given either a full file name ( with path ) or just a filename ( without path ), returns the full path filename FULLNAME . If FILENAME does not exist in the present working directory , but is on the Matlab path , it is located using WHICH , unless the user passes USEWHICH = 0. See also : FILEPARTS , WHICH Example : fullfilename ( 'myfile.txt' ) % returns [ pwd filesep 'myfile.txt' ] fullfilename ( '/Users/me/myfile.txt' ) % returns [ '/Users/me/myfile.txt' ]","title":"fullfilename"},{"location":"reference/file/fullfilename.m/#fullfilename","text":"FULLFILENAME - return the full path file name of a file FULLNAME = FULLFILENAME ( FILENAME , [ USEWHICH ] ) Given either a full file name ( with path ) or just a filename ( without path ), returns the full path filename FULLNAME . If FILENAME does not exist in the present working directory , but is on the Matlab path , it is located using WHICH , unless the user passes USEWHICH = 0. See also : FILEPARTS , WHICH Example : fullfilename ( 'myfile.txt' ) % returns [ pwd filesep 'myfile.txt' ] fullfilename ( '/Users/me/myfile.txt' ) % returns [ '/Users/me/myfile.txt' ]","title":"fullfilename"},{"location":"reference/file/getAllFiles.m/","text":"getAllFiles \u00b6 GETALLFILES - Get all files ( including those in subdirectories ) of a given directory FILELIST = GETALLFILES ( DIRNAME ) Returns the full path file names of all files under the directory DIRNAME . Files '.' and '..' are not returned . See also : DIR By Ziqi Wang","title":"getAllFiles"},{"location":"reference/file/getAllFiles.m/#getallfiles","text":"GETALLFILES - Get all files ( including those in subdirectories ) of a given directory FILELIST = GETALLFILES ( DIRNAME ) Returns the full path file names of all files under the directory DIRNAME . Files '.' and '..' are not returned . See also : DIR By Ziqi Wang","title":"getAllFiles"},{"location":"reference/file/isfilepathroot.m/","text":"isfilepathroot \u00b6 ISFILEPATHATROOT - determine if a file path is at the root or not B = ISFILEPATHROOT ( FILEPATH ) Determines if a FILEPATH is at the root of a drive or not . For computers for which ISPC is true , ISFILEPATHROOT is true if the FILEPATH begins with either '/' or '$:\\' . For computers for which ISUNIX is true , ISFILEPATHROOT is true if the FILEPATH is '/' . Note that the file path does not have to exist to specify a valid file path . It is just whether it has the structure of a full file path . See also : ISPC , ISUNIX Examples : % on unix isfilepathroot ( '/Volumes/test/mytestfile.txt' ) % true isfilepathroot ( 'myfile.txt' ) % false % on Windows isfilepathroot ( 'C:\\myfolder\\test' ) is true isfilepathroot ( '/C/myfolder/test' ) is true","title":"isfilepathroot"},{"location":"reference/file/isfilepathroot.m/#isfilepathroot","text":"ISFILEPATHATROOT - determine if a file path is at the root or not B = ISFILEPATHROOT ( FILEPATH ) Determines if a FILEPATH is at the root of a drive or not . For computers for which ISPC is true , ISFILEPATHROOT is true if the FILEPATH begins with either '/' or '$:\\' . For computers for which ISUNIX is true , ISFILEPATHROOT is true if the FILEPATH is '/' . Note that the file path does not have to exist to specify a valid file path . It is just whether it has the structure of a full file path . See also : ISPC , ISUNIX Examples : % on unix isfilepathroot ( '/Volumes/test/mytestfile.txt' ) % true isfilepathroot ( 'myfile.txt' ) % false % on Windows isfilepathroot ( 'C:\\myfolder\\test' ) is true isfilepathroot ( '/C/myfolder/test' ) is true","title":"isfilepathroot"},{"location":"reference/file/isurl.m/","text":"isurl \u00b6 ISURL - Does this string point to a URL ? B = ISURL ( INPUTSTRING ) Returns 1 if the string contains '://' . Returns 0 otherwise .","title":"isurl"},{"location":"reference/file/isurl.m/#isurl","text":"ISURL - Does this string point to a URL ? B = ISURL ( INPUTSTRING ) Returns 1 if the string contains '://' . Returns 0 otherwise .","title":"isurl"},{"location":"reference/file/linpath2mac.m/","text":"linpath2mac \u00b6 LINPATH2MAC Converts a Linux pathname to a Macintosh pathname. NEWPATH = LINPATH2MAC(PATHNAME) Replaces all '/' characters with ':' characters.","title":"linpath2mac"},{"location":"reference/file/linpath2mac.m/#linpath2mac","text":"LINPATH2MAC Converts a Linux pathname to a Macintosh pathname. NEWPATH = LINPATH2MAC(PATHNAME) Replaces all '/' characters with ':' characters.","title":"linpath2mac"},{"location":"reference/file/load2celllist.m/","text":"load2celllist \u00b6 LOAD2CELLLIST - Loads saved objects to a cell list [ OBJS , OBJNAMES ] = LOAD2CELLLIST ( FILENAME , ... ) Loads objects from a Matlab file FILENAME into a cell list . Additional arguments are passed on to the Matlab LOAD command . OBJS is a cell list of all variables matching the loading criteria Example : [ myobjs , mynames ] = LOAD2CELLLIST ( 'myfile' , 'cell*' , '-mat' ); If the file 'myfile' contains two variables named 'cell1' and 'cell2' , then mynames = { 'cell1' 'cell2' } and myobjs = { ( data of 'cell1' ) ( data of 'cell2' ) } See also : LOAD , READCELLSFROMEXPERIMENTLIST","title":"load2celllist"},{"location":"reference/file/load2celllist.m/#load2celllist","text":"LOAD2CELLLIST - Loads saved objects to a cell list [ OBJS , OBJNAMES ] = LOAD2CELLLIST ( FILENAME , ... ) Loads objects from a Matlab file FILENAME into a cell list . Additional arguments are passed on to the Matlab LOAD command . OBJS is a cell list of all variables matching the loading criteria Example : [ myobjs , mynames ] = LOAD2CELLLIST ( 'myfile' , 'cell*' , '-mat' ); If the file 'myfile' contains two variables named 'cell1' and 'cell2' , then mynames = { 'cell1' 'cell2' } and myobjs = { ( data of 'cell1' ) ( data of 'cell2' ) } See also : LOAD , READCELLSFROMEXPERIMENTLIST","title":"load2celllist"},{"location":"reference/file/loadIgor.m/","text":"loadIgor \u00b6 LOADIGOR Load Igor Binary file DATA = LOADIGOR ( FILENAME ) loads data from an Igor binary data file . The data is assumed to be one dimentional , and the file is assumed to be from a Macintosh computer ( that is , the byte ordering is assumed to be big - endian ); this function , however , should work on any computer . One may also use DATA = LOADIGOR ( FILENAME , START , STOP ) This will only load data between samples START and STOP . STOP may be Inf to indicate the end of the file . The first sample is numbered 1. Note : This program has only been tested with float data . Developer note : Who wrote this ? Was it Steve ? Ken Sugino ?","title":"loadIgor"},{"location":"reference/file/loadIgor.m/#loadigor","text":"LOADIGOR Load Igor Binary file DATA = LOADIGOR ( FILENAME ) loads data from an Igor binary data file . The data is assumed to be one dimentional , and the file is assumed to be from a Macintosh computer ( that is , the byte ordering is assumed to be big - endian ); this function , however , should work on any computer . One may also use DATA = LOADIGOR ( FILENAME , START , STOP ) This will only load data between samples START and STOP . STOP may be Inf to indicate the end of the file . The first sample is numbered 1. Note : This program has only been tested with float data . Developer note : Who wrote this ? Was it Steve ? Ken Sugino ?","title":"loadIgor"},{"location":"reference/file/loadStructArray.m/","text":"loadStructArray \u00b6 LOADSTRUCTARRAY - load a struct array from a tab - delimited file A = LOADSTRUCTARRAY ( FNAME [, FIELDS ]) Reads tab - delimited text from the file FNAME to create an array of Matlab STRUCT objects . If FIELDS is not provided , then the field names are read from the first row of FNAME . If the header row contains strings that are not valid Matlab structure field names % ( because they have a space or begin with a number for example ), then they will be converted to valid variable names with MATLAB . LANG . MAKEVALIDNAME . Each subsequent row contains the values for each entry in the STRUCT array . See also : SAVESTRUCTARRAY , TABSTR2STRUCT","title":"loadStructArray"},{"location":"reference/file/loadStructArray.m/#loadstructarray","text":"LOADSTRUCTARRAY - load a struct array from a tab - delimited file A = LOADSTRUCTARRAY ( FNAME [, FIELDS ]) Reads tab - delimited text from the file FNAME to create an array of Matlab STRUCT objects . If FIELDS is not provided , then the field names are read from the first row of FNAME . If the header row contains strings that are not valid Matlab structure field names % ( because they have a space or begin with a number for example ), then they will be converted to valid variable names with MATLAB . LANG . MAKEVALIDNAME . Each subsequent row contains the values for each entry in the STRUCT array . See also : SAVESTRUCTARRAY , TABSTR2STRUCT","title":"loadStructArray"},{"location":"reference/file/read_tab_delimited_file.m/","text":"read_tab_delimited_file \u00b6 READ_TAB_DELIMITED_FILE - Reads data from a tab - delimited file ; tries to sort string / number data OUTPUT = READ_TAB_DELIMTED_FILE ( FILENAME ) Reads data from a tab - delimited text file . OUTPUT is a cell list . OUTPUT { i , j } is the value from the ith row and jth column in the tab - delimited file ; note that the rows and columns need not have the same number of entries . The function looks at each string . If it has two '/' anywhere in them , the value is assumed to be a date and is read as a string . Otherwise , this function tries to assign each value a number using the function STR2NUM . If this process fails , then the value is assumed to be a text string and is stored as such .","title":"read_tab_delimited_file"},{"location":"reference/file/read_tab_delimited_file.m/#read_tab_delimited_file","text":"READ_TAB_DELIMITED_FILE - Reads data from a tab - delimited file ; tries to sort string / number data OUTPUT = READ_TAB_DELIMTED_FILE ( FILENAME ) Reads data from a tab - delimited text file . OUTPUT is a cell list . OUTPUT { i , j } is the value from the ith row and jth column in the tab - delimited file ; note that the rows and columns need not have the same number of entries . The function looks at each string . If it has two '/' anywhere in them , the value is assumed to be a date and is read as a string . Otherwise , this function tries to assign each value a number using the function STR2NUM . If this process fails , then the value is assumed to be a text string and is stored as such .","title":"read_tab_delimited_file"},{"location":"reference/file/readlabviewarray.m/","text":"readlabviewarray \u00b6 READLABVIEWARRAY - Reads a LabView array into Matlab A = READLABVIEWARRAY ( FNAME , DATASIZE , MACHINEFORMAT ) Reads in values from a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FREAD ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"readlabviewarray"},{"location":"reference/file/readlabviewarray.m/#readlabviewarray","text":"READLABVIEWARRAY - Reads a LabView array into Matlab A = READLABVIEWARRAY ( FNAME , DATASIZE , MACHINEFORMAT ) Reads in values from a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FREAD ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"readlabviewarray"},{"location":"reference/file/readplainmat.m/","text":"readplainmat \u00b6 READPLAINMAT - read a simple binary matrix from disk MAT = READPLAINMAT ( FID ) Reads a basic matrix written by WRITEPLAINMAT . See WRITEPLAINMAT for details of the file format . FID should be an open FID ( see FOPEN ) . For example , see WRITEPLAINMAT .","title":"readplainmat"},{"location":"reference/file/readplainmat.m/#readplainmat","text":"READPLAINMAT - read a simple binary matrix from disk MAT = READPLAINMAT ( FID ) Reads a basic matrix written by WRITEPLAINMAT . See WRITEPLAINMAT for details of the file format . FID should be an open FID ( see FOPEN ) . For example , see WRITEPLAINMAT .","title":"readplainmat"},{"location":"reference/file/reference_txt.m/","text":"reference_txt \u00b6 REFERENCE_TXT Documentation of the 'reference.txt' file that is used by DIRSTRUCT objects The DIRSTRUCT class is intended to manage experimental data . The data are organized into separate test directories , with each directory containing one epoch of recording . Each such directory has a file called 'reference.txt' that contains information about the signals that were acquired during that epoch . The user can query the DIRSTRUCT object to see what type of signals were recorded and to load data . The file 'reference.txt' describes one signal on each line with a name and reference number pair and a record type . For example , if one were to record from two single electrodes , one in lgn and one in cortex , and this was the first spot visited in cortex and the second spot visited in lgn , one might use the following as the reference . txt file ( spaces are tabs , include field title line ): name ref type lgn 2 singleEC ctx 1 singleEC The NAME and REFERENCE of an entry are referred to as a name / ref pair . For example , mynameref = struct ( 'name' , 'lgn' , 'ref' , 2 ) is a name / ref pair that refers to the entry with name 'lgn' and reference number 2. One can using the DIRSTRUCT object to search for the directories where NAME / REF pairs were recorded , or to identify all NAME / REF pairs that are in an experiment . See also : DIRSTRUCT , METHODS ( 'DIRSTRUCT' )","title":"reference_txt"},{"location":"reference/file/reference_txt.m/#reference_txt","text":"REFERENCE_TXT Documentation of the 'reference.txt' file that is used by DIRSTRUCT objects The DIRSTRUCT class is intended to manage experimental data . The data are organized into separate test directories , with each directory containing one epoch of recording . Each such directory has a file called 'reference.txt' that contains information about the signals that were acquired during that epoch . The user can query the DIRSTRUCT object to see what type of signals were recorded and to load data . The file 'reference.txt' describes one signal on each line with a name and reference number pair and a record type . For example , if one were to record from two single electrodes , one in lgn and one in cortex , and this was the first spot visited in cortex and the second spot visited in lgn , one might use the following as the reference . txt file ( spaces are tabs , include field title line ): name ref type lgn 2 singleEC ctx 1 singleEC The NAME and REFERENCE of an entry are referred to as a name / ref pair . For example , mynameref = struct ( 'name' , 'lgn' , 'ref' , 2 ) is a name / ref pair that refers to the entry with name 'lgn' and reference number 2. One can using the DIRSTRUCT object to search for the directories where NAME / REF pairs were recorded , or to identify all NAME / REF pairs that are in an experiment . See also : DIRSTRUCT , METHODS ( 'DIRSTRUCT' )","title":"reference_txt"},{"location":"reference/file/release_lock_file.m/","text":"release_lock_file \u00b6 RELEASE_LOCK_FILE - release a lock file with the key B = RELEASE_LOCK_FILE ( FID_OR_FILENAME , KEY ) Release a lock file given its FID or its FILENAME and the correct KEY that was issued by the function CHECKOUT_LOCK_FILE . Removes the file if the key matches . B is 1 if the lockfile is either not present or if it was removed successfully . B is 0 if the key does not match ( and the file is not removed . ) An error is triggered if the lock file does not have the expected contents ( an expiration time and a key ) . See also : CHECKOUT_LOCK_FILE For an example , see CHECKOUT_LOCK_FILE","title":"release_lock_file"},{"location":"reference/file/release_lock_file.m/#release_lock_file","text":"RELEASE_LOCK_FILE - release a lock file with the key B = RELEASE_LOCK_FILE ( FID_OR_FILENAME , KEY ) Release a lock file given its FID or its FILENAME and the correct KEY that was issued by the function CHECKOUT_LOCK_FILE . Removes the file if the key matches . B is 1 if the lockfile is either not present or if it was removed successfully . B is 0 if the key does not match ( and the file is not removed . ) An error is triggered if the lock file does not have the expected contents ( an expiration time and a key ) . See also : CHECKOUT_LOCK_FILE For an example , see CHECKOUT_LOCK_FILE","title":"release_lock_file"},{"location":"reference/file/rename_mfiles_functions.m/","text":"rename_mfiles_functions \u00b6 RENAME_MFILES_FUNCTIONS - Rename mfiles and function names RENAME_MFILES_FUNCTIONS ( MFILEDIRS , EDITMFILEDIRS , ... ) This function traverses the directory ( and all subdirectories ) MFILEDIRS and identifies all . m files . If any file name renaming parameters ( see below ) are specified , then the . m files are renamed , and any text within the files that refers to the filename is edited to match the new name . The function then traverses the directory EDITMFILEDIRS and any of its subdirectories , looking for text occurrences of the renamed functions , which are replaced with the new values . This file also accepts name / value pairs that specify file renaming parameters : Parameter ( default ) | Description --------------------------------------------------------------------------------- dirstrings_to_exclude | Directories whose name contains these strings will be ignored { '.git' , 'archived_code' } | See also : NAMEVALUEPAIR","title":"rename_mfiles_functions"},{"location":"reference/file/rename_mfiles_functions.m/#rename_mfiles_functions","text":"RENAME_MFILES_FUNCTIONS - Rename mfiles and function names RENAME_MFILES_FUNCTIONS ( MFILEDIRS , EDITMFILEDIRS , ... ) This function traverses the directory ( and all subdirectories ) MFILEDIRS and identifies all . m files . If any file name renaming parameters ( see below ) are specified , then the . m files are renamed , and any text within the files that refers to the filename is edited to match the new name . The function then traverses the directory EDITMFILEDIRS and any of its subdirectories , looking for text occurrences of the renamed functions , which are replaced with the new values . This file also accepts name / value pairs that specify file renaming parameters : Parameter ( default ) | Description --------------------------------------------------------------------------------- dirstrings_to_exclude | Directories whose name contains these strings will be ignored { '.git' , 'archived_code' } | See also : NAMEVALUEPAIR","title":"rename_mfiles_functions"},{"location":"reference/file/saveStructArray.m/","text":"saveStructArray \u00b6 SAVESTRUCTARRAY - Save a structure array into a text file SAVESTRUCTARRAY ( FILENAME , STRUCTARRAY , [ HEADER ] ) Saves structure array data of type STRUCT into a text file . FILENAME is the name of the file to be written . STRUCTARRAY is the Matlab structure to be written ( of type STRUCT ). If HEADER is 1 , then a header row with tab - delimited field names is written ( recommended if the file is to be read back in with LOADSTRUCTARRAY ). The input argument HEADER is optional ( and is 1 if not specified ). Any existing FILENAME is overwritten . Originally from Ken Sugino See also : LOADSTRUCTARRAY , STRUCT , TABSTR2STRUCT","title":"saveStructArray"},{"location":"reference/file/saveStructArray.m/#savestructarray","text":"SAVESTRUCTARRAY - Save a structure array into a text file SAVESTRUCTARRAY ( FILENAME , STRUCTARRAY , [ HEADER ] ) Saves structure array data of type STRUCT into a text file . FILENAME is the name of the file to be written . STRUCTARRAY is the Matlab structure to be written ( of type STRUCT ). If HEADER is 1 , then a header row with tab - delimited field names is written ( recommended if the file is to be read back in with LOADSTRUCTARRAY ). The input argument HEADER is optional ( and is 1 if not specified ). Any existing FILENAME is overwritten . Originally from Ken Sugino See also : LOADSTRUCTARRAY , STRUCT , TABSTR2STRUCT","title":"saveStructArray"},{"location":"reference/file/saveasv73.m/","text":"saveasv73 \u00b6 SAVEASV73 - save a Matlab .mat file as a -v7.3 file SAVEASV73(FILENAME) Saves a Matlab .mat file with name FILENAME as a -v7.3 file. The original file is preserved as FILENAME_old.mat. See also: SAVE","title":"saveasv73"},{"location":"reference/file/saveasv73.m/#saveasv73","text":"SAVEASV73 - save a Matlab .mat file as a -v7.3 file SAVEASV73(FILENAME) Saves a Matlab .mat file with name FILENAME as a -v7.3 file. The original file is preserved as FILENAME_old.mat. See also: SAVE","title":"saveasv73"},{"location":"reference/file/searchreplacefiles_shell.m/","text":"searchreplacefiles_shell \u00b6 SEARCHREPLACEFILES_SHELL - search and replace text in all files in a directory search SEARCHREPLACEFILES_SHELL ( DIRSEARCH , FINDSTRING , REPLACESTRING ) Searches all of the files in the string DIRSEARCH ( examples : '*.m' , or '*/*.m' ) for occurrances of the string FINDSTRING and replaces those strings with REPLACESTRING . At present , this requires unix ( it calls the shell commands 'find' and 'sed' ) . The function prints its shell command before attempting to run .","title":"searchreplacefiles_shell"},{"location":"reference/file/searchreplacefiles_shell.m/#searchreplacefiles_shell","text":"SEARCHREPLACEFILES_SHELL - search and replace text in all files in a directory search SEARCHREPLACEFILES_SHELL ( DIRSEARCH , FINDSTRING , REPLACESTRING ) Searches all of the files in the string DIRSEARCH ( examples : '*.m' , or '*/*.m' ) for occurrances of the string FINDSTRING and replaces those strings with REPLACESTRING . At present , this requires unix ( it calls the shell commands 'find' and 'sed' ) . The function prints its shell command before attempting to run .","title":"searchreplacefiles_shell"},{"location":"reference/file/str2text.m/","text":"str2text \u00b6 STR2TEXT - Write a string to a text file STR2TEXT(FILENAME, str) Writes the strings to the new text file FILENAME.","title":"str2text"},{"location":"reference/file/str2text.m/#str2text","text":"STR2TEXT - Write a string to a text file STR2TEXT(FILENAME, str) Writes the strings to the new text file FILENAME.","title":"str2text"},{"location":"reference/file/string2filestring.m/","text":"string2filestring \u00b6 STRING2FILESTRING - edit a string so it its suitable for use as part of a filename ( remove whitespace ) FS = STRING2FILESTRING ( S ) Modifies the string S so that it is suitable for use as part of a filename . Removes any characters that are not letters ( 'A' - 'Z' , 'a' - 'z' ) or digits ( '0' - '9' ) and replaces them with '_' . Example : mystr = 'This is a variable name: 1234.' ; string2filestring ( mystr ) % returns 'This_is_a_variable_name__1234_'","title":"string2filestring"},{"location":"reference/file/string2filestring.m/#string2filestring","text":"STRING2FILESTRING - edit a string so it its suitable for use as part of a filename ( remove whitespace ) FS = STRING2FILESTRING ( S ) Modifies the string S so that it is suitable for use as part of a filename . Removes any characters that are not letters ( 'A' - 'Z' , 'a' - 'z' ) or digits ( '0' - '9' ) and replaces them with '_' . Example : mystr = 'This is a variable name: 1234.' ; string2filestring ( mystr ) % returns 'This_is_a_variable_name__1234_'","title":"string2filestring"},{"location":"reference/file/text2cellnum.m/","text":"text2cellnum \u00b6 TEXT2CELLNUM - Read each row of a text file as numeric data to produce array of cells C = TEXT2CELLNUM(FILENAME) Reads a text file and imports each line as a numeric matrix entry in a cell array. See also: FGETL, TEXT2CELLSTR, STR2NUM","title":"text2cellnum"},{"location":"reference/file/text2cellnum.m/#text2cellnum","text":"TEXT2CELLNUM - Read each row of a text file as numeric data to produce array of cells C = TEXT2CELLNUM(FILENAME) Reads a text file and imports each line as a numeric matrix entry in a cell array. See also: FGETL, TEXT2CELLSTR, STR2NUM","title":"text2cellnum"},{"location":"reference/file/text2cellstr.m/","text":"text2cellstr \u00b6 TEXT2CELLSTR - Read a cell array of strings from a text file C = TEXT2CELLSTR(FILENAME) Reads a text file and imports each line as an entry in a cell array of strings. See also: FGETL","title":"text2cellstr"},{"location":"reference/file/text2cellstr.m/#text2cellstr","text":"TEXT2CELLSTR - Read a cell array of strings from a text file C = TEXT2CELLSTR(FILENAME) Reads a text file and imports each line as an entry in a cell array of strings. See also: FGETL","title":"text2cellstr"},{"location":"reference/file/textfile2char.m/","text":"textfile2char \u00b6 TEXTFILE2CHAR - Read a text file into a character string STR = TEXTFILE2CHAR(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"textfile2char"},{"location":"reference/file/textfile2char.m/#textfile2char","text":"TEXTFILE2CHAR - Read a text file into a character string STR = TEXTFILE2CHAR(FILENAME) This function reads the entire contents of the file FILENAME into the character string STR.","title":"textfile2char"},{"location":"reference/file/vcard2mat.m/","text":"vcard2mat \u00b6 VCARD2STRUCT - read information from Vcard text file , return as Matlab struct V = VCARD2STRUCT ( VCARDFILE ) Reads entries from a VCARD text file . VCARDFILE can be a text filename or a FILEOBJ object . Entries that take more than one line ( like embedded photos ) are currently skipped . The file will be closed at the conclusion of reading it . developer note : assumes parameter names are 'type' , should read it need to look ahead to next line","title":"vcard2mat"},{"location":"reference/file/vcard2mat.m/#vcard2mat","text":"VCARD2STRUCT - read information from Vcard text file , return as Matlab struct V = VCARD2STRUCT ( VCARDFILE ) Reads entries from a VCARD text file . VCARDFILE can be a text filename or a FILEOBJ object . Entries that take more than one line ( like embedded photos ) are currently skipped . The file will be closed at the conclusion of reading it . developer note : assumes parameter names are 'type' , should read it need to look ahead to next line","title":"vcard2mat"},{"location":"reference/file/writelabviewarray.m/","text":"writelabviewarray \u00b6 WRITELABVIEWARRAY - Write a LabView array into Matlab WRITELABVIEWARRAY ( FNAME , A , DATASIZE , MACHINEFORMAT ) Write values in matrix A to a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FWRITE ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"writelabviewarray"},{"location":"reference/file/writelabviewarray.m/#writelabviewarray","text":"WRITELABVIEWARRAY - Write a LabView array into Matlab WRITELABVIEWARRAY ( FNAME , A , DATASIZE , MACHINEFORMAT ) Write values in matrix A to a LabView array file . DATASIZE is the size of the data ; the argument should be a size suitable for using in the function FWRITE ( e . g ., 'double' , 'int' , etc ) MACHINEFORMAT is the one of the following strings , as described in the FOPEN help ( default is 'b' ) : 'ieee-le' or 'l' - IEEE floating point with little - endian byte ordering 'ieee-be' or 'b' - IEEE floating point with big - endian byte ordering 'ieee-le.l64' or 'a' - IEEE floating point with little - endian byte ordering and 64 bit long data type 'ieee-be.l64' or 's' - IEEE floating point with big - endian byte ordering and 64 bit long data type .","title":"writelabviewarray"},{"location":"reference/file/writeplainmat.m/","text":"writeplainmat \u00b6 WRITEPLAINVECTOR - write a simple binary matrix to disk WRITEPLAINMAT ( FID , MAT ) Writes a basic matrix to disk such that it can be read easily . FID should be a Matlab file identifier ( see FOPEN ). The binary data is written using FID 's byte order. The first entry is a character string indicating the type of data to be stored. This is just class(mat) (see CLASS). The first entry is a uint8 DIM that indicates the dimension of MAT (see SIZE). Next, a 1xDIM vector in uint32 format describes the number of entries in each dimension. Finally, the entries of MAT are written as individual elements. Only classes that can be sent to FWRITE can be used here (such as ' char ', ' double ', ' uint8 ', etc; see FWRITE). See also: CLASS, SIZE, FWRITE. Example: data = rand(3,7), fid = fopen(' myfile . dat ',' w ',' b '); % write, big-endian writeplainmat(fid,data); fclose(fid); fid = fopen(' myfile . dat ',' r ',' b ' ); % read , big-endian mydata = readplainmat ( fid ); fclose ( fid ); mydata , % display mydata data-mydata , % display the difference","title":"writeplainmat"},{"location":"reference/file/writeplainmat.m/#writeplainmat","text":"WRITEPLAINVECTOR - write a simple binary matrix to disk WRITEPLAINMAT ( FID , MAT ) Writes a basic matrix to disk such that it can be read easily . FID should be a Matlab file identifier ( see FOPEN ). The binary data is written using FID 's byte order. The first entry is a character string indicating the type of data to be stored. This is just class(mat) (see CLASS). The first entry is a uint8 DIM that indicates the dimension of MAT (see SIZE). Next, a 1xDIM vector in uint32 format describes the number of entries in each dimension. Finally, the entries of MAT are written as individual elements. Only classes that can be sent to FWRITE can be used here (such as ' char ', ' double ', ' uint8 ', etc; see FWRITE). See also: CLASS, SIZE, FWRITE. Example: data = rand(3,7), fid = fopen(' myfile . dat ',' w ',' b '); % write, big-endian writeplainmat(fid,data); fclose(fid); fid = fopen(' myfile . dat ',' r ',' b ' ); % read , big-endian mydata = readplainmat ( fid ); fclose ( fid ); mydata , % display mydata data-mydata , % display the difference","title":"writeplainmat"},{"location":"reference/file/%40dirstruct/addtag.m/","text":"addtag \u00b6 ADDTAG - Add a tag to a dirstruct directory ADDTAG ( THEDIRSTRUCT , DIR , TAGNAME , VALUE ) Add a 'tag' to the directory DIR that is part of the directory structure object ( DIRSTRUCT ) named THEDIRSTRUCT . DIR should just be the name of the directory within THEDIRSTRUCT 's path. Tags are name / value pairs . The TAGNAME must be a valid Matlab variable name . Value can be any value that can be written to a string with SAVESTRUCTARRAY . See also : GETTAG , SAVESTRUCTARRAY","title":"addtag"},{"location":"reference/file/%40dirstruct/addtag.m/#addtag","text":"ADDTAG - Add a tag to a dirstruct directory ADDTAG ( THEDIRSTRUCT , DIR , TAGNAME , VALUE ) Add a 'tag' to the directory DIR that is part of the directory structure object ( DIRSTRUCT ) named THEDIRSTRUCT . DIR should just be the name of the directory within THEDIRSTRUCT 's path. Tags are name / value pairs . The TAGNAME must be a valid Matlab variable name . Value can be any value that can be written to a string with SAVESTRUCTARRAY . See also : GETTAG , SAVESTRUCTARRAY","title":"addtag"},{"location":"reference/file/%40dirstruct/deleteexpvar.m/","text":"deleteexpvar \u00b6 DELETEEXPVAR - Delete a variable from the experiment . mat file in a DIRSTRUCT DELETEEXPVAR ( MYDIRSTRUCT , NAMETOBEDELETED ) Deletes an experiment variable from the DIRSTRUCT given . NAMETOBEDELETED can be a single string or should be a cell list of strings of variable names . Note that there must be enough memory to read in the entire set of saved variables for the DIRSTRUCT . If one also wants to save some new data to the DIRSTRUCT , one can pass additional arguments : DELETEEXPVAR ( MYDIRSTRUCT , NAMETOBEDELETED , ADDITIONALVARS , ADDITIONALVARNAMES , PRESERVE_ASSOCIATES ) This will delete the variables titled NAMETOBEDELETED , and add variables with names ADDITIONALVARNAMES with data ADDITIONALVARS . ADDITIONALVARNAMES and ADDITIONALVARS should be cell lists , so that ADDITIONALVARNAMES { i } is the name of the variable whose data is ADDITIONALVARS { i } . If PRESERVE_ASSOCIATES is 1 , then any associates of MEASUREDDATA objects are preserved . This form is functional equivalent to : DELETEEXPVAR ( MYDIRSTRUCT , NAMETOBEDELETED ); SAVEEXPVAR ( MYDIRSTRUCT , ADDITIONALVARS , ADDITIONALVARNAMES , PRESERVE_ASSOCIATES ); but doing this in one step requires much less disk access and is faster . See also : DIRSTRUCT , SAVEEXPVAR , GETEXPERIMENTFILE","title":"deleteexpvar"},{"location":"reference/file/%40dirstruct/deleteexpvar.m/#deleteexpvar","text":"DELETEEXPVAR - Delete a variable from the experiment . mat file in a DIRSTRUCT DELETEEXPVAR ( MYDIRSTRUCT , NAMETOBEDELETED ) Deletes an experiment variable from the DIRSTRUCT given . NAMETOBEDELETED can be a single string or should be a cell list of strings of variable names . Note that there must be enough memory to read in the entire set of saved variables for the DIRSTRUCT . If one also wants to save some new data to the DIRSTRUCT , one can pass additional arguments : DELETEEXPVAR ( MYDIRSTRUCT , NAMETOBEDELETED , ADDITIONALVARS , ADDITIONALVARNAMES , PRESERVE_ASSOCIATES ) This will delete the variables titled NAMETOBEDELETED , and add variables with names ADDITIONALVARNAMES with data ADDITIONALVARS . ADDITIONALVARNAMES and ADDITIONALVARS should be cell lists , so that ADDITIONALVARNAMES { i } is the name of the variable whose data is ADDITIONALVARS { i } . If PRESERVE_ASSOCIATES is 1 , then any associates of MEASUREDDATA objects are preserved . This form is functional equivalent to : DELETEEXPVAR ( MYDIRSTRUCT , NAMETOBEDELETED ); SAVEEXPVAR ( MYDIRSTRUCT , ADDITIONALVARS , ADDITIONALVARNAMES , PRESERVE_ASSOCIATES ); but doing this in one step requires much less disk access and is faster . See also : DIRSTRUCT , SAVEEXPVAR , GETEXPERIMENTFILE","title":"deleteexpvar"},{"location":"reference/file/%40dirstruct/dirstruct.m/","text":"dirstruct \u00b6 [ DS ] = DIRSTRUCT ( PATHNAME ) Returns a DIRSTRUCT object . This class is intended to manage experimental data The data are organized into separate test directories , with each directory containing one epoch of recording . Each such directory has a file called 'reference.txt' that contains information about the signals that were acquired during that epoch . The user can query the DIRSTRUCT object to see what type of signals were recorded and to load data . The file 'reference.txt' describes one signal on each line with a name and reference number pair and a record type . For example , if one were to record from two single electrodes , one in lgn and one in cortex , and this was the first spot visited in cortex and the second spot visited in lgn , one might use the following as the reference . txt file ( spaces are tabs , include field title line ): name ref type lgn 2 singleEC ctx 1 singleEC See also : METHODS ( 'DIRSTRUCT' ) Documentation for dirstruct doc dirstruct","title":"dirstruct"},{"location":"reference/file/%40dirstruct/dirstruct.m/#dirstruct","text":"[ DS ] = DIRSTRUCT ( PATHNAME ) Returns a DIRSTRUCT object . This class is intended to manage experimental data The data are organized into separate test directories , with each directory containing one epoch of recording . Each such directory has a file called 'reference.txt' that contains information about the signals that were acquired during that epoch . The user can query the DIRSTRUCT object to see what type of signals were recorded and to load data . The file 'reference.txt' describes one signal on each line with a name and reference number pair and a record type . For example , if one were to record from two single electrodes , one in lgn and one in cortex , and this was the first spot visited in cortex and the second spot visited in lgn , one might use the following as the reference . txt file ( spaces are tabs , include field title line ): name ref type lgn 2 singleEC ctx 1 singleEC See also : METHODS ( 'DIRSTRUCT' ) Documentation for dirstruct doc dirstruct","title":"dirstruct"},{"location":"reference/file/%40dirstruct/display.m/","text":"display \u00b6 DISPLAY print info from a DIRSTRUCT object DISPLAY(DS) Displays information about the DIRSTRUCT object DS See also: DS","title":"display"},{"location":"reference/file/%40dirstruct/display.m/#display","text":"DISPLAY print info from a DIRSTRUCT object DISPLAY(DS) Displays information about the DIRSTRUCT object DS See also: DS","title":"display"},{"location":"reference/file/%40dirstruct/getactive.m/","text":"getactive \u00b6 DIRLIST = GETACTIVE(MYDIRSTRUCT) Returns a cell list of the active directories of the DIRSTRUCT object MYDIRSTRUCT.","title":"getactive"},{"location":"reference/file/%40dirstruct/getactive.m/#getactive","text":"DIRLIST = GETACTIVE(MYDIRSTRUCT) Returns a cell list of the active directories of the DIRSTRUCT object MYDIRSTRUCT.","title":"getactive"},{"location":"reference/file/%40dirstruct/getallnamerefs.m/","text":"getallnamerefs \u00b6 NR = GETALLNAMEREFS(MYDIRSTRUCT) Returns a structure with all of the name/ref pairs contained in the directories associated with the dirstruct MYDIRSTRUCT. See also: DIRSTRUCT","title":"getallnamerefs"},{"location":"reference/file/%40dirstruct/getallnamerefs.m/#getallnamerefs","text":"NR = GETALLNAMEREFS(MYDIRSTRUCT) Returns a structure with all of the name/ref pairs contained in the directories associated with the dirstruct MYDIRSTRUCT. See also: DIRSTRUCT","title":"getallnamerefs"},{"location":"reference/file/%40dirstruct/getalltests.m/","text":"getalltests \u00b6 T = GETALLTESTS(MYDIRSTRUCT) Returns a list of all of the test directories associated with the cksdirstruct MYDIRSTRUCT. Note that this routine does not update the directory structure. See also: DIRSTRUCT","title":"getalltests"},{"location":"reference/file/%40dirstruct/getalltests.m/#getalltests","text":"T = GETALLTESTS(MYDIRSTRUCT) Returns a list of all of the test directories associated with the cksdirstruct MYDIRSTRUCT. Note that this routine does not update the directory structure. See also: DIRSTRUCT","title":"getalltests"},{"location":"reference/file/%40dirstruct/getcells.m/","text":"getcells \u00b6 C = GETCELLS ( MYDIRSTRUCT [, NAMEREF , INDS ] ) Returns cells from the experiment associated with MYDIRSTRUCT . If NAMEREF ( a struct with fields 'name' and 'ref' ) is provided , only cells with the matching NAMREF are returned . If INDS is given , the matches are limited to those cells whose index match any of the entries in the vector INDS ( this only applies to multichannel references ) . The cells are returned as a cell list . See also : DIRSTRUCT","title":"getcells"},{"location":"reference/file/%40dirstruct/getcells.m/#getcells","text":"C = GETCELLS ( MYDIRSTRUCT [, NAMEREF , INDS ] ) Returns cells from the experiment associated with MYDIRSTRUCT . If NAMEREF ( a struct with fields 'name' and 'ref' ) is provided , only cells with the matching NAMREF are returned . If INDS is given , the matches are limited to those cells whose index match any of the entries in the vector INDS ( this only applies to multichannel references ) . The cells are returned as a cell list . See also : DIRSTRUCT","title":"getcells"},{"location":"reference/file/%40dirstruct/getexperimentfile.m/","text":"getexperimentfile \u00b6 [ P , expf ] = GETEXPERIMENTFILE ( MYDIRSTRUCT [, CREATEIT ] ) Returns the experiment data filename for the directories associated with DIRSTRUCT . If CREATEIT is present and is 1 , then the file is created if it does not already exist . EXPF is the name of the experiment , taken from the last directory in the pathname . If the original pathname associated with MYDIRSTRUCT does not exist , then the function returns []. See also : DIRSTRUCT","title":"getexperimentfile"},{"location":"reference/file/%40dirstruct/getexperimentfile.m/#getexperimentfile","text":"[ P , expf ] = GETEXPERIMENTFILE ( MYDIRSTRUCT [, CREATEIT ] ) Returns the experiment data filename for the directories associated with DIRSTRUCT . If CREATEIT is present and is 1 , then the file is created if it does not already exist . EXPF is the name of the experiment , taken from the last directory in the pathname . If the original pathname associated with MYDIRSTRUCT does not exist , then the function returns []. See also : DIRSTRUCT","title":"getexperimentfile"},{"location":"reference/file/%40dirstruct/getextractors.m/","text":"getextractors \u00b6 dirstruct/getextractors is a function. [extractor1, extractor2] = getextractors(cksds, name, ref)","title":"getextractors"},{"location":"reference/file/%40dirstruct/getextractors.m/#getextractors","text":"dirstruct/getextractors is a function. [extractor1, extractor2] = getextractors(cksds, name, ref)","title":"getextractors"},{"location":"reference/file/%40dirstruct/getnamerefs.m/","text":"getnamerefs \u00b6 GETNAMEREFS - Return namerefs from a given test directory ( DIRSTRUCT ) refs = GETNAMEREFS ( MYDIRSTRUCT , TESTDIR ) Returns a list of namerefs structures associated with the test directory TESTDIR . See also : DIRSTRUCT","title":"getnamerefs"},{"location":"reference/file/%40dirstruct/getnamerefs.m/#getnamerefs","text":"GETNAMEREFS - Return namerefs from a given test directory ( DIRSTRUCT ) refs = GETNAMEREFS ( MYDIRSTRUCT , TESTDIR ) Returns a list of namerefs structures associated with the test directory TESTDIR . See also : DIRSTRUCT","title":"getnamerefs"},{"location":"reference/file/%40dirstruct/getpathname.m/","text":"getpathname \u00b6 P = GETPATHNAME(THEDIRSTRUCT) Returns the pathname associated with THEDIRSTRUCT.","title":"getpathname"},{"location":"reference/file/%40dirstruct/getpathname.m/#getpathname","text":"P = GETPATHNAME(THEDIRSTRUCT) Returns the pathname associated with THEDIRSTRUCT.","title":"getpathname"},{"location":"reference/file/%40dirstruct/getscratchdirectory.m/","text":"getscratchdirectory \u00b6 P = GETSCRATCHDIRECTORY ( MYDIRSTRUCT [, CREATEIT ] ) Returns the scratch directory path for the directories associated with CKSDIRSTRUCT . If CREATEIT is present and is 1 , then the directory is created if it does not already exist . If the original pathname associated with MYDIRSTRUCT does not exist , then the function returns []. See also : DIRSTRUCT","title":"getscratchdirectory"},{"location":"reference/file/%40dirstruct/getscratchdirectory.m/#getscratchdirectory","text":"P = GETSCRATCHDIRECTORY ( MYDIRSTRUCT [, CREATEIT ] ) Returns the scratch directory path for the directories associated with CKSDIRSTRUCT . If CREATEIT is present and is 1 , then the directory is created if it does not already exist . If the original pathname associated with MYDIRSTRUCT does not exist , then the function returns []. See also : DIRSTRUCT","title":"getscratchdirectory"},{"location":"reference/file/%40dirstruct/getstimscript.m/","text":"getstimscript \u00b6 Part of the NelsonLabTools package [SAVESCRIPT,MTI] = GETSTIMSCRIPT(MYCKSDIRSTRUCT,THEDIR) Gets the stimscript and MTI (timing) record associated with a particular test directory.","title":"getstimscript"},{"location":"reference/file/%40dirstruct/getstimscript.m/#getstimscript","text":"Part of the NelsonLabTools package [SAVESCRIPT,MTI] = GETSTIMSCRIPT(MYCKSDIRSTRUCT,THEDIR) Gets the stimscript and MTI (timing) record associated with a particular test directory.","title":"getstimscript"},{"location":"reference/file/%40dirstruct/getstimscripttimestruct.m/","text":"getstimscripttimestruct \u00b6 Part of the NelsonLabTools package [ THESTIMSCRIPTTIMESTRUCT ] = GETSTIMSCRIPTTIMESTRUCT ( MYCKSDIRSTRUCT , THEDIR ) Gets the stimscript and MTI ( timing ) record associated with a particular test directory in the form of a stimscripttimestruct . See also : STIMSCRIPTTIMESTRUCT","title":"getstimscripttimestruct"},{"location":"reference/file/%40dirstruct/getstimscripttimestruct.m/#getstimscripttimestruct","text":"Part of the NelsonLabTools package [ THESTIMSCRIPTTIMESTRUCT ] = GETSTIMSCRIPTTIMESTRUCT ( MYCKSDIRSTRUCT , THEDIR ) Gets the stimscript and MTI ( timing ) record associated with a particular test directory in the form of a stimscripttimestruct . See also : STIMSCRIPTTIMESTRUCT","title":"getstimscripttimestruct"},{"location":"reference/file/%40dirstruct/gettag.m/","text":"gettag \u00b6 GETTAG - Get tag(s) from a DIRSTRUCT directory TAG = GETTAG(THEDIRSTRUCT, DIR) Reads tag(s)s from the DIR directory that is located with the DIRSTRUCT THEDIRSTRUCT. Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. They are located in a text file within the directory DIR with the filename 'tags.txt'. See also: ADDTAG, LOADSTRUCTARRAY","title":"gettag"},{"location":"reference/file/%40dirstruct/gettag.m/#gettag","text":"GETTAG - Get tag(s) from a DIRSTRUCT directory TAG = GETTAG(THEDIRSTRUCT, DIR) Reads tag(s)s from the DIR directory that is located with the DIRSTRUCT THEDIRSTRUCT. Tags are name/value pairs returned in the form of a structure array with fields 'name' and 'value'. They are located in a text file within the directory DIR with the filename 'tags.txt'. See also: ADDTAG, LOADSTRUCTARRAY","title":"gettag"},{"location":"reference/file/%40dirstruct/gettagvalue.m/","text":"gettagvalue \u00b6 GETTAGVALUE - Get a value of a named tag in a DIRSTRUCT directory V = GETTAGVALUE ( DS , DIR , NAME ) Returns the value of the tag with tagname NAME in directory DIR of the DIRSTRUCT DS . If there is no tag with the tagname NAME , then empty is returned . See also : ADDTAG , GETTAG","title":"gettagvalue"},{"location":"reference/file/%40dirstruct/gettagvalue.m/#gettagvalue","text":"GETTAGVALUE - Get a value of a named tag in a DIRSTRUCT directory V = GETTAGVALUE ( DS , DIR , NAME ) Returns the value of the tag with tagname NAME in directory DIR of the DIRSTRUCT DS . If there is no tag with the tagname NAME , then empty is returned . See also : ADDTAG , GETTAG","title":"gettagvalue"},{"location":"reference/file/%40dirstruct/gettests.m/","text":"gettests \u00b6 T = GETTESTS(MYDIRSTRUCT,'NAME',REF) Returns the list of directories associated with the name and reference pair 'NAME' and REF. See also: DIRSTRUCT","title":"gettests"},{"location":"reference/file/%40dirstruct/gettests.m/#gettests","text":"T = GETTESTS(MYDIRSTRUCT,'NAME',REF) Returns the list of directories associated with the name and reference pair 'NAME' and REF. See also: DIRSTRUCT","title":"gettests"},{"location":"reference/file/%40dirstruct/hastag.m/","text":"hastag \u00b6 HASTAG - Returns TRUE if a given tagname is present within a directory B = HASTAG ( DS , DIR , TAGNAME ) Looks in the directory DIR that is in the DIRSTRUCT DS and returns B == 1 if there is a tag with tagname TAGNAME , and 0 otherwise . The tag information is stored in the file tags . txt inside DIR .","title":"hastag"},{"location":"reference/file/%40dirstruct/hastag.m/#hastag","text":"HASTAG - Returns TRUE if a given tagname is present within a directory B = HASTAG ( DS , DIR , TAGNAME ) Looks in the directory DIR that is in the DIRSTRUCT DS and returns B == 1 if there is a tag with tagname TAGNAME , and 0 otherwise . The tag information is stored in the file tags . txt inside DIR .","title":"hastag"},{"location":"reference/file/%40dirstruct/isactive.m/","text":"isactive \u00b6 B = ISACTIVE ( MYDIRSTRUCT , DIRNAME ) Returns 1 if 'DIRNAME' is an active directory in the DIRSTRUCT MYDIRSTRUCT . DIRNAME may also be a cell list , in which case b will be a 0 / 1 vector of the same length as the cell list .","title":"isactive"},{"location":"reference/file/%40dirstruct/isactive.m/#isactive","text":"B = ISACTIVE ( MYDIRSTRUCT , DIRNAME ) Returns 1 if 'DIRNAME' is an active directory in the DIRSTRUCT MYDIRSTRUCT . DIRNAME may also be a cell list , in which case b will be a 0 / 1 vector of the same length as the cell list .","title":"isactive"},{"location":"reference/file/%40dirstruct/neuter.m/","text":"neuter \u00b6 DIRSTRUCT/NEUTER - disable directory without removing data DS = NEUTER(DS, DIR_OR_LIST) Given a directory or a list of directories that reside inside the path of the DIRSTRUCT object, NEUTER moves the file 'reference.txt' to be named 'reference0.txt', and re-searches the catalog of DS. This change means that the directory (or list of directories) will not be found among the test directories of DS.","title":"neuter"},{"location":"reference/file/%40dirstruct/neuter.m/#neuter","text":"DIRSTRUCT/NEUTER - disable directory without removing data DS = NEUTER(DS, DIR_OR_LIST) Given a directory or a list of directories that reside inside the path of the DIRSTRUCT object, NEUTER moves the file 'reference.txt' to be named 'reference0.txt', and re-searches the catalog of DS. This change means that the directory (or list of directories) will not be found among the test directories of DS.","title":"neuter"},{"location":"reference/file/%40dirstruct/newtestdir.m/","text":"newtestdir \u00b6 D = NEWTESTDIR(DIRSTRUCT_OBJ) Returns in D the name of a suitable new test directory.","title":"newtestdir"},{"location":"reference/file/%40dirstruct/newtestdir.m/#newtestdir","text":"D = NEWTESTDIR(DIRSTRUCT_OBJ) Returns in D the name of a suitable new test directory.","title":"newtestdir"},{"location":"reference/file/%40dirstruct/removetag.m/","text":"removetag \u00b6 REMOVETAG - Remove a tag from a dirstruct directory REMOVETAG(THEDIRSTRUCT, DIR, TAGNAME) Removes a 'tag' with tagname TAGNAME from the directory DIR that is part of the directory structure object (DIRSTRUCT) named THEDIRSTRUCT. DIR should just be the name of the directory within THEDIRSTRUCT's path. See also: ADDTAG, GETTAG, SAVESTRUCTARRAY","title":"removetag"},{"location":"reference/file/%40dirstruct/removetag.m/#removetag","text":"REMOVETAG - Remove a tag from a dirstruct directory REMOVETAG(THEDIRSTRUCT, DIR, TAGNAME) Removes a 'tag' with tagname TAGNAME from the directory DIR that is part of the directory structure object (DIRSTRUCT) named THEDIRSTRUCT. DIR should just be the name of the directory within THEDIRSTRUCT's path. See also: ADDTAG, GETTAG, SAVESTRUCTARRAY","title":"removetag"},{"location":"reference/file/%40dirstruct/saveexpvar.m/","text":"saveexpvar \u00b6 SAVEEXPVAR ( MYDIRSTRUCT , VARIABLE , NAME [, PRES ]) Saves an experiment variable VARIABLE to DIRSTRUCT MYDIRSTRUCT with the name NAME . If PRES is 1 , then if CELLVAR is of type MEASUREDDATA , then any associates of MEASUREDDATA are preserved . VARIABLE and NAME can also be cell lists of variables and variable names . Example : % Suppose ds is a dirstruct variable , cells is a cell list of % MEASUREDDATA objects corresponding to cell data , and % CELLNAMES is a cell list of the names of the cells . Then this % data can be saved by calling : saveexpvar ( ds , cells , cellnames , 0 );","title":"saveexpvar"},{"location":"reference/file/%40dirstruct/saveexpvar.m/#saveexpvar","text":"SAVEEXPVAR ( MYDIRSTRUCT , VARIABLE , NAME [, PRES ]) Saves an experiment variable VARIABLE to DIRSTRUCT MYDIRSTRUCT with the name NAME . If PRES is 1 , then if CELLVAR is of type MEASUREDDATA , then any associates of MEASUREDDATA are preserved . VARIABLE and NAME can also be cell lists of variables and variable names . Example : % Suppose ds is a dirstruct variable , cells is a cell list of % MEASUREDDATA objects corresponding to cell data , and % CELLNAMES is a cell list of the names of the cells . Then this % data can be saved by calling : saveexpvar ( ds , cells , cellnames , 0 );","title":"saveexpvar"},{"location":"reference/file/%40dirstruct/saveexpvarbkup.m/","text":"saveexpvarbkup \u00b6 SAVEEXPVAR ( MYDIRSTRUCT , VARIABLE , NAME [, PRES ]) Saves an experiment variable VARIABLE to DIRSTRUCT MYDIRSTRUCT with the name NAME . If PRES is 1 , then if CELLVAR is of type MEASUREDDATA , then any associates of MEASUREDDATA are preserved . VARIABLE and NAME can also be cell lists of variables and variable names .","title":"saveexpvarbkup"},{"location":"reference/file/%40dirstruct/saveexpvarbkup.m/#saveexpvarbkup","text":"SAVEEXPVAR ( MYDIRSTRUCT , VARIABLE , NAME [, PRES ]) Saves an experiment variable VARIABLE to DIRSTRUCT MYDIRSTRUCT with the name NAME . If PRES is 1 , then if CELLVAR is of type MEASUREDDATA , then any associates of MEASUREDDATA are preserved . VARIABLE and NAME can also be cell lists of variables and variable names .","title":"saveexpvarbkup"},{"location":"reference/file/%40dirstruct/setactive.m/","text":"setactive \u00b6 NEWDIRSTRUCT = SETACTIVE ( MYDIRSTRUCT , DIRLIST , APPEND ) Sets the cell list of directories ( or single character directory name ) to be active in the DIRSTRUCT MYSDIRSTRUCT , and returns a new DIRSTRUCT . If a directory does not exist , no error is given but the directory is not made active . If append is 1 , then these directories are appended to the list of active directories . Otherwise , the list of active directories are set to be exactly DIRLIST and no others .","title":"setactive"},{"location":"reference/file/%40dirstruct/setactive.m/#setactive","text":"NEWDIRSTRUCT = SETACTIVE ( MYDIRSTRUCT , DIRLIST , APPEND ) Sets the cell list of directories ( or single character directory name ) to be active in the DIRSTRUCT MYSDIRSTRUCT , and returns a new DIRSTRUCT . If a directory does not exist , no error is given but the directory is not made active . If append is 1 , then these directories are appended to the list of active directories . Otherwise , the list of active directories are set to be exactly DIRLIST and no others .","title":"setactive"},{"location":"reference/file/%40dirstruct/update.m/","text":"update \u00b6 NEWDS = UPDATE(MYDIRSTRUCT) Examines the path of the DIRSTRUCT and updates all of the structures.","title":"update"},{"location":"reference/file/%40dirstruct/update.m/#update","text":"NEWDS = UPDATE(MYDIRSTRUCT) Examines the path of the DIRSTRUCT and updates all of the structures.","title":"update"},{"location":"reference/file/%40dirstruct/notyetconverted/getautoextractorlist.m/","text":"getautoextractorlist \u00b6 getautoextractorlist is a function. el = getextractorlist(cksds)","title":"getautoextractorlist"},{"location":"reference/file/%40dirstruct/notyetconverted/getautoextractorlist.m/#getautoextractorlist","text":"getautoextractorlist is a function. el = getextractorlist(cksds)","title":"getautoextractorlist"},{"location":"reference/file/%40dirstruct/notyetconverted/reassignextractortypes.m/","text":"reassignextractortypes \u00b6 reassignextractortypes is a function . newcksds = reassignextractortypes ( cksds )","title":"reassignextractortypes"},{"location":"reference/file/%40dirstruct/notyetconverted/reassignextractortypes.m/#reassignextractortypes","text":"reassignextractortypes is a function . newcksds = reassignextractortypes ( cksds )","title":"reassignextractortypes"},{"location":"reference/file/%40dirstruct/notyetconverted/removeautoextractortype.m/","text":"removeautoextractortype \u00b6 removeautoextractortype is a function. newcksds = removeautoextractortype(cksds, type)","title":"removeautoextractortype"},{"location":"reference/file/%40dirstruct/notyetconverted/removeautoextractortype.m/#removeautoextractortype","text":"removeautoextractortype is a function. newcksds = removeautoextractortype(cksds, type)","title":"removeautoextractortype"},{"location":"reference/file/%40dirstruct/notyetconverted/setautoextractortype.m/","text":"setautoextractortype \u00b6 setautoextractortype is a function. newcksds = setautoextractortype(cksds, type, extractor1, extractor2)","title":"setautoextractortype"},{"location":"reference/file/%40dirstruct/notyetconverted/setautoextractortype.m/#setautoextractortype","text":"setautoextractortype is a function. newcksds = setautoextractortype(cksds, type, extractor1, extractor2)","title":"setautoextractortype"},{"location":"reference/file/%40dirstruct/notyetconverted/setextractortype.m/","text":"setextractortype \u00b6 setextractortype is a function. newcksds = setextractortype(cksds, name, ref, extractor1, extractor2)","title":"setextractortype"},{"location":"reference/file/%40dirstruct/notyetconverted/setextractortype.m/#setextractortype","text":"setextractortype is a function. newcksds = setextractortype(cksds, name, ref, extractor1, extractor2)","title":"setextractortype"},{"location":"reference/file/%40dirstruct/private/editgraphical_early.m/","text":"editgraphical_early \u00b6 EDITGRAPHICAL - View / Edit DIRSTRUCT EDITGRAPHICAL ( MYDIRSTRUCT ) Opens a window for viewing and editing a DIRSTRUCT directory structure . See also : DIRSTRUCT","title":"editgraphical_early"},{"location":"reference/file/%40dirstruct/private/editgraphical_early.m/#editgraphical_early","text":"EDITGRAPHICAL - View / Edit DIRSTRUCT EDITGRAPHICAL ( MYDIRSTRUCT ) Opens a window for viewing and editing a DIRSTRUCT directory structure . See also : DIRSTRUCT","title":"editgraphical_early"},{"location":"reference/file/%40dirstruct/private/namerefind.m/","text":"namerefind \u00b6 returns - 1 if not there , or the index of the nameref pair","title":"namerefind"},{"location":"reference/file/%40dirstruct/private/namerefind.m/#namerefind","text":"returns - 1 if not there , or the index of the nameref pair","title":"namerefind"},{"location":"reference/file/%40dirstruct/private/typefind.m/","text":"typefind \u00b6 returns - 1 if not there , or the index of the nameref pair","title":"typefind"},{"location":"reference/file/%40dirstruct/private/typefind.m/#typefind","text":"returns - 1 if not there , or the index of the nameref pair","title":"typefind"},{"location":"reference/file/custom_file_formats/addroirawdatafile.m/","text":"addroirawdatafile \u00b6 ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file ****** NOT FUNCTIONAL YET ********* ADDVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: NEWVHLSPIKEWAVEFORMFILE","title":"addroirawdatafile"},{"location":"reference/file/custom_file_formats/addroirawdatafile.m/#addroirawdatafile","text":"ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file ****** NOT FUNCTIONAL YET ********* ADDVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: NEWVHLSPIKEWAVEFORMFILE","title":"addroirawdatafile"},{"location":"reference/file/custom_file_formats/addvhlspikewaveformfile.m/","text":"addvhlspikewaveformfile \u00b6 ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file ADDVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: NEWVHLSPIKEWAVEFORMFILE","title":"addvhlspikewaveformfile"},{"location":"reference/file/custom_file_formats/addvhlspikewaveformfile.m/#addvhlspikewaveformfile","text":"ADDVHLSPIKEWAVEFORMFILE - Add waveforms to a VHL spike waveform file ADDVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME , WAVEFORMS ) Add waveform data to a VHL spike waveform file . If an open FID ( file identifier ) is passed , then the data is written to that file . Note that in this case no checking is performed to make sure that waveform sizes correspond to what is contained in the file 's header, so make sure the waveform sizes are accurate. If instead a FILENAME is passed, then the function attempts to open FILENAME and checks to make sure that WAVEFORMS matches the header file parameters. WAVEFORMS should be a matrix of size: NUM_SAMPLES x NUM_CHANNELS X NUM_WAVEFORMS. See also: NEWVHLSPIKEWAVEFORMFILE","title":"addvhlspikewaveformfile"},{"location":"reference/file/custom_file_formats/convertvhlvdatafile2integer.m/","text":"convertvhlvdatafile2integer \u00b6 CONVERTVHLVDATAFILE2INTEGER - Convert a VH LabView file to binary integer format CONVERTVHLVDATAFILE2INTEGER ( OLDFILENAME , HEADERSTRUCT , OUTPUTFILENAME , SCALE , PRECISION ) This function reads data from the multichannel VHLab LabView binary data file format and writes a new file with precision PRECISION , where PRECISION is 'int32' or 'int16' . HEADERSTRUCT is the header structure as returned from READVHLVHEADERFILE ( or use empty , [] , to open a file of the same name as OLDFILENAME with extension 'vlh' ). OUTPUTFILENAME is the name of the new file to be written ; a new header file with the same name as OUTPUTFILENAME and extension 'vlh' will be created . The data are divided by SCALE before writing . The output file will be saved with channel multiplexing . Example : convertvhlvdatafile2integer ( 'vhlvanaloginput.vld' , [] , 'vhlvanaloginput_int.vld' , 10 , 'int16' );","title":"convertvhlvdatafile2integer"},{"location":"reference/file/custom_file_formats/convertvhlvdatafile2integer.m/#convertvhlvdatafile2integer","text":"CONVERTVHLVDATAFILE2INTEGER - Convert a VH LabView file to binary integer format CONVERTVHLVDATAFILE2INTEGER ( OLDFILENAME , HEADERSTRUCT , OUTPUTFILENAME , SCALE , PRECISION ) This function reads data from the multichannel VHLab LabView binary data file format and writes a new file with precision PRECISION , where PRECISION is 'int32' or 'int16' . HEADERSTRUCT is the header structure as returned from READVHLVHEADERFILE ( or use empty , [] , to open a file of the same name as OLDFILENAME with extension 'vlh' ). OUTPUTFILENAME is the name of the new file to be written ; a new header file with the same name as OUTPUTFILENAME and extension 'vlh' will be created . The data are divided by SCALE before writing . The output file will be saved with channel multiplexing . Example : convertvhlvdatafile2integer ( 'vhlvanaloginput.vld' , [] , 'vhlvanaloginput_int.vld' , 10 , 'int16' );","title":"convertvhlvdatafile2integer"},{"location":"reference/file/custom_file_formats/newroirawdatafile.m/","text":"newroirawdatafile \u00b6 NEWROIRAWDATAFILE - Create a binary file for storing spike waveforms ********** NOT COMPLETE YET !!!!!!!!!!!************ FID = NEWROIRAWDATAFILE ( FILENAME , PARAMETERS ) Creates ( and leaves open ) a new binary file for storing raw data that is extracted from images . Optionally , one can also store the image index values that correspond to the roi pixels . This function creates the header portion that include the following parameters : NAME ( type ): DESCRIPTION ------------------------------------------------------------------------- parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . precision ( uint8 ) : The precision -- : 0 = uint16 : 1 = uint32 : 2 = float32 : 3 = float64 parameters . indexesincluded ( uint8 ): Are index values included ? : 0 = no : 1 = yes ( first 512 bytes are free for additional header use ) Each bit of data includes the ROI number ( 1 16 bit integer ) the frame number ( 1 32 bit integer ) N , the number of points falling in the roi on this frame ( 1 32 bit integer ) the N index values of these data points ( N 32 bit integers ), if parameters . precision is 1 the N values of these pixels ( N values of type parameters . precision ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function ADDROIRAWDATAFILE ( FID , roinum , framenum , indexes , pixelvalues , precision ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"newroirawdatafile"},{"location":"reference/file/custom_file_formats/newroirawdatafile.m/#newroirawdatafile","text":"NEWROIRAWDATAFILE - Create a binary file for storing spike waveforms ********** NOT COMPLETE YET !!!!!!!!!!!************ FID = NEWROIRAWDATAFILE ( FILENAME , PARAMETERS ) Creates ( and leaves open ) a new binary file for storing raw data that is extracted from images . Optionally , one can also store the image index values that correspond to the roi pixels . This function creates the header portion that include the following parameters : NAME ( type ): DESCRIPTION ------------------------------------------------------------------------- parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . precision ( uint8 ) : The precision -- : 0 = uint16 : 1 = uint32 : 2 = float32 : 3 = float64 parameters . indexesincluded ( uint8 ): Are index values included ? : 0 = no : 1 = yes ( first 512 bytes are free for additional header use ) Each bit of data includes the ROI number ( 1 16 bit integer ) the frame number ( 1 32 bit integer ) N , the number of points falling in the roi on this frame ( 1 32 bit integer ) the N index values of these data points ( N 32 bit integers ), if parameters . precision is 1 the N values of these pixels ( N values of type parameters . precision ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function ADDROIRAWDATAFILE ( FID , roinum , framenum , indexes , pixelvalues , precision ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"newroirawdatafile"},{"location":"reference/file/custom_file_formats/newvhlspikewaveformfile.m/","text":"newvhlspikewaveformfile \u00b6 NEWVHLSPIKEWAVEFORMFILE - Create a binary file for storing spike waveforms FID = NEWVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME , PARAMETERS ) Creates ( or writes to ) a binary file for storing spike waveforms . Data is stored as single precision big endian binary if this function opens the file . This function creates the header file that include the following parameters : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- parameters . numchannels ( uint8 ) : Number of channels parameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) parameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . samplingrate : The sampling rate ( float32 ) ( first 512 bytes are free for additional header use ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function ADDVHSPIKEWAVEFORMFILE ( FID , WAVES ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"newvhlspikewaveformfile"},{"location":"reference/file/custom_file_formats/newvhlspikewaveformfile.m/#newvhlspikewaveformfile","text":"NEWVHLSPIKEWAVEFORMFILE - Create a binary file for storing spike waveforms FID = NEWVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME , PARAMETERS ) Creates ( or writes to ) a binary file for storing spike waveforms . Data is stored as single precision big endian binary if this function opens the file . This function creates the header file that include the following parameters : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- parameters . numchannels ( uint8 ) : Number of channels parameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) parameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) parameters . name ( 80 xchar ) : Name ( up to 80 characters ) parameters . ref ( uint8 ) : Reference number parameters . comment ( 80 xchar ) : Up to 80 characters of comment parameters . samplingrate : The sampling rate ( float32 ) ( first 512 bytes are free for additional header use ) The resulting FID ( file identifier ) can be used to write waveforms to the file with the function ADDVHSPIKEWAVEFORMFILE ( FID , WAVES ) NOTE : When one is done using the file , it must be closed with FCLOSE ( FID ) .","title":"newvhlspikewaveformfile"},{"location":"reference/file/custom_file_formats/readcellvoyagertiffheader.m/","text":"readcellvoyagertiffheader \u00b6 READCELLVOYAGERHEADERFILE - Read header information from a CellVoyager tiff H = READCELLVOYAGERHEADERFILE ( FILENAME ) Reads the header 'ImageDescription' for all of the frames present in a TIFF file acquired by the CellVoyager system .","title":"readcellvoyagertiffheader"},{"location":"reference/file/custom_file_formats/readcellvoyagertiffheader.m/#readcellvoyagertiffheader","text":"READCELLVOYAGERHEADERFILE - Read header information from a CellVoyager tiff H = READCELLVOYAGERHEADERFILE ( FILENAME ) Reads the header 'ImageDescription' for all of the frames present in a TIFF file acquired by the CellVoyager system .","title":"readcellvoyagertiffheader"},{"location":"reference/file/custom_file_formats/readroirawdatafile.m/","text":"readroirawdatafile \u00b6 READROIRAWDATAFILE - Read spike waveforms from binary file ****** NOT FUNCTIONAL YET ********** [ ROIDATA , HEADER ] = READROIRAWDATAFILE ( FID_OR_FILENAME ) or [ ROIDATA , HEADER ] = READROIRAWDATAFILE ( FID_OR_FILENAME ,... ROI_START , ROI_END ) Attempts to read spikewaves from ROI_START to ROI_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . ROI_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so ROI_START needs to be at least 1 . If ROI_START and ROI_END are not provided , then all waves are read . If ROI_START is less than 1 , then only the header is read . The ROI data is returned in a structure list ROIDATA with the following fields : roi : the roi number ( integer ) frame : the roi frame number ( integer ) N : number of points in the image that overlapped the ROI ( integer ) indexes : the index values of these points ( if they were stored ) ( N integers ) data : the actual data values ( N doubles )","title":"readroirawdatafile"},{"location":"reference/file/custom_file_formats/readroirawdatafile.m/#readroirawdatafile","text":"READROIRAWDATAFILE - Read spike waveforms from binary file ****** NOT FUNCTIONAL YET ********** [ ROIDATA , HEADER ] = READROIRAWDATAFILE ( FID_OR_FILENAME ) or [ ROIDATA , HEADER ] = READROIRAWDATAFILE ( FID_OR_FILENAME ,... ROI_START , ROI_END ) Attempts to read spikewaves from ROI_START to ROI_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . ROI_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so ROI_START needs to be at least 1 . If ROI_START and ROI_END are not provided , then all waves are read . If ROI_START is less than 1 , then only the header is read . The ROI data is returned in a structure list ROIDATA with the following fields : roi : the roi number ( integer ) frame : the roi frame number ( integer ) N : number of points in the image that overlapped the ROI ( integer ) indexes : the index values of these points ( if they were stored ) ( N integers ) data : the actual data values ( N doubles )","title":"readroirawdatafile"},{"location":"reference/file/custom_file_formats/readvhlspikewaveformfile.m/","text":"readvhlspikewaveformfile \u00b6 READVHLSPIKEWAVEFORMFILE - Read spike waveforms from binary file [ WAVEFORMS , HEADER ] = READVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME ) or [ WAVEFORMS , HEADER ] = READVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME ,... WAVE_START , WAVE_END ) Attempts to read spikewaves from WAVE_START to WAVE_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . WAVE_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so WAVE_START needs to be at least 1 . If WAVE_START and WAVE_END are not provided , then all waves are read . If WAVE_START is less than 1 , then only the header is read . The waveforms are output in the form NUM_SAMPLESxNUM_CHANNELSxNUM_WAVEFORMS","title":"readvhlspikewaveformfile"},{"location":"reference/file/custom_file_formats/readvhlspikewaveformfile.m/#readvhlspikewaveformfile","text":"READVHLSPIKEWAVEFORMFILE - Read spike waveforms from binary file [ WAVEFORMS , HEADER ] = READVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME ) or [ WAVEFORMS , HEADER ] = READVHLSPIKEWAVEFORMFILE ( FID_OR_FILENAME ,... WAVE_START , WAVE_END ) Attempts to read spikewaves from WAVE_START to WAVE_END from the binary file whose name is given as the first argument , or from the file descriptor ( FID ). The header is parsed and returned in HEADER . WAVE_END can be INF to indicate that waves should be read to the end of the file . The waves are numbered from 1 .. MAX , so WAVE_START needs to be at least 1 . If WAVE_START and WAVE_END are not provided , then all waves are read . If WAVE_START is less than 1 , then only the header is read . The waveforms are output in the form NUM_SAMPLESxNUM_CHANNELSxNUM_WAVEFORMS","title":"readvhlspikewaveformfile"},{"location":"reference/file/custom_file_formats/readvhlvdatafile.m/","text":"readvhlvdatafile \u00b6 READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = READVHLVDATAFILE ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from READVHLVHEADERFILE , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . Outputs : T is the time of each sample ( 1 row , NUMBER_OF_SAMPLES columns ) D is the data ( NUMBER OF SAMPLES row , NUMBER_OF_CHANNELS columns ) TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . One may pass additional arguments to READVHVLDATAFILE in the form of name / value pairs : Parameter name ( default value ): | Description : ------------------------------------------------------------------------------------- UseWaitBar ( 0 ) | Use a progress bar ( currently only implemented for | multiplexed data ) WaitBarMessage ([ 'Reading data ' ... | The message written to the progress bar. 'from LabView file...' ]) | | Example : myheader = readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"readvhlvdatafile"},{"location":"reference/file/custom_file_formats/readvhlvdatafile.m/#readvhlvdatafile","text":"READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = READVHLVDATAFILE ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from READVHLVHEADERFILE , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . Outputs : T is the time of each sample ( 1 row , NUMBER_OF_SAMPLES columns ) D is the data ( NUMBER OF SAMPLES row , NUMBER_OF_CHANNELS columns ) TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . One may pass additional arguments to READVHVLDATAFILE in the form of name / value pairs : Parameter name ( default value ): | Description : ------------------------------------------------------------------------------------- UseWaitBar ( 0 ) | Use a progress bar ( currently only implemented for | multiplexed data ) WaitBarMessage ([ 'Reading data ' ... | The message written to the progress bar. 'from LabView file...' ]) | | Example : myheader = readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"readvhlvdatafile"},{"location":"reference/file/custom_file_formats/readvhlvdatafile_orig.m/","text":"readvhlvdatafile_orig \u00b6 READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = READVHLVDATAFILE ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from READVHLVHEADERFILE , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . Example : myheader = readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"readvhlvdatafile_orig"},{"location":"reference/file/custom_file_formats/readvhlvdatafile_orig.m/#readvhlvdatafile_orig","text":"READVHLVDATAFILE - Read LabView data from the VH Lab format [ T , D , TOTAL_SAMPLES , TOTAL_TIME ] = READVHLVDATAFILE ( FILENAME , HEADERSTRUCT , CHANNELNUMS , T0 , T1 ) This function reads data from the multichannel VHLab LabView binary data file format . FILENAME is the name of the file to open , HEADERSTRUCT is the header structure as returned from READVHLVHEADERFILE , CHANNELNUMS are the channel numbers to read , where 0 is the first channel in the list that was acquired in LabView , 1 is the second channel , etc . See the HEADERSTRUCT to learn the mapping between the channel list and the inputs of the device ( such as ai0 , ai1 , ... ports on the National Instruments card ). If HEADERSTRUCT is empty , then a file with the same name but with extension . vlh is opened as the header file . T0 is the time relative to the beginning of the recording to start reading from , and T1 is the time relative to the beginning of the recording to read to . TOTAL_SAMPLES is the estimated number of total samples in the file . TOTAL_TIME is the estimated time length of the file . The data can be stored in 2 different binary formats . If the 'Multiplexed' field of HEADERSTRUCT is not provided or is 0 , then the data are assumed to to be stored in binary chunks with headerstruct . SamplesPerChunk samples of channel 1 stored , followed by headerstruct . SamplesPerChunk samples of channel 2 stored , etc . If headerstruct . Multiplexed is 1 , then the samples are perfectly multiplexed so that sample 1 is the first sample of channel 1 , sample 2 is the first sample of channel 2 , and so on . Example : myheader = readvhlvheaderfile ( 'vhlvanaloginput.vlh' ); % read from 0 to 5 seconds on the first channel acquired [ T , D ] = readvhlvdatafile ( 'vhlvanaloginput.vld' , myheader , 1 , 0 , 5 ); figure ; plot ( T , D ); xlabel ( 'Time(s)' ); ylabel ( 'Volts' ); % or mV or microV, whatever the units were","title":"readvhlvdatafile_orig"},{"location":"reference/file/custom_file_formats/readvhlvheaderfile.m/","text":"readvhlvheaderfile \u00b6 READVHLVHEADERFILE - Read VHLV header file format HEADERSTRUCT = READVHLVHEADERFILE ( MYFILENAME ) Reads the header file format for the VHLAB LabView multichannel acquisition system . It expects MYFILENAME to be the name of a text file , where each line begins with a field name followed by a colon ':' and then a tab , followed by the value . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording . 'Multiplexed' indicates whether adjacent samples are from different channels ( 1 ) or if the channel data is loaded in groups of SamplesPerChunk ( 0 ) . The channel numbers correspond to the inputs described in 'ChannelString' . For example , if ChannelString is '/dev/ai0' , then there is just 1 channel and it corresponds to analog input 0 on the acquisition device . Use READVHLVDATAFILE to read the data . Example : headerstruct = readvhlvheaderfile ( 'vhlvanaloginput.vlh' ) headerstruct = ChannelString : [ 1 x26 char ] NumChans : 17 SamplingRate : 25000 SamplesPerChunk : 25000 Multiplexed : 0 See also STRUCT , READVHLVDATAFILE","title":"readvhlvheaderfile"},{"location":"reference/file/custom_file_formats/readvhlvheaderfile.m/#readvhlvheaderfile","text":"READVHLVHEADERFILE - Read VHLV header file format HEADERSTRUCT = READVHLVHEADERFILE ( MYFILENAME ) Reads the header file format for the VHLAB LabView multichannel acquisition system . It expects MYFILENAME to be the name of a text file , where each line begins with a field name followed by a colon ':' and then a tab , followed by the value . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording . 'Multiplexed' indicates whether adjacent samples are from different channels ( 1 ) or if the channel data is loaded in groups of SamplesPerChunk ( 0 ) . The channel numbers correspond to the inputs described in 'ChannelString' . For example , if ChannelString is '/dev/ai0' , then there is just 1 channel and it corresponds to analog input 0 on the acquisition device . Use READVHLVDATAFILE to read the data . Example : headerstruct = readvhlvheaderfile ( 'vhlvanaloginput.vlh' ) headerstruct = ChannelString : [ 1 x26 char ] NumChans : 17 SamplingRate : 25000 SamplesPerChunk : 25000 Multiplexed : 0 See also STRUCT , READVHLVDATAFILE","title":"readvhlvheaderfile"},{"location":"reference/file/custom_file_formats/vhsb_read.m/","text":"vhsb_read \u00b6 VHSB_READ - write a VHLab series binary file [ Y , X ] = VHSB_READ ( FO , X0 , X1 , OUT_OF_BOUNDS_ERR , ...) Read Y series data from a VH series binary file from closest X sample to value X0 to closest X sample to value X1 . Inputs : FO is the file description to write to ; it can be a filename or an object of type FILEOBJ X0 is the value of X that indicates where to start reading . Can be -Inf to indicate the beginning of the samples in the file . X1 is the value of X that indicates where to stop reading . Can be Inf to indicate the end of the file . OUT_OF_BOUNDS_ERR indicates whether an error should be triggered if X0 or X1 are more than one half-sample away from a value of X that is actually in the dataset . If OUT_OF_BOUNDS_ERR is 1 , then an error is triggered ; otherwise , the closest sample is returned but no error is given . Outputs : X is NUMSAMPLESx1 , where NUMSAMPLES is the number of samples between X0 and X1 . Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample returned of X , and Y ( i ,:,:,...) is the ith sample returned of Y","title":"vhsb_read"},{"location":"reference/file/custom_file_formats/vhsb_read.m/#vhsb_read","text":"VHSB_READ - write a VHLab series binary file [ Y , X ] = VHSB_READ ( FO , X0 , X1 , OUT_OF_BOUNDS_ERR , ...) Read Y series data from a VH series binary file from closest X sample to value X0 to closest X sample to value X1 . Inputs : FO is the file description to write to ; it can be a filename or an object of type FILEOBJ X0 is the value of X that indicates where to start reading . Can be -Inf to indicate the beginning of the samples in the file . X1 is the value of X that indicates where to stop reading . Can be Inf to indicate the end of the file . OUT_OF_BOUNDS_ERR indicates whether an error should be triggered if X0 or X1 are more than one half-sample away from a value of X that is actually in the dataset . If OUT_OF_BOUNDS_ERR is 1 , then an error is triggered ; otherwise , the closest sample is returned but no error is given . Outputs : X is NUMSAMPLESx1 , where NUMSAMPLES is the number of samples between X0 and X1 . Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample returned of X , and Y ( i ,:,:,...) is the ith sample returned of Y","title":"vhsb_read"},{"location":"reference/file/custom_file_formats/vhsb_readheader.m/","text":"vhsb_readheader \u00b6 VHSB_READHEADER - read a VH Lab Series Binary file header H = VHSB_WRITEHEADER ( FILE_OBJ_OR_FNAME , ... ) Reads the header portion of the FILEOBJ or filename FILE_OBJ_OR_FNAME . At the conclusion of reading , the FILEOBJ or file is closed . This function returns a structure with the following fields ( default in parentheses ): ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 0 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info | headersize ( 1836 ) | The full header size in bytes num_samples ( variable ) | The calculated number of samples in the file . X_skip_bytes ( variable ) | Number of bytes to skip over when reading X samples Y_skip_bytes ( variable ) | Number of bytes to skip over when reading Y samples sample_size ( variable ) | The size of each ( x , y ) pair of samples in bytes filesize ( variable ) | The size of the file in bytes","title":"vhsb_readheader"},{"location":"reference/file/custom_file_formats/vhsb_readheader.m/#vhsb_readheader","text":"VHSB_READHEADER - read a VH Lab Series Binary file header H = VHSB_WRITEHEADER ( FILE_OBJ_OR_FNAME , ... ) Reads the header portion of the FILEOBJ or filename FILE_OBJ_OR_FNAME . At the conclusion of reading , the FILEOBJ or file is closed . This function returns a structure with the following fields ( default in parentheses ): ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bytes ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 0 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info | headersize ( 1836 ) | The full header size in bytes num_samples ( variable ) | The calculated number of samples in the file . X_skip_bytes ( variable ) | Number of bytes to skip over when reading X samples Y_skip_bytes ( variable ) | Number of bytes to skip over when reading Y samples sample_size ( variable ) | The size of each ( x , y ) pair of samples in bytes filesize ( variable ) | The size of the file in bytes","title":"vhsb_readheader"},{"location":"reference/file/custom_file_formats/vhsb_sampletype2matlabfwritestring.m/","text":"vhsb_sampletype2matlabfwritestring \u00b6 VHSH_SAMPLETYPE2MATLABFWRITESTRING - return fwrite / fread string for sample type S = VHSB_SAMPLETypE2MATLABFWRITESTRING ( DATA_TYPE , DATASIZE ) Given the DATA_TYPE ( char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 )) and the DATA_SIZE in bytes , this function returns a format string appropriate for passing to FREAD or FWRITE . Example : s = vhsb_sampletype2matlabfwritestring ( 4 , 64 ) % s = 'float64'","title":"vhsb_sampletype2matlabfwritestring"},{"location":"reference/file/custom_file_formats/vhsb_sampletype2matlabfwritestring.m/#vhsb_sampletype2matlabfwritestring","text":"VHSH_SAMPLETYPE2MATLABFWRITESTRING - return fwrite / fread string for sample type S = VHSB_SAMPLETypE2MATLABFWRITESTRING ( DATA_TYPE , DATASIZE ) Given the DATA_TYPE ( char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 )) and the DATA_SIZE in bytes , this function returns a format string appropriate for passing to FREAD or FWRITE . Example : s = vhsb_sampletype2matlabfwritestring ( 4 , 64 ) % s = 'float64'","title":"vhsb_sampletype2matlabfwritestring"},{"location":"reference/file/custom_file_formats/vhsb_write.m/","text":"vhsb_write \u00b6 VHSB_WRITE - write a VHLab series binary file B = VHSB_WRITE ( FO , X , Y , ... ) Write series data to a VH series binary file . Inputs : FO is the file description to write to ; it can be a filename or an object of type FILEOBJ X is a NUMSAMPLESx1 dataset , usually the independent variable . X can be empty if an X_start and X_increment are provided Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample of X , and Y ( i ,:,:, ... ) is the ith sample of Y Outputs : B is 1 if the file was written successfully , 0 otherwise The function accepts parameters that modify the default functionality as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------------------------ use_filelock ( 1 ) | Lock the file with CHECKOUT_LOCK_FILE X_start ( X ( 1 )) | The value of X in the first sample X_increment ( 0 ) | The increment between subsequent values of X | ( needs only be non - zero if X_constantinterval is 1 ) X_stored ( 1 ) | Should values of X be stored ( 1 ), or computed from X_start | and X_increment ( 0 ) ? X_constantinterval ( 0 ) | Is there a constant interval between X samples ( 1 ) or not ( 0 ) or | not necessarily ( 0 ) ? X_units ( '' ) | The units of X ( a character string , up to 255 characters ) Y_units ( '' ) | The units of Y ( a character string , up to 255 characters ) X_data_size ( 64 ) | The resolution ( in bits ) for X X_data_type ( 'float' ) | The data type to be written for X ( 'char' , 'uint' , 'int' , 'float' ) Y_data_size ( 64 ) | The resolution ( in bits ) for Y Y_data_type ( 'float' ) | The data type to be written for Y ( 'char' , 'uint' , 'int' , 'float' ) X_usescale ( 0 ) | Scale the X data before writing to disk ( and after reading ) ? Y_usescale ( 0 ) | Scale the Y data before writing to disk ( and after reading ) ? X_scale ( 1 ) | The X scale factor to use to write samples to disk X_offset ( 0 ) | The X offset to use ( Xdisk = X / X_scale + X_offset ) Y_scale ( 1 ) | The Y scale factor to use Y_offset ( 0 ) | The Y offset to use ( Ydisk = Y / Y_scale + X_offset ) See also : NAMEVALUEPAIR","title":"vhsb_write"},{"location":"reference/file/custom_file_formats/vhsb_write.m/#vhsb_write","text":"VHSB_WRITE - write a VHLab series binary file B = VHSB_WRITE ( FO , X , Y , ... ) Write series data to a VH series binary file . Inputs : FO is the file description to write to ; it can be a filename or an object of type FILEOBJ X is a NUMSAMPLESx1 dataset , usually the independent variable . X can be empty if an X_start and X_increment are provided Y is an NUM_SAMPLESxXxYxZx ... dataset with the Y samples that are associated with each value of X . X ( i ) is the ith sample of X , and Y ( i ,:,:, ... ) is the ith sample of Y Outputs : B is 1 if the file was written successfully , 0 otherwise The function accepts parameters that modify the default functionality as name / value pairs . Parameter ( default ) | Description ------------------------------------------------------------------------------ use_filelock ( 1 ) | Lock the file with CHECKOUT_LOCK_FILE X_start ( X ( 1 )) | The value of X in the first sample X_increment ( 0 ) | The increment between subsequent values of X | ( needs only be non - zero if X_constantinterval is 1 ) X_stored ( 1 ) | Should values of X be stored ( 1 ), or computed from X_start | and X_increment ( 0 ) ? X_constantinterval ( 0 ) | Is there a constant interval between X samples ( 1 ) or not ( 0 ) or | not necessarily ( 0 ) ? X_units ( '' ) | The units of X ( a character string , up to 255 characters ) Y_units ( '' ) | The units of Y ( a character string , up to 255 characters ) X_data_size ( 64 ) | The resolution ( in bits ) for X X_data_type ( 'float' ) | The data type to be written for X ( 'char' , 'uint' , 'int' , 'float' ) Y_data_size ( 64 ) | The resolution ( in bits ) for Y Y_data_type ( 'float' ) | The data type to be written for Y ( 'char' , 'uint' , 'int' , 'float' ) X_usescale ( 0 ) | Scale the X data before writing to disk ( and after reading ) ? Y_usescale ( 0 ) | Scale the Y data before writing to disk ( and after reading ) ? X_scale ( 1 ) | The X scale factor to use to write samples to disk X_offset ( 0 ) | The X offset to use ( Xdisk = X / X_scale + X_offset ) Y_scale ( 1 ) | The Y scale factor to use Y_offset ( 0 ) | The Y offset to use ( Ydisk = Y / Y_scale + X_offset ) See also : NAMEVALUEPAIR","title":"vhsb_write"},{"location":"reference/file/custom_file_formats/vhsb_writeheader.m/","text":"vhsb_writeheader \u00b6 VHSB_WRITEHEADER - write a VH Lab Series Binary file header H = VHSB_WRITEHEADER ( FILE_OBJ_OR_FNAME , 'PARAM1, VALUE1, ...) Writes or re - writes the header portion of the FILE_OBJ or filename FILE_OBJ_OR_FNAME according to the parameters provided . The file or file object is closed at the conclusion of writing the header . This function takes name / value pairs that override the default functionality : Parameter ( default ) | Description ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum ; can be up to 1 x100 Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 1 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info","title":"vhsb_writeheader"},{"location":"reference/file/custom_file_formats/vhsb_writeheader.m/#vhsb_writeheader","text":"VHSB_WRITEHEADER - write a VH Lab Series Binary file header H = VHSB_WRITEHEADER ( FILE_OBJ_OR_FNAME , 'PARAM1, VALUE1, ...) Writes or re - writes the header portion of the FILE_OBJ or filename FILE_OBJ_OR_FNAME according to the parameters provided . The file or file object is closed at the conclusion of writing the header . This function takes name / value pairs that override the default functionality : Parameter ( default ) | Description ----------------------------------------------------------------------------------------- version ( 1 ) | 32 - bit integer describing version . Only 1 is allowed . machine_format ( 'little-endian' ) | The machine format . The only value allowed is | 'little_endian' . X_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | data point in the X series . X_data_type ( 4 ) | 8 - bit unsigned integer describing whether X type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) Y_dim ([ 1 1 ]) | 64 - bit unsigned integer describing the rows , columns , etc of each Y datum ; can be up to 1 x100 Y_data_size ( 64 ) | 32 - bit integer describing the size ( in bits ) of each | sample in the Y series . Y_data_type ( 4 ) | 8 - bit unsigned integer describing whether Y type is char ( 1 ), uint ( 2 ), int ( 3 ), or float ( 4 ) X_stored ( 1 ) | Character 0 or 1 describing whether the X value of the series | is stored in the file or just inferred from start and increment . X_constantinterval ( 1 ) | Character 0 or 1 describing whether the X value of the series consists | of a value that is incremented by a constant interval for each sample X_start ( 0 ) | The value of the first X data sample ( same size / type as X_data ) X_increment ( 0 ) | The value of the increment ( same size / type as X_data ) | X_units ( '' ) | A 256 character string with the units of X ( after any scaling ) Y_units ( '' ) | A 256 character string with the units of Y ( after any scaling ) X_usescale ( 0 ) | Character 0 / 1 should we scale what is read in X using parameters below ? Y_usescale ( 0 ) | Character 0 / 1 should we scale what is read in Y using parameters below ? X_scale ( 1 ) | 64 - bit float scale factor X_offset ( 0 ) | 64 - bit float offset factor common to all X info Y_scale ( 1 ) | 64 - bit float scale factor Y_offset ( 0 ) | 64 - bit float offset factor common to all Y info","title":"vhsb_writeheader"},{"location":"reference/file/custom_file_formats/writevhlvdatafile.m/","text":"writevhlvdatafile \u00b6 WRITEVLHVDATAFILE - Write data to a VHLVDATAFILE WRITEVHLVDATAFILE ( FILENAME , HEADER , DATA ) Write a VHLVDATAFILE file to filename FILENAME , in Multiplex format . This is the format used by the Van Hooser lab at Brandeis University for files acquired via a LabView program ( hence the abbreviation VHLV ) . DATA should be channel data ; each column should contain data from a single channel. If the header file in . vlh format does not exist , then it is written using the information in HEADER and FILENAME . The header field 'Multiplexed' is updated to be 1 . One can provide optional name / value pairs : PARAMETER ( default value ) | Description -------------------------------------------------------------------------- append ( 1 ) | Should we append to the end of the file ? | 0 - no , create a new file | 1 - yes , add to the end of the file See also : READVHLVDATAFILE","title":"writevhlvdatafile"},{"location":"reference/file/custom_file_formats/writevhlvdatafile.m/#writevhlvdatafile","text":"WRITEVLHVDATAFILE - Write data to a VHLVDATAFILE WRITEVHLVDATAFILE ( FILENAME , HEADER , DATA ) Write a VHLVDATAFILE file to filename FILENAME , in Multiplex format . This is the format used by the Van Hooser lab at Brandeis University for files acquired via a LabView program ( hence the abbreviation VHLV ) . DATA should be channel data ; each column should contain data from a single channel. If the header file in . vlh format does not exist , then it is written using the information in HEADER and FILENAME . The header field 'Multiplexed' is updated to be 1 . One can provide optional name / value pairs : PARAMETER ( default value ) | Description -------------------------------------------------------------------------- append ( 1 ) | Should we append to the end of the file ? | 0 - no , create a new file | 1 - yes , add to the end of the file See also : READVHLVDATAFILE","title":"writevhlvdatafile"},{"location":"reference/file/custom_file_formats/writevhlvheaderfile.m/","text":"writevhlvheaderfile \u00b6 WRITEVHLVHEADERFILE - Write a VHLV header file WRITEVHLVHEADERFILE ( HEADERSTRUCT , FILENAME ) Writes a header file for the VH LabView Multichannel binary file format . Should have an extension of '.vlh' . It expects HEADERSTRUCT to be the name of a Matlab structure . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording , 'precision' , which indicates the binary data type ( 'double' , 'single' , 'int16' , for example ) , and 'Scale' , which indicates any scale factor that should be applied to the data upon reading .","title":"writevhlvheaderfile"},{"location":"reference/file/custom_file_formats/writevhlvheaderfile.m/#writevhlvheaderfile","text":"WRITEVHLVHEADERFILE - Write a VHLV header file WRITEVHLVHEADERFILE ( HEADERSTRUCT , FILENAME ) Writes a header file for the VH LabView Multichannel binary file format . Should have an extension of '.vlh' . It expects HEADERSTRUCT to be the name of a Matlab structure . The expected fields are 'ChannelString' , which indicates the channel names that were acquired in the LabView system , 'NumChans' , the number of channels that were acquired , 'SamplingRate' , the sampling rate of each channel in Hz , and 'SamplesPerChunk' , which indicates how many samples were written to disk in each burst of recording , 'precision' , which indicates the binary data type ( 'double' , 'single' , 'int16' , for example ) , and 'Scale' , which indicates any scale factor that should be applied to the data upon reading .","title":"writevhlvheaderfile"},{"location":"reference/file/custom_file_formats/writevhlvtestfile.m/","text":"writevhlvtestfile \u00b6 WRITEVLHVTESTFILE - Write a test data file in VHLV format . WRITEVHLVTESTFILE ( FILENAME ) Write a test file that is 10 channels long , in Multiplex format . Channel 1 has values 1 : 1 . 2 in steps of 0 . 001 ; channel 2 is the same except that it runs from 2 : 2 . 2 ; channel 3 runs from 3 : 3 . 2 , and so on . WRITEVHLVTESTFILE ( FILENAME , NUM_CHANNELS ) If NUM_CHANNELS is given , then the number of channels written is NUM_CHANNELS .","title":"writevhlvtestfile"},{"location":"reference/file/custom_file_formats/writevhlvtestfile.m/#writevhlvtestfile","text":"WRITEVLHVTESTFILE - Write a test data file in VHLV format . WRITEVHLVTESTFILE ( FILENAME ) Write a test file that is 10 channels long , in Multiplex format . Channel 1 has values 1 : 1 . 2 in steps of 0 . 001 ; channel 2 is the same except that it runs from 2 : 2 . 2 ; channel 3 runs from 3 : 3 . 2 , and so on . WRITEVHLVTESTFILE ( FILENAME , NUM_CHANNELS ) If NUM_CHANNELS is given , then the number of channels written is NUM_CHANNELS .","title":"writevhlvtestfile"},{"location":"reference/file/testfiles/testfile_freadnskip.m/","text":"testfile_freadnskip \u00b6 TESTFILE_FREADNSKIP - Demonstrates how to use FREAD with SKIP to read in arbitrary data DATA = TESTFILE_FREADNSKIP ; Opens the file 'testfile_uint16.bin' for reading , and then reads in 2 unsigned 16 bit integers , skips 5 , and repeats , for 10 bouts . To read the code , use 'type testfile_freadnskip'","title":"testfile_freadnskip"},{"location":"reference/file/testfiles/testfile_freadnskip.m/#testfile_freadnskip","text":"TESTFILE_FREADNSKIP - Demonstrates how to use FREAD with SKIP to read in arbitrary data DATA = TESTFILE_FREADNSKIP ; Opens the file 'testfile_uint16.bin' for reading , and then reads in 2 unsigned 16 bit integers , skips 5 , and repeats , for 10 bouts . To read the code , use 'type testfile_freadnskip'","title":"testfile_freadnskip"},{"location":"reference/file/testfiles/testfile_uint16_bin.m/","text":"testfile_uint16_bin \u00b6 TESTFILE_UINT16 . BIN - binary file with uint16 values from 0 ... 32000 . TESTFILE_UINT16_BIN This is documentation for the file 'testfile_uint16.bin' that is on the VHTOOLS path . This is a binary file with uint16 values in little endian format . The values start from 0 and run through 32000 . It is primarily useful for debugging file routines . The code for creating the file is commented in the . m file TESTFILE_UINT16_BIN . m See also : FREAD , UINT16","title":"testfile_uint16_bin"},{"location":"reference/file/testfiles/testfile_uint16_bin.m/#testfile_uint16_bin","text":"TESTFILE_UINT16 . BIN - binary file with uint16 values from 0 ... 32000 . TESTFILE_UINT16_BIN This is documentation for the file 'testfile_uint16.bin' that is on the VHTOOLS path . This is a binary file with uint16 values in little endian format . The values start from 0 and run through 32000 . It is primarily useful for debugging file routines . The code for creating the file is commented in the . m file TESTFILE_UINT16_BIN . m See also : FREAD , UINT16","title":"testfile_uint16_bin"},{"location":"reference/file/thirdparty_file_formats/bioformats2xml.m/","text":"bioformats2xml \u00b6 BIOFORMATS2XML - return XML metadata ( and write an XML file ) using Bio - Formats [ X , XMLFILENAME ] = BIOFORMATS2XML ( FILENAME , XMLFILENAME ) Uses Bio - Formats to read XML metadata from the file FILENAME . If XMLFILENAME is not specified , a temporary file is created for that purpose . The XML character is returned in X . The XMLFILENAME used is returned in XMLFILENAME . This function fixes an error in Bio - Formats ( the XML file is in iso - 88509 - 1 , not UTF - 8 as Bio - Formats outputs ) .","title":"bioformats2xml"},{"location":"reference/file/thirdparty_file_formats/bioformats2xml.m/#bioformats2xml","text":"BIOFORMATS2XML - return XML metadata ( and write an XML file ) using Bio - Formats [ X , XMLFILENAME ] = BIOFORMATS2XML ( FILENAME , XMLFILENAME ) Uses Bio - Formats to read XML metadata from the file FILENAME . If XMLFILENAME is not specified , a temporary file is created for that purpose . The XML character is returned in X . The XMLFILENAME used is returned in XMLFILENAME . This function fixes an error in Bio - Formats ( the XML file is in iso - 88509 - 1 , not UTF - 8 as Bio - Formats outputs ) .","title":"bioformats2xml"},{"location":"reference/file/thirdparty_file_formats/CED-SOM_SMR/read_CED_SOMSMR_datafile.m/","text":"read_CED_SOMSMR_datafile \u00b6 READ_CED_SOMSMR_DATAFILE - Reads samples from a CED SOM / SMR file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO , TIME ] = READ_CED_SOMSMR_DATAFILE ( FILENAME , HEADER , CHANNEL_NUMBER , T0 , T1 ); Inputs : Reads data from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ( ranging from 1 to the number to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . BLOCKINFO - the output of SONGETBLOCKHEADERS that describes the file blocks TIME - a vector corresponding to the time of each sample read Note : at this time , we can only read single channels at a time . If CHANNEL_NUMBER is an array , there will be an error . If the user need this functionality , please submit an ISSUE on GitHub ( http : // github . com / VH - Lab / vhlab - toolbox - matlab ) . See also : READ_CED_SOMSMR_HEADER , READ_CED_SOMSMR_SAMPLEINTERVAL","title":"read_CED_SOMSMR_datafile"},{"location":"reference/file/thirdparty_file_formats/CED-SOM_SMR/read_CED_SOMSMR_datafile.m/#read_ced_somsmr_datafile","text":"READ_CED_SOMSMR_DATAFILE - Reads samples from a CED SOM / SMR file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO , TIME ] = READ_CED_SOMSMR_DATAFILE ( FILENAME , HEADER , CHANNEL_NUMBER , T0 , T1 ); Inputs : Reads data from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ( ranging from 1 to the number to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . BLOCKINFO - the output of SONGETBLOCKHEADERS that describes the file blocks TIME - a vector corresponding to the time of each sample read Note : at this time , we can only read single channels at a time . If CHANNEL_NUMBER is an array , there will be an error . If the user need this functionality , please submit an ISSUE on GitHub ( http : // github . com / VH - Lab / vhlab - toolbox - matlab ) . See also : READ_CED_SOMSMR_HEADER , READ_CED_SOMSMR_SAMPLEINTERVAL","title":"read_CED_SOMSMR_datafile"},{"location":"reference/file/thirdparty_file_formats/CED-SOM_SMR/read_CED_SOMSMR_header.m/","text":"read_CED_SOMSMR_header \u00b6 READ_INTAN_RHD2000_HEADER - Read header information from a CED SOM or SMR file HEADER = READ_CED_SOMSMR_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the CED SOM / SMR file FILENAME . CED stands for Cambridge Electronic Design , which makes the Spike2 data acquisition system . This function reads header files for the SOM / SMR file formats . This function depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / thirdparty bundle and can be installed with instructions at http : // code . vhlab . org . HEADER contains two substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version channelinfo | Information about the channels acquired in the file See also : READ_CED_SOMSMR_DATAFILE , SONFILEHEADER ( documents HEADER . fileinfo ), SONCHANLIST ( documents HEADER . channelinfo )","title":"read_CED_SOMSMR_header"},{"location":"reference/file/thirdparty_file_formats/CED-SOM_SMR/read_CED_SOMSMR_header.m/#read_ced_somsmr_header","text":"READ_INTAN_RHD2000_HEADER - Read header information from a CED SOM or SMR file HEADER = READ_CED_SOMSMR_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the CED SOM / SMR file FILENAME . CED stands for Cambridge Electronic Design , which makes the Spike2 data acquisition system . This function reads header files for the SOM / SMR file formats . This function depends on sigTOOL by Malcolm Lidierth ( http : // sigtool . sourceforge . net ) . sigTOOL is also included in the https : // github . com / VH - Lab / thirdparty bundle and can be installed with instructions at http : // code . vhlab . org . HEADER contains two substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version channelinfo | Information about the channels acquired in the file See also : READ_CED_SOMSMR_DATAFILE , SONFILEHEADER ( documents HEADER . fileinfo ), SONCHANLIST ( documents HEADER . channelinfo )","title":"read_CED_SOMSMR_header"},{"location":"reference/file/thirdparty_file_formats/CED-SOM_SMR/read_CED_SOMSMR_sampleinterval.m/","text":"read_CED_SOMSMR_sampleinterval \u00b6 READ_CED_SOMSMR_SAMPLEINTERVAL - Reads samples from a CED SOM / SMR file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_CED_SOMSMR_DATAFILE ( FILENAME , HEADER , CHANNEL_NUMBER ); Inputs : Reads the sampleinterval ( in seconds ) for a given channel from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ). Outputs : SAMPLE_INTERVAL - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . See also : READ_CED_SOMSMR_DATAFILE , READ_CED_SOMSMR_HEADER","title":"read_CED_SOMSMR_sampleinterval"},{"location":"reference/file/thirdparty_file_formats/CED-SOM_SMR/read_CED_SOMSMR_sampleinterval.m/#read_ced_somsmr_sampleinterval","text":"READ_CED_SOMSMR_SAMPLEINTERVAL - Reads samples from a CED SOM / SMR file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_CED_SOMSMR_DATAFILE ( FILENAME , HEADER , CHANNEL_NUMBER ); Inputs : Reads the sampleinterval ( in seconds ) for a given channel from the Cambridge Electronic Design . SOM or . SMR file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_NUMBER is the the channel number for which to return data ; it corresponds to the channel number in the Spike2 . SMR file ( that is , in the Sampling Configuration that was used on Spike2 ). Outputs : SAMPLE_INTERVAL - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . See also : READ_CED_SOMSMR_DATAFILE , READ_CED_SOMSMR_HEADER","title":"read_CED_SOMSMR_sampleinterval"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/Intan_RHD2000_blockinfo.m/","text":"Intan_RHD2000_blockinfo \u00b6 INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [ BLOCK_INFO , BYTES_PER_BLOCK , BYTES_PRESENT , NUMDATABLOCKS ] = ... INTAN_RHD2000_BLOCKINFO ( FILENAME [, HEADER ]) Computes the parameters of each data block of an Intan_RHD_2000 file . The Intan 2000 RHD file type is organized into a header , and then data blocks of samples of the various channel types that the Intan demo board can sample . This file , along with the HEADER , computes the structure of these data blocks that are needed to interpret each data block . FILENAME should be the name of an RHD2000 file ( normally with extension '.rhd' ) . HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER ; if it is left blank , it will be read from the file . BLOCK_INFO is a structure describing the parameters of each block . BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non - header bytes in the file . NUMDATABLOCKS is the number of data blocks in the file . See also : READ_INTAN_RHD2000_HEADER , READ_INTAN_RHD2000_DATAFILE , CAT_INTAN_RHD2000_FILES","title":"Intan_RHD2000_blockinfo"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/Intan_RHD2000_blockinfo.m/#intan_rhd2000_blockinfo","text":"INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [ BLOCK_INFO , BYTES_PER_BLOCK , BYTES_PRESENT , NUMDATABLOCKS ] = ... INTAN_RHD2000_BLOCKINFO ( FILENAME [, HEADER ]) Computes the parameters of each data block of an Intan_RHD_2000 file . The Intan 2000 RHD file type is organized into a header , and then data blocks of samples of the various channel types that the Intan demo board can sample . This file , along with the HEADER , computes the structure of these data blocks that are needed to interpret each data block . FILENAME should be the name of an RHD2000 file ( normally with extension '.rhd' ) . HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER ; if it is left blank , it will be read from the file . BLOCK_INFO is a structure describing the parameters of each block . BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non - header bytes in the file . NUMDATABLOCKS is the number of data blocks in the file . See also : READ_INTAN_RHD2000_HEADER , READ_INTAN_RHD2000_DATAFILE , CAT_INTAN_RHD2000_FILES","title":"Intan_RHD2000_blockinfo"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/cat_Intan_RHD2000_files.m/","text":"cat_Intan_RHD2000_files \u00b6 CAT_INTAN_RHD2000_FILES - Concatenate multiple RHD files together STATUS = CAT_INTAN_RHD2000_FILES ( FILENAME1 , FILENAME2 , ... ) Concatenate multiple RHD files together . Produces a large file named [ 'cat' FILENAME1 ]. Note that the filename information in the header of [ 'cat' FILENAME1 ] will still be FILENAME1 . STATUS should always return 0 if there was no error . See also : READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER","title":"cat_Intan_RHD2000_files"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/cat_Intan_RHD2000_files.m/#cat_intan_rhd2000_files","text":"CAT_INTAN_RHD2000_FILES - Concatenate multiple RHD files together STATUS = CAT_INTAN_RHD2000_FILES ( FILENAME1 , FILENAME2 , ... ) Concatenate multiple RHD files together . Produces a large file named [ 'cat' FILENAME1 ]. Note that the filename information in the header of [ 'cat' FILENAME1 ] will still be FILENAME1 . STATUS should always return 0 if there was no error . See also : READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER","title":"cat_Intan_RHD2000_files"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/concat_rhd_files.m/","text":"concat_rhd_files \u00b6 CONCAT_RHD_FILES - Concatenate RHD files and rename the original files CONCAT_RHD_FILES ( DIRNAME ) Concatenates all of the * . rhd files in a directory into one larger file , and then renames the original * . rhd files so the extension is . rhd_original . See also : CAT_INTAN_RHD2000_FILES","title":"concat_rhd_files"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/concat_rhd_files.m/#concat_rhd_files","text":"CONCAT_RHD_FILES - Concatenate RHD files and rename the original files CONCAT_RHD_FILES ( DIRNAME ) Concatenates all of the * . rhd files in a directory into one larger file , and then renames the original * . rhd files so the extension is . rhd_original . See also : CAT_INTAN_RHD2000_FILES","title":"concat_rhd_files"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/copy_Intan_RHD2000_blocks.m/","text":"copy_Intan_RHD2000_blocks \u00b6 COPY_INTAN_RHD2000_BLOCKS - Concatenate multiple RHD blocks together STATUS = COPY_INTAN_RHD2000_BLOCKS ( FILENAME_IN , B1 , B2 , FILENAME_OUT ) Copies data blocks from B1 to B2 from the RHD 2000 file FILENAME_IN and writes it to the file FILENAME_OUT . The first block is numbered 1. This is useful for trimming files down to certain blocks . Check out INTAN_RHD2000_BLOCKINFO to understand the relationship between data blocks and samples ( short version: data blocks are not samples , they are regular collections of samples ). STATUS should always return 0 if there was no error . See also: READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER , INTAN_RHD2000_BLOCKINFO","title":"copy_Intan_RHD2000_blocks"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/copy_Intan_RHD2000_blocks.m/#copy_intan_rhd2000_blocks","text":"COPY_INTAN_RHD2000_BLOCKS - Concatenate multiple RHD blocks together STATUS = COPY_INTAN_RHD2000_BLOCKS ( FILENAME_IN , B1 , B2 , FILENAME_OUT ) Copies data blocks from B1 to B2 from the RHD 2000 file FILENAME_IN and writes it to the file FILENAME_OUT . The first block is numbered 1. This is useful for trimming files down to certain blocks . Check out INTAN_RHD2000_BLOCKINFO to understand the relationship between data blocks and samples ( short version: data blocks are not samples , they are regular collections of samples ). STATUS should always return 0 if there was no error . See also: READ_INTAN_RHD2000_DATAFILE , READ_INTAN_RHD2000_HEADER , INTAN_RHD2000_BLOCKINFO","title":"copy_Intan_RHD2000_blocks"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/read_Intan_RHD2000_datafile.m/","text":"read_Intan_RHD2000_datafile \u00b6 READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DATAFILE ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel , 1 , may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2014 - 12 - 08 SDV - wrote it and tested it 2024 - 02 - 04 SDV - several bugs fixed for non - sequential channels","title":"read_Intan_RHD2000_datafile"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/read_Intan_RHD2000_datafile.m/#read_intan_rhd2000_datafile","text":"READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DATAFILE ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel , 1 , may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2014 - 12 - 08 SDV - wrote it and tested it 2024 - 02 - 04 SDV - several bugs fixed for non - sequential channels","title":"read_Intan_RHD2000_datafile"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/read_Intan_RHD2000_directory.m/","text":"read_Intan_RHD2000_directory \u00b6 READ_INTAN_RHD2000_DIRECTORY - Read samples from an Intan data directory ( 1 file per channel format ) [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DIRECTORY ( DIRECTORYNAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 directory DIRECTORYNAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . NOTE : It is assumed that the DIRECTORY is a directory / folder with files written in the Intan \"1 file per channel\" format . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2020 - 06 - 11 SDV - wrote it , checked time , amp , aux , supply , din could use more testing with different channel configurations and ADC and DOUT note : dout seems to write to disk even if it is not in the header file but this function will only examine channels that are listed in the header file","title":"read_Intan_RHD2000_directory"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/read_Intan_RHD2000_directory.m/#read_intan_rhd2000_directory","text":"READ_INTAN_RHD2000_DIRECTORY - Read samples from an Intan data directory ( 1 file per channel format ) [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DIRECTORY ( DIRECTORYNAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 directory DIRECTORYNAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . NOTE : It is assumed that the DIRECTORY is a directory / folder with files written in the Intan \"1 file per channel\" format . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2020 - 06 - 11 SDV - wrote it , checked time , amp , aux , supply , din could use more testing with different channel configurations and ADC and DOUT note : dout seems to write to disk even if it is not in the header file but this function will only examine channels that are listed in the header file","title":"read_Intan_RHD2000_directory"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/read_Intan_RHD2000_header.m/","text":"read_Intan_RHD2000_header \u00b6 READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME . HEADER contains several substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels | Number of temperature sensor channels See also : READ_INTAN_RDH2000_DATAFILE","title":"read_Intan_RHD2000_header"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000/read_Intan_RHD2000_header.m/#read_intan_rhd2000_header","text":"READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME . HEADER contains several substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels | Number of temperature sensor channels See also : READ_INTAN_RDH2000_DATAFILE","title":"read_Intan_RHD2000_header"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000old/Intan_RHD2000_blockinfoold.m/","text":"Intan_RHD2000_blockinfoold \u00b6 INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [ BLOCK_INFO , BYTES_PER_BLOCK , BYTES_PRESENT , NUMDATABLOCKS ] = ... INTAN_RHD2000_BLOCKINFO ( FILENAME [, HEADER ]) Computes the parameters of each data block of an Intan_RHD_2000 file . The Intan 2000 RHD file type is organized into a header , and then data blocks of samples of the various channel types that the Intan demo board can sample . This file , along with the HEADER , computes the structure of these data blocks that are needed to interpret each data block . FILENAME should be the name of an RHD2000 file ( normally with extension '.rhd' ) . HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER ; if it is left blank , it will be read from the file . BLOCK_INFO is a structure describing the parameters of each block . BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non - header bytes in the file . NUMDATABLOCKS is the number of data blocks in the file . See also : READ_INTAN_RHD2000_HEADER , READ_INTAN_RHD2000_DATAFILE , CAT_INTAN_RHD2000_FILES","title":"Intan_RHD2000_blockinfoold"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000old/Intan_RHD2000_blockinfoold.m/#intan_rhd2000_blockinfoold","text":"INTAN_RHD2000_BLOCKINFO - Block information for an Intan RHD2000 file [ BLOCK_INFO , BYTES_PER_BLOCK , BYTES_PRESENT , NUMDATABLOCKS ] = ... INTAN_RHD2000_BLOCKINFO ( FILENAME [, HEADER ]) Computes the parameters of each data block of an Intan_RHD_2000 file . The Intan 2000 RHD file type is organized into a header , and then data blocks of samples of the various channel types that the Intan demo board can sample . This file , along with the HEADER , computes the structure of these data blocks that are needed to interpret each data block . FILENAME should be the name of an RHD2000 file ( normally with extension '.rhd' ) . HEADER should be the header information structure that is returned by READ_INTAN_RHD2000_HEADER ; if it is left blank , it will be read from the file . BLOCK_INFO is a structure describing the parameters of each block . BYTES_PER_BLOCK is the number of bytes per data block BYTES_PRESENT is the number of non - header bytes in the file . NUMDATABLOCKS is the number of data blocks in the file . See also : READ_INTAN_RHD2000_HEADER , READ_INTAN_RHD2000_DATAFILE , CAT_INTAN_RHD2000_FILES","title":"Intan_RHD2000_blockinfoold"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000old/read_Intan_RHD2000_datafileold.m/","text":"read_Intan_RHD2000_datafileold \u00b6 READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DATAFILE ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel , 1 , may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2014 - 12 - 08 SDV - wrote it and tested it","title":"read_Intan_RHD2000_datafileold"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000old/read_Intan_RHD2000_datafileold.m/#read_intan_rhd2000_datafileold","text":"READ_INTAN_RHD2000_DATAFILE - Read samples from an Intan data file [ DATA , TOTAL_SAMPLES , TOTAL_TIME , BLOCKINFO ] = READ_INTAN_RHD2000_DATAFILE ( FILENAME , HEADER , CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); Inputs : Reads data from the Intan Technologies . rhd 2000 file FILENAME . The file HEADER information can be provided in HEADER . If HEADER is empty , then it will be read from the file . CHANNEL_TYPE is the type of channel to be read ( use table below ) . CHANNEL_NUMBERS are the the channel numbers for which to return data ( randing from 1 to the number of channels of that type sampled ) . CHANNEL_NUMBERS are from 1. .. N where N is the number of channels ENABLED in the recording . 1 is the first channel enabled , 2 is the 2 nd channel enabled , etc . One can examine the header file to see its correspondance with Intan bank and channel indexes ( e . g . , the first channel , 1 , may be 'amp-A-000' ) . T0 is the time to start reading ( the beginning of the recording is 0 ) and T1 is the time to stop reading . If T0 is negative , we will start with time 0. If T1 is INF , we will use the end time of the whole file . CHANNEL_TYPE values : Value : | Meaning : -------------------------------------------------------------------------- 'time' , 'timestamps' , or 1 | read timestamps of samples 'amp' , 'amplifier' or 2 | read amplifier channels 'aux' , 'aux_in' , or 3 | read auxiliary input channels 'supply' , or 4 | read supply voltages 'temp' , or 5 | read temperature sensor 'adc' , or 6 | read analog to digital converter signals 'din' , 'digital_in' , or 7 | read digital input ( a single channel of 16 bit values ) 'dout' , 'digital_out' , or 8 | read digital output signal ( a single channel ) Outputs : DATA - each column contains samples from an individual channel ; if more than one channel has been requested , DATA will have more than one column . TOTAL_SAMPLES - The total number of ( amplifier or digital ) samples estimated to be in the file . TOTAL_TIME - An estimate of the total duration of the time series data in the recorded file , in seconds . Notes : ( 1 ) The Intan RHD2000 board has its own clock . Asking this function to read at time T0 = 0 will read the first sample in the file . This time might correspond to some other time on the Intan board . Reading the 'time' channel will indicate the time of the sample on the board 's clock. ( 2 ) This function performs no filtering . Even if the user had checked for the RHD2000 software to use a 60 Hz notch or a high - pass filter , this function returns the raw data . See also : READ_INTAN_RHD2000_HEADER 2014 - 12 - 08 SDV - wrote it and tested it","title":"read_Intan_RHD2000_datafileold"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000old/read_Intan_RHD2000_headerold.m/","text":"read_Intan_RHD2000_headerold \u00b6 READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME . HEADER contains several substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels | Number of temperature sensor channels See also : READ_INTAN_RDH2000_DATAFILE","title":"read_Intan_RHD2000_headerold"},{"location":"reference/file/thirdparty_file_formats/Intan-RHD2000old/read_Intan_RHD2000_headerold.m/#read_intan_rhd2000_headerold","text":"READ_INTAN_RHD2000_HEADER - Read header information from an Intan data file HEADER = READ_INTAN_RHD2000_HEADER ( FILENAME ) Returns a structure HEADER with all of the information fields that are stored in the Intan RHD2000 file FILENAME . HEADER contains several substructures : -------------------------------------------------------------------- fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency spike_triggers | Information about spike triggers for each amplifier channel amplifier_channels | Information about amplifier channels aux_input_channels | Information about auxillary input channels supply_voltage_channels | Information about supply voltage channels board_adc_channels | Information about the board analog to digital converter channels board_dig_in_channels | Digital input channels board_dig_out_channels | Digital output channels num_temp_sensor_channels | Number of temperature sensor channels See also : READ_INTAN_RDH2000_DATAFILE","title":"read_Intan_RHD2000_headerold"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_datafile.m/","text":"read_Willow_datafile \u00b6 READ_WILLOW_DATAFILE - Reads Willow data files from LeafLabs hardware [ DATA , TOTAL_SAMPLES , TOTAL_TIME ] = READ_WILLOW_DATAFILE ( FILENAME , HEADER , ... CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); this is for data produced with the new 30 kHz gpio firmware FILENAME is a string , the relative path to the H5 Willow file CHANNEL_TYPE = 'time' , 'amp' , 'aux' , 'supply' , 'temp' , 'din' CHANNEL_NUMBERS is an array of channel numbers , e . g . 1 : 64 . Available channels in Willow are 1 . . 1024 , and all channels are always acquired . T0 , T1 is an inclusive time range in seconds , relative to the beginning of the file everything is 1-indexed because matlab channel_type = \"adc\" is not supported ( returns error ), because there are no adc converters channel_type = \"dout\" is not supported ( returns error ), as any output pins are rolled into GPIO ( din ) example usage : data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'time' , 1 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'amp' , 129 : 256 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'aux' , 1 : 12 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'supply' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'temp' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'din' , [ 1 , 3 , 7 ] , 0 , 0 . 1 ); CKC 20160209 SDV 20160211 - minor modifications , added header information","title":"read_Willow_datafile"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_datafile.m/#read_willow_datafile","text":"READ_WILLOW_DATAFILE - Reads Willow data files from LeafLabs hardware [ DATA , TOTAL_SAMPLES , TOTAL_TIME ] = READ_WILLOW_DATAFILE ( FILENAME , HEADER , ... CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); this is for data produced with the new 30 kHz gpio firmware FILENAME is a string , the relative path to the H5 Willow file CHANNEL_TYPE = 'time' , 'amp' , 'aux' , 'supply' , 'temp' , 'din' CHANNEL_NUMBERS is an array of channel numbers , e . g . 1 : 64 . Available channels in Willow are 1 . . 1024 , and all channels are always acquired . T0 , T1 is an inclusive time range in seconds , relative to the beginning of the file everything is 1-indexed because matlab channel_type = \"adc\" is not supported ( returns error ), because there are no adc converters channel_type = \"dout\" is not supported ( returns error ), as any output pins are rolled into GPIO ( din ) example usage : data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'time' , 1 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'amp' , 129 : 256 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'aux' , 1 : 12 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'supply' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'temp' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , [] , 'din' , [ 1 , 3 , 7 ] , 0 , 0 . 1 ); CKC 20160209 SDV 20160211 - minor modifications , added header information","title":"read_Willow_datafile"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_datafile_alt.m/","text":"read_Willow_datafile_alt \u00b6 READ_WILLOW_DATAFILE - Reads Willow data files from LeafLabs hardware [ DATA , TOTAL_SAMPLES , TOTAL_TIME ] = READ_WILLOW_DATAFILE ( FILENAME , HEADER , ... CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); this is for data produced with the new 30 kHz gpio firmware FILENAME is a string , the relative path to the H5 Willow file CHANNEL_TYPE = 'time' , 'amp' , 'aux' , 'supply' , 'temp' , 'din' CHANNEL_NUMBERS is an array of channel numbers , e . g . 1 : 64 T0 , T1 is an inclusive time range in seconds , relative to the beginning of the file everything is 1-indexed because matlab channel_type = \"adc\" is not supported ( returns error ), because there are no adc converters channel_type = \"dout\" is not supported ( returns error ), as any output pins are rolled into GPIO ( din ) example usage : data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'time' , 1 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'amp' , 129 : 256 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'aux' , 1 : 12 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'supply' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'temp' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'din' , [ 1 , 3 , 7 ] , 0 , 0 . 1 ); CKC 20160209 SDV 20160211 - minor modifications , added header information","title":"read_Willow_datafile_alt"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_datafile_alt.m/#read_willow_datafile_alt","text":"READ_WILLOW_DATAFILE - Reads Willow data files from LeafLabs hardware [ DATA , TOTAL_SAMPLES , TOTAL_TIME ] = READ_WILLOW_DATAFILE ( FILENAME , HEADER , ... CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); this is for data produced with the new 30 kHz gpio firmware FILENAME is a string , the relative path to the H5 Willow file CHANNEL_TYPE = 'time' , 'amp' , 'aux' , 'supply' , 'temp' , 'din' CHANNEL_NUMBERS is an array of channel numbers , e . g . 1 : 64 T0 , T1 is an inclusive time range in seconds , relative to the beginning of the file everything is 1-indexed because matlab channel_type = \"adc\" is not supported ( returns error ), because there are no adc converters channel_type = \"dout\" is not supported ( returns error ), as any output pins are rolled into GPIO ( din ) example usage : data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'time' , 1 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'amp' , 129 : 256 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'aux' , 1 : 12 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'supply' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'temp' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'din' , [ 1 , 3 , 7 ] , 0 , 0 . 1 ); CKC 20160209 SDV 20160211 - minor modifications , added header information","title":"read_Willow_datafile_alt"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_datafile_orig.m/","text":"read_Willow_datafile_orig \u00b6 READ_WILLOW_DATAFILE - Reads Willow data files from LeafLabs hardware [ DATA , TOTAL_SAMPLES , TOTAL_TIME ] = READ_WILLOW_DATAFILE ( FILENAME , HEADER , ... CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); this is for data produced with the new 30 kHz gpio firmware FILENAME is a string , the relative path to the H5 Willow file CHANNEL_TYPE = 'time' , 'amp' , 'aux' , 'supply' , 'temp' , 'din' CHANNEL_NUMBERS is an array of channel numbers , e . g . 1 : 64 T0 , T1 is an inclusive time range in seconds , relative to the beginning of the file everything is 1-indexed because matlab channel_type = \"adc\" is not supported ( returns error ), because there are no adc converters channel_type = \"dout\" is not supported ( returns error ), as any output pins are rolled into GPIO ( din ) example usage : data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'time' , 1 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'amp' , 129 : 256 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'aux' , 1 : 12 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'supply' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'temp' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'din' , [ 1 , 3 , 7 ] , 0 , 0 . 1 ); CKC 20160209 SDV 20160211 - minor modifications , added header information","title":"read_Willow_datafile_orig"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_datafile_orig.m/#read_willow_datafile_orig","text":"READ_WILLOW_DATAFILE - Reads Willow data files from LeafLabs hardware [ DATA , TOTAL_SAMPLES , TOTAL_TIME ] = READ_WILLOW_DATAFILE ( FILENAME , HEADER , ... CHANNEL_TYPE , CHANNEL_NUMBERS , T0 , T1 ); this is for data produced with the new 30 kHz gpio firmware FILENAME is a string , the relative path to the H5 Willow file CHANNEL_TYPE = 'time' , 'amp' , 'aux' , 'supply' , 'temp' , 'din' CHANNEL_NUMBERS is an array of channel numbers , e . g . 1 : 64 T0 , T1 is an inclusive time range in seconds , relative to the beginning of the file everything is 1-indexed because matlab channel_type = \"adc\" is not supported ( returns error ), because there are no adc converters channel_type = \"dout\" is not supported ( returns error ), as any output pins are rolled into GPIO ( din ) example usage : data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'time' , 1 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'amp' , 129 : 256 , 0 , 0 . 1 ); data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'aux' , 1 : 12 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'supply' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'temp' , 1 : 4 , 0 , 0 . 1 ); % 2khz data = read_Willow_datafile ( 'snapshot_30kgpio.h5' , 'din' , [ 1 , 3 , 7 ] , 0 , 0 . 1 ); CKC 20160209 SDV 20160211 - minor modifications , added header information","title":"read_Willow_datafile_orig"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_headerfile.m/","text":"read_Willow_headerfile \u00b6 READ_WILLOW_HEADERFILE - Read file information from a Willow file HEADER = READ_WILLOW_HEADERFILE(FILENAME) Returns a structure HEADER with all of the information fields that are stored in the Willow .h5 file FILENAME. HEADER contains several substructures: ------------------------------------------------------------------ fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency amplifier_channels | Information about amplifier channels board_dig_in_channels | Digital input channels","title":"read_Willow_headerfile"},{"location":"reference/file/thirdparty_file_formats/LeafLabs-Willow/read_Willow_headerfile.m/#read_willow_headerfile","text":"READ_WILLOW_HEADERFILE - Read file information from a Willow file HEADER = READ_WILLOW_HEADERFILE(FILENAME) Returns a structure HEADER with all of the information fields that are stored in the Willow .h5 file FILENAME. HEADER contains several substructures: ------------------------------------------------------------------ fileinfo | Information about the file and its version frequency_parameters | Information about sampling frequency amplifier_channels | Information about amplifier channels board_dig_in_channels | Digital input channels","title":"read_Willow_headerfile"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/copy_SpikeGadgets_rec_files.m/","text":"copy_SpikeGadgets_rec_files \u00b6 COPY_SPIKEGADGETS_REC_FILES Shortens .rec files from sample to sample provided in arguments","title":"copy_SpikeGadgets_rec_files"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/copy_SpikeGadgets_rec_files.m/#copy_spikegadgets_rec_files","text":"COPY_SPIKEGADGETS_REC_FILES Shortens .rec files from sample to sample provided in arguments","title":"copy_SpikeGadgets_rec_files"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_analogChannels.m/","text":"read_SpikeGadgets_analogChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_analogChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the analog channels you want to extract, designated by the byte location (1-based), i.e., [3 5 7] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"read_SpikeGadgets_analogChannels"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_analogChannels.m/#read_spikegadgets_analogchannels","text":"[recData, timestamps] = read_SpikeGadgets_analogChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the analog channels you want to extract, designated by the byte location (1-based), i.e., [3 5 7] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- an N by M matrix with N data points and M channels (M is equal to the number of channels in the input)","title":"read_SpikeGadgets_analogChannels"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_config.m/","text":"read_SpikeGadgets_config \u00b6 out = read_SpikeGadgets_config ( filename ) Reads the configuration section of a Trodes (. rec ) file xml header is parsed and read out is a 1 x1 struct with 12 fields configText - length ( configText ) is the number of characters in header filePath - <---> filePrefix - <---> realtimeMode - logical saveDisplayedChanOnly - logical systemTimeAtCreation - str with systemTimeAtCreation timestampAtCreation - str with timestampAtCreation numChannels - str of number of channels in nTrodes ( sum of all trodes channels ) samplingRate - str of sampling rate headerSize - str of sum of numBytes in devices / 2 nTrodes - struct that lists nTrodes with structs inside that describe each channel headerChannels - channels listed in AuxDisplayConfiguration","title":"read_SpikeGadgets_config"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_config.m/#read_spikegadgets_config","text":"out = read_SpikeGadgets_config ( filename ) Reads the configuration section of a Trodes (. rec ) file xml header is parsed and read out is a 1 x1 struct with 12 fields configText - length ( configText ) is the number of characters in header filePath - <---> filePrefix - <---> realtimeMode - logical saveDisplayedChanOnly - logical systemTimeAtCreation - str with systemTimeAtCreation timestampAtCreation - str with timestampAtCreation numChannels - str of number of channels in nTrodes ( sum of all trodes channels ) samplingRate - str of sampling rate headerSize - str of sum of numBytes in devices / 2 nTrodes - struct that lists nTrodes with structs inside that describe each channel headerChannels - channels listed in AuxDisplayConfiguration","title":"read_SpikeGadgets_config"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_digitalChannels.m/","text":"read_SpikeGadgets_digitalChannels \u00b6 [recData, timestamps] = read_SpikeGadgets_digitalChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the digital channels you want to extract, designated as an N by 2 matrix [byte(1-based) bit(1-based)] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- a structure continaing the digital state of the channels","title":"read_SpikeGadgets_digitalChannels"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_digitalChannels.m/#read_spikegadgets_digitalchannels","text":"[recData, timestamps] = read_SpikeGadgets_digitalChannels(filename,NumChannels, channels, samplingRate,headerSize, configExists) ) Imports digital channel data in matlab from the raw data file INPUTS filename-- a string containing the name of the .dat file (raw file from SD card) NumChannels-- the number of channels in the recording (i.e., 32,64,96...) channels-- the digital channels you want to extract, designated as an N by 2 matrix [byte(1-based) bit(1-based)] samplingRate-- the sampling rate of the recording, i.e 30000 headerSize--the size, in int16's, of the header block of the data (contains DIO channels and aux analog channels). OUTPUTS timestamps--the system clock when each sample was taken recData-- a structure continaing the digital state of the channels","title":"read_SpikeGadgets_digitalChannels"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_trodeChannels.m/","text":"read_SpikeGadgets_trodeChannels \u00b6 [ recData , timestamps ] = read_SpikeGadgets_trodeChannels ( filename , NumChannels , channels , samplingRate , headerSize , configExists ) ) Imports channel data in matlab from the raw data file INPUTS filename -- a string containing the name of the . dat file ( raw file from SD card ) NumChannels -- the number of channels in the recording ( i . e . , 32 , 64 , 96. .. ) channels -- the channels you want to extract ( extracting all channels at once may overload memory ) numbers 1 - 120 which belong to each 4 of the 30 tetrodes samplingRate -- the sampling rate of the recording , i . e 30000 headerSize -- the size , in int16 's, of the header block of the data ( contains DIO channels and aux analog channels ) . calculated from ( MCUnumbytes + ECUnumbytes + 1 ) / 2 = 17 OUTPUTS timestamps -- the system clock when each sample was taken recData -- an N by M matrix with N data points and M channels ( M is equal to the number of channels in the input )","title":"read_SpikeGadgets_trodeChannels"},{"location":"reference/file/thirdparty_file_formats/SpikeGadgets-REC/read_SpikeGadgets_trodeChannels.m/#read_spikegadgets_trodechannels","text":"[ recData , timestamps ] = read_SpikeGadgets_trodeChannels ( filename , NumChannels , channels , samplingRate , headerSize , configExists ) ) Imports channel data in matlab from the raw data file INPUTS filename -- a string containing the name of the . dat file ( raw file from SD card ) NumChannels -- the number of channels in the recording ( i . e . , 32 , 64 , 96. .. ) channels -- the channels you want to extract ( extracting all channels at once may overload memory ) numbers 1 - 120 which belong to each 4 of the 30 tetrodes samplingRate -- the sampling rate of the recording , i . e 30000 headerSize -- the size , in int16 's, of the header block of the data ( contains DIO channels and aux analog channels ) . calculated from ( MCUnumbytes + ECUnumbytes + 1 ) / 2 = 17 OUTPUTS timestamps -- the system clock when each sample was taken recData -- an N by M matrix with N data points and M channels ( M is equal to the number of channels in the input )","title":"read_SpikeGadgets_trodeChannels"},{"location":"reference/file/xml/getXMLNodeText.m/","text":"getXMLNodeText \u00b6 getXMLNodeText - Read Node Text from XML VALUES = GETXMLNODETEXT ( XDOC , LISTITEM , SUBITEM , ISNUMBER ) Returns node text from the XML document XDOC . XDOC can be read from a file with the Matlab command XMLREAD . LISTITEM is a string corresponding to the list item ( s ) requested , and subitem is a strong corresponding to the subitem to be returned . VALUES is a cell list of returned data ( one cell element for each occurrence of LISTITEM in XDOC ) . If ISNUMBER is 0 , then string data is returned , but if ISNUMBER is 1 , then the strings are evaluated with EVAL and the result is returned . Developer note : Who wrote this ?? Was it Steve or Mark Mazurek ?","title":"getXMLNodeText"},{"location":"reference/file/xml/getXMLNodeText.m/#getxmlnodetext","text":"getXMLNodeText - Read Node Text from XML VALUES = GETXMLNODETEXT ( XDOC , LISTITEM , SUBITEM , ISNUMBER ) Returns node text from the XML document XDOC . XDOC can be read from a file with the Matlab command XMLREAD . LISTITEM is a string corresponding to the list item ( s ) requested , and subitem is a strong corresponding to the subitem to be returned . VALUES is a cell list of returned data ( one cell element for each occurrence of LISTITEM in XDOC ) . If ISNUMBER is 0 , then string data is returned , but if ISNUMBER is 1 , then the strings are evaluated with EVAL and the result is returned . Developer note : Who wrote this ?? Was it Steve or Mark Mazurek ?","title":"getXMLNodeText"},{"location":"reference/file/xml/parseXML.m/","text":"parseXML \u00b6 PARSEXML Convert XML file to a MATLAB structure. From MATHWORKS documentation (I believe) THESTRUCT = PARSEXML(FILENAME) Converts an XML file that is read with the MATLAB function XMLREAD into a Matlab structure. Developer note: Who wrote this?","title":"parseXML"},{"location":"reference/file/xml/parseXML.m/#parsexml","text":"PARSEXML Convert XML file to a MATLAB structure. From MATHWORKS documentation (I believe) THESTRUCT = PARSEXML(FILENAME) Converts an XML file that is read with the MATLAB function XMLREAD into a Matlab structure. Developer note: Who wrote this?","title":"parseXML"},{"location":"reference/file/xml/xml2struct_vhtools.m/","text":"xml2struct_vhtools \u00b6 XML2STRUCT - An incomplete xml string to struct conversion program STC = XML2STRUCT(XMLSTR) Converst some XML strings into Matlab structures. Accepts items in the format: <word><CONTENTS </word > or <word param1= \"value 1\" param2= \"value 2\" WS param3= \"value 3\" /> or <WS word WS param1= \"value1\" WS param2= \"value2\" WS param3= \"value3\" WS ></word> STC is a struct with entries corresponding to the headings and parameters/values in the XML string. Note that this function will not process an arbitrary xml string but only files that use the three conventions described above.","title":"xml2struct_vhtools"},{"location":"reference/file/xml/xml2struct_vhtools.m/#xml2struct_vhtools","text":"XML2STRUCT - An incomplete xml string to struct conversion program STC = XML2STRUCT(XMLSTR) Converst some XML strings into Matlab structures. Accepts items in the format: <word><CONTENTS </word > or <word param1= \"value 1\" param2= \"value 2\" WS param3= \"value 3\" /> or <WS word WS param1= \"value1\" WS param2= \"value2\" WS param3= \"value3\" WS ></word> STC is a struct with entries corresponding to the headings and parameters/values in the XML string. Note that this function will not process an arbitrary xml string but only files that use the three conventions described above.","title":"xml2struct_vhtools"},{"location":"reference/file/xml/xmlstringinput.m/","text":"xmlstringinput \u00b6 XMLSTRINGINPUT Determine whether a string is a file or URL RESULT = XMLSTRINGINPUT ( STRING ) will return STRING if it contains \"://\" , indicating that it is a URN . Otherwise , it will search the path for a file identified by STRING . RESULT = XMLSTRINGINPUT ( STRING , FULLSEARCH , RETURNFILE ) will process STRING to return a RESULT appropriate for passing to an XML process . STRING can be a URN , full path name , or file name . If STRING is a filename , FULLSEARCH will control how the full path is built . If TRUE , the XMLSTRINGINPUT will search the entire MATLAB path for the filename and return an error if the file can not be found . This is useful for source documents which are assumed to exist . If FALSE , only the current directory will be searched . This is useful for result documents which may not exist yet . FULLSEARCH is TRUE if omitted . If RETURNFILE is TRUE , RESULT returns as a java . io . File when STRING is a file . If RETURNFILE is FALSE , RESULT returns as a URN . RETURNFILE is TRUE if omitted . This utility is used by XSLT , XMLWRITE , and XMLREAD","title":"xmlstringinput"},{"location":"reference/file/xml/xmlstringinput.m/#xmlstringinput","text":"XMLSTRINGINPUT Determine whether a string is a file or URL RESULT = XMLSTRINGINPUT ( STRING ) will return STRING if it contains \"://\" , indicating that it is a URN . Otherwise , it will search the path for a file identified by STRING . RESULT = XMLSTRINGINPUT ( STRING , FULLSEARCH , RETURNFILE ) will process STRING to return a RESULT appropriate for passing to an XML process . STRING can be a URN , full path name , or file name . If STRING is a filename , FULLSEARCH will control how the full path is built . If TRUE , the XMLSTRINGINPUT will search the entire MATLAB path for the filename and return an error if the file can not be found . This is useful for source documents which are assumed to exist . If FALSE , only the current directory will be searched . This is useful for result documents which may not exist yet . FULLSEARCH is TRUE if omitted . If RETURNFILE is TRUE , RESULT returns as a java . io . File when STRING is a file . If RETURNFILE is FALSE , RESULT returns as a URN . RETURNFILE is TRUE if omitted . This utility is used by XSLT , XMLWRITE , and XMLREAD","title":"xmlstringinput"},{"location":"reference/file/xml/xmlstruct_attributename2struct.m/","text":"xmlstruct_attributename2struct \u00b6 XMLSTRUCT_ATTRIBUTE2STRUCT Convert an XMLSTRUCT Name/Attribute/Data structure to Matlab structure THESTRUCT = XMLSTRUCT_ATTRIBUTENAME2STRUCT(XMLSTRUCT_INPUT) Creates a Matlab structure based on a Matlab XML structure XMLSTRUCT_INPUT such as that returnd by PARSEXML. This function loops through all ATTRIBUTES of each entry of XMLSTRUCT_INPUT, and creates a field in the structure THESTRUCT with the name of the attribute and the 'Data' of the element. In the event that the 'Data' field is empty and there is a single child in the 'Children' field, the 'Data' field of the single child will be used. See also: PARSEXML","title":"xmlstruct_attributename2struct"},{"location":"reference/file/xml/xmlstruct_attributename2struct.m/#xmlstruct_attributename2struct","text":"XMLSTRUCT_ATTRIBUTE2STRUCT Convert an XMLSTRUCT Name/Attribute/Data structure to Matlab structure THESTRUCT = XMLSTRUCT_ATTRIBUTENAME2STRUCT(XMLSTRUCT_INPUT) Creates a Matlab structure based on a Matlab XML structure XMLSTRUCT_INPUT such as that returnd by PARSEXML. This function loops through all ATTRIBUTES of each entry of XMLSTRUCT_INPUT, and creates a field in the structure THESTRUCT with the name of the attribute and the 'Data' of the element. In the event that the 'Data' field is empty and there is a single child in the 'Children' field, the 'Data' field of the single child will be used. See also: PARSEXML","title":"xmlstruct_attributename2struct"},{"location":"reference/file/xml/xmlstruct_findnode.m/","text":"xmlstruct_findnode \u00b6 XMLSTRUCT_FINDNODE - Find a node in a Matlab struct based on XML NODE = XMLSTRUCT_FINDNODE ( XML_STRUCT , NODENAME ) Recursively searches XML_STRUCT , an XML node tree returned from PARSEXML , for the node with the name 'NODENAME' . It returns the node at that point ( including all of its children ) . XML_STRUCT should be a structure with the following fields : 'Name' , 'Attributes' , 'Data' , 'Children' . The 'Children' field should be a structure with the same fields . See also : PARSEXML","title":"xmlstruct_findnode"},{"location":"reference/file/xml/xmlstruct_findnode.m/#xmlstruct_findnode","text":"XMLSTRUCT_FINDNODE - Find a node in a Matlab struct based on XML NODE = XMLSTRUCT_FINDNODE ( XML_STRUCT , NODENAME ) Recursively searches XML_STRUCT , an XML node tree returned from PARSEXML , for the node with the name 'NODENAME' . It returns the node at that point ( including all of its children ) . XML_STRUCT should be a structure with the following fields : 'Name' , 'Attributes' , 'Data' , 'Children' . The 'Children' field should be a structure with the same fields . See also : PARSEXML","title":"xmlstruct_findnode"},{"location":"reference/file/xml/xmlstruct_stripwhitespace.m/","text":"xmlstruct_stripwhitespace \u00b6 XMLSTRUCT_STRIPTEXT - Strip nodes with name '#text' from xml structure XML_STRUCT = XMLSTRUCT_STRIPWHITESPACETEXT(XML_STRUCT) Recursively searches XML_STRUCT, an XML node tree returned from PARSEXML, and strips out all nodes with name '#text'. These seem to correspond to whitespace. See also: PARSEXML","title":"xmlstruct_stripwhitespace"},{"location":"reference/file/xml/xmlstruct_stripwhitespace.m/#xmlstruct_stripwhitespace","text":"XMLSTRUCT_STRIPTEXT - Strip nodes with name '#text' from xml structure XML_STRUCT = XMLSTRUCT_STRIPWHITESPACETEXT(XML_STRUCT) Recursively searches XML_STRUCT, an XML node tree returned from PARSEXML, and strips out all nodes with name '#text'. These seem to correspond to whitespace. See also: PARSEXML","title":"xmlstruct_stripwhitespace"},{"location":"reference/fits/double_gauss_DoG_fit.m/","text":"double_gauss_DoG_fit \u00b6 double_gauss_Dog_fit - Fits a double gaussian modulated by a difference of gaussians to data [OFFSET, DOUBLE_GAUSS_PARAMS, DOG_PARAMS, RFIT, RSQUARE] = DOUBLE_GAUSS_DOG_FIT(THETA, SF, R) (description of inputs/outputs here by Andrea)","title":"double_gauss_DoG_fit"},{"location":"reference/fits/double_gauss_DoG_fit.m/#double_gauss_dog_fit","text":"double_gauss_Dog_fit - Fits a double gaussian modulated by a difference of gaussians to data [OFFSET, DOUBLE_GAUSS_PARAMS, DOG_PARAMS, RFIT, RSQUARE] = DOUBLE_GAUSS_DOG_FIT(THETA, SF, R) (description of inputs/outputs here by Andrea)","title":"double_gauss_DoG_fit"},{"location":"reference/fits/example_double_gauss_dog_data.m/","text":"example_double_gauss_dog_data \u00b6 EXAMPLE_DOUBLE_GAUSS_DOG_DATA - generate a random set of data + parameters STARTING VALUES THAT MAKE FOR GOOD FIT dog_params = [ 0 1 0.5 0.4 1 ] ; double_gauss_params = [ 1 10 45 25 4 ] ; theta_range = [ 0 : 22.5 : 360 - 22.5 ] ; sf_range = [ 0.01 0.02 0.05 0.08 0.1 0.2 0.5 1.2 1.5 1.8 ] ; [ theta , sf ] = meshgrid ( theta_range , sf_range ); R = double_gauss_DoG ( theta , sf , double_gauss_params , dog_params );","title":"example_double_gauss_dog_data"},{"location":"reference/fits/example_double_gauss_dog_data.m/#example_double_gauss_dog_data","text":"EXAMPLE_DOUBLE_GAUSS_DOG_DATA - generate a random set of data + parameters STARTING VALUES THAT MAKE FOR GOOD FIT dog_params = [ 0 1 0.5 0.4 1 ] ; double_gauss_params = [ 1 10 45 25 4 ] ; theta_range = [ 0 : 22.5 : 360 - 22.5 ] ; sf_range = [ 0.01 0.02 0.05 0.08 0.1 0.2 0.5 1.2 1.5 1.8 ] ; [ theta , sf ] = meshgrid ( theta_range , sf_range ); R = double_gauss_DoG ( theta , sf , double_gauss_params , dog_params );","title":"example_double_gauss_dog_data"},{"location":"reference/fits/exp_fit.m/","text":"exp_fit \u00b6 EXP_FIT Exponential fit [ TAU , B , k , err , fit ] = EXP_FIT ( T , DATA ) Finds the best fit to the exponential function y ( t ) = b + k * ( 1 - exp ( - T / tau )) where T is an increasing vector of timevalues , b is a constant offset , k is a scalar , and tau is the exponential time constant .","title":"exp_fit"},{"location":"reference/fits/exp_fit.m/#exp_fit","text":"EXP_FIT Exponential fit [ TAU , B , k , err , fit ] = EXP_FIT ( T , DATA ) Finds the best fit to the exponential function y ( t ) = b + k * ( 1 - exp ( - T / tau )) where T is an increasing vector of timevalues , b is a constant offset , k is a scalar , and tau is the exponential time constant .","title":"exp_fit"},{"location":"reference/fits/exp_fit_err.m/","text":"exp_fit_err \u00b6 EXP_FIT_ERR Exponential error function ERR=EXP_FIT_ERR(P,T,DATA) P = [b tau k] returns mean squared error of y = b + k*(1-exp(-T/tau)), where T is a vector of timevalues to evaluate.","title":"exp_fit_err"},{"location":"reference/fits/exp_fit_err.m/#exp_fit_err","text":"EXP_FIT_ERR Exponential error function ERR=EXP_FIT_ERR(P,T,DATA) P = [b tau k] returns mean squared error of y = b + k*(1-exp(-T/tau)), where T is a vector of timevalues to evaluate.","title":"exp_fit_err"},{"location":"reference/fits/fitsearchspace.m/","text":"fitsearchspace \u00b6 FITSEARCHSPACE - return a set of vectors that span a range X0_VECTORS = FITSEARCHSPACE ( LOWER_BOUNDS , UPPER_BOUNDS , NSPACE ) Given a set of LOWER_BOUNDS = [ m1 m2 ... ] and UPPER_BOUNDS = [ n1 n2 ...], this function computes a set of vectors that tile this space in NSPACE steps ( using LINSPACE ) . The columns of X0_VECTORS are vector values ( NPOINTS x dimension of bounds ) . See also : LINSPACE , MESHGRID , NDGRID Example : X0_vectors = fitsearchspace ( [ 0 0 ],[ 1 1 ], 5 )","title":"fitsearchspace"},{"location":"reference/fits/fitsearchspace.m/#fitsearchspace","text":"FITSEARCHSPACE - return a set of vectors that span a range X0_VECTORS = FITSEARCHSPACE ( LOWER_BOUNDS , UPPER_BOUNDS , NSPACE ) Given a set of LOWER_BOUNDS = [ m1 m2 ... ] and UPPER_BOUNDS = [ n1 n2 ...], this function computes a set of vectors that tile this space in NSPACE steps ( using LINSPACE ) . The columns of X0_VECTORS are vector values ( NPOINTS x dimension of bounds ) . See also : LINSPACE , MESHGRID , NDGRID Example : X0_vectors = fitsearchspace ( [ 0 0 ],[ 1 1 ], 5 )","title":"fitsearchspace"},{"location":"reference/fits/gaussfit.m/","text":"gaussfit \u00b6 GAUSSFIT Fits data to a Gaussian [ Rsp , Rp , P , sigm , FITCURVE , ERR ] = GAUSSFIT ( VALUES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - P ) ^ 2 ) / ( 2 * sigm ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred value , P is the preferred value , sigm is the tuning width . VALUES are the values of X that are measured . DATA is the response for each value in VALUES . FITCURVE is the fit function at 1 value intervals min : max . ERR is the mean squared error .","title":"gaussfit"},{"location":"reference/fits/gaussfit.m/#gaussfit","text":"GAUSSFIT Fits data to a Gaussian [ Rsp , Rp , P , sigm , FITCURVE , ERR ] = GAUSSFIT ( VALUES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - P ) ^ 2 ) / ( 2 * sigm ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred value , P is the preferred value , sigm is the tuning width . VALUES are the values of X that are measured . DATA is the response for each value in VALUES . FITCURVE is the fit function at 1 value intervals min : max . ERR is the mean squared error .","title":"gaussfit"},{"location":"reference/fits/gaussfit_conv.m/","text":"gaussfit_conv \u00b6 OTFIT_CARANDINI_CONV Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = GUASSFIT_CONV ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying GAUSSFIT .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : GAUSSFIT , GAUSSFIT_ERR , OTFIT_CARANDINI , OTFIT_CARANDINI_ERR","title":"gaussfit_conv"},{"location":"reference/fits/gaussfit_conv.m/#gaussfit_conv","text":"OTFIT_CARANDINI_CONV Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = GUASSFIT_CONV ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying GAUSSFIT .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : GAUSSFIT , GAUSSFIT_ERR , OTFIT_CARANDINI , OTFIT_CARANDINI_ERR","title":"gaussfit_conv"},{"location":"reference/fits/gaussfit_err.m/","text":"gaussfit_err \u00b6 GAUSSFIT_ERR Computes error of gaussian fit [ ERR , RFIT ] = GAUSSFIT_ERR ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : GAUSSFIT OTFIT_CARANDINI","title":"gaussfit_err"},{"location":"reference/fits/gaussfit_err.m/#gaussfit_err","text":"GAUSSFIT_ERR Computes error of gaussian fit [ ERR , RFIT ] = GAUSSFIT_ERR ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : GAUSSFIT OTFIT_CARANDINI","title":"gaussfit_err"},{"location":"reference/fits/gaussspotfit.m/","text":"gaussspotfit \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit"},{"location":"reference/fits/gaussspotfit.m/#gaussspotfit","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit"},{"location":"reference/fits/gaussspotfit_mod.m/","text":"gaussspotfit_mod \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , MOD_AMP , MOD_SIGMA , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . MOD_AMP - The amplitude of the surround modulation ( multiplicative ) SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit_mod"},{"location":"reference/fits/gaussspotfit_mod.m/#gaussspotfit_mod","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , MOD_AMP , MOD_SIGMA , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . MOD_AMP - The amplitude of the surround modulation ( multiplicative ) SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit_mod"},{"location":"reference/fits/gaussspotfit_nk.m/","text":"gaussspotfit_nk \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , C50 , N , FIT_RESPONSES ] = GAUSSSPOTFIT_NK ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions , with response amplitude modulated by the Naka - Rushton function . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter ( SV NOTE : Did I write this ?? Do I really mean diameter ? ) RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . C50 - 50 % point of Naka Rushton response N - N power of Naka Rushton response FIT_RESPONSES - the fit responses","title":"gaussspotfit_nk"},{"location":"reference/fits/gaussspotfit_nk.m/#gaussspotfit_nk","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , C50 , N , FIT_RESPONSES ] = GAUSSSPOTFIT_NK ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions , with response amplitude modulated by the Naka - Rushton function . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter ( SV NOTE : Did I write this ?? Do I really mean diameter ? ) RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariance matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . C50 - 50 % point of Naka Rushton response N - N power of Naka Rushton response FIT_RESPONSES - the fit responses","title":"gaussspotfit_nk"},{"location":"reference/fits/gaussspotfit_nopos_surr.m/","text":"gaussspotfit_nopos_surr \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , B , FIT_RESPONSES , R_SQUARED ] = GAUSSSPOTFIT_NOPOS_SURR ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF with modulation to responses to circle / aperture stimulation . The equation that is fit is STIMULUS ( r ) * AMP * G ( r , MU , SIGMA ) * ( 1 + B * r ) The first half is an integrated Gaussian function ( G ( r , MU , SIGMA )) The second half is a modulating factor that depends linearly on the stimulus diameter . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response B - The modulating factor FIT_RESPONSES - the fit responses R_SQUARED - The error of the fit normalized by the square of the data around its mean","title":"gaussspotfit_nopos_surr"},{"location":"reference/fits/gaussspotfit_nopos_surr.m/#gaussspotfit_nopos_surr","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , B , FIT_RESPONSES , R_SQUARED ] = GAUSSSPOTFIT_NOPOS_SURR ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF with modulation to responses to circle / aperture stimulation . The equation that is fit is STIMULUS ( r ) * AMP * G ( r , MU , SIGMA ) * ( 1 + B * r ) The first half is an integrated Gaussian function ( G ( r , MU , SIGMA )) The second half is a modulating factor that depends linearly on the stimulus diameter . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response B - The modulating factor FIT_RESPONSES - the fit responses R_SQUARED - The error of the fit normalized by the square of the data around its mean","title":"gaussspotfit_nopos_surr"},{"location":"reference/fits/gaussspotfit_noposition.m/","text":"gaussspotfit_noposition \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT_NOPOSITION ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle / aperture stimulation . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit_noposition"},{"location":"reference/fits/gaussspotfit_noposition.m/#gaussspotfit_noposition","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT_NOPOSITION ( XRANGE , YRANGE , RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle / aperture stimulation . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . RESPONSE is the response of the system to that circle . OUTPUTS : MU - Always [ 0 0 ] C - The covariance matrix of the best - fit gaussian PDF ; always [ C1 0 ; 0 C1 ] AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit_noposition"},{"location":"reference/fits/gaussspotfit_skew.m/","text":"gaussspotfit_skew \u00b6 GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit_skew"},{"location":"reference/fits/gaussspotfit_skew.m/#gaussspotfit_skew","text":"GAUSSSPOTFIT - Fit a 2 d gaussian to data [ MU , C , AMP , SIZES , FIT_RESPONSES ] = GAUSSSPOTFIT ( XRANGE , YRANGE , X_CTR , Y_CTR , ... RADIUS , RESPONSE ) Fits a 2 d gaussian PDF to responses to circle stimulation at different positions . INPUTS : XRANGE and YRANGE specify the size of the stimulus field . They should be vectors : ( e . g . , XRANGE = 0 : 800 ; YRANGE = 0 : 600 ) . X_CTR , Y_CTR , RADIUS , and RESPONSE are vectors that describe the stimulus circles . X_CTR and Y_CTR contain center locations in X and Y ; RADIUS has the diameter RESPONSE is the response of the system to that circle . OUTPUTS : MU - The mean of the best - fit gaussian PDF , in X and Y C - The covariane matrix of the best - fit gaussian PDF AMP - The amplitude of the response for each circle size . SIZES - The sizes that are associated with each amplitude . FIT_RESPONSES - the fit responses","title":"gaussspotfit_skew"},{"location":"reference/fits/linepowerthreshold.m/","text":"linepowerthreshold \u00b6 LINEPOWERTHRESHOLD - compute linepowerthreshold function for values of x [ CURVE ] = LINEPOWERTHRESHOLD ( X , SLOPE , OFFSET , THRESHOLD , EXPONENT ) Calculates CURVE = OFFSET + SLOPE * RECTIFY ( X - THRESHOLD ). ^ EXPONENT See also : QUICKREGRESSION ( simple linear fit ), LINEPOWERTHRESHOLDFIT Jason Osik and Steve Van Hooser","title":"linepowerthreshold"},{"location":"reference/fits/linepowerthreshold.m/#linepowerthreshold","text":"LINEPOWERTHRESHOLD - compute linepowerthreshold function for values of x [ CURVE ] = LINEPOWERTHRESHOLD ( X , SLOPE , OFFSET , THRESHOLD , EXPONENT ) Calculates CURVE = OFFSET + SLOPE * RECTIFY ( X - THRESHOLD ). ^ EXPONENT See also : QUICKREGRESSION ( simple linear fit ), LINEPOWERTHRESHOLDFIT Jason Osik and Steve Van Hooser","title":"linepowerthreshold"},{"location":"reference/fits/linepowerthresholdfit.m/","text":"linepowerthresholdfit \u00b6 LINEPOWERTHRESHOLDFIT - Fit a linear function , raised to a power , with a threshold [ SLOPE , OFFSET , THRESHOLD , EXPONENT , CURVE , GOF , FITINFO ] = LINEPOWERTHRESHOLDFIT ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = OFFSET + SLOPE * RECTIFY ( X - THRESHOLD ) .^ EXPONENT X and Y should be vectors with the same length . SLOPE , OFFSET , THRESHOLD , and EXPONENT are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit threshold_range [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range offset_start ( from quickregression ) | Initial OFFSET starting point offset_range ([ - Inf Inf ]) | OFFSET parameter range exponent_start ( 1 ) | Initial EXPONENT start point exponent_range ([ - Inf Inf ]) | EXPONENT search space weights ([]) | Weigh the error at each point by a value Example : x = sort ( rand ( 20 , 1 )); y = linepowerthreshold ( x , 3 , 0.3 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , offset , t , exponent , thefit ]= linepowerthresholdfit ( x , y , 'exponent_start' , 1 , 'exponent_range' ,[ 1 1 ]); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx' ); box off ; See also: QUICKREGRESSION (simple linear fit), FIT, LINEPOWERTHRESHOLD Jason Osik and Steve Van Hooser","title":"linepowerthresholdfit"},{"location":"reference/fits/linepowerthresholdfit.m/#linepowerthresholdfit","text":"LINEPOWERTHRESHOLDFIT - Fit a linear function , raised to a power , with a threshold [ SLOPE , OFFSET , THRESHOLD , EXPONENT , CURVE , GOF , FITINFO ] = LINEPOWERTHRESHOLDFIT ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = OFFSET + SLOPE * RECTIFY ( X - THRESHOLD ) .^ EXPONENT X and Y should be vectors with the same length . SLOPE , OFFSET , THRESHOLD , and EXPONENT are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit threshold_range [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range offset_start ( from quickregression ) | Initial OFFSET starting point offset_range ([ - Inf Inf ]) | OFFSET parameter range exponent_start ( 1 ) | Initial EXPONENT start point exponent_range ([ - Inf Inf ]) | EXPONENT search space weights ([]) | Weigh the error at each point by a value Example : x = sort ( rand ( 20 , 1 )); y = linepowerthreshold ( x , 3 , 0.3 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , offset , t , exponent , thefit ]= linepowerthresholdfit ( x , y , 'exponent_start' , 1 , 'exponent_range' ,[ 1 1 ]); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx' ); box off ; See also: QUICKREGRESSION (simple linear fit), FIT, LINEPOWERTHRESHOLD Jason Osik and Steve Van Hooser","title":"linepowerthresholdfit"},{"location":"reference/fits/linethresholdfit.m/","text":"linethresholdfit \u00b6 LINETHRESHOLDFIT - Fit a linear function with a threshold [ SLOPE , THRESHOLD , CURVE , GOF , FITINFO ] = LINETHRESHOLDFIT ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = SLOPE * RECTIFY ( X - THRESHOLD ) X and Y should be vectors with the same length . SLOPE and THRESHOLD are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit thresholdrange [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range Example : x = sort ( rand ( 20 , 1 )); y = linepowerthreshold ( x , 3 , 0 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , t , thefit ]= linethresholdfit ( x , y ); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx-' ); box off ; See also: QUICKREGRESSION (simple linear fit), FIT, LINEPOWERTHRESHOLD, LINEPOWERTHRESHOLDFIT Jason Osik and Steve Van Hooser","title":"linethresholdfit"},{"location":"reference/fits/linethresholdfit.m/#linethresholdfit","text":"LINETHRESHOLDFIT - Fit a linear function with a threshold [ SLOPE , THRESHOLD , CURVE , GOF , FITINFO ] = LINETHRESHOLDFIT ( X , Y , ... ) Performs a nonlinear fit to find the best parameters for a function of the form Y = SLOPE * RECTIFY ( X - THRESHOLD ) X and Y should be vectors with the same length . SLOPE and THRESHOLD are the best fit values . CURVE is the fit values of Y for the values of X used to generate the fit . GOF and FITINFO are the Matlab goodness - of - fit and fitinfo structures that are returned by the Matlab function FIT . Initial parameters and ranges can be modified by passing name / value pairs . This function can also take name / value pairs that modify default behaviors : Parameter ( default ) | Description --------------------------------------------------------------------------- threshold_start ( min ( x )) | Iniitial starting point for THRESHOLD fit thresholdrange [( min ( x ) - 1 ) max ( x ) + 1 )] | THRESHOLD fit range slope_start ( from quickregression ) | Initial starting point for SLOPE fit slope_range [ - Inf Inf ] | SLOPE fit range Example : x = sort ( rand ( 20 , 1 )); y = linepowerthreshold ( x , 3 , 0 , 0.5 , 1 ); % limit search to exponents = 1 [ slope , t , thefit ]= linethresholdfit ( x , y ); figure ; plot ( x , y , 'bo' ); hold on ; plot ( x , thefit , 'rx-' ); box off ; See also: QUICKREGRESSION (simple linear fit), FIT, LINEPOWERTHRESHOLD, LINEPOWERTHRESHOLDFIT Jason Osik and Steve Van Hooser","title":"linethresholdfit"},{"location":"reference/fits/naka_rushton.m/","text":"naka_rushton \u00b6 NAKA_RUSHTON Naka - Rushton fit ( for contrast curves ) [ RM , B ] = NAKA_RUSHTON ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c / ( b + c ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N ] = NAKA_RUSHTON ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b + c ^ n ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N , S ] = NAKA_RUSHTON ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b ^ ( s * n ) + c ^ ( s * n )) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast , and s is a saturation factor . References : Naka_Rushton fit was first described in Naka , Rushton , J . Physiol . London 185 : 536 - 555 , 1966 and used to fit contrast data of cortical cells in Albrecht and Hamilton , J . Neurophys . 48 : 217 - 237 , 1982 The saturation form was described in Peirce 2007 J Vision","title":"naka_rushton"},{"location":"reference/fits/naka_rushton.m/#naka_rushton","text":"NAKA_RUSHTON Naka - Rushton fit ( for contrast curves ) [ RM , B ] = NAKA_RUSHTON ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c / ( b + c ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N ] = NAKA_RUSHTON ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b + c ^ n ) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast . [ RM , B , N , S ] = NAKA_RUSHTON ( C , DATA ) Finds the best fit to the Naka - Rushton function R ( c ) = Rm * c ^ n / ( b ^ ( s * n ) + c ^ ( s * n )) where C is contrast ( 0 - 1 ) , Rm is the maximum response , and b is the half - maximum contrast , and s is a saturation factor . References : Naka_Rushton fit was first described in Naka , Rushton , J . Physiol . London 185 : 536 - 555 , 1966 and used to fit contrast data of cortical cells in Albrecht and Hamilton , J . Neurophys . 48 : 217 - 237 , 1982 The saturation form was described in Peirce 2007 J Vision","title":"naka_rushton"},{"location":"reference/fits/naka_rushton_err.m/","text":"naka_rushton_err \u00b6 NAKA_RUSHTON_ERR Naka - Rushton function helper function for fitting ERR = NAKA_RUSHTON_ERR ( P , C , DATA ) P = [ rm b ] returns mean squared error of p ( 1 ) * c . / ( p ( 2 ) + c ) with data P = [ rm b n ] returns mean squared error of p ( 1 ) * cn . / ( p ( 2 ) ^ p ( 3 ) + cn ) with data where cn = c . ^ p ( 3 ) P = [ rm b n s ] returns mean squared error of p ( 1 ) * c ^ ( p3 ). / ( p ( 2 ) ^ ( p ( 3 ) * p ( 4 )) + c ^ ( p ( 3 ) * p ( 4 ))","title":"naka_rushton_err"},{"location":"reference/fits/naka_rushton_err.m/#naka_rushton_err","text":"NAKA_RUSHTON_ERR Naka - Rushton function helper function for fitting ERR = NAKA_RUSHTON_ERR ( P , C , DATA ) P = [ rm b ] returns mean squared error of p ( 1 ) * c . / ( p ( 2 ) + c ) with data P = [ rm b n ] returns mean squared error of p ( 1 ) * cn . / ( p ( 2 ) ^ p ( 3 ) + cn ) with data where cn = c . ^ p ( 3 ) P = [ rm b n s ] returns mean squared error of p ( 1 ) * c ^ ( p3 ). / ( p ( 2 ) ^ ( p ( 3 ) * p ( 4 )) + c ^ ( p ( 3 ) * p ( 4 ))","title":"naka_rushton_err"},{"location":"reference/fits/naka_rushton_func.m/","text":"naka_rushton_func \u00b6 NAKA_RUSHTON_FUNC - Evaluate Naka Rushton function R = NAKA_RUSHTON_FUNC ( C , C50 , N , S ) Returns Naka Rushton function : C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) If S is not specified , S is assumed to be 1 . If C is negative , the result is negative .","title":"naka_rushton_func"},{"location":"reference/fits/naka_rushton_func.m/#naka_rushton_func","text":"NAKA_RUSHTON_FUNC - Evaluate Naka Rushton function R = NAKA_RUSHTON_FUNC ( C , C50 , N , S ) Returns Naka Rushton function : C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) If S is not specified , S is assumed to be 1 . If C is negative , the result is negative .","title":"naka_rushton_func"},{"location":"reference/fits/naka_rushton_slope.m/","text":"naka_rushton_slope \u00b6 NAKA_RUSHTON_SLOPE - Evaluate slope of Naka Rushton function R = NAKA_RUSHTON_SLOPE ( C , C50 , N , S ) Returns the derivative of the Naka Rushton function : d [ C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) ] / dc . If S is not specified , S is assumed to be 1 . If C is negative , the result is negative .","title":"naka_rushton_slope"},{"location":"reference/fits/naka_rushton_slope.m/#naka_rushton_slope","text":"NAKA_RUSHTON_SLOPE - Evaluate slope of Naka Rushton function R = NAKA_RUSHTON_SLOPE ( C , C50 , N , S ) Returns the derivative of the Naka Rushton function : d [ C ^ N / ( C ^ ( N * S ) + c50 ^ ( N * S )) ] / dc . If S is not specified , S is assumed to be 1 . If C is negative , the result is negative .","title":"naka_rushton_slope"},{"location":"reference/fits/otfit_carandini.m/","text":"otfit_carandini \u00b6 OTFIT_CARANDINI Fits orientation curves like Carandini/Ferster 2000 [Rsp,Rp,Op,sigm,Rn,FITCURVE,ERR]=OTFIT_CARANDINI(ANGLES,... SPONTHINT, MAXRESPHINT, OTPREFHINT, WIDTHHINT,'DATA',DATA) Finds the best fit to the function R=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) where R is the response, Rsp is the spontaneous response, Rp is the response at the preferred angle, Op is the preferred angle, sigm is the tuning width, Rn is the firing rate at 180+Op. FITCURVE is the fit function at 1 degree intervals (0:1:359).","title":"otfit_carandini"},{"location":"reference/fits/otfit_carandini.m/#otfit_carandini","text":"OTFIT_CARANDINI Fits orientation curves like Carandini/Ferster 2000 [Rsp,Rp,Op,sigm,Rn,FITCURVE,ERR]=OTFIT_CARANDINI(ANGLES,... SPONTHINT, MAXRESPHINT, OTPREFHINT, WIDTHHINT,'DATA',DATA) Finds the best fit to the function R=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) where R is the response, Rsp is the spontaneous response, Rp is the response at the preferred angle, Op is the preferred angle, sigm is the tuning width, Rn is the firing rate at 180+Op. FITCURVE is the fit function at 1 degree intervals (0:1:359).","title":"otfit_carandini"},{"location":"reference/fits/otfit_carandini0.m/","text":"otfit_carandini0 \u00b6 OTFIT_CARANDINI0 Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , FITCURVE , ERR ] = OTFIT_CARANDINI0 ( ANGLES , ... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rp * EXP ( - ( X - Op + 180 ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sigm is the tuning width . This function differs from OTFIT_CARANDINI in that the response 180 degrees away from Op is constrained to be Rp . In OTFIT_CARANDINI , it can have its own value Rn . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"otfit_carandini0"},{"location":"reference/fits/otfit_carandini0.m/#otfit_carandini0","text":"OTFIT_CARANDINI0 Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , FITCURVE , ERR ] = OTFIT_CARANDINI0 ( ANGLES , ... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rp * EXP ( - ( X - Op + 180 ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sigm is the tuning width . This function differs from OTFIT_CARANDINI in that the response 180 degrees away from Op is constrained to be Rp . In OTFIT_CARANDINI , it can have its own value Rn . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"otfit_carandini0"},{"location":"reference/fits/otfit_carandini2.m/","text":"otfit_carandini2 \u00b6 OTFIT_CARANDINI Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , Rn , OnOff , FITCURVE , ERR , R2 ] = OTFIT_CARANDINI ( ANGLES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ,... ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rn * EXP ( - ( X - On ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred angle , Op is the preferred angle , sigm is the tuning width , Rn is the firing rate at 180 + Op , OnOff is the offset of the null angle from the preferred . One can restrict the range of these parameters by providing descriptor / interval pairs as additional arguments ( e . g ., 'OnOffInt' ,[ 130 230 ] ) . See OTFIT_CARANDINI_CONV2 for a list of interval names . ERR is the squared error between the fit and the data . R2 is the R ^ 2 value of the fit . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"otfit_carandini2"},{"location":"reference/fits/otfit_carandini2.m/#otfit_carandini2","text":"OTFIT_CARANDINI Fits orientation curves like Carandini / Ferster 2000 [ Rsp , Rp , Op , sigm , Rn , OnOff , FITCURVE , ERR , R2 ] = OTFIT_CARANDINI ( ANGLES ,... SPONTHINT , MAXRESPHINT , OTPREFHINT , WIDTHHINT , 'DATA' , DATA ,... ) Finds the best fit to the function R = Rsp + Rp * EXP ( - ( X - Op ) ^ 2 ) / ( 2 * sig ^ 2 )) + Rn * EXP ( - ( X - On ) ^ 2 / ( 2 * sig ^ 2 )) where R is the response , Rsp is the spontaneous response , Rp is the response at the preferred angle , Op is the preferred angle , sigm is the tuning width , Rn is the firing rate at 180 + Op , OnOff is the offset of the null angle from the preferred . One can restrict the range of these parameters by providing descriptor / interval pairs as additional arguments ( e . g ., 'OnOffInt' ,[ 130 230 ] ) . See OTFIT_CARANDINI_CONV2 for a list of interval names . ERR is the squared error between the fit and the data . R2 is the R ^ 2 value of the fit . FITCURVE is the fit function at 1 degree intervals ( 0 : 1 : 359 ) .","title":"otfit_carandini2"},{"location":"reference/fits/otfit_carandini_conv.m/","text":"otfit_carandini_conv \u00b6 OTFIT_CARANDINI_CONV Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn ] = OTFIT_CARANDINI_CONV ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying OTFIT_CARANDINI .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : OTFIT_CARANDINI , OTFIT_CARANDINI_ERR","title":"otfit_carandini_conv"},{"location":"reference/fits/otfit_carandini_conv.m/#otfit_carandini_conv","text":"OTFIT_CARANDINI_CONV Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn ] = OTFIT_CARANDINI_CONV ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying OTFIT_CARANDINI .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : OTFIT_CARANDINI , OTFIT_CARANDINI_ERR","title":"otfit_carandini_conv"},{"location":"reference/fits/otfit_carandini_conv0.m/","text":"otfit_carandini_conv0 \u00b6 OTFIT_CARANDINI_CONV0 Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = OTFIT_CARANDINI_CONV0 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying OTFIT_CARANDINI0 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : OTFIT_CARANDINI0 , OTFIT_CARANDINI_ERR0","title":"otfit_carandini_conv0"},{"location":"reference/fits/otfit_carandini_conv0.m/#otfit_carandini_conv0","text":"OTFIT_CARANDINI_CONV0 Converts between real params and fitting params [ Rsp , Rp , Op , sig ] = OTFIT_CARANDINI_CONV0 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying OTFIT_CARANDINI0 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 stddev3 ... ] Standard deviation ; if provided , squared error is normalized by standard deviation See also : OTFIT_CARANDINI0 , OTFIT_CARANDINI_ERR0","title":"otfit_carandini_conv0"},{"location":"reference/fits/otfit_carandini_conv2.m/","text":"otfit_carandini_conv2 \u00b6 OTFIT_CARANDINI_CONV Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn , OnOff ] = OTFIT_CARANDINI_CONV2 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying OTFIT_CARANDINI2 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 maxdata ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 130 230 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) High and low value for this interval should be the same modulo 360 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : OTFIT_CARANDINI , OTFIT_CARANDINI_ERR","title":"otfit_carandini_conv2"},{"location":"reference/fits/otfit_carandini_conv2.m/#otfit_carandini_conv2","text":"OTFIT_CARANDINI_CONV Converts between real params and fitting params [ Rsp , Rp , Op , sig , Rn , OnOff ] = OTFIT_CARANDINI_CONV2 ( DIR , P , VARARGIN ) ** This is really an internal function . Only read if you 're interested in modifying OTFIT_CARANDINI2 .** Converts between the real parameters in the carandini fitting function and those used by Matlab to find the minimum in the error function . For example , if the user specifies that Rsp must be in the interval [ 0 10 ], then the fitting variable Rsp_ will take values from - realmax to realmax but this value will be mapped onto the interval [ 0 10 ] . DIR indicates direction of conversion . 'TOREAL' converts from fitting variables to real , whereas 'TOFITTING' converts from real variables to fitting variables . The variable arguments , given in name / value pairs , are used to specify restrictions . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 maxdata ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 130 230 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) High and low value for this interval should be the same modulo 360 'Rpint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'Rnint' , e . g . , [ 0 2 * maxdata ] Rp must bein given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error See also : OTFIT_CARANDINI , OTFIT_CARANDINI_ERR","title":"otfit_carandini_conv2"},{"location":"reference/fits/otfit_carandini_err.m/","text":"otfit_carandini_err \u00b6 OTFIT_CARANDINI_ERR Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_ERR ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI","title":"otfit_carandini_err"},{"location":"reference/fits/otfit_carandini_err.m/#otfit_carandini_err","text":"OTFIT_CARANDINI_ERR Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_ERR ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI","title":"otfit_carandini_err"},{"location":"reference/fits/otfit_carandini_err0.m/","text":"otfit_carandini_err0 \u00b6 OTFIT_CARANDINI_ERR0 Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR0 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rp * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rp is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI0","title":"otfit_carandini_err0"},{"location":"reference/fits/otfit_carandini_err0.m/#otfit_carandini_err0","text":"OTFIT_CARANDINI_ERR0 Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR0 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rp * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rp is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI0","title":"otfit_carandini_err0"},{"location":"reference/fits/otfit_carandini_err2.m/","text":"otfit_carandini_err2 \u00b6 OTFIT_CARANDINI_ERR Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR2 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 140 220 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn OnOff ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI","title":"otfit_carandini_err2"},{"location":"reference/fits/otfit_carandini_err2.m/#otfit_carandini_err2","text":"OTFIT_CARANDINI_ERR Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_NEWS_ERR2 ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'OnOffint' , e . g . , [ 140 220 ] OnOff is offset from Op and must be in given interval ( default is [ 179 181 ]) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error P = [ Rsp Rp Op sig Rn OnOff ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI","title":"otfit_carandini_err2"},{"location":"reference/fits/otfit_carandini_err_joint.m/","text":"otfit_carandini_err_joint \u00b6 OTFIT_CARANDINI_ERR Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_ERR ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI","title":"otfit_carandini_err_joint"},{"location":"reference/fits/otfit_carandini_err_joint.m/#otfit_carandini_err_joint","text":"OTFIT_CARANDINI_ERR Computes error of Carandini / Ferster orientation fit [ ERR , RFIT ] = OTFIT_CARANDINI_ERR ( P , ANGLES , VARARGIN ) This function computes the error of the Carandini / Ferster orientation RFIT ( O ) = Rsp + Rp * exp ( - ( O - Op ) ^ 2 / 2 * sig ^ 2 ) + Rn * ( exp ( - ( O - Op - 180 ) ^ 2 ) / s * sig ^ 2 ) where O is an orientation angle . ANGLES is a vector list of angles to be evaluated . If observations are provided ( see below ) then the squared error ERR is computed . Otherwise ERR is zero . The variable arguments , given in name / value pairs , can be used to specify the mode . Valid name / value pairs : 'widthint' , e . g . , [ 15 180 ] sig must be in given interval ( default no restriction ) 'spontfixed' , e . g . , 0 Rsp fixed to given value ( default is not fixed ) 'spontint' , [ 0 10 ] Rsp must be in given interval ( default is no restriction ) 'data' , [ obs11 obs12 ... ; obs21 .. ;] Observations to compute error 'stddev' , [ stddev1 stddev2 ... ] Standard deviatiation ( optional ) If provided , then squared error will be normalized by the variance . P = [ Rsp Rp Op sig Rn ] are parameters , where Rsp is the spontaneous response , Rp is the response at the preferred orientation , Op is the preferred angle , sig is the width of the tuning , and Rn is the response 180 degrees away from the preferred angle . See also : OTFIT_CARANDINI","title":"otfit_carandini_err_joint"},{"location":"reference/fits/seriesresfit.m/","text":"seriesresfit \u00b6 EXP_FIT Exponential fit [ Re , taue , Rm , taum , err , fit ] = EXP_FIT ( T , DATA , Iinj ) Finds the best fit to V ( t ) / Iinj = Re ( 1 - exp ( - t / taue )) + Rm ( 1 - exp ( - t / taum )) where T is an increasing vector of timevalues , Re is electrode resistance , taue is electrode time constant , Rm is membrane resistance , and taum is membrane time constant .","title":"seriesresfit"},{"location":"reference/fits/seriesresfit.m/#seriesresfit","text":"EXP_FIT Exponential fit [ Re , taue , Rm , taum , err , fit ] = EXP_FIT ( T , DATA , Iinj ) Finds the best fit to V ( t ) / Iinj = Re ( 1 - exp ( - t / taue )) + Rm ( 1 - exp ( - t / taum )) where T is an increasing vector of timevalues , Re is electrode resistance , taue is electrode time constant , Rm is membrane resistance , and taum is membrane time constant .","title":"seriesresfit"},{"location":"reference/fits/seriesresfit_err.m/","text":"seriesresfit_err \u00b6 SERIESRESFIT_ERR Series resistance error fit ERR=SERIESRESFIT_ERR(P,T,DATA) P = [ Re taue Rm taum ] returns mean squared error of V=Re[1-exp(-t/taue)]+Rm[1-exp(-t/taum)] where T is a vector of timevalues to evaluate.","title":"seriesresfit_err"},{"location":"reference/fits/seriesresfit_err.m/#seriesresfit_err","text":"SERIESRESFIT_ERR Series resistance error fit ERR=SERIESRESFIT_ERR(P,T,DATA) P = [ Re taue Rm taum ] returns mean squared error of V=Re[1-exp(-t/taue)]+Rm[1-exp(-t/taum)] where T is a vector of timevalues to evaluate.","title":"seriesresfit_err"},{"location":"reference/fits/sin4_fit.m/","text":"sin4_fit \u00b6 SIN4_FIT - Fit a 4 term sine wave to data [ FITVALUES , COEFFS ] = SIN4_FIT ( X , Y , MAXFREQUENCY , INCLUDECONSTANT ) Inputs : X - A vector of X values Y - A vector of Y values MAXFREQUENCY - The maximum frequency of the fit , in Hz ( can be Inf ) INCLUDECONSTANT - 0 / 1 should we include a constant term in the fit ? This constant is included by setting it to the signal mean . Outputs : FITVALUES - The fit values of Y for all values of the input X . COEFFS - The coefficients for the sine waves . These are [ a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 ] where the fit function is a1 * sin ( a2 * x + a3 ) + a4 * sin ( a5 * x + a6 ) + a7 * sin ( a8 * x + a9 ) + a10 * sin ( a11 * x + a12 ) + a13 a13 is only present if INCLUDECONSTANT is 1.","title":"sin4_fit"},{"location":"reference/fits/sin4_fit.m/#sin4_fit","text":"SIN4_FIT - Fit a 4 term sine wave to data [ FITVALUES , COEFFS ] = SIN4_FIT ( X , Y , MAXFREQUENCY , INCLUDECONSTANT ) Inputs : X - A vector of X values Y - A vector of Y values MAXFREQUENCY - The maximum frequency of the fit , in Hz ( can be Inf ) INCLUDECONSTANT - 0 / 1 should we include a constant term in the fit ? This constant is included by setting it to the signal mean . Outputs : FITVALUES - The fit values of Y for all values of the input X . COEFFS - The coefficients for the sine waves . These are [ a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 ] where the fit function is a1 * sin ( a2 * x + a3 ) + a4 * sin ( a5 * x + a6 ) + a7 * sin ( a8 * x + a9 ) + a10 * sin ( a11 * x + a12 ) + a13 a13 is only present if INCLUDECONSTANT is 1.","title":"sin4_fit"},{"location":"reference/fits/tanhfit.m/","text":"tanhfit \u00b6 TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = TANHFIT ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = a + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017 See also: FIT, FITTYPE","title":"tanhfit"},{"location":"reference/fits/tanhfit.m/#tanhfit","text":"TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = TANHFIT ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = a + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017 See also: FIT, FITTYPE","title":"tanhfit"},{"location":"reference/fits/tanhfitoffset.m/","text":"tanhfitoffset \u00b6 TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = TANHFITOFFSET ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = ( a + b ) + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . In this equation , a is the offset of the equation from 0 at X = - Inf . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017, modified by SDV 2019 See also: FIT, FITTYPE, TANHFIT","title":"tanhfitoffset"},{"location":"reference/fits/tanhfitoffset.m/#tanhfitoffset","text":"TANHFIT - Fit a curve with a hyperbolic tangent tanh [ FIT_CURVE , PARAMS , GOF , FITINFO ] = TANHFITOFFSET ( X , Y , ... ) Finds a , b , c , d such that the error in the equation Y = ( a + b ) + b * TANH ( ( X - c ) / d ) is minimized in the least - squares sense . In this equation , a is the offset of the equation from 0 at X = - Inf . FIT_CURVE is a fit curve that is 100 x2 ( by default , see below ) where FIT_CURVE ( :, 1 ) is 100 equally spaced points between min ( X ) and max ( X ) , and FIT_CURVE ( :, 2 ) is the result of the fit .] PARAMS is the parameters returned from Matlab 's FIT function. This function also takes additional parameters in the form of name/value pairs. Parameter (default) | Description --------------------------------------------------------------- NPTS_CURVE (100) | Number of points to produce in the fit a_range [-Inf Inf] | Search range for fit parameter a b_range [0 Inf] | Search range for fit parameter b c_range [-100 100] | Search range for fit parameter c d_range [1e-12 Inf] | Search range for fit parameter d startPoint [0 1 0 1] | Starting point for the search Jason Osik 2016-2017, modified by SDV 2019 See also: FIT, FITTYPE, TANHFIT","title":"tanhfitoffset"},{"location":"reference/git/git_assert.m/","text":"git_assert \u00b6 GIT_ASSERT - do we have command line git on this machine ? B = GIT_ASSERT Tests for presence of 'git' using SYSTEM .","title":"git_assert"},{"location":"reference/git/git_assert.m/#git_assert","text":"GIT_ASSERT - do we have command line git on this machine ? B = GIT_ASSERT Tests for presence of 'git' using SYSTEM .","title":"git_assert"},{"location":"reference/git/git_clone.m/","text":"git_clone \u00b6 GIT_CLONE - clone a git repository onto the local computer B = GIT_CLONE ( REPOSITORY , LOCALPARENTDIR ) Clones a git repository REPOSITORY into the local directory LOCALPARENTDIR . If a folder containing the local repository already exists , an error is returned . B is 1 if the operation is successful .","title":"git_clone"},{"location":"reference/git/git_clone.m/#git_clone","text":"GIT_CLONE - clone a git repository onto the local computer B = GIT_CLONE ( REPOSITORY , LOCALPARENTDIR ) Clones a git repository REPOSITORY into the local directory LOCALPARENTDIR . If a folder containing the local repository already exists , an error is returned . B is 1 if the operation is successful .","title":"git_clone"},{"location":"reference/git/git_install.m/","text":"git_install \u00b6 GIT_PULL - pull changes to a git repository B = GIT_PULL ( DIRNAME , REPOSITORY ) 'Install' is our term for forcing the local directory DIRNAME to match the remote REPOSITORY , either by cloning or pulling the latest changes . Any files in the local directory DIRNAME that don 't match the remote REPOSITORY are deleted. If DIRNAME does not exist, then the repository is cloned. If DIRNAME exists and has local changes, the directory is deleted and cloned fresh. If the DIRNAME exists and has no local changes, the directory is updated by pulling. Note: if you have any local changes, GIT_INSTALL will totally remove them. B is 1 if the operation is successful.","title":"git_install"},{"location":"reference/git/git_install.m/#git_install","text":"GIT_PULL - pull changes to a git repository B = GIT_PULL ( DIRNAME , REPOSITORY ) 'Install' is our term for forcing the local directory DIRNAME to match the remote REPOSITORY , either by cloning or pulling the latest changes . Any files in the local directory DIRNAME that don 't match the remote REPOSITORY are deleted. If DIRNAME does not exist, then the repository is cloned. If DIRNAME exists and has local changes, the directory is deleted and cloned fresh. If the DIRNAME exists and has no local changes, the directory is updated by pulling. Note: if you have any local changes, GIT_INSTALL will totally remove them. B is 1 if the operation is successful.","title":"git_install"},{"location":"reference/git/git_isgitdirectory.m/","text":"git_isgitdirectory \u00b6 GIT_ISGITDIRECTORY - is a given directory a GIT directory ? B = GIT_ISGITDIRECTORY ( DIRNAME ) Examines whether DIRNAME is a GIT directory .","title":"git_isgitdirectory"},{"location":"reference/git/git_isgitdirectory.m/#git_isgitdirectory","text":"GIT_ISGITDIRECTORY - is a given directory a GIT directory ? B = GIT_ISGITDIRECTORY ( DIRNAME ) Examines whether DIRNAME is a GIT directory .","title":"git_isgitdirectory"},{"location":"reference/git/git_pull.m/","text":"git_pull \u00b6 GIT_PULL - pull changes to a git repository B = GIT_PULL ( DIRNAME ) Pulls the remote changes to a GIT repository into the local directory DIRNAME . If there are local changes to be committed , the operation may fail and B will be 0 .","title":"git_pull"},{"location":"reference/git/git_pull.m/#git_pull","text":"GIT_PULL - pull changes to a git repository B = GIT_PULL ( DIRNAME ) Pulls the remote changes to a GIT repository into the local directory DIRNAME . If there are local changes to be committed , the operation may fail and B will be 0 .","title":"git_pull"},{"location":"reference/git/git_repo_version.m/","text":"git_repo_version \u00b6 GIT_REPO_VERSION - return commit number and remote location of repository [ V , REMOTE ] = GIT_REPO_VERSION ( FILEPATH ) Uses command line 'git' to query the commit verison number ( V ) and the path of the REMOTE repository . If either query fails , an error is returned .","title":"git_repo_version"},{"location":"reference/git/git_repo_version.m/#git_repo_version","text":"GIT_REPO_VERSION - return commit number and remote location of repository [ V , REMOTE ] = GIT_REPO_VERSION ( FILEPATH ) Uses command line 'git' to query the commit verison number ( V ) and the path of the REMOTE repository . If either query fails , an error is returned .","title":"git_repo_version"},{"location":"reference/git/git_status.m/","text":"git_status \u00b6 GIT_STATUS - return git working tree status [ UPTODATE , CHANGES , UNTRACKED_PRESENT ] = GIT_STATUS ( DIRNAME ) Examines whether a git working tree is up to date with its current branch UPTODATE is 1 if the working tree is up - to - date , and 0 if not . CHANGES is 1 if the working tree has changes to be committed , and 0 if not . UNTRACKED_PRESENT is 1 if there are untracked files present , and 0 if not . An error is generated if DIRNAME is not a GIT directory . See also : GIT_ISGITDIRECTORY","title":"git_status"},{"location":"reference/git/git_status.m/#git_status","text":"GIT_STATUS - return git working tree status [ UPTODATE , CHANGES , UNTRACKED_PRESENT ] = GIT_STATUS ( DIRNAME ) Examines whether a git working tree is up to date with its current branch UPTODATE is 1 if the working tree is up - to - date , and 0 if not . CHANGES is 1 if the working tree has changes to be committed , and 0 if not . UNTRACKED_PRESENT is 1 if there are untracked files present , and 0 if not . An error is generated if DIRNAME is not a GIT directory . See also : GIT_ISGITDIRECTORY","title":"git_status"},{"location":"reference/graph/dependency_graph.m/","text":"dependency_graph \u00b6 DEPENDENCY_GRAPH - create a directed graph that describes dependencies among strings [ NODES , G ] = DEPENDENCY_GRAPH ( DEPENDENCY_STRUCT ) Given a DEPENDENCY_STRUCT with fields 'name' ( indicating the string name ) and a structure named 'dependencies' that has field names with other named strings , this function returns a set of nodes NODES with node names and a directed graph G indicating the dependencies .","title":"dependency_graph"},{"location":"reference/graph/dependency_graph.m/#dependency_graph","text":"DEPENDENCY_GRAPH - create a directed graph that describes dependencies among strings [ NODES , G ] = DEPENDENCY_GRAPH ( DEPENDENCY_STRUCT ) Given a DEPENDENCY_STRUCT with fields 'name' ( indicating the string name ) and a structure named 'dependencies' that has field names with other named strings , this function returns a set of nodes NODES with node names and a directed graph G indicating the dependencies .","title":"dependency_graph"},{"location":"reference/graph/mergegraph.m/","text":"mergegraph \u00b6 MERGEGRAPH - merge adjacency matrixes of 2 graphs [ MERGED_GRAPH , INDEXES , NUMNEWNODES ] = MERGEGRAPH ( G1 , G2 , NODENUMBERS2_1 ) Creates a merged graph from two overlapping adjacency matrixes G1 and G2 . G #(i,j) is the weight of the connection from node i to j for each graph . NODENUMBERS2_1 are the node index values of the nodes of G2 in G1 . If any entries of NODENUMBERS2_1 are greater than the number of nodes of G1 , then they are assumed to be nodes that are not present in G1 , but they will be added in the new graph . INDEXES is a structure array of the entries that make up the new panels of the merged adjacency matrix MERGED_GRAPH . The fields 'upper_right' , 'lower_left' , and 'lower_right' have the index values of G2 that are taken to fill out the graph . For 'lower_right' , the matrix is square and full , and the index values are the locations in G2 . For 'lower_left' and 'upper_right' , the matrixes may be sparse if there are nodes in G1 that are not in G2 . So the index values have two fields : 'merged' ( the index values of the panel in the merged matrix ) and 'G2' ( the corresponding index values in G2 ) . Any connection that is 'open' will have weight Inf . Note that in performing this merge , the connections among the nodes of G1 are NOT modified . So this function is not a means of providing additional information about the connectivity of those nodes . See also : DIGRAPH Example : G1 = [ 1 1 1 ; 0 1 0 ; 0 0 1 ]; G2 = [ 1 1 ; 0 1 ]; nodenumbers2_1 = [ 1 4 ]; [ G3 , indexes , numnewnodes ] = mergegraph ( G1 , G2 , nodenumbers2_1 ); lower_right = G2 ( indexes . lower_right ); lower_left = inf ( numnewnodes , size ( G1 , 1 )); upper_right = inf ( size ( G1 , 1 ), numnewnodes ); lower_left ( indexes . lower_left . merged ) = G2 ( indexes . lower_left . G2 ); upper_right ( indexes . upper_right . merged ) = G2 ( indexes . upper_right . G2 ); G4 = [ G1 upper_right ; lower_left lower_right ]; G3 == G4 % it does","title":"mergegraph"},{"location":"reference/graph/mergegraph.m/#mergegraph","text":"MERGEGRAPH - merge adjacency matrixes of 2 graphs [ MERGED_GRAPH , INDEXES , NUMNEWNODES ] = MERGEGRAPH ( G1 , G2 , NODENUMBERS2_1 ) Creates a merged graph from two overlapping adjacency matrixes G1 and G2 . G #(i,j) is the weight of the connection from node i to j for each graph . NODENUMBERS2_1 are the node index values of the nodes of G2 in G1 . If any entries of NODENUMBERS2_1 are greater than the number of nodes of G1 , then they are assumed to be nodes that are not present in G1 , but they will be added in the new graph . INDEXES is a structure array of the entries that make up the new panels of the merged adjacency matrix MERGED_GRAPH . The fields 'upper_right' , 'lower_left' , and 'lower_right' have the index values of G2 that are taken to fill out the graph . For 'lower_right' , the matrix is square and full , and the index values are the locations in G2 . For 'lower_left' and 'upper_right' , the matrixes may be sparse if there are nodes in G1 that are not in G2 . So the index values have two fields : 'merged' ( the index values of the panel in the merged matrix ) and 'G2' ( the corresponding index values in G2 ) . Any connection that is 'open' will have weight Inf . Note that in performing this merge , the connections among the nodes of G1 are NOT modified . So this function is not a means of providing additional information about the connectivity of those nodes . See also : DIGRAPH Example : G1 = [ 1 1 1 ; 0 1 0 ; 0 0 1 ]; G2 = [ 1 1 ; 0 1 ]; nodenumbers2_1 = [ 1 4 ]; [ G3 , indexes , numnewnodes ] = mergegraph ( G1 , G2 , nodenumbers2_1 ); lower_right = G2 ( indexes . lower_right ); lower_left = inf ( numnewnodes , size ( G1 , 1 )); upper_right = inf ( size ( G1 , 1 ), numnewnodes ); lower_left ( indexes . lower_left . merged ) = G2 ( indexes . lower_left . G2 ); upper_right ( indexes . upper_right . merged ) = G2 ( indexes . upper_right . G2 ); G4 = [ G1 upper_right ; lower_left lower_right ]; G3 == G4 % it does","title":"mergegraph"},{"location":"reference/html/alumni_htmltable.m/","text":"alumni_htmltable \u00b6 FACEBOOK_HTMLTABLE - make a table of faces and names for VHlab website STR = UGALUMNI_HTMLTABLE(FACEINFO, ...) Takes as input a STRUCT FACEINFO that has fields 'imagefile' and 'name' and generates an html output table (in a cell array of strings) in STR. This function also takes name/value pairs that modify its behavior: Parameter (default value) | Description ---------------------------------------------------------------- Ncols (3) | Number of columns imagewidth (200) | Image width, in pixels nametablestylestring | Style of the name table entries ('style=\"text-align: center; vertical-align:top; width:200px;font-size:100%;\"') | nametableprefix | Prefix formatting for name table entries (' <font face= \"veranda, sans-serif\" ><b> ') | nametablepostfix | Postfix formatting for name table entries (' </b></font> ') | tableidstr ('') | If using a style, could be ' id=\"facebooktable\"' for example We use this to generate the undergraduate alumni portion of vhlab.org/people See also: CELLSTR2TEXT, NAMEVALUEPAIR","title":"alumni_htmltable"},{"location":"reference/html/alumni_htmltable.m/#alumni_htmltable","text":"FACEBOOK_HTMLTABLE - make a table of faces and names for VHlab website STR = UGALUMNI_HTMLTABLE(FACEINFO, ...) Takes as input a STRUCT FACEINFO that has fields 'imagefile' and 'name' and generates an html output table (in a cell array of strings) in STR. This function also takes name/value pairs that modify its behavior: Parameter (default value) | Description ---------------------------------------------------------------- Ncols (3) | Number of columns imagewidth (200) | Image width, in pixels nametablestylestring | Style of the name table entries ('style=\"text-align: center; vertical-align:top; width:200px;font-size:100%;\"') | nametableprefix | Prefix formatting for name table entries (' <font face= \"veranda, sans-serif\" ><b> ') | nametablepostfix | Postfix formatting for name table entries (' </b></font> ') | tableidstr ('') | If using a style, could be ' id=\"facebooktable\"' for example We use this to generate the undergraduate alumni portion of vhlab.org/people See also: CELLSTR2TEXT, NAMEVALUEPAIR","title":"alumni_htmltable"},{"location":"reference/html/vhlab_people_html.m/","text":"vhlab_people_html \u00b6 VHLAB_PEOPLE_HTML - Generate the VHLAB people page given a datebase of members VHLAB_PEOPLE_HTML ( DBTABLE_FILENAME , OUTPUT_FILENAME ) Generates the 'people' page for vhlab . org . Input : DBTABLE_FILENAME , the filename of a tab-delimited text structure file with first row field names and every other row comprised of values . The headers / fields of the table should be : Fieldname | Description -------------------------------------------------------- year | The year the person left the lab ( if they are gone ), empty otherwise lastname | The person 's last name (used for alphabetical sorting) name | The person' s name as it should appear on the page namelink | If not empty , a link that should be related to the person 's name alumni | 0/1; is the person an alum? (that is, have they left the lab?) Group | Employment category; ' UG ', ' STAFF ', ' GS ', ' PD ', ' PI ' title | Job title Years | String containing the years of service in the lab (e.g., ' 2010-2017 ') email | Email address string, person at brandeis dot edu paragraph | HTML string containing a paragraph(s) of research interests. Links | Any links (current personnel only) imagefile | Image link to the person' s picture","title":"vhlab_people_html"},{"location":"reference/html/vhlab_people_html.m/#vhlab_people_html","text":"VHLAB_PEOPLE_HTML - Generate the VHLAB people page given a datebase of members VHLAB_PEOPLE_HTML ( DBTABLE_FILENAME , OUTPUT_FILENAME ) Generates the 'people' page for vhlab . org . Input : DBTABLE_FILENAME , the filename of a tab-delimited text structure file with first row field names and every other row comprised of values . The headers / fields of the table should be : Fieldname | Description -------------------------------------------------------- year | The year the person left the lab ( if they are gone ), empty otherwise lastname | The person 's last name (used for alphabetical sorting) name | The person' s name as it should appear on the page namelink | If not empty , a link that should be related to the person 's name alumni | 0/1; is the person an alum? (that is, have they left the lab?) Group | Employment category; ' UG ', ' STAFF ', ' GS ', ' PD ', ' PI ' title | Job title Years | String containing the years of service in the lab (e.g., ' 2010-2017 ') email | Email address string, person at brandeis dot edu paragraph | HTML string containing a paragraph(s) of research interests. Links | Any links (current personnel only) imagefile | Image link to the person' s picture","title":"vhlab_people_html"},{"location":"reference/image/driftcheck.m/","text":"driftcheck \u00b6 DRIFTCHECK - Checks for drift in image pair by correlation DR = DRIFTCHECK ( IM1 , IM2 , SEARCHX , SEARCHY ,...) Checks for drift over the specific offset ranges SEARCHX = [ x1 x2 x3 ] and SEARCHY = [ y1 y2 y3 ]. Positive shifts are rightward and upward with respect to the original . This function accepts additional parameter as name / value pairs . Parameter ( default value ) | Description ----------------------------------------------------------------- subtractmean ( 0 ) | ( 0 / 1 ) If 1 , subtract the mean of each image | before correcting brightnessartifact ( 100 ) | ( 0-100 ) Set all pixels above this percentile of | brightness to the mean of the image ( 100 means | no change ) darknessartifact ( 0 ) | ( 0-100 ) Set all pixels below this percentile of | brightness to the mean of the image ( 0 means | no change ) brightnesscorrect ( 1 ) | ( 0 / 1 ) If 1 , images are normalized | by their standard deviation before | correlating . This allows accurate correlation | where total image brightness has changed . roicorrect ( 1 ) | ( 0 / 1 ) If 1 , only the pixels above the ' mn ' | are considered in the correlation . The best offset , as determined by correlation , is returned in DR = [ OFFSET_X OFFSET_Y ]. This function calls the xcorr2dlag MEX file ; this function will produce an error if this function is not compiled for your platform .","title":"driftcheck"},{"location":"reference/image/driftcheck.m/#driftcheck","text":"DRIFTCHECK - Checks for drift in image pair by correlation DR = DRIFTCHECK ( IM1 , IM2 , SEARCHX , SEARCHY ,...) Checks for drift over the specific offset ranges SEARCHX = [ x1 x2 x3 ] and SEARCHY = [ y1 y2 y3 ]. Positive shifts are rightward and upward with respect to the original . This function accepts additional parameter as name / value pairs . Parameter ( default value ) | Description ----------------------------------------------------------------- subtractmean ( 0 ) | ( 0 / 1 ) If 1 , subtract the mean of each image | before correcting brightnessartifact ( 100 ) | ( 0-100 ) Set all pixels above this percentile of | brightness to the mean of the image ( 100 means | no change ) darknessartifact ( 0 ) | ( 0-100 ) Set all pixels below this percentile of | brightness to the mean of the image ( 0 means | no change ) brightnesscorrect ( 1 ) | ( 0 / 1 ) If 1 , images are normalized | by their standard deviation before | correlating . This allows accurate correlation | where total image brightness has changed . roicorrect ( 1 ) | ( 0 / 1 ) If 1 , only the pixels above the ' mn ' | are considered in the correlation . The best offset , as determined by correlation , is returned in DR = [ OFFSET_X OFFSET_Y ]. This function calls the xcorr2dlag MEX file ; this function will produce an error if this function is not compiled for your platform .","title":"driftcheck"},{"location":"reference/image/findroiinlinescan.m/","text":"findroiinlinescan \u00b6 FINDROIINLINESCAN - Find a ROI defined in a raster image in a linescan [ LSINDEXES,ONs,OFFs ] = FINDROIINLINESCAN ( RASTERIMAGESIZE , LINESCANIMAGESIZE , LINESCANPOINTS ,... ROIRASTERINDEXES , [ DRIFT ] ) Given a list of index values of regions of interest ( a cell list ROIRASTERINDEXES ) that were defined within a raster image of size RASTERIMAGESIZE , this function determines the corresponding index values LSINDEXES where those pixels were scanned in the linescan LINESCANPOINTS ( y , x ) with image of size LINESCANIMAGESIZE .","title":"findroiinlinescan"},{"location":"reference/image/findroiinlinescan.m/#findroiinlinescan","text":"FINDROIINLINESCAN - Find a ROI defined in a raster image in a linescan [ LSINDEXES,ONs,OFFs ] = FINDROIINLINESCAN ( RASTERIMAGESIZE , LINESCANIMAGESIZE , LINESCANPOINTS ,... ROIRASTERINDEXES , [ DRIFT ] ) Given a list of index values of regions of interest ( a cell list ROIRASTERINDEXES ) that were defined within a raster image of size RASTERIMAGESIZE , this function determines the corresponding index values LSINDEXES where those pixels were scanned in the linescan LINESCANPOINTS ( y , x ) with image of size LINESCANIMAGESIZE .","title":"findroiinlinescan"},{"location":"reference/image/image_samplepoints.m/","text":"image_samplepoints \u00b6 IMAGE_SAMPLEPOINTS - Sample points from an image file [ PTS , IMAGESIZE ] = IMAGE_SAMPLEPOINTS ( IMAGEFILE , N , METHOD ) This function samples N values from the image file in IMAGEFILE . METHOD can be ' random ' or ' sequential '. The image size is returned in IMAGESIZE . Note that IMAGESIZE corresponds to the number of samples [ HEIGHT WIDTH NUMBER_OF_IMAGES ], regardless of whether the samples are singles , triples ( RGB ), quads ( e . g ., CMYK ). The N samples are drawn with replacement ; it is possible the same value is drawn more than once . PTS is an NxDIM matrix of samples from the image . If the image is grayscale ( single channel ), then DIM is 1. If it is RGB , then DIM is 3 , etc . This function accepts additional parameters as name / value pairs: Parameter ( default ) | Description ---------------------------------------------------------------- info ([]) | Optionally , one can pass the output of | imfinfo as info ; it saves time beause | IMAGE_SAMPLEPOINTS doesn ' t need to read it","title":"image_samplepoints"},{"location":"reference/image/image_samplepoints.m/#image_samplepoints","text":"IMAGE_SAMPLEPOINTS - Sample points from an image file [ PTS , IMAGESIZE ] = IMAGE_SAMPLEPOINTS ( IMAGEFILE , N , METHOD ) This function samples N values from the image file in IMAGEFILE . METHOD can be ' random ' or ' sequential '. The image size is returned in IMAGESIZE . Note that IMAGESIZE corresponds to the number of samples [ HEIGHT WIDTH NUMBER_OF_IMAGES ], regardless of whether the samples are singles , triples ( RGB ), quads ( e . g ., CMYK ). The N samples are drawn with replacement ; it is possible the same value is drawn more than once . PTS is an NxDIM matrix of samples from the image . If the image is grayscale ( single channel ), then DIM is 1. If it is RGB , then DIM is 3 , etc . This function accepts additional parameters as name / value pairs: Parameter ( default ) | Description ---------------------------------------------------------------- info ([]) | Optionally , one can pass the output of | imfinfo as info ; it saves time beause | IMAGE_SAMPLEPOINTS doesn ' t need to read it","title":"image_samplepoints"},{"location":"reference/image/image_samplerange.m/","text":"image_samplerange \u00b6 IMAGE_SAMPLERANGE - return the range of values in an image file [ RANGE , IMSIZE , IMFILEINFO ] = IMAGE_SAMPLERANGE ( IMAGEFILE , ...) Reads in the image in IMAGEFILE and returns the range of sample values . RANGE is an Nx2 vector that contains the range of values ( column 1 is minimum , column 2 is maximum ) for each dimension of the image ( e . g ., 3 for an RGB image , 1 for a gray scale image ). If IMAGEFILE describes an image with multiple frames , all frames are read to find the maximum and minimum values . IMFILEINFO is the information returned from IMFINFO . This function can also be modified by name / value pairs : Parameter ( default value ) | Description ------------------------------------------------------------------ UseRawData ( 1 ) | Find the minimum and maximum from | the raw data of the image . | If this is 0 , then the minimum and maximum | are derived from the format of the data . | ( For example , for uint16 , min is 0 and max is | 2 ^ 15-1 .) imfileinfo ( [] ) | Optionally , one can pass the output | of the Matlab function IMFINFO | if that data has already been read ; | this will save the time of re-reading it See also : IMAGE , IMFINFO , NAMEVALUEPAIR","title":"image_samplerange"},{"location":"reference/image/image_samplerange.m/#image_samplerange","text":"IMAGE_SAMPLERANGE - return the range of values in an image file [ RANGE , IMSIZE , IMFILEINFO ] = IMAGE_SAMPLERANGE ( IMAGEFILE , ...) Reads in the image in IMAGEFILE and returns the range of sample values . RANGE is an Nx2 vector that contains the range of values ( column 1 is minimum , column 2 is maximum ) for each dimension of the image ( e . g ., 3 for an RGB image , 1 for a gray scale image ). If IMAGEFILE describes an image with multiple frames , all frames are read to find the maximum and minimum values . IMFILEINFO is the information returned from IMFINFO . This function can also be modified by name / value pairs : Parameter ( default value ) | Description ------------------------------------------------------------------ UseRawData ( 1 ) | Find the minimum and maximum from | the raw data of the image . | If this is 0 , then the minimum and maximum | are derived from the format of the data . | ( For example , for uint16 , min is 0 and max is | 2 ^ 15-1 .) imfileinfo ( [] ) | Optionally , one can pass the output | of the Matlab function IMFINFO | if that data has already been read ; | this will save the time of re-reading it See also : IMAGE , IMFINFO , NAMEVALUEPAIR","title":"image_samplerange"},{"location":"reference/image/image_viewer_gui.m/","text":"image_viewer_gui \u00b6 IMAGE_VIEWER_GUI - Manage the view of a multi-frame image in a Matlab GUI IMAGE_VIEWER_GUI Creates and manages an image viewer appropriate for multi-frame image viewing in a Matlab GUI . Features a slider to move between frames and a zoom and pan button . To create a viewer , call IMAGE_VIEWER_GUI ( NAME , 'command' , 'init' ) where NAME is a unique name on your figure ( you can have more than one viewer per figure if you use different names ). You can pass additional name / value pairs that govern the behavior of the GUI . Commands and parameters are not case sensitive . Name IS case sensitive . Parameter ( default value ) | Description --------------------------------------------------------------------------- fig ( gcf ) | Figure number where the viewer is located Units ( 'pixels' ) | The units we will use LowerLeftPoint ([ 0 0 ]) | The lower left point to use in drawing , in units of \"units\" UpperRightPoint ([ 500 500 ]) | The upper right point to use in drawing , in units of \"units\" imagemodifierfunc ( '' ) | A string of a function that can modify the image . It should | return an image . It can operate on 'im' , a variable with the | unmodified image . drawcompletionfunc ( '' ) | A string that is evaluated upon drawing completition . ImageVGUIAxesParams | A structure with modifications to default axes parameters | ( such as position , units , etc ). The 'tag' field cannot be | modified . All other fields of the axes can be modified . ImageVGUIHistAxesParams | A structure with modifications to default histogram axes parameters ( same as above ) ImageVGUISliderParams | Same for frame-selection slider ImageScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to scale each channel of the image . By default , | ImageScaleParams . Min = [ 0 0 0 0 ] and ImageScaleParams . Max = [ 255 255 255 255 ] ImageDisplayScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to which the image should be scaled for display . | Right now these must be ImageDisplayScaleParams . Min = [ 0 0 0 0 ] and | ImageDisplayScaleParams . Max = [ 255 255 255 255 ] One can also query the internal variables by calling IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Vars' ) Or obtain the uicontrol and axes handles by using: IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Handles' )","title":"image_viewer_gui"},{"location":"reference/image/image_viewer_gui.m/#image_viewer_gui","text":"IMAGE_VIEWER_GUI - Manage the view of a multi-frame image in a Matlab GUI IMAGE_VIEWER_GUI Creates and manages an image viewer appropriate for multi-frame image viewing in a Matlab GUI . Features a slider to move between frames and a zoom and pan button . To create a viewer , call IMAGE_VIEWER_GUI ( NAME , 'command' , 'init' ) where NAME is a unique name on your figure ( you can have more than one viewer per figure if you use different names ). You can pass additional name / value pairs that govern the behavior of the GUI . Commands and parameters are not case sensitive . Name IS case sensitive . Parameter ( default value ) | Description --------------------------------------------------------------------------- fig ( gcf ) | Figure number where the viewer is located Units ( 'pixels' ) | The units we will use LowerLeftPoint ([ 0 0 ]) | The lower left point to use in drawing , in units of \"units\" UpperRightPoint ([ 500 500 ]) | The upper right point to use in drawing , in units of \"units\" imagemodifierfunc ( '' ) | A string of a function that can modify the image . It should | return an image . It can operate on 'im' , a variable with the | unmodified image . drawcompletionfunc ( '' ) | A string that is evaluated upon drawing completition . ImageVGUIAxesParams | A structure with modifications to default axes parameters | ( such as position , units , etc ). The 'tag' field cannot be | modified . All other fields of the axes can be modified . ImageVGUIHistAxesParams | A structure with modifications to default histogram axes parameters ( same as above ) ImageVGUISliderParams | Same for frame-selection slider ImageScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to scale each channel of the image . By default , | ImageScaleParams . Min = [ 0 0 0 0 ] and ImageScaleParams . Max = [ 255 255 255 255 ] ImageDisplayScaleParams | A structure with fields 'Min' and 'Max' that indicate the | values to which the image should be scaled for display . | Right now these must be ImageDisplayScaleParams . Min = [ 0 0 0 0 ] and | ImageDisplayScaleParams . Max = [ 255 255 255 255 ] One can also query the internal variables by calling IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Vars' ) Or obtain the uicontrol and axes handles by using: IMAGE_VIEWER_GUI ( NAME , 'command' , 'Get_Handles' )","title":"image_viewer_gui"},{"location":"reference/image/imshift.m/","text":"imshift \u00b6 IMSHIFT - Shift an image , maintaining image size IM_OUT = IMSHIFT ( IM , SHIFT ) Shifts a 2 - dimensional image IM by SHIFT pixels SHIFT should be a vector with elements [ SHIFT_ROWS SHIFT_COLUMNS ] SHIFT_COLUMNS is the number of pixels to shift the pixels to the right ( can be negative to shift left ); SHIFT_ROWS is the number of pixels to shift down ( can be negative to shift up ). Note that with images , the 'X' axis typically corresponds to columns , and the 'Y' axis typically corresponds to rows , so consider the order of the shift parameters for your application . One can pass additional arguments as name / value pairs : Name ( default value ) : | Description : --------------------------------------------------------- ' PadValue ' ( 0 ) | Value for pixels used to pad the | edges of the shifted image so as | to maintain the original image size .","title":"imshift"},{"location":"reference/image/imshift.m/#imshift","text":"IMSHIFT - Shift an image , maintaining image size IM_OUT = IMSHIFT ( IM , SHIFT ) Shifts a 2 - dimensional image IM by SHIFT pixels SHIFT should be a vector with elements [ SHIFT_ROWS SHIFT_COLUMNS ] SHIFT_COLUMNS is the number of pixels to shift the pixels to the right ( can be negative to shift left ); SHIFT_ROWS is the number of pixels to shift down ( can be negative to shift up ). Note that with images , the 'X' axis typically corresponds to columns , and the 'Y' axis typically corresponds to rows , so consider the order of the shift parameters for your application . One can pass additional arguments as name / value pairs : Name ( default value ) : | Description : --------------------------------------------------------- ' PadValue ' ( 0 ) | Value for pixels used to pad the | edges of the shifted image so as | to maintain the original image size .","title":"imshift"},{"location":"reference/image/inside_ellipse.m/","text":"inside_ellipse \u00b6 INSIDE_ELLIPSE - Return 1 when a point is inside of an ellipse Z = INSIDE_ELLIPSE ( X , Y , X_CTR , Y_CTR , A , B , THETA ) Returns 1 when the point X ( i ) , Y ( i ) is inside the ellipse with center at X_CTR , Y_CTR , with X axis vertex A and Y axis vertex B , rotated at an angle THETA ( in radians ) , where angles increase according to a compass reference See also : INPOLYGON , CARTESIAN2COMPASS , COMPASS2CARTESIAN , DEG2RAD","title":"inside_ellipse"},{"location":"reference/image/inside_ellipse.m/#inside_ellipse","text":"INSIDE_ELLIPSE - Return 1 when a point is inside of an ellipse Z = INSIDE_ELLIPSE ( X , Y , X_CTR , Y_CTR , A , B , THETA ) Returns 1 when the point X ( i ) , Y ( i ) is inside the ellipse with center at X_CTR , Y_CTR , with X axis vertex A and Y axis vertex B , rotated at an angle THETA ( in radians ) , where angles increase according to a compass reference See also : INPOLYGON , CARTESIAN2COMPASS , COMPASS2CARTESIAN , DEG2RAD","title":"inside_ellipse"},{"location":"reference/image/invertcolors.m/","text":"invertcolors \u00b6 Invert colors in an RGB image ** UNTESTED ** RGB_OUT = INVERTCOLORS ( RGB_IN ) Inverts an RGB image RGB_IN so that black becomes white and white becomes black . The output is returned in RGB_OUT . RGB_OUT = INVERTCOLORS ( RGB_IN , C1 , C2 ) One can specify the axis of reversal by providing 2 colors and the midpoint . For example , with the default conversion , C1 = [ 0 0 0 ] and C2 = [ 1 1 1 ]. ** COMPLETELY UNTESTED ; TEST AND FIX BEFORE USE** ** BUG , fails color [ 0 0 1 ] start development there **","title":"invertcolors"},{"location":"reference/image/invertcolors.m/#invertcolors","text":"Invert colors in an RGB image ** UNTESTED ** RGB_OUT = INVERTCOLORS ( RGB_IN ) Inverts an RGB image RGB_IN so that black becomes white and white becomes black . The output is returned in RGB_OUT . RGB_OUT = INVERTCOLORS ( RGB_IN , C1 , C2 ) One can specify the axis of reversal by providing 2 colors and the midpoint . For example , with the default conversion , C1 = [ 0 0 0 ] and C2 = [ 1 1 1 ]. ** COMPLETELY UNTESTED ; TEST AND FIX BEFORE USE** ** BUG , fails color [ 0 0 1 ] start development there **","title":"invertcolors"},{"location":"reference/image/linescan2rasterindex.m/","text":"linescan2rasterindex \u00b6 LINESCAN2RASTERINDEX - Determine index values within a raster that correspond to points visited by a linescan INDS = LINESCAN2RASTERINDEX ( IMSIZE , LINESCANPOINTS ) Calculates the index values within a raster image of size IMSIZE that correspond to points on the linescan LINESCANPOINTS . LINESCANPOINTS should be an N x 2 vector of points in units of pixels ; column 1 corresponds to Y pixels and column 2 corresponds to X pixels . INDS is a list of index values such that RASTERIMAGE ( INDS ( n )) corresponds to the nth pixel in the linescan . If the linescan is \"out of bounds\" at point i , then then INDS ( i ) is NaN .","title":"linescan2rasterindex"},{"location":"reference/image/linescan2rasterindex.m/#linescan2rasterindex","text":"LINESCAN2RASTERINDEX - Determine index values within a raster that correspond to points visited by a linescan INDS = LINESCAN2RASTERINDEX ( IMSIZE , LINESCANPOINTS ) Calculates the index values within a raster image of size IMSIZE that correspond to points on the linescan LINESCANPOINTS . LINESCANPOINTS should be an N x 2 vector of points in units of pixels ; column 1 corresponds to Y pixels and column 2 corresponds to X pixels . INDS is a list of index values such that RASTERIMAGE ( INDS ( n )) corresponds to the nth pixel in the linescan . If the linescan is \"out of bounds\" at point i , then then INDS ( i ) is NaN .","title":"linescan2rasterindex"},{"location":"reference/image/medfilt_phase.m/","text":"medfilt_phase \u00b6 MEDFILT_PHASE - perform median filter for phase of complex image MFI = MEDFILT_PHASE ( IMG , NX , NY ) Given a complex image IMG , this function performs a median filter with width NX and NY that returns , for each pixel , the median phase . The median phase is computed with CIRC_MEDIAN from the Circular Statistics Toolbox . This function is not nearly as fast a traditional median filter .","title":"medfilt_phase"},{"location":"reference/image/medfilt_phase.m/#medfilt_phase","text":"MEDFILT_PHASE - perform median filter for phase of complex image MFI = MEDFILT_PHASE ( IMG , NX , NY ) Given a complex image IMG , this function performs a median filter with width NX and NY that returns , for each pixel , the median phase . The median phase is computed with CIRC_MEDIAN from the Circular Statistics Toolbox . This function is not nearly as fast a traditional median filter .","title":"medfilt_phase"},{"location":"reference/image/mergeluts.m/","text":"mergeluts \u00b6 MERGELUTS Merge color look up tables NEWLUT = MERGELUTS ( ORIGINAL_LUT , LUT_TO_BE_MERGED ) ORIGINAL_LUT will be overwritten with the first entries of LUT_TO_BE_MERGED . In the event that ORIGINAL_LUT is larger than LUT_TO_BE_MERGED , either in depth or number of elements , then ORIGINAL_LUT 's values will be preserved. In this way, NEWLUT will have size identical to ORIGINAL_LUT.","title":"mergeluts"},{"location":"reference/image/mergeluts.m/#mergeluts","text":"MERGELUTS Merge color look up tables NEWLUT = MERGELUTS ( ORIGINAL_LUT , LUT_TO_BE_MERGED ) ORIGINAL_LUT will be overwritten with the first entries of LUT_TO_BE_MERGED . In the event that ORIGINAL_LUT is larger than LUT_TO_BE_MERGED , either in depth or number of elements , then ORIGINAL_LUT 's values will be preserved. In this way, NEWLUT will have size identical to ORIGINAL_LUT.","title":"mergeluts"},{"location":"reference/image/neighborindexes.m/","text":"neighborindexes \u00b6 NEIGHBORINDEXES - identify pixel index values that border a pixel INDEXES = NEIGHBORINDEXES ( IMSIZE , INDEX , [ CONN ] ) Returns the index values of all pixels that neighbor a pixel specified by the index value INDEX in an image of size IMSIZE . CONN is the connectivity to be used . If CONN is not specified and if IMSIZE is 2 - dimensional , then CONN is 8 , indicating all horizontal , vertical , and oblique neighbors . If CONN is not specified and if IMSIZE is 3 - dimensional , then CONN is 26 , indicating all horizontal , vertical , above , below , and all obliques are considered neighbors . Currently , other modes for CONN are not supported ( but feel free to add any of these and send a pull request ). Note that INDEXES may have fewer elements than 26 or 8 if the pixel described by INDEX is on a border . Example : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 3 , 2 )) A ( sub2ind ( size ( A ), 3 , 3 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 2 : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 1 , 2 )) A ( sub2ind ( size ( A ), 3 , 1 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 3 : A = zeros ( 5 , 5 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 2 , 1 )) A ( sub2ind ( size ( A ), 2 , 1 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed","title":"neighborindexes"},{"location":"reference/image/neighborindexes.m/#neighborindexes","text":"NEIGHBORINDEXES - identify pixel index values that border a pixel INDEXES = NEIGHBORINDEXES ( IMSIZE , INDEX , [ CONN ] ) Returns the index values of all pixels that neighbor a pixel specified by the index value INDEX in an image of size IMSIZE . CONN is the connectivity to be used . If CONN is not specified and if IMSIZE is 2 - dimensional , then CONN is 8 , indicating all horizontal , vertical , and oblique neighbors . If CONN is not specified and if IMSIZE is 3 - dimensional , then CONN is 26 , indicating all horizontal , vertical , above , below , and all obliques are considered neighbors . Currently , other modes for CONN are not supported ( but feel free to add any of these and send a pull request ). Note that INDEXES may have fewer elements than 26 or 8 if the pixel described by INDEX is on a border . Example : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 3 , 2 )) A ( sub2ind ( size ( A ), 3 , 3 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 2 : A = zeros ( 6 , 6 , 3 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 3 , 1 , 2 )) A ( sub2ind ( size ( A ), 3 , 1 , 2 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed Example 3 : A = zeros ( 5 , 5 ) I = neighborindexes ( size ( A ), sub2ind ( size ( A ), 2 , 1 )) A ( sub2ind ( size ( A ), 2 , 1 )) = 2 ; A ( I ) = 1 % 1 s are neighbors , 2 is seed","title":"neighborindexes"},{"location":"reference/image/padimage.m/","text":"padimage \u00b6 PADIMAGE - Add a border to an image IM_OUT = PADIMAGE ( IM_IN , N , PAD ) Adds a border to an image IM_IN . The border pixels have value PAD . IM_IN can be either a 2 - D set of points or can be a 3 - D set of points , in which case it is assumed that IM_IN is an RGB or CMYK image . PAD should have dimension 1 in the case of a 2 D image , or 3 or 4 dimensions in case of a 3 - dimensional image . N can be a single integer if the number of pixels to add to all borders is the same in X and Y . Or , N can be a vector [ Nx1 Nx2 Ny1 Ny2 ] that indicates that Nx1 points of value PAD should be added before the first dimension of IM_IN , and that Nx2 points of value PAD should be added after the first dimension , etc . The result is returned in IM_OUT .","title":"padimage"},{"location":"reference/image/padimage.m/#padimage","text":"PADIMAGE - Add a border to an image IM_OUT = PADIMAGE ( IM_IN , N , PAD ) Adds a border to an image IM_IN . The border pixels have value PAD . IM_IN can be either a 2 - D set of points or can be a 3 - D set of points , in which case it is assumed that IM_IN is an RGB or CMYK image . PAD should have dimension 1 in the case of a 2 D image , or 3 or 4 dimensions in case of a 3 - dimensional image . N can be a single integer if the number of pixels to add to all borders is the same in X and Y . Or , N can be a vector [ Nx1 Nx2 Ny1 Ny2 ] that indicates that Nx1 points of value PAD should be added before the first dimension of IM_IN , and that Nx2 points of value PAD should be added after the first dimension , etc . The result is returned in IM_OUT .","title":"padimage"},{"location":"reference/image/plotrasterroionlinescan.m/","text":"plotrasterroionlinescan \u00b6 PLOTRASTERROIONLINESCAN - Plot an ROI defined in an raster image on a linescan image [ H ] = PLOTRASTERROIONLINESCAN ( LINESCANIMAGE , RASTERIMSIZE , ROIINDS ,... LINESCANPOINTS , [ DR ] ,...); Inputs : LINESCANIMAGE - An NxM image of a linescan recording , where N is the number of lines and M is the number of data points per line RASTERIMSIZE - Raster image size NxM ROIINDS - Index values corresponding to the ROI LINESCANPOINTS - the points of the linescan on the raster image DR - any drift that might have occurred over the recording Extra arguments can be given as name / value pairs : CONTOURS | Plot contours around ROIs ( default 1 ) INDEXES | Fill index values of ROI ( default 0 )","title":"plotrasterroionlinescan"},{"location":"reference/image/plotrasterroionlinescan.m/#plotrasterroionlinescan","text":"PLOTRASTERROIONLINESCAN - Plot an ROI defined in an raster image on a linescan image [ H ] = PLOTRASTERROIONLINESCAN ( LINESCANIMAGE , RASTERIMSIZE , ROIINDS ,... LINESCANPOINTS , [ DR ] ,...); Inputs : LINESCANIMAGE - An NxM image of a linescan recording , where N is the number of lines and M is the number of data points per line RASTERIMSIZE - Raster image size NxM ROIINDS - Index values corresponding to the ROI LINESCANPOINTS - the points of the linescan on the raster image DR - any drift that might have occurred over the recording Extra arguments can be given as name / value pairs : CONTOURS | Plot contours around ROIs ( default 1 ) INDEXES | Fill index values of ROI ( default 0 )","title":"plotrasterroionlinescan"},{"location":"reference/image/polyflare.m/","text":"polyflare \u00b6 POLYFLARE - Flare out a polygon by N units PNEW = POLYFLARE ( P , N ) This function enlarges a polygon by a fixed unit on all vertices . At each point , the polygon is stretched in both X and Y directions by N . The directions that causes the area to increase are chosen for the new polygon . Example : x = [ 63 186 54 190 63 ] ' ; y = [ 60 60 209 204 60 ] ' ; figure ; plot ( x , y , 'o' ); polynew = polyflare ([ x y ], 0.5 ); hold on ; plot ( polynew ( : , 1 ), polynew ( : , 2 ), ' go ' ); See also : INSIDE , ROIPOLY , POLYAREA","title":"polyflare"},{"location":"reference/image/polyflare.m/#polyflare","text":"POLYFLARE - Flare out a polygon by N units PNEW = POLYFLARE ( P , N ) This function enlarges a polygon by a fixed unit on all vertices . At each point , the polygon is stretched in both X and Y directions by N . The directions that causes the area to increase are chosen for the new polygon . Example : x = [ 63 186 54 190 63 ] ' ; y = [ 60 60 209 204 60 ] ' ; figure ; plot ( x , y , 'o' ); polynew = polyflare ([ x y ], 0.5 ); hold on ; plot ( polynew ( : , 1 ), polynew ( : , 2 ), ' go ' ); See also : INSIDE , ROIPOLY , POLYAREA","title":"polyflare"},{"location":"reference/image/regionprops_circularity.m/","text":"regionprops_circularity \u00b6 REGIONPROPS_CIRCULARITY - Calculates circularity of regions of interests NEWSTATS = REGIONPROPS_CIRCULARITY ( STATS ) Calculates circularity for regions of interest that have been returned by the IMAGES toolbox routines BWLABEL , BWBOUNDARIES , etc . STATS must be a structure of stats returned by the function REGIONPROPS that includes that parameters 'Area' and 'Perimeter' ( see 'help regionprops' ) . NEWSTATS is a structure that has all of the fields of STATS plus the additional field 'Circularity' . Circularity is defined as 4 * pi ( area / perimeter ^ 2 ) Inspired from a plugin for ImageJ contributed by Wayne Rasband","title":"regionprops_circularity"},{"location":"reference/image/regionprops_circularity.m/#regionprops_circularity","text":"REGIONPROPS_CIRCULARITY - Calculates circularity of regions of interests NEWSTATS = REGIONPROPS_CIRCULARITY ( STATS ) Calculates circularity for regions of interest that have been returned by the IMAGES toolbox routines BWLABEL , BWBOUNDARIES , etc . STATS must be a structure of stats returned by the function REGIONPROPS that includes that parameters 'Area' and 'Perimeter' ( see 'help regionprops' ) . NEWSTATS is a structure that has all of the fields of STATS plus the additional field 'Circularity' . Circularity is defined as 4 * pi ( area / perimeter ^ 2 ) Inspired from a plugin for ImageJ contributed by Wayne Rasband","title":"regionprops_circularity"},{"location":"reference/image/saturation_image.m/","text":"saturation_image \u00b6 SATURATION_IMAGE - Scale an image to allow a saturation plot IM_OUT = SATURATION_IMAGE ( IM_IN , ...) Scales the image to be in the range 2 ... ColorMapSize-1 so that color map entries 1 and ColorMapSize can be used for saturation values . If HighSaturation is Inf , then , at the high edge , the image is scaled from its empirical max to ColorMapSize-1 . Otherwise , the image is scaled from the value HighSaturation onto ColorMapSize-1 . If LowSaturation is -Inf , then the image is scaled from its empirical min to 2 . Otherwise , the image is scaled from LowSaturation to 2 . Example : myData = 40 * membrane ( 1 , 25 ); % MathWorks logo myImage = saturation_image ( myData , 'LowSaturation' , 0 , 'HighSaturation' , 20 ); myColorMap = [ 0 0 0 ; jet ( 254 ); 1 1 1 ] ; figure ; image ( myImage ); colormap ( myColorMap ); This function also takes name / value pairs that modifies its behavior : Parameter ( default ) | Description --------------------------------------------------------------------- ColorMapSize ( 256 ) | Size of the colormap ; also , value used for the high | saturation index value HighSaturation ( Inf ) | Value which , if exceeded , is set to be saturating | on the high side LowSaturation ( -Inf ) | Value , which , if not achieved , is set to be | saturating on the low side . LowSaturationValue ( 1 )| Value used for the low saturation value NaNSaturation ( 1 ) | Should NaN entries be set to Low ( -1 ), High ( 1 ), or | be left alone ( 0 ) ?","title":"saturation_image"},{"location":"reference/image/saturation_image.m/#saturation_image","text":"SATURATION_IMAGE - Scale an image to allow a saturation plot IM_OUT = SATURATION_IMAGE ( IM_IN , ...) Scales the image to be in the range 2 ... ColorMapSize-1 so that color map entries 1 and ColorMapSize can be used for saturation values . If HighSaturation is Inf , then , at the high edge , the image is scaled from its empirical max to ColorMapSize-1 . Otherwise , the image is scaled from the value HighSaturation onto ColorMapSize-1 . If LowSaturation is -Inf , then the image is scaled from its empirical min to 2 . Otherwise , the image is scaled from LowSaturation to 2 . Example : myData = 40 * membrane ( 1 , 25 ); % MathWorks logo myImage = saturation_image ( myData , 'LowSaturation' , 0 , 'HighSaturation' , 20 ); myColorMap = [ 0 0 0 ; jet ( 254 ); 1 1 1 ] ; figure ; image ( myImage ); colormap ( myColorMap ); This function also takes name / value pairs that modifies its behavior : Parameter ( default ) | Description --------------------------------------------------------------------- ColorMapSize ( 256 ) | Size of the colormap ; also , value used for the high | saturation index value HighSaturation ( Inf ) | Value which , if exceeded , is set to be saturating | on the high side LowSaturation ( -Inf ) | Value , which , if not achieved , is set to be | saturating on the low side . LowSaturationValue ( 1 )| Value used for the low saturation value NaNSaturation ( 1 ) | Should NaN entries be set to Low ( -1 ), High ( 1 ), or | be left alone ( 0 ) ?","title":"saturation_image"},{"location":"reference/image/scramblepixels_movie.m/","text":"scramblepixels_movie \u00b6 SCRAMBLEPIXELS_MOVIE - Scramble the pixels within a movie INDEXES = SCRAMBLEPIXELS_MOVIE(INFILE, OUTFILE) Scramble the pixels within a movie to illustrate the power of the mammalian visual system","title":"scramblepixels_movie"},{"location":"reference/image/scramblepixels_movie.m/#scramblepixels_movie","text":"SCRAMBLEPIXELS_MOVIE - Scramble the pixels within a movie INDEXES = SCRAMBLEPIXELS_MOVIE(INFILE, OUTFILE) Scramble the pixels within a movie to illustrate the power of the mammalian visual system","title":"scramblepixels_movie"},{"location":"reference/image/tiff16bit28bit.m/","text":"tiff16bit28bit \u00b6 TIFF16BIT28BIT Convert 16 bit TIFF to 8 - bit [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME ) or [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME , WRITEIT ) Opens the TIFF file with name FILENAME . The file is assumed to be grayscale . The original image is returned in IMG1 . The image is then scaled between 0 and 255 and returned as IMG2 . If 'WRITEIT' is provided , then the image is saved as FILENAME_8bit . TIFF . If the file is not a grayscale image then an error is generated .","title":"tiff16bit28bit"},{"location":"reference/image/tiff16bit28bit.m/#tiff16bit28bit","text":"TIFF16BIT28BIT Convert 16 bit TIFF to 8 - bit [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME ) or [ IMG1 , IMG2 ] = TIFF16BIT28BIT ( FILENAME , WRITEIT ) Opens the TIFF file with name FILENAME . The file is assumed to be grayscale . The original image is returned in IMG1 . The image is then scaled between 0 and 255 and returned as IMG2 . If 'WRITEIT' is provided , then the image is saved as FILENAME_8bit . TIFF . If the file is not a grayscale image then an error is generated .","title":"tiff16bit28bit"},{"location":"reference/image/xcorr2dlag.m/","text":"xcorr2dlag \u00b6 XCORR2DLAG - 2 - d cross - correlation computed at specified lags XC = XCORR2DLAG ( W1 , W2 , XLAGS , YLAGS ) Computes cross - correlation of two - dimensional matricies W1 and W2 at the specified lags in x ( XLAGS ) and in y ( YLAGS ) . On most platforms this function runs a MEX file written for speed and therefore there is no error checking to make sure W1 and W2 are the same size and that XLAGS and YLAGS are in bounds . XC is a matrix LENGTH ( YLAGS ) xLENGTH ( XLAGS ) .","title":"xcorr2dlag"},{"location":"reference/image/xcorr2dlag.m/#xcorr2dlag","text":"XCORR2DLAG - 2 - d cross - correlation computed at specified lags XC = XCORR2DLAG ( W1 , W2 , XLAGS , YLAGS ) Computes cross - correlation of two - dimensional matricies W1 and W2 at the specified lags in x ( XLAGS ) and in y ( YLAGS ) . On most platforms this function runs a MEX file written for speed and therefore there is no error checking to make sure W1 and W2 are the same size and that XLAGS and YLAGS are in bounds . XC is a matrix LENGTH ( YLAGS ) xLENGTH ( XLAGS ) .","title":"xcorr2dlag"},{"location":"reference/image/ROIs/ROI_3d2dprojection.m/","text":"ROI_3d2dprojection \u00b6 ROI_3D2DPROJECTION - Project a 3 D ROI onto a 2 D projection [ INDEXES2D , PERIMETER2D ] = ROI3D2DPROJECTION ( INDEXES3D , ... IMAGESIZE , ZDIM ) Identifies the 2 D projection of a 3 - dimensional ROI with index values in 3 D space called INDEXES3D . The INDEXES3D describe the values within a 3 D image of size IMAGESIZE = [ NX NY NZ ] . The projection is made onto the Z dimension ZDIM , which can vary from 1 to NZ . PERIMETER2D is a list of perimeter values around all pieces of the 3 d ROI in the 2 d representation . It is a a cell list because the object can exist in multiple distinct pieces within the 2 d view .","title":"ROI_3d2dprojection"},{"location":"reference/image/ROIs/ROI_3d2dprojection.m/#roi_3d2dprojection","text":"ROI_3D2DPROJECTION - Project a 3 D ROI onto a 2 D projection [ INDEXES2D , PERIMETER2D ] = ROI3D2DPROJECTION ( INDEXES3D , ... IMAGESIZE , ZDIM ) Identifies the 2 D projection of a 3 - dimensional ROI with index values in 3 D space called INDEXES3D . The INDEXES3D describe the values within a 3 D image of size IMAGESIZE = [ NX NY NZ ] . The projection is made onto the Z dimension ZDIM , which can vary from 1 to NZ . PERIMETER2D is a list of perimeter values around all pieces of the 3 d ROI in the 2 d representation . It is a a cell list because the object can exist in multiple distinct pieces within the 2 d view .","title":"ROI_3d2dprojection"},{"location":"reference/image/ROIs/ROI_3d_2dsummary.m/","text":"ROI_3d_2dsummary \u00b6 ROI_3D_2DSUMMARY - return the 2 d XY projection of 3 d ROIs CC2 = ROI_3D_2DSUMMARY ( CC3 , IMAGESIZE ) Given a set of index values that describe 3 D ROIs ( such as those returned by BWCONNCOMP ) , this function returns the 2 D projection of these ROIs onto the first 2 dimensions ( X and Y ) .","title":"ROI_3d_2dsummary"},{"location":"reference/image/ROIs/ROI_3d_2dsummary.m/#roi_3d_2dsummary","text":"ROI_3D_2DSUMMARY - return the 2 d XY projection of 3 d ROIs CC2 = ROI_3D_2DSUMMARY ( CC3 , IMAGESIZE ) Given a set of index values that describe 3 D ROIs ( such as those returned by BWCONNCOMP ) , this function returns the 2 D projection of these ROIs onto the first 2 dimensions ( X and Y ) .","title":"ROI_3d_2dsummary"},{"location":"reference/image/ROIs/ROI_3d_all_overlaps.m/","text":"ROI_3d_all_overlaps \u00b6 ROIS_3D_ALL_OVERLAPS - Compute overlaps between sets of 3 D ROIs [ OVERLAP_AB , OVERLAP_BA ] = ROI_3D_ALL_OVERLAPS ( ROIS3D_A , LA , ... ROIS3D_B , LB , XRANGE , YRANGE , ZRANGE , ... ) ; For 2 sets of ROIS , calculate the overlap of each ROI in A onto each ROI in B , and vice - versa . Inputs : ROIS3D_A and ROIS3D_B are structures returned from a function like BWBOUNDARIES with fields 'ImageSize' [ 1 x3 ] : the dimensions of the original image 'NumObjects' [ 1 x1 ] : the number of objects N 'PixelIdxList' { 1 xN } : a cell array of index values for each ROI LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL XRANGE , YRANGE , ZRANGE : calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . Outputs : OVERLAP_AB : The maximum percentage overlap of each ROI in A onto B . OVERLAP_AB ( i , j ) is the maximum amount of the ith ROI in A that overlaps the jth ROI in B , for all XRANGE , YRANGE , and ZRANGE shifts . OVERLAP_BA : The maximum percentage overlap of each ROI in B onto A . OVERLAP_BA ( i , j ) is the maximum amount of the ith ROI in B that overlaps the jth ROI in A , for all XRANGE , YRANGE , and ZRANGE shifts . This function also accepts extra name / value pairs that modify the default behavior of the function : Parameter name ( default ) : Description --------------------------------------------------------------- ShowGraphicalProgress ( 1 ) : 0 / 1 Should we show a progress bar ? Flare MAX ( MAX ( ABS ( XRANGE )) ,: Integer How much should we flare out each MAX ( MAX ( ABS ( YRANGE )) , : ROI in A to check for overlaps in B ? MAX ( ABS ( ZRANGE )) )) : ( The flare expands the ROI in all directions : to allow us to look for overlapping ROIs . )","title":"ROI_3d_all_overlaps"},{"location":"reference/image/ROIs/ROI_3d_all_overlaps.m/#roi_3d_all_overlaps","text":"ROIS_3D_ALL_OVERLAPS - Compute overlaps between sets of 3 D ROIs [ OVERLAP_AB , OVERLAP_BA ] = ROI_3D_ALL_OVERLAPS ( ROIS3D_A , LA , ... ROIS3D_B , LB , XRANGE , YRANGE , ZRANGE , ... ) ; For 2 sets of ROIS , calculate the overlap of each ROI in A onto each ROI in B , and vice - versa . Inputs : ROIS3D_A and ROIS3D_B are structures returned from a function like BWBOUNDARIES with fields 'ImageSize' [ 1 x3 ] : the dimensions of the original image 'NumObjects' [ 1 x1 ] : the number of objects N 'PixelIdxList' { 1 xN } : a cell array of index values for each ROI LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL XRANGE , YRANGE , ZRANGE : calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . Outputs : OVERLAP_AB : The maximum percentage overlap of each ROI in A onto B . OVERLAP_AB ( i , j ) is the maximum amount of the ith ROI in A that overlaps the jth ROI in B , for all XRANGE , YRANGE , and ZRANGE shifts . OVERLAP_BA : The maximum percentage overlap of each ROI in B onto A . OVERLAP_BA ( i , j ) is the maximum amount of the ith ROI in B that overlaps the jth ROI in A , for all XRANGE , YRANGE , and ZRANGE shifts . This function also accepts extra name / value pairs that modify the default behavior of the function : Parameter name ( default ) : Description --------------------------------------------------------------- ShowGraphicalProgress ( 1 ) : 0 / 1 Should we show a progress bar ? Flare MAX ( MAX ( ABS ( XRANGE )) ,: Integer How much should we flare out each MAX ( MAX ( ABS ( YRANGE )) , : ROI in A to check for overlaps in B ? MAX ( ABS ( ZRANGE )) )) : ( The flare expands the ROI in all directions : to allow us to look for overlapping ROIs . )","title":"ROI_3d_all_overlaps"},{"location":"reference/image/ROIs/ROI_3d_max_xy_size.m/","text":"ROI_3d_max_xy_size \u00b6 ROI_3D_MAX_XY_SIZE - compute the maximum X / Y size of a 3 - d ROI MAX_XY_SIZE = ROI_3D_MAX_XY_SIZE ( CC , ... ) Given a structure of regions - of - interest such as that returned by BWCONNCOMP , with fields 'ImageSize' and 'PixelIdxList' , this function examines all Z planes and computes the area ( in pixels ) of each ROI in X and Y ( dimensions 1 and 2 ). The maximum such value is returned in MAX_XY_SIZE ( i ), for each ROI in CC ( i goes from 1 .. numel ( CC . PixelIdxList )). This function also takes NAME / VALUE pairs that modify the behavior : Parameter ( default ) | Description -------------------------------------------------------------------- UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : % make a simple image A = zeros ( 3 , 11 ); A ( 1 ,:) = 1 ; A ( 2 , 1 ) = 1 ; A (:,:, 2 ) = 0 * A (:,:, 1 ); A ( 1 , 1 , 2 ) = 1 ; A , % view A CC = bwconncomp ( A ); max_xy_size = ROI_3d_max_xy_size ( CC )","title":"ROI_3d_max_xy_size"},{"location":"reference/image/ROIs/ROI_3d_max_xy_size.m/#roi_3d_max_xy_size","text":"ROI_3D_MAX_XY_SIZE - compute the maximum X / Y size of a 3 - d ROI MAX_XY_SIZE = ROI_3D_MAX_XY_SIZE ( CC , ... ) Given a structure of regions - of - interest such as that returned by BWCONNCOMP , with fields 'ImageSize' and 'PixelIdxList' , this function examines all Z planes and computes the area ( in pixels ) of each ROI in X and Y ( dimensions 1 and 2 ). The maximum such value is returned in MAX_XY_SIZE ( i ), for each ROI in CC ( i goes from 1 .. numel ( CC . PixelIdxList )). This function also takes NAME / VALUE pairs that modify the behavior : Parameter ( default ) | Description -------------------------------------------------------------------- UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : % make a simple image A = zeros ( 3 , 11 ); A ( 1 ,:) = 1 ; A ( 2 , 1 ) = 1 ; A (:,:, 2 ) = 0 * A (:,:, 1 ); A ( 1 , 1 , 2 ) = 1 ; A , % view A CC = bwconncomp ( A ); max_xy_size = ROI_3d_max_xy_size ( CC )","title":"ROI_3d_max_xy_size"},{"location":"reference/image/ROIs/ROI_3d_overlap.m/","text":"ROI_3d_overlap \u00b6 ROI_3D_OVERLAP - Computes overlap between 3 D ROIS in 3 D space for different shifts [ OVERLAPA , OVERLAPB ] = ROI_3D_OVERLAP ( ROIS3D1 , ROIS3D2 , XRANGE , YRANGE ,... ZRANGE , IMSIZE ) Inputs : ROIS3D1 , ROIS3D2 are indexes SPOTDETECTOR3 . It has the following fields : XRANGE , YRANGE , ZRANGE : we will calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . IMSIZE - The image size in pixels [ NX NY NZ ] Outputs : OVERLAPA ( x , y , z ) is the fraction of roi3d1 that overlaps roi3d2 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels OVERLAPB ( x , y , z ) is the fraction of roi3d2 that overlaps roi3d1 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels See also : ROI_3D_ALL_OVERLAPS","title":"ROI_3d_overlap"},{"location":"reference/image/ROIs/ROI_3d_overlap.m/#roi_3d_overlap","text":"ROI_3D_OVERLAP - Computes overlap between 3 D ROIS in 3 D space for different shifts [ OVERLAPA , OVERLAPB ] = ROI_3D_OVERLAP ( ROIS3D1 , ROIS3D2 , XRANGE , YRANGE ,... ZRANGE , IMSIZE ) Inputs : ROIS3D1 , ROIS3D2 are indexes SPOTDETECTOR3 . It has the following fields : XRANGE , YRANGE , ZRANGE : we will calculate the overlap over shifts of the ROIs in X , Y , and Z . e . g ., XRANGE = [ - 5 : 1 : 5 ] YRANGE = [ - 5 : 1 : 5 ], ZRANGE = [ - 5 : 1 5 ] computes the overlap for all shifts in X , Y , and Z of 5 pixels ( in all directions ) . IMSIZE - The image size in pixels [ NX NY NZ ] Outputs : OVERLAPA ( x , y , z ) is the fraction of roi3d1 that overlaps roi3d2 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels OVERLAPB ( x , y , z ) is the fraction of roi3d2 that overlaps roi3d1 when roi3d1 is shifted by XRANGE ( x ) , YRANGE ( y ) , ZRANGE ( z ) pixels See also : ROI_3D_ALL_OVERLAPS","title":"ROI_3d_overlap"},{"location":"reference/image/ROIs/ROI_3dplot2d.m/","text":"ROI_3dplot2d \u00b6 ROI_3DPLOT2D - Plot 3 d ROIs on a 2 - d image [ H_LINES , H_TEXT ] = ROI_3DPLOT2D ( CC , TEXTSIZE , COLOR , LINE_TAG , TEXT_TAG , ZDIM ) Inputs : CC - An array of ROIS returned in CC by BWCONNCOMP TEXTSIZE - The size font that should be used to label the numbers ( 0 for none ) COLOR - The color that should be used , in [ R G B ] format ( 0 ... 1 ) LINE_TAG - A text string that is used to tag the line plots TEXT_TAG - A text string that is used to tag the text Outputs : H_LINES - Handle array of line plots H_TEXT - Handle array of text plots","title":"ROI_3dplot2d"},{"location":"reference/image/ROIs/ROI_3dplot2d.m/#roi_3dplot2d","text":"ROI_3DPLOT2D - Plot 3 d ROIs on a 2 - d image [ H_LINES , H_TEXT ] = ROI_3DPLOT2D ( CC , TEXTSIZE , COLOR , LINE_TAG , TEXT_TAG , ZDIM ) Inputs : CC - An array of ROIS returned in CC by BWCONNCOMP TEXTSIZE - The size font that should be used to label the numbers ( 0 for none ) COLOR - The color that should be used , in [ R G B ] format ( 0 ... 1 ) LINE_TAG - A text string that is used to tag the line plots TEXT_TAG - A text string that is used to tag the text Outputs : H_LINES - Handle array of line plots H_TEXT - Handle array of text plots","title":"ROI_3dplot2d"},{"location":"reference/image/ROIs/ROI_assignneighbors.m/","text":"ROI_assignneighbors \u00b6 ROI_3D_ASSIGNNEIGHBORS - assign neighbors to adjacent ROIs L_OUT = ROI_ASSIGNNEIGHBORS ( L , IM , INDEXES_TO_SEARCH ) Searches the labeled ROI matrix L for unlabeled pixels ( in INDEXES_TO_SEARCH ), and assigns these pixels be part of an immediately neighboring ROI . The brightest neighboring pixel in IM is used to determine which ROI will be assigned . This function is useful after WATERSHED resegmentation , which leaves a 1 pixel boundary between the resegmented ROIs . Example : A = zeros ( 6 , 6 ); A ( 3 , 2 ) = 2 ; A ( 3 , 3 ) = 1 ; A ( 3 , 4 ) = 3 ; L = bwlabel ( A ) indexes_to_search = find ( L ); L2 = L ; L2 ( 3 , 3 ) = 0 ; L2 ( 3 , 2 ) = 2 % segment the initial ROI into 2 with a 1 pixel border % might mimic output of WATERSHED L_out = ROI_assignneighbors ( L2 , A , indexes_to_search )","title":"ROI_assignneighbors"},{"location":"reference/image/ROIs/ROI_assignneighbors.m/#roi_assignneighbors","text":"ROI_3D_ASSIGNNEIGHBORS - assign neighbors to adjacent ROIs L_OUT = ROI_ASSIGNNEIGHBORS ( L , IM , INDEXES_TO_SEARCH ) Searches the labeled ROI matrix L for unlabeled pixels ( in INDEXES_TO_SEARCH ), and assigns these pixels be part of an immediately neighboring ROI . The brightest neighboring pixel in IM is used to determine which ROI will be assigned . This function is useful after WATERSHED resegmentation , which leaves a 1 pixel boundary between the resegmented ROIs . Example : A = zeros ( 6 , 6 ); A ( 3 , 2 ) = 2 ; A ( 3 , 3 ) = 1 ; A ( 3 , 4 ) = 3 ; L = bwlabel ( A ) indexes_to_search = find ( L ); L2 = L ; L2 ( 3 , 3 ) = 0 ; L2 ( 3 , 2 ) = 2 % segment the initial ROI into 2 with a 1 pixel border % might mimic output of WATERSHED L_out = ROI_assignneighbors ( L2 , A , indexes_to_search )","title":"ROI_assignneighbors"},{"location":"reference/image/ROIs/ROI_centerofmassdistance.m/","text":"ROI_centerofmassdistance \u00b6 ROI_CENTEROFMASSDISTANCE - Compute center - of - mass distances between sets of ROIs [ COMD ] = ROI_CENTEROFMASSDISTANCE ( ROI_COM_A , LA , ROI_COM_B , LB , ... DISTANCE_MAX , DISTANCE_MIN , ...); For 2 sets of ROIS , calculate the center - of - mass distances for all ROIs closer than DISTANCE_MAX . Inputs : ROI_COM_A and ROI_COM_B are NUM_ROIS x DIM_ROI matrixes with the center of mass coordinates in each row . LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL DISTANCE_MAX the maximum distance over which to search for center - of - mass distance . This is important because if the number of ROIs in A and B are large , then a full matrix describing ROI overlaps would require several hundred GB of memory and is usually not worth counting . DISTANCE_MIN If any distance is 0 , it will be set to DISTANCE_MIN . 0 is reserved for too - long distances beyond DISTANCE_MAX so that COMD can be sparse ( mostly 0 s ).","title":"ROI_centerofmassdistance"},{"location":"reference/image/ROIs/ROI_centerofmassdistance.m/#roi_centerofmassdistance","text":"ROI_CENTEROFMASSDISTANCE - Compute center - of - mass distances between sets of ROIs [ COMD ] = ROI_CENTEROFMASSDISTANCE ( ROI_COM_A , LA , ROI_COM_B , LB , ... DISTANCE_MAX , DISTANCE_MIN , ...); For 2 sets of ROIS , calculate the center - of - mass distances for all ROIs closer than DISTANCE_MAX . Inputs : ROI_COM_A and ROI_COM_B are NUM_ROIS x DIM_ROI matrixes with the center of mass coordinates in each row . LA and LB are labeled image matrixes , the same size as the original image . Each pixel should be labeled with a '0' if it contains no ROI , or i if it is part of the ith ROI . See also BWLABEL DISTANCE_MAX the maximum distance over which to search for center - of - mass distance . This is important because if the number of ROIs in A and B are large , then a full matrix describing ROI overlaps would require several hundred GB of memory and is usually not worth counting . DISTANCE_MIN If any distance is 0 , it will be set to DISTANCE_MIN . 0 is reserved for too - long distances beyond DISTANCE_MAX so that COMD can be sparse ( mostly 0 s ).","title":"ROI_centerofmassdistance"},{"location":"reference/image/ROIs/ROI_flare_indexes.m/","text":"ROI_flare_indexes \u00b6 ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"ROI_flare_indexes"},{"location":"reference/image/ROIs/ROI_flare_indexes.m/#roi_flare_indexes","text":"ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"ROI_flare_indexes"},{"location":"reference/image/ROIs/ROI_flare_indexes_buggy.m/","text":"ROI_flare_indexes_buggy \u00b6 ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"ROI_flare_indexes_buggy"},{"location":"reference/image/ROIs/ROI_flare_indexes_buggy.m/#roi_flare_indexes_buggy","text":"ROI_FLARE_INDEXES - flare a given ROI specified by indexes in an image INDEXESFLARED = ROI_FLARE_INDEXES ( INDEXES , IMSIZE , N ) For an ROI specified by the INDEXES in image of size IMSIZE , return the indexes of the ROI flared out by N pixels in INDEXESFLARED . See also : IND2SUB , SUB2IND","title":"ROI_flare_indexes_buggy"},{"location":"reference/image/ROIs/ROI_imageexample.m/","text":"ROI_imageexample \u00b6 ROI_imageexample - return an example image for experimenting with ROI functions IM = ROI_IMAGEEXAMPLE ; Returns an image with 3 overlapping Gaussian balls for ROI functions Example : im = ROI_imageexample ; imshow ( im );","title":"ROI_imageexample"},{"location":"reference/image/ROIs/ROI_imageexample.m/#roi_imageexample","text":"ROI_imageexample - return an example image for experimenting with ROI functions IM = ROI_IMAGEEXAMPLE ; Returns an image with 3 overlapping Gaussian balls for ROI functions Example : im = ROI_imageexample ; imshow ( im );","title":"ROI_imageexample"},{"location":"reference/image/ROIs/ROI_isolate.m/","text":"ROI_isolate \u00b6 ROI_ISOLATE - Return the index values within an ROI of of an isolated cube that encompasses ROI [ ISOLATE_INDEXES , ISOLATE_INDEXES_IN_ROI ] = ROI_ISOLATE ( IMSIZE , INDEXESND ) Given an ROI in an image of size IMSIZE with indexes INDEXESND , return the index values in an isolated N - D cube that correspond to index values in the original image . Inputs : IMSIZE should be the size of the image [ SZ1 SZ2 ... SZN] INDEXESND are the index values of the ROI in the image Outputs : ISOLATE_INDEXES are a mapping between the minimum N - D cube that can contain the ROI and the ROI ' s indexes in the image . ORIG_IM ( ISOLATE_INDEXES ) = MINCUBE . ISOLATE_INDEXES have the shape of the minimum cube . ISOLATE_INDEXES_IN_ROI is a 0 - 1 vector the same size as ISOLATE_INDEXES . Entries are 1 if the voxel is contained in the ROI specified by INDEXESND Example : imsize = [ 3 3 3 ]; indexesnd = [ 14 15 17 18 23 24 26 ]; % this is an ROI in the bottom right corner of a 3x3x3 cube except the edge point % to see where this is, use reshape(1:27,3,3,3) [ isolate_indexes , isolate_indexes_in_roi ] = ROI_isolate ( imsize , indexesnd )","title":"ROI_isolate"},{"location":"reference/image/ROIs/ROI_isolate.m/#roi_isolate","text":"ROI_ISOLATE - Return the index values within an ROI of of an isolated cube that encompasses ROI [ ISOLATE_INDEXES , ISOLATE_INDEXES_IN_ROI ] = ROI_ISOLATE ( IMSIZE , INDEXESND ) Given an ROI in an image of size IMSIZE with indexes INDEXESND , return the index values in an isolated N - D cube that correspond to index values in the original image . Inputs : IMSIZE should be the size of the image [ SZ1 SZ2 ... SZN] INDEXESND are the index values of the ROI in the image Outputs : ISOLATE_INDEXES are a mapping between the minimum N - D cube that can contain the ROI and the ROI ' s indexes in the image . ORIG_IM ( ISOLATE_INDEXES ) = MINCUBE . ISOLATE_INDEXES have the shape of the minimum cube . ISOLATE_INDEXES_IN_ROI is a 0 - 1 vector the same size as ISOLATE_INDEXES . Entries are 1 if the voxel is contained in the ROI specified by INDEXESND Example : imsize = [ 3 3 3 ]; indexesnd = [ 14 15 17 18 23 24 26 ]; % this is an ROI in the bottom right corner of a 3x3x3 cube except the edge point % to see where this is, use reshape(1:27,3,3,3) [ isolate_indexes , isolate_indexes_in_roi ] = ROI_isolate ( imsize , indexesnd )","title":"ROI_isolate"},{"location":"reference/image/ROIs/ROI_resegment.m/","text":"ROI_resegment \u00b6 ROI_RESEGMENT - resegment an ROI using an algorithm like WATERSHED [ CC ] = ROI_RESEGMENT ( IM , INDEXESND , ...) Given pixel index values of an ROI in an image IM , ROI_RESEGMENT re - evalutes the ROI using a segmenting function like WATERSHED . It returns a structure of new ROIs CC with fields as follows : Field | Description -------------------------------------------------------------- 'Connectivity' | The connectivity used ( see name / value pairs ) 'ImageSize' | size ( IM ) 'NumObjects' | The number of resegmented ROIs found 'PixelIdxList' | A cell array of pixel index values of the resegmented ROIs This function also takes name / value pairs that modify its operation : Parameter ( default ) | Description ------------------------------------------------------------------- 'resegment_algorithm' ( 'watershed' ) | Function that is called to resegment . 'values_outside_roi' ( 0 ) | What should values outside INDEXESND be set to ? | Use NaN to use the values from IM ( even though | they are outside ROI ) 'use_bwdist' ( 0 ) | Should we use the binary distance transform for | the ROI data ( 1 ), or the raw data from IM ( 0 ) ? 'connectivity' | The connectivity to use with the resegment algorithm . ( CONNDEF ( NDIMS ( IM ), 'maximal' )) | ( See HELP WATERSHED ). If 0 is given , default is used . 'invert' ( 1 ) | If using raw data , multiply the image by - 1 'assign_neighbors_to_roi' ( 1 ) | Resegmentation algorithms often leave a 1 pixel border | between ROIs . If 'assign_neighbors_to_roi' is 1 , then | these pixels are assigned to their brightest immediately | neighboring pixels .","title":"ROI_resegment"},{"location":"reference/image/ROIs/ROI_resegment.m/#roi_resegment","text":"ROI_RESEGMENT - resegment an ROI using an algorithm like WATERSHED [ CC ] = ROI_RESEGMENT ( IM , INDEXESND , ...) Given pixel index values of an ROI in an image IM , ROI_RESEGMENT re - evalutes the ROI using a segmenting function like WATERSHED . It returns a structure of new ROIs CC with fields as follows : Field | Description -------------------------------------------------------------- 'Connectivity' | The connectivity used ( see name / value pairs ) 'ImageSize' | size ( IM ) 'NumObjects' | The number of resegmented ROIs found 'PixelIdxList' | A cell array of pixel index values of the resegmented ROIs This function also takes name / value pairs that modify its operation : Parameter ( default ) | Description ------------------------------------------------------------------- 'resegment_algorithm' ( 'watershed' ) | Function that is called to resegment . 'values_outside_roi' ( 0 ) | What should values outside INDEXESND be set to ? | Use NaN to use the values from IM ( even though | they are outside ROI ) 'use_bwdist' ( 0 ) | Should we use the binary distance transform for | the ROI data ( 1 ), or the raw data from IM ( 0 ) ? 'connectivity' | The connectivity to use with the resegment algorithm . ( CONNDEF ( NDIMS ( IM ), 'maximal' )) | ( See HELP WATERSHED ). If 0 is given , default is used . 'invert' ( 1 ) | If using raw data , multiply the image by - 1 'assign_neighbors_to_roi' ( 1 ) | Resegmentation algorithms often leave a 1 pixel border | between ROIs . If 'assign_neighbors_to_roi' is 1 , then | these pixels are assigned to their brightest immediately | neighboring pixels .","title":"ROI_resegment"},{"location":"reference/image/ROIs/ROI_resegment_all.m/","text":"ROI_resegment_all \u00b6 ROI_RESEGMENT_ALL - resegment ROIs from an image ( such as with WATERSHED ), updating ROIs and labeled image [ CC , L ] = ROI_RESEGMENT_ALL ( CC , L , IM , ...) Returns a modified set of ROIs given a labeled image L , a list of ROIs returned from BWCONNCOMP ( CC ) and the original image IM . This function takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------ resegment_namevaluepairs ( {} ) | Name / value pairs to pass to ROI_resegment | ( see HELP ROI_RESEGMENT ) rois_to_update ( [ 1 : CC.NumObjects ] ) | Index values of ROIs to update ( can be a subset ) UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : myimg = ROI_imageexample ; imagedisplay ( myimg ); BW = myimg > 1e-3 ; CC_orig = bwconncomp ( BW ); L_orig = labelmatrix ( CC_orig ); figure , imshow ( label2rgb ( L_orig )); [ CC_new , L_new ] = ROI_resegment_all ( CC_orig , L_orig , myimg ); figure , imshow ( label2rgb ( L_new ));","title":"ROI_resegment_all"},{"location":"reference/image/ROIs/ROI_resegment_all.m/#roi_resegment_all","text":"ROI_RESEGMENT_ALL - resegment ROIs from an image ( such as with WATERSHED ), updating ROIs and labeled image [ CC , L ] = ROI_RESEGMENT_ALL ( CC , L , IM , ...) Returns a modified set of ROIs given a labeled image L , a list of ROIs returned from BWCONNCOMP ( CC ) and the original image IM . This function takes parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------ resegment_namevaluepairs ( {} ) | Name / value pairs to pass to ROI_resegment | ( see HELP ROI_RESEGMENT ) rois_to_update ( [ 1 : CC.NumObjects ] ) | Index values of ROIs to update ( can be a subset ) UseProgressBar ( 1 ) | Should we use a progress bar ? ( 0 / 1 ) Example : myimg = ROI_imageexample ; imagedisplay ( myimg ); BW = myimg > 1e-3 ; CC_orig = bwconncomp ( BW ); L_orig = labelmatrix ( CC_orig ); figure , imshow ( label2rgb ( L_orig )); [ CC_new , L_new ] = ROI_resegment_all ( CC_orig , L_orig , myimg ); figure , imshow ( label2rgb ( L_new ));","title":"ROI_resegment_all"},{"location":"reference/image/ROIs/ROI_subset.m/","text":"ROI_subset \u00b6 ROI_subset - return a subset of ROIs in a structure CC CCSUBSET = ROI_SUBSET ( CC , INDEXES ) Creates a new ROI structure CCSUBSET from one in CC with subfields 'Connectivity' , 'NumObjects' , 'ImageSize' , and 'PixelIdxList' entries such as those returned from BWCONNCOMP . The field 'NumObjects' is set to the number of elements of INDEXES and PixelIdxList will have only those entries in INDEXES .","title":"ROI_subset"},{"location":"reference/image/ROIs/ROI_subset.m/#roi_subset","text":"ROI_subset - return a subset of ROIs in a structure CC CCSUBSET = ROI_SUBSET ( CC , INDEXES ) Creates a new ROI structure CCSUBSET from one in CC with subfields 'Connectivity' , 'NumObjects' , 'ImageSize' , and 'PixelIdxList' entries such as those returned from BWCONNCOMP . The field 'NumObjects' is set to the number of elements of INDEXES and PixelIdxList will have only those entries in INDEXES .","title":"ROI_subset"},{"location":"reference/image/imseq/imseq.m/","text":"CLASS imseq \u00b6 IMSEQ - an image class that delivers frames from recording epochs of image sequences Superclasses \u00b6 handle Properties \u00b6 Property Description currentchannel The 'channel' of the image that is currently selected Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. frame return a frame from an IMSEQ object ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. imseq create a new IMSEQ object imsize return the size of images that are delivered by an IMSEQ object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. numepochs number of sequence epochs available for IMSEQ numframes number of frames in a given image sequence epoch setselectedchannel set a selected channel for reading from an image sequence object Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , IMSEQ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq / addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also IMSEQ , IMSEQ / ISVALID , CLEAR Help for imseq / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LE , IMSEQ / LT , IMSEQ / NE Help for imseq / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , IMSEQ Help for imseq / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also IMSEQ , IMSEQ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for imseq / findprop is inherited from superclass handle frame - return a frame from an IMSEQ object F = FRAME ( IMSEQ_OBJ , EPOCH , FRAMENUMBER ) Return the image at frame FRAMENUMBER from epoch EPOCH from the IMSEQ object IMSEQ_OBJ . FRAME will have dimensions [ NX NY NZ C ] where NX is the number of pixels of each image in the X dimension , NY is the number of pixels of each image in the Y dimension , NZ is the number of pixels of each image in the Z dimension , and C is the number of channels . FRAMENUMBER may also be an array of frames ( e . g ., [ 1 2 3 ] ) . In the abstract class , f is always empty . ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GT , IMSEQ / LE , IMSEQ / LT , IMSEQ / NE Help for imseq / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / LE , IMSEQ / LT , IMSEQ / NE Help for imseq / gt is inherited from superclass handle imseq - create a new IMSEQ object IMS = IMSEQ () Creates an IMSEQ object . IMSEQ is an abstract class , so a specific subclass is usually used instead . Documentation for imseq / imseq doc imseq imsize - return the size of images that are delivered by an IMSEQ object SZ = IMSIZE ( IMSEQ_OBJ ) Returns the size of the image g . SZ = [ NX NY NZ NC ] where NX - number of pixels in first dimension NY - number of pixels in second dimension NZ - number of pixels in third dimension NC - number of 'channels' in each image ( will comprise 4 th dimension ) IMSEQ is an abstract class so empty is always returned for SZ . isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also IMSEQ , IMSEQ / DELETE Help for imseq / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LT , IMSEQ / NE Help for imseq / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , IMSEQ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LE , IMSEQ / NE Help for imseq / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LE , IMSEQ / LT Help for imseq / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also IMSEQ , IMSEQ / ADDLISTENER , IMSEQ / LISTENER , EVENT . EVENTDATA , EVENTS Help for imseq / notify is inherited from superclass handle numepochs - number of sequence epochs available for IMSEQ E = NUMEPOCHS ( IMSEQ_OBJ ) Returns the number of recording epoch sequences for an IMSEQ object . An epoch is a complete recording of a sequence of images . In the abstract class IMSEQ , this always returns 0 . numframes - number of frames in a given image sequence epoch NF = NUMFRAMES ( IMSEQ_OBJ , EPOCH ) Returns the number of image frames NF in the image sequence IMSEQ_OBJ recording epoch EPOCH . In the abstract class , NF is always 0 . If EPOCH is not provided , EPOCH is taken to be 1 . setselectedchannel - set a selected channel for reading from an image sequence object IMSEQ_OBJ = SETSELECTEDCHANNEL ( IMSEQ_OBJ , CHANNEL ) Sets the selected channel to be returned by FRAME . Use CHANNEL = [] to return all channels .","title":"imseq"},{"location":"reference/image/imseq/imseq.m/#class-imseq","text":"IMSEQ - an image class that delivers frames from recording epochs of image sequences","title":"CLASS imseq"},{"location":"reference/image/imseq/imseq.m/#superclasses","text":"handle","title":"Superclasses"},{"location":"reference/image/imseq/imseq.m/#properties","text":"Property Description currentchannel The 'channel' of the image that is currently selected","title":"Properties"},{"location":"reference/image/imseq/imseq.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. frame return a frame from an IMSEQ object ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. imseq create a new IMSEQ object imsize return the size of images that are delivered by an IMSEQ object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. numepochs number of sequence epochs available for IMSEQ numframes number of frames in a given image sequence epoch setselectedchannel set a selected channel for reading from an image sequence object","title":"Methods"},{"location":"reference/image/imseq/imseq.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , IMSEQ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq / addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also IMSEQ , IMSEQ / ISVALID , CLEAR Help for imseq / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LE , IMSEQ / LT , IMSEQ / NE Help for imseq / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , IMSEQ Help for imseq / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also IMSEQ , IMSEQ / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for imseq / findprop is inherited from superclass handle frame - return a frame from an IMSEQ object F = FRAME ( IMSEQ_OBJ , EPOCH , FRAMENUMBER ) Return the image at frame FRAMENUMBER from epoch EPOCH from the IMSEQ object IMSEQ_OBJ . FRAME will have dimensions [ NX NY NZ C ] where NX is the number of pixels of each image in the X dimension , NY is the number of pixels of each image in the Y dimension , NZ is the number of pixels of each image in the Z dimension , and C is the number of channels . FRAMENUMBER may also be an array of frames ( e . g ., [ 1 2 3 ] ) . In the abstract class , f is always empty . ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GT , IMSEQ / LE , IMSEQ / LT , IMSEQ / NE Help for imseq / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / LE , IMSEQ / LT , IMSEQ / NE Help for imseq / gt is inherited from superclass handle imseq - create a new IMSEQ object IMS = IMSEQ () Creates an IMSEQ object . IMSEQ is an abstract class , so a specific subclass is usually used instead . Documentation for imseq / imseq doc imseq imsize - return the size of images that are delivered by an IMSEQ object SZ = IMSIZE ( IMSEQ_OBJ ) Returns the size of the image g . SZ = [ NX NY NZ NC ] where NX - number of pixels in first dimension NY - number of pixels in second dimension NZ - number of pixels in third dimension NC - number of 'channels' in each image ( will comprise 4 th dimension ) IMSEQ is an abstract class so empty is always returned for SZ . isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also IMSEQ , IMSEQ / DELETE Help for imseq / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LT , IMSEQ / NE Help for imseq / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , IMSEQ , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LE , IMSEQ / NE Help for imseq / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ , IMSEQ / EQ , IMSEQ / GE , IMSEQ / GT , IMSEQ / LE , IMSEQ / LT Help for imseq / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also IMSEQ , IMSEQ / ADDLISTENER , IMSEQ / LISTENER , EVENT . EVENTDATA , EVENTS Help for imseq / notify is inherited from superclass handle numepochs - number of sequence epochs available for IMSEQ E = NUMEPOCHS ( IMSEQ_OBJ ) Returns the number of recording epoch sequences for an IMSEQ object . An epoch is a complete recording of a sequence of images . In the abstract class IMSEQ , this always returns 0 . numframes - number of frames in a given image sequence epoch NF = NUMFRAMES ( IMSEQ_OBJ , EPOCH ) Returns the number of image frames NF in the image sequence IMSEQ_OBJ recording epoch EPOCH . In the abstract class , NF is always 0 . If EPOCH is not provided , EPOCH is taken to be 1 . setselectedchannel - set a selected channel for reading from an image sequence object IMSEQ_OBJ = SETSELECTEDCHANNEL ( IMSEQ_OBJ , CHANNEL ) Sets the selected channel to be returned by FRAME . Use CHANNEL = [] to return all channels .","title":"Methods help"},{"location":"reference/image/imseq/imseq_matlab.m/","text":"CLASS imseq_matlab \u00b6 IMSEQ_MATLAB - turn image files that can be read by Matlab ' s IMREAD into an IMSEQ object See the reference page . Examples : ims = imseq_matlab ( 'ngc6543a.jpg' ) ims . imsize ims . numframes d = ims . frame ( 1 , 1 ); figure ; image ( d ); % suppose you have a multi-frame TIFF in myfile.tif ims = imseq_matlab ( 'myfile.tif' ); ims . imsize , % show size ims . numframes , % show frames data = ims . frame ( 1 , 1 : 3 ); % read frames 1, 2, 3 Superclasses \u00b6 imseq , handle Properties \u00b6 Property Description filename The (full path) filename to be accessed info The file information currentchannel Methods \u00b6 Method Description addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. frame return a frame from an IMSEQ object ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. imseq_matlab creator an image sequence object from a Matlab-readable image file imsize return the size of images that are delivered by an IMSEQ_MATLAB object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. numepochs number of sequence epochs available for IMSEQ_MATLAB object numframes number of frames in a given image sequence epoch setfilename Set or reset the filename of an IMSEQ_MATLAB_OBJ setselectedchannel set a selected channel for reading from an image sequence object update re-read parameters of the image file with IMFINFO Methods help \u00b6 addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , IMSEQ_MATLAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq_matlab / addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also IMSEQ_MATLAB , IMSEQ_MATLAB / ISVALID , CLEAR Help for imseq_matlab / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , IMSEQ_MATLAB Help for imseq_matlab / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also IMSEQ_MATLAB , IMSEQ_MATLAB / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for imseq_matlab / findprop is inherited from superclass handle frame - return a frame from an IMSEQ object F = FRAME ( IMSEQ_MATLAB_OBJ , EPOCH , FRAMENUMBER ) Return the image at frame FRAMENUMBER from epoch EPOCH from the IMSEQ object IMSEQ_MATLAB_OBJ . FRAME will have dimensions [ NX NY NZ C ] where NX is the number of pixels of each image in the X dimension , NY is the number of pixels of each image in the Y dimension , NZ is the number of pixels of each image in the Z dimension , and C is the number of channels . FRAMENUMBER may also be an array of frames ( e . g ., [ 1 2 3 ] ) . Frames will be concatenated on the 3 rd dimension if the channel dimension is 1 ; otherwise frames will be concatenated on the 4th dimension. ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / gt is inherited from superclass handle imseq_matlab - creator an image sequence object from a Matlab-readable image file IMSEQ_MATLAB_OBJ = IMSEQ_MATLAB ( FILENAME ) Create an image sequence object using a filename that can be read by Matlab 's IMREAD function. FILENAME should be the full path to the image file name. The file should have an extension that is interpretable to IMREAD. See also: IMREAD Documentation for imseq_matlab/imseq_matlab doc imseq_matlab imsize - return the size of images that are delivered by an IMSEQ_MATLAB object SZ = IMSIZE(IMSEQ_MATLAB_OBJ) Returns the size of the image g. SZ = [ NX NY NZ NC ] where NX - number of pixels in first dimension NY - number of pixels in second dimension NZ - number of pixels in third dimension (will always be 1) NC - number of 'channels' in each image (will comprise 3rd dimension) isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also IMSEQ_MATLAB , IMSEQ_MATLAB / DELETE Help for imseq_matlab / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , IMSEQ_MATLAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq_matlab / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / NE Help for imseq_matlab / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT Help for imseq_matlab / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also IMSEQ_MATLAB , IMSEQ_MATLAB / ADDLISTENER , IMSEQ_MATLAB / LISTENER , EVENT . EVENTDATA , EVENTS Help for imseq_matlab / notify is inherited from superclass handle numepochs - number of sequence epochs available for IMSEQ_MATLAB object E = NUMEPOCHS ( IMSEQ_MATLAB_OBJ ) Returns the number of recording epoch sequences for an IMSEQ_MATLAB object . An epoch is a complete recording of a sequence of images . In the filename - based class IMSEQ_MATLAB , this always returns 1 ( a single epoch ) . numframes - number of frames in a given image sequence epoch NF = NUMFRAMES(IMSEQ_MATLAB_OBJ, EPOCH) Returns the number of image frames NF in the image sequence IMSEQ_MATLAB_OBJ recording epoch EPOCH. In this class, EPOCH is always taken to be 1. setfilename - Set or reset the filename of an IMSEQ_MATLAB_OBJ IMSEQ_MATLAB_OBJ = SETFILENAME(IMSEQ_MATLAB_OBJ, FILENAME) Sets the filename. setselectedchannel - set a selected channel for reading from an image sequence object IMSEQ_MATLAB_OBJ = SETSELECTEDCHANNEL ( IMSEQ_MATLAB_OBJ , CHANNEL ) Sets the selected channel to be returned by FRAME . Use CHANNEL = [] to return all channels . update - re-read parameters of the image file with IMFINFO IMSEQ_MATLAB_OBJ = UPDATE ( IMSEQ_MATLAB_OBJ ) Updates the internal variables of the IMSEQ_MATLAB_OBJ . Calls IMFINFO .","title":"imseq_matlab"},{"location":"reference/image/imseq/imseq_matlab.m/#class-imseq_matlab","text":"IMSEQ_MATLAB - turn image files that can be read by Matlab ' s IMREAD into an IMSEQ object See the reference page . Examples : ims = imseq_matlab ( 'ngc6543a.jpg' ) ims . imsize ims . numframes d = ims . frame ( 1 , 1 ); figure ; image ( d ); % suppose you have a multi-frame TIFF in myfile.tif ims = imseq_matlab ( 'myfile.tif' ); ims . imsize , % show size ims . numframes , % show frames data = ims . frame ( 1 , 1 : 3 ); % read frames 1, 2, 3","title":"CLASS imseq_matlab"},{"location":"reference/image/imseq/imseq_matlab.m/#superclasses","text":"imseq , handle","title":"Superclasses"},{"location":"reference/image/imseq/imseq_matlab.m/#properties","text":"Property Description filename The (full path) filename to be accessed info The file information currentchannel","title":"Properties"},{"location":"reference/image/imseq/imseq_matlab.m/#methods","text":"Method Description addlistener ADDLISTENER Add listener for event. delete DELETE Delete a handle object. eq == (EQ) Test handle equality. findobj FINDOBJ Find objects matching specified conditions. findprop FINDPROP Find property of MATLAB handle object. frame return a frame from an IMSEQ object ge >= (GE) Greater than or equal relation for handles. gt > (GT) Greater than relation for handles. imseq_matlab creator an image sequence object from a Matlab-readable image file imsize return the size of images that are delivered by an IMSEQ_MATLAB object isvalid ISVALID Test handle validity. le <= (LE) Less than or equal relation for handles. listener LISTENER Add listener for event without binding the listener to the source object. lt < (LT) Less than relation for handles. ne ~= (NE) Not equal relation for handles. notify NOTIFY Notify listeners of event. numepochs number of sequence epochs available for IMSEQ_MATLAB object numframes number of frames in a given image sequence epoch setfilename Set or reset the filename of an IMSEQ_MATLAB_OBJ setselectedchannel set a selected channel for reading from an image sequence object update re-read parameters of the image file with IMFINFO","title":"Methods"},{"location":"reference/image/imseq/imseq_matlab.m/#methods-help","text":"addlistener - ADDLISTENER Add listener for event. el = ADDLISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = ADDLISTENER ( hSource , PropName , Eventname , Callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string scalar or character vector . PropName must be a single property name specified as string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one or more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , addlistener returns an event . listener . To remove a listener , delete the object returned by addlistener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . ADDLISTENER binds the listener 's lifecycle to the object that is the source of the event . Unless you explicitly delete the listener , it is destroyed only when the source object is destroyed . To control the lifecycle of the listener independently from the event source object , use listener or the event . listener constructor to create the listener . See also LISTENER , EVENT . LISTENER , IMSEQ_MATLAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq_matlab / addlistener is inherited from superclass handle delete - DELETE Delete a handle object. DELETE ( H ) deletes all handle objects in array H . After the delete function call , H is an array of invalid objects . See also IMSEQ_MATLAB , IMSEQ_MATLAB / ISVALID , CLEAR Help for imseq_matlab / delete is inherited from superclass handle eq - == (EQ) Test handle equality. Handles are equal if they are handles for the same object . H1 == H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = EQ ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / eq is inherited from superclass handle findobj - FINDOBJ Find objects matching specified conditions. The FINDOBJ method of the HANDLE class follows the same syntax as the MATLAB FINDOBJ command , except that the first argument must be an array of handles to objects . HM = FINDOBJ ( H , < conditions > ) searches the handle object array H and returns an array of handle objects matching the specified conditions . Only the public members of the objects of H are considered when evaluating the conditions . See also FINDOBJ , IMSEQ_MATLAB Help for imseq_matlab / findobj is inherited from superclass handle findprop - FINDPROP Find property of MATLAB handle object. p = FINDPROP ( H , PROPNAME ) finds and returns the META . PROPERTY object associated with property name PROPNAME of scalar handle object H . PROPNAME can be a string scalar or character vector . It can be the name of a property defined by the class of H or a dynamic property added to scalar object H . If no property named PROPNAME exists for object H , an empty META . PROPERTY array is returned . See also IMSEQ_MATLAB , IMSEQ_MATLAB / FINDOBJ , DYNAMICPROPS , META . PROPERTY Help for imseq_matlab / findprop is inherited from superclass handle frame - return a frame from an IMSEQ object F = FRAME ( IMSEQ_MATLAB_OBJ , EPOCH , FRAMENUMBER ) Return the image at frame FRAMENUMBER from epoch EPOCH from the IMSEQ object IMSEQ_MATLAB_OBJ . FRAME will have dimensions [ NX NY NZ C ] where NX is the number of pixels of each image in the X dimension , NY is the number of pixels of each image in the Y dimension , NZ is the number of pixels of each image in the Z dimension , and C is the number of channels . FRAMENUMBER may also be an array of frames ( e . g ., [ 1 2 3 ] ) . Frames will be concatenated on the 3 rd dimension if the channel dimension is 1 ; otherwise frames will be concatenated on the 4th dimension. ge - >= (GE) Greater than or equal relation for handles. H1 >= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / ge is inherited from superclass handle gt - > (GT) Greater than relation for handles. H1 > H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise > result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = GT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / gt is inherited from superclass handle imseq_matlab - creator an image sequence object from a Matlab-readable image file IMSEQ_MATLAB_OBJ = IMSEQ_MATLAB ( FILENAME ) Create an image sequence object using a filename that can be read by Matlab 's IMREAD function. FILENAME should be the full path to the image file name. The file should have an extension that is interpretable to IMREAD. See also: IMREAD Documentation for imseq_matlab/imseq_matlab doc imseq_matlab imsize - return the size of images that are delivered by an IMSEQ_MATLAB object SZ = IMSIZE(IMSEQ_MATLAB_OBJ) Returns the size of the image g. SZ = [ NX NY NZ NC ] where NX - number of pixels in first dimension NY - number of pixels in second dimension NZ - number of pixels in third dimension (will always be 1) NC - number of 'channels' in each image (will comprise 3rd dimension) isvalid - ISVALID Test handle validity. TF = ISVALID ( H ) performs an element - wise check for validity on the handle elements of H . The result is a logical array of the same dimensions as H , where each element is the element - wise validity result . A handle is invalid if it has been deleted or if it is an element of a handle array and has not yet been initialized . See also IMSEQ_MATLAB , IMSEQ_MATLAB / DELETE Help for imseq_matlab / isvalid is inherited from superclass handle le - <= (LE) Less than or equal relation for handles. Handles are equal if they are handles for the same object . All comparisons use a number associated with each handle object . Nothing can be assumed about the result of a handle comparison except that the repeated comparison of two handles in the same MATLAB session will yield the same result . The order of handle values is purely arbitrary and has no connection to the state of the handle objects being compared . H1 <= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise >= result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LT , IMSEQ_MATLAB / NE Help for imseq_matlab / le is inherited from superclass handle listener - LISTENER Add listener for event without binding the listener to the source object. el = LISTENER ( hSource , Eventname , callbackFcn ) creates a listener for the event named Eventname . The source of the event is the handle object hSource . If hSource is an array of source handles , the listener responds to the named event on any handle in the array . callbackFcn is a function handle that is invoked when the event is triggered . el = LISTENER ( hSource , PropName , Eventname , callback ) adds a listener for a property event . Eventname must be one of 'PreGet' , 'PostGet' , 'PreSet' , or 'PostSet' . Eventname can be a string sclar or character vector . PropName must be either a single property name specified as a string scalar or character vector , or a collection of property names specified as a cell array of character vectors or a string array , or as an array of one ore more meta . property objects . The properties must belong to the class of hSource . If hSource is scalar , PropName can include dynamic properties . For all forms , listener returns an event . listener . To remove a listener , delete the object returned by listener . For example , delete ( el ) calls the handle class delete method to remove the listener and delete it from the workspace . Calling delete ( el ) on the listener object deletes the listener , which means the event no longer causes the callback function to execute . LISTENER does not bind the listener 's lifecycle to the object that is the source of the event . Destroying the source object does not impact the lifecycle of the listener object . A listener created with LISTENER must be destroyed independently of the source object . Calling delete ( el ) explicitly destroys the listener . Redefining or clearing the variable containing the listener can delete the listener if no other references to it exist . To tie the lifecycle of the listener to the lifecycle of the source object , use addlistener . See also ADDLISTENER , EVENT . LISTENER , IMSEQ_MATLAB , NOTIFY , DELETE , META . PROPERTY , EVENTS Help for imseq_matlab / listener is inherited from superclass handle lt - < (LT) Less than relation for handles. H1 < H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise < result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = LT ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / NE Help for imseq_matlab / lt is inherited from superclass handle ne - ~= (NE) Not equal relation for handles. Handles are equal if they are handles for the same object and are unequal otherwise . H1 ~= H2 performs element - wise comparisons between handle arrays H1 and H2 . H1 and H2 must be of the same dimensions unless one is a scalar . The result is a logical array of the same dimensions , where each element is an element - wise equality result . If one of H1 or H2 is scalar , scalar expansion is performed and the result will match the dimensions of the array that is not scalar . TF = NE ( H1 , H2 ) stores the result in a logical array of the same dimensions . See also IMSEQ_MATLAB , IMSEQ_MATLAB / EQ , IMSEQ_MATLAB / GE , IMSEQ_MATLAB / GT , IMSEQ_MATLAB / LE , IMSEQ_MATLAB / LT Help for imseq_matlab / ne is inherited from superclass handle notify - NOTIFY Notify listeners of event. NOTIFY ( H , eventname ) notifies listeners added to the event named eventname for handle object array H that the event is taking place . eventname can be a string scalar or character vector . H is the array of handles to the event source objects , and ' eventname ' must be a character vector . NOTIFY ( H , eventname , ed ) provides a way of encapsulating information about an event which can then be accessed by each registered listener . ed must belong to the EVENT . EVENTDATA class . See also IMSEQ_MATLAB , IMSEQ_MATLAB / ADDLISTENER , IMSEQ_MATLAB / LISTENER , EVENT . EVENTDATA , EVENTS Help for imseq_matlab / notify is inherited from superclass handle numepochs - number of sequence epochs available for IMSEQ_MATLAB object E = NUMEPOCHS ( IMSEQ_MATLAB_OBJ ) Returns the number of recording epoch sequences for an IMSEQ_MATLAB object . An epoch is a complete recording of a sequence of images . In the filename - based class IMSEQ_MATLAB , this always returns 1 ( a single epoch ) . numframes - number of frames in a given image sequence epoch NF = NUMFRAMES(IMSEQ_MATLAB_OBJ, EPOCH) Returns the number of image frames NF in the image sequence IMSEQ_MATLAB_OBJ recording epoch EPOCH. In this class, EPOCH is always taken to be 1. setfilename - Set or reset the filename of an IMSEQ_MATLAB_OBJ IMSEQ_MATLAB_OBJ = SETFILENAME(IMSEQ_MATLAB_OBJ, FILENAME) Sets the filename. setselectedchannel - set a selected channel for reading from an image sequence object IMSEQ_MATLAB_OBJ = SETSELECTEDCHANNEL ( IMSEQ_MATLAB_OBJ , CHANNEL ) Sets the selected channel to be returned by FRAME . Use CHANNEL = [] to return all channels . update - re-read parameters of the image file with IMFINFO IMSEQ_MATLAB_OBJ = UPDATE ( IMSEQ_MATLAB_OBJ ) Updates the internal variables of the IMSEQ_MATLAB_OBJ . Calls IMFINFO .","title":"Methods help"},{"location":"reference/math/angdiff.m/","text":"angdiff \u00b6 ANGDIFF - Angular difference in 0..360 D = ANGDIFF(A) Returns min(abs([A;A+360;A-360])); See also: ANGDIFFWRAP, ANGDIFFWRAPSIGN, DANGDIFFWRAP","title":"angdiff"},{"location":"reference/math/angdiff.m/#angdiff","text":"ANGDIFF - Angular difference in 0..360 D = ANGDIFF(A) Returns min(abs([A;A+360;A-360])); See also: ANGDIFFWRAP, ANGDIFFWRAPSIGN, DANGDIFFWRAP","title":"angdiff"},{"location":"reference/math/angdiffwrap.m/","text":"angdiffwrap \u00b6 ANGDIFF - Angular difference in 0..WRAP D = ANGDIFF(A,WRAP) Returns min([A;A+WRAP;A-WRAP]); See also: ANGDIFF, ANGDIFFWRAPSIGN, DANGDIFFWRAP","title":"angdiffwrap"},{"location":"reference/math/angdiffwrap.m/#angdiffwrap","text":"ANGDIFF - Angular difference in 0..WRAP D = ANGDIFF(A,WRAP) Returns min([A;A+WRAP;A-WRAP]); See also: ANGDIFF, ANGDIFFWRAPSIGN, DANGDIFFWRAP","title":"angdiffwrap"},{"location":"reference/math/angdiffwrapsign.m/","text":"angdiffwrapsign \u00b6 ANGDIFFWRAPSIGN - Angular difference in 0..WRAP D = ANGDIFFWRAPSIGN(A,WRAP) Similar to ANGDIFFWRAP except sign is preserved. See also: ANGDIGG, ANGDIFFWRAP, DANGDIFFWRAP","title":"angdiffwrapsign"},{"location":"reference/math/angdiffwrapsign.m/#angdiffwrapsign","text":"ANGDIFFWRAPSIGN - Angular difference in 0..WRAP D = ANGDIFFWRAPSIGN(A,WRAP) Similar to ANGDIFFWRAP except sign is preserved. See also: ANGDIGG, ANGDIFFWRAP, DANGDIFFWRAP","title":"angdiffwrapsign"},{"location":"reference/math/asymmetric_gaussian.m/","text":"asymmetric_gaussian \u00b6 ASYMMETRIC_GAUSSIAN - Compute an assymmetric gaussian curve Y = ASYMMETRIC_GAUSSIAN(X, a, b, c, d, e) where X are the values of X at which to evaluate the function, and a b c d e are the parameters of the function: 'a+b*exp(-((x-c).^2)/((heaviside(x-c)*(2*d^2)+(1-heaviside(x-c))*(2*(d^2)*e))))' This function with no input arguments returns the string above.","title":"asymmetric_gaussian"},{"location":"reference/math/asymmetric_gaussian.m/#asymmetric_gaussian","text":"ASYMMETRIC_GAUSSIAN - Compute an assymmetric gaussian curve Y = ASYMMETRIC_GAUSSIAN(X, a, b, c, d, e) where X are the values of X at which to evaluate the function, and a b c d e are the parameters of the function: 'a+b*exp(-((x-c).^2)/((heaviside(x-c)*(2*d^2)+(1-heaviside(x-c))*(2*(d^2)*e))))' This function with no input arguments returns the string above.","title":"asymmetric_gaussian"},{"location":"reference/math/cartesian2compass.m/","text":"cartesian2compass \u00b6 CARTESIAN2COMPASS - Convert angles from cartiesian to compass C = CARTESIAN2COMPASS ( R , USERADIANS ) Converts angles from cartesian format to compass . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"cartesian2compass"},{"location":"reference/math/cartesian2compass.m/#cartesian2compass","text":"CARTESIAN2COMPASS - Convert angles from cartiesian to compass C = CARTESIAN2COMPASS ( R , USERADIANS ) Converts angles from cartesian format to compass . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"cartesian2compass"},{"location":"reference/math/cas.m/","text":"cas \u00b6 CAS - Cosine(x) plus sin(x) Y = CAS(X) Returns the abbreviated CAS function where CAS(X) = COS(X) + SIN(X)","title":"cas"},{"location":"reference/math/cas.m/#cas","text":"CAS - Cosine(x) plus sin(x) Y = CAS(X) Returns the abbreviated CAS function where CAS(X) = COS(X) + SIN(X)","title":"cas"},{"location":"reference/math/center_of_mass.m/","text":"center_of_mass \u00b6 CENTER_OF_MASS Compute center of mass of points POS = CENTER_OF_MASS ( POINTS , [ WEIGHTS ] ) Computes the center of mass of a group of points . Each row should contain a separate point in N - space . If a weights vector is provided , then each point is weighted by the corresponding weight .","title":"center_of_mass"},{"location":"reference/math/center_of_mass.m/#center_of_mass","text":"CENTER_OF_MASS Compute center of mass of points POS = CENTER_OF_MASS ( POINTS , [ WEIGHTS ] ) Computes the center of mass of a group of points . Each row should contain a separate point in N - space . If a weights vector is provided , then each point is weighted by the corresponding weight .","title":"center_of_mass"},{"location":"reference/math/clip.m/","text":"clip \u00b6 CLIP - Clip values between a low and a high limit B = CLIP ( A , [ LOW HIGH ]) Return a variable B , the same size as A , except that all values of A that are below LOW are set to the value LOW , and all values that are above HIGH are set to HIGH . See also : RECTIFY Example : b = CLIP ([ - Inf 0 1 2 3 Inf ],[ 1 2 ]) % returns b = [ 1 1 1 2 2 2 ]","title":"clip"},{"location":"reference/math/clip.m/#clip","text":"CLIP - Clip values between a low and a high limit B = CLIP ( A , [ LOW HIGH ]) Return a variable B , the same size as A , except that all values of A that are below LOW are set to the value LOW , and all values that are above HIGH are set to HIGH . See also : RECTIFY Example : b = CLIP ([ - Inf 0 1 2 3 Inf ],[ 1 2 ]) % returns b = [ 1 1 1 2 2 2 ]","title":"clip"},{"location":"reference/math/cluster_points_gui.m/","text":"cluster_points_gui \u00b6 CLUSTER_POINTS_GUI - Cluster points into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = CLUSTER_POINTS_GUI ( 'POINTS' , POINTS ) Brings up a graphical user interface to allow the user to cluster POINTS ( a structure with field names and 1 - D values ) using several algorithms . POINTS should be a structure with fieldnames equal to the variable names ( e . g . , 'x' , 'y' , etc ), and the value in each field name should be 1 - dimensional . Additional parameters can be adjusted by passing name / value pairs at the end of the function : 'clusterids' : preliminary cluster ids 'ColorOrder' : Color order for cluster drawings ; defaults : to axes color order 'UnclassifiedColor' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] 'RandomSubset' : Do we plot a random subset of spikes ? Default 1 'RandomSubsetSize' : How many ? Default 200 'ForceQualityAssessment' : Should we force the user to choose cluster quality : before closing ? Default 1 'EnableClusterEditing' : Should we enable cluster editing ? Default 1 'AskBeforeDone' : Ask user to confirm they are really done Default 1 'MarkerSize' : MarkerSize for plotting ; default 10 'FigureName' : Name of the figure ; default \"Cluster Points\" . 'IsModal' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values .","title":"cluster_points_gui"},{"location":"reference/math/cluster_points_gui.m/#cluster_points_gui","text":"CLUSTER_POINTS_GUI - Cluster points into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = CLUSTER_POINTS_GUI ( 'POINTS' , POINTS ) Brings up a graphical user interface to allow the user to cluster POINTS ( a structure with field names and 1 - D values ) using several algorithms . POINTS should be a structure with fieldnames equal to the variable names ( e . g . , 'x' , 'y' , etc ), and the value in each field name should be 1 - dimensional . Additional parameters can be adjusted by passing name / value pairs at the end of the function : 'clusterids' : preliminary cluster ids 'ColorOrder' : Color order for cluster drawings ; defaults : to axes color order 'UnclassifiedColor' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] 'RandomSubset' : Do we plot a random subset of spikes ? Default 1 'RandomSubsetSize' : How many ? Default 200 'ForceQualityAssessment' : Should we force the user to choose cluster quality : before closing ? Default 1 'EnableClusterEditing' : Should we enable cluster editing ? Default 1 'AskBeforeDone' : Ask user to confirm they are really done Default 1 'MarkerSize' : MarkerSize for plotting ; default 10 'FigureName' : Name of the figure ; default \"Cluster Points\" . 'IsModal' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values .","title":"cluster_points_gui"},{"location":"reference/math/compass2cartesian.m/","text":"compass2cartesian \u00b6 COMPASS2CARTESIAN - Convert angles from compass to cartesian R = COMPASS2CARTESIAN ( C , USERADIANS ) Converts angles from compass format to cartesian . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"compass2cartesian"},{"location":"reference/math/compass2cartesian.m/#compass2cartesian","text":"COMPASS2CARTESIAN - Convert angles from compass to cartesian R = COMPASS2CARTESIAN ( C , USERADIANS ) Converts angles from compass format to cartesian . In compass , 0 degrees is up , and angles rotate clockwise . In cartesian , 0 degrees is rightward , and angles rotate counterclockwise . If USERADIANS is 1 , radians are used ; otherwise, degrees are used .","title":"compass2cartesian"},{"location":"reference/math/complex2vector.m/","text":"complex2vector \u00b6 COMPLEX2VECTOR - Convert a complex variable into a 2 D vector V = COMPLEX2VECTOR ( C ) Converts a complex quantity C = A + sqrt ( -1 ) * B into a vector V = [ A B ].","title":"complex2vector"},{"location":"reference/math/complex2vector.m/#complex2vector","text":"COMPLEX2VECTOR - Convert a complex variable into a 2 D vector V = COMPLEX2VECTOR ( C ) Converts a complex quantity C = A + sqrt ( -1 ) * B into a vector V = [ A B ].","title":"complex2vector"},{"location":"reference/math/cov_of_cloud.m/","text":"cov_of_cloud \u00b6 COV_OF_CLOUD - generate a cloud of gaussian points and compute covariance matrix [ C , PTS ] = COV_OF_CLOUD ( STD1 , STD2 , ROTATION , NUMPOINTS ) Sometimes you just want to generate a cloud of gaussian points , rotate them , and compute the covariance matrix . You know you should be able to directly calculate the covariance matrix , but you have a grant due , and you 've got to move fast . Example : [ c , pts ] = COV_OF_CLOUD ( 2 , 0.04 , 1 , 1000 ); figure ; subplot ( 2 , 2 , 1 ); plot ( pts (:, 1 ), pts (:, 2 ), 'o' ); subplot ( 2 , 2 , 2 ); [ X , T ] = meshgrid ([ 0 : 0.1 : 10 ],[ 0 : 0.001 : 0.3 ]); Z = X * 0 ; Z = Z + reshape ( mvnpdf ([ X (:) T (:)], mu , sigma { i }), size ( X , 1 ), size ( X , 2 )); pcolor ( X , T , Z ); colormap jet ; caxis ([ - max ( Z (:)) max ( Z (:))]); shading flat","title":"cov_of_cloud"},{"location":"reference/math/cov_of_cloud.m/#cov_of_cloud","text":"COV_OF_CLOUD - generate a cloud of gaussian points and compute covariance matrix [ C , PTS ] = COV_OF_CLOUD ( STD1 , STD2 , ROTATION , NUMPOINTS ) Sometimes you just want to generate a cloud of gaussian points , rotate them , and compute the covariance matrix . You know you should be able to directly calculate the covariance matrix , but you have a grant due , and you 've got to move fast . Example : [ c , pts ] = COV_OF_CLOUD ( 2 , 0.04 , 1 , 1000 ); figure ; subplot ( 2 , 2 , 1 ); plot ( pts (:, 1 ), pts (:, 2 ), 'o' ); subplot ( 2 , 2 , 2 ); [ X , T ] = meshgrid ([ 0 : 0.1 : 10 ],[ 0 : 0.001 : 0.3 ]); Z = X * 0 ; Z = Z + reshape ( mvnpdf ([ X (:) T (:)], mu , sigma { i }), size ( X , 1 ), size ( X , 2 )); pcolor ( X , T , Z ); colormap jet ; caxis ([ - max ( Z (:)) max ( Z (:))]); shading flat","title":"cov_of_cloud"},{"location":"reference/math/dangdiffwrap.m/","text":"dangdiffwrap \u00b6 DANGDIFF - Derivative of angular difference in 0..WRAP DD = DANGDIFF(A,WRAP) Returns numerical derivative of angular difference in 0..wrap Value is always -1, 0, or 1","title":"dangdiffwrap"},{"location":"reference/math/dangdiffwrap.m/#dangdiffwrap","text":"DANGDIFF - Derivative of angular difference in 0..WRAP DD = DANGDIFF(A,WRAP) Returns numerical derivative of angular difference in 0..wrap Value is always -1, 0, or 1","title":"dangdiffwrap"},{"location":"reference/math/deg2rad.m/","text":"deg2rad \u00b6 DEG2RAD R = DEG2RAD(D) Converts degrees to radians. R = D / (180/pi);","title":"deg2rad"},{"location":"reference/math/deg2rad.m/#deg2rad","text":"DEG2RAD R = DEG2RAD(D) Converts degrees to radians. R = D / (180/pi);","title":"deg2rad"},{"location":"reference/math/dist2line.m/","text":"dist2line \u00b6 DIST2LINE - Computes distance between point and line , and closest point [ D , X1 , Y1 ] = DIST2ILNE ( M , B , Z ) Computes the distance D from a point Z = [ X0 Y0 ] to a line defined by Y = M * X + B . The point [ X1 Y1 ] is the closest point on line Y to point Z = [ X0 Y0 ]. If M is Inf then B is assumed to be X location of the line .","title":"dist2line"},{"location":"reference/math/dist2line.m/#dist2line","text":"DIST2LINE - Computes distance between point and line , and closest point [ D , X1 , Y1 ] = DIST2ILNE ( M , B , Z ) Computes the distance D from a point Z = [ X0 Y0 ] to a line defined by Y = M * X + B . The point [ X1 Y1 ] is the closest point on line Y to point Z = [ X0 Y0 ]. If M is Inf then B is assumed to be X location of the line .","title":"dist2line"},{"location":"reference/math/divide_nozero.m/","text":"divide_nozero \u00b6 DIVIDE_NOZERO - performs division such that 0/0 = 0 Z = DIVIDE_NOZERO(X,Y) Performs an element-by-element divison of X and Y in the usual way except that 0/0 is 0 instead of NaN. n/0, where n is any number except zero, will still be inf. See also: RDIVIDE, LDIVIDE","title":"divide_nozero"},{"location":"reference/math/divide_nozero.m/#divide_nozero","text":"DIVIDE_NOZERO - performs division such that 0/0 = 0 Z = DIVIDE_NOZERO(X,Y) Performs an element-by-element divison of X and Y in the usual way except that 0/0 is 0 instead of NaN. n/0, where n is any number except zero, will still be inf. See also: RDIVIDE, LDIVIDE","title":"divide_nozero"},{"location":"reference/math/double_exp.m/","text":"double_exp \u00b6 DOUBLE_EXP - Double exponential G = DOUBLE_EXP ( T , TAU1 , TAU2 ) Returns (( TAU1 * TAU2 ) / ( TAU1 - TAU2 )) * ( EXP ( - T / TAU1 ) - EXP ( - T / TAU2 )) Roughly speaking , if TAU1 and TAU2 are very different , then TAU1 is an onset time constant and TAU2 is an offset constant Time to peak is ( TAU1 * TAU2 / ( TAU1 - TAU2 )) * LOG ( TAU1 / TAU2 )","title":"double_exp"},{"location":"reference/math/double_exp.m/#double_exp","text":"DOUBLE_EXP - Double exponential G = DOUBLE_EXP ( T , TAU1 , TAU2 ) Returns (( TAU1 * TAU2 ) / ( TAU1 - TAU2 )) * ( EXP ( - T / TAU1 ) - EXP ( - T / TAU2 )) Roughly speaking , if TAU1 and TAU2 are very different , then TAU1 is an onset time constant and TAU2 is an offset constant Time to peak is ( TAU1 * TAU2 / ( TAU1 - TAU2 )) * LOG ( TAU1 / TAU2 )","title":"double_exp"},{"location":"reference/math/double_gauss_180.m/","text":"double_gauss_180 \u00b6 DOUBLE_GAUSS - Double gaussian function Computes a double gaussian function DG = DOUBLE_GAUSS(X, PARAMETERS) DG=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) PARAMETERS = [Rsp Rp Op sig Rn] parameters correspond to Carrandini fit parameters where Rsp=offset,Rp=peak parameter of first gaussian, 0p=location of first peak, sig=width parameter, Rn=peak parameter of second gaussian and takes the angle difference between the first peak and second peak","title":"double_gauss_180"},{"location":"reference/math/double_gauss_180.m/#double_gauss_180","text":"DOUBLE_GAUSS - Double gaussian function Computes a double gaussian function DG = DOUBLE_GAUSS(X, PARAMETERS) DG=Rsp+Rp*EXP(-(X-Op)^2)/(2*sig^2))+Rn*EXP(-(X-Op+180)^2/(2*sig^2)) PARAMETERS = [Rsp Rp Op sig Rn] parameters correspond to Carrandini fit parameters where Rsp=offset,Rp=peak parameter of first gaussian, 0p=location of first peak, sig=width parameter, Rn=peak parameter of second gaussian and takes the angle difference between the first peak and second peak","title":"double_gauss_180"},{"location":"reference/math/double_gauss_DoG.m/","text":"double_gauss_DoG \u00b6 DOUBLE_GAUSS_DOG - computes a double-gaussian function that is modulated by a difference of gaussians Z = DOUBLE_GAUSS_DOG(THETA, SF, DOUBLE_GAUSS_PARAMS, DOG_PARAMS) THETA corresponds to angle SF corresponds to spatial frequency DOUBLE_GAUSS_PARAMS = [a b c d e] DOG_PARAMS = [0 a2 b2 c2 d2] See also: DOUBLE_GAUSS_180, DOG","title":"double_gauss_DoG"},{"location":"reference/math/double_gauss_DoG.m/#double_gauss_dog","text":"DOUBLE_GAUSS_DOG - computes a double-gaussian function that is modulated by a difference of gaussians Z = DOUBLE_GAUSS_DOG(THETA, SF, DOUBLE_GAUSS_PARAMS, DOG_PARAMS) THETA corresponds to angle SF corresponds to spatial frequency DOUBLE_GAUSS_PARAMS = [a b c d e] DOG_PARAMS = [0 a2 b2 c2 d2] See also: DOUBLE_GAUSS_180, DOG","title":"double_gauss_DoG"},{"location":"reference/math/double_gauss_dog_plot.m/","text":"double_gauss_dog_plot \u00b6 DOUBLE_GAUSS_DOG_PLOT(R, THETA, SF) Plots a surface figure in the current axes in the current figure of R (response), theta (angle), sf (spatial frequency)","title":"double_gauss_dog_plot"},{"location":"reference/math/double_gauss_dog_plot.m/#double_gauss_dog_plot","text":"DOUBLE_GAUSS_DOG_PLOT(R, THETA, SF) Plots a surface figure in the current axes in the current figure of R (response), theta (angle), sf (spatial frequency)","title":"double_gauss_dog_plot"},{"location":"reference/math/double_gaussian_plot.m/","text":"double_gaussian_plot \u00b6 DOUBLE_GAUSSIAN_PLOT - calculate a double gaussian Computes responses to a double gaussian curve Z = DOUBLE_GAUSSIAN_PLOT(P, XI, WRAP), where P = parameters = [offset Rp Op Sigm Rn angle_offset] XI are the angles to be evaluated and WRAP is the wrap to be performed by ANGDIFFWRAP (usually 360) The curve is Z = offset + Rp*exp(-(angdiffwrap(xi-Op,wrap).^2)/(2*Sigm*Sigm))+... Rn*exp(-(angdiffwrap(xi-(Op+angle_offset),wrap)/(2*Sigm*Sigm)))","title":"double_gaussian_plot"},{"location":"reference/math/double_gaussian_plot.m/#double_gaussian_plot","text":"DOUBLE_GAUSSIAN_PLOT - calculate a double gaussian Computes responses to a double gaussian curve Z = DOUBLE_GAUSSIAN_PLOT(P, XI, WRAP), where P = parameters = [offset Rp Op Sigm Rn angle_offset] XI are the angles to be evaluated and WRAP is the wrap to be performed by ANGDIFFWRAP (usually 360) The curve is Z = offset + Rp*exp(-(angdiffwrap(xi-Op,wrap).^2)/(2*Sigm*Sigm))+... Rn*exp(-(angdiffwrap(xi-(Op+angle_offset),wrap)/(2*Sigm*Sigm)))","title":"double_gaussian_plot"},{"location":"reference/math/ellipse_on_mvnpdf.m/","text":"ellipse_on_mvnpdf \u00b6 ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse ( or elliptical aperture ) on multivariate normal Y = ELLIPSE_ON_MVNPDF ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse ( or an elliptical aperature ) on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) The sixth row is optional ; if it is 0 , then the ellipse is a filled ellipse . If it is - N , then the ellipse describes the aperature of stimulation . The aperture is taken to be carved out of a larger circle of diameter N . MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) Note that the PDF is scaled by the step size of the mesh ; it is assumed that the mesh step size is constant . Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf"},{"location":"reference/math/ellipse_on_mvnpdf.m/#ellipse_on_mvnpdf","text":"ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse ( or elliptical aperture ) on multivariate normal Y = ELLIPSE_ON_MVNPDF ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse ( or an elliptical aperature ) on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) The sixth row is optional ; if it is 0 , then the ellipse is a filled ellipse . If it is - N , then the ellipse describes the aperature of stimulation . The aperture is taken to be carved out of a larger circle of diameter N . MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) Note that the PDF is scaled by the step size of the mesh ; it is assumed that the mesh step size is constant . Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf"},{"location":"reference/math/ellipse_on_mvnpdf_nk_x0.m/","text":"ellipse_on_mvnpdf_nk_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal - Naka - Rushton response Y = ELLIPSE_ON_MVNPDF_NK_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor NAKA_RUSHTON_C50 = X0 ( 7 ) NAKA_RUSHTON_N = X0 ( 8 ) ( see NAKA_RUSHTON_FUNC ) ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF , NAKA_RUSHTON_FUNC","title":"ellipse_on_mvnpdf_nk_x0"},{"location":"reference/math/ellipse_on_mvnpdf_nk_x0.m/#ellipse_on_mvnpdf_nk_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal - Naka - Rushton response Y = ELLIPSE_ON_MVNPDF_NK_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor NAKA_RUSHTON_C50 = X0 ( 7 ) NAKA_RUSHTON_N = X0 ( 8 ) ( see NAKA_RUSHTON_FUNC ) ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF , NAKA_RUSHTON_FUNC","title":"ellipse_on_mvnpdf_nk_x0"},{"location":"reference/math/ellipse_on_mvnpdf_nopos_surr_x0.m/","text":"ellipse_on_mvnpdf_nopos_surr_x0 \u00b6 ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position , linear modulation Y = ELLIPSE_ON_MVNPDF_NOPOSITION_SURR_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor B = X0 ( 3 ) - A scale factor for the modulation component ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or N ( if the stimulus is an aperture on an ellipse of N pixels ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf_nopos_surr_x0"},{"location":"reference/math/ellipse_on_mvnpdf_nopos_surr_x0.m/#ellipse_on_mvnpdf_nopos_surr_x0","text":"ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position , linear modulation Y = ELLIPSE_ON_MVNPDF_NOPOSITION_SURR_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor B = X0 ( 3 ) - A scale factor for the modulation component ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or N ( if the stimulus is an aperture on an ellipse of N pixels ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf_nopos_surr_x0"},{"location":"reference/math/ellipse_on_mvnpdf_noposition_x0.m/","text":"ellipse_on_mvnpdf_noposition_x0 \u00b6 ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position Y = ELLIPSE_ON_MVNPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or 1 ( if the stimulus is an aperture ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf_noposition_x0"},{"location":"reference/math/ellipse_on_mvnpdf_noposition_x0.m/#ellipse_on_mvnpdf_noposition_x0","text":"ELLIPSE_ON_MVNPDF_NOPOSITION_X0 - Calcluate 'response' of an ellipse on multivariate normal with fixed position Y = ELLIPSE_ON_MVNPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters minus position ( only covariance matrix position c11 / c22 ( must be same ) and an amplitude ) SIGMA = [ X0 ( 1 ); 0 ; 0 XO ( 1 )] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 2 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) Optionally , a sixth row can be 0 ( if the stimulus is an ellipse ) or 1 ( if the stimulus is an aperture ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf_noposition_x0"},{"location":"reference/math/ellipse_on_mvnpdf_x0.m/","text":"ellipse_on_mvnpdf_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = ELLIPSE_ON_MVNPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf_x0"},{"location":"reference/math/ellipse_on_mvnpdf_x0.m/#ellipse_on_mvnpdf_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = ELLIPSE_ON_MVNPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"ellipse_on_mvnpdf_x0"},{"location":"reference/math/ellipse_on_mvnskewpdf.m/","text":"ellipse_on_mvnskewpdf \u00b6 ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on skewed multivariate normal Y = ELLIPSE_ON_MVNPDF ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA , ALPHA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) ALPHA - 1 x2 , the skewness parameter ( see MVNSKEWPDF ) Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNSKEWPDF","title":"ellipse_on_mvnskewpdf"},{"location":"reference/math/ellipse_on_mvnskewpdf.m/#ellipse_on_mvnskewpdf","text":"ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on skewed multivariate normal Y = ELLIPSE_ON_MVNPDF ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA , ALPHA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) ALPHA - 1 x2 , the skewness parameter ( see MVNSKEWPDF ) Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNSKEWPDF","title":"ellipse_on_mvnskewpdf"},{"location":"reference/math/ellipse_on_mvnskewpdf_x0.m/","text":"ellipse_on_mvnskewpdf_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = ELLIPSE_ON_MVNSKEWPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf A = X0 ( 6 ) - scale factor ALPHA = X0 ([ 7 8 ]) the skewness factors ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNSKEWPDF","title":"ellipse_on_mvnskewpdf_x0"},{"location":"reference/math/ellipse_on_mvnskewpdf_x0.m/#ellipse_on_mvnskewpdf_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = ELLIPSE_ON_MVNSKEWPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf A = X0 ( 6 ) - scale factor ALPHA = X0 ([ 7 8 ]) the skewness factors ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNSKEWPDF","title":"ellipse_on_mvnskewpdf_x0"},{"location":"reference/math/eucnorm.m/","text":"eucnorm \u00b6 EUCNORM ( X ) d = EUCNORM ( X ) Returns the Euclidean norm for each column in X .","title":"eucnorm"},{"location":"reference/math/eucnorm.m/#eucnorm","text":"EUCNORM ( X ) d = EUCNORM ( X ) Returns the Euclidean norm for each column in X .","title":"eucnorm"},{"location":"reference/math/floorfloor.m/","text":"floorfloor \u00b6 FLOORFLOOR Rounds (i,i+1] to i B = FLOORFLOOR(X)","title":"floorfloor"},{"location":"reference/math/floorfloor.m/#floorfloor","text":"FLOORFLOOR Rounds (i,i+1] to i B = FLOORFLOOR(X)","title":"floorfloor"},{"location":"reference/math/fouriercoeffs.m/","text":"fouriercoeffs \u00b6 FOURIERCOEFFS - find Fourier coefficients for data Uses FFT to compute the Fourier coefficients for a vector of data . [ FC , FREQS ] = FOURIERCOEFFS ( DATA , SI ) where DATA is a vector of data and SI is the sampling interval ( in seconds ), returns FC the Fourier coefficients and FREQS , the frequency of each coefficient . The Fourier coefficients are defined [ 1 ] to be : B0 = ( 1 / T ) * sum ( data ) ( returned in FC ( 1 )) Bn = ( 2 / T ) * integral ( 0 , T , data .* cos ( 2 * pi * n / T )) ( returned in real ( FC ( n + 1 ))) An = ( 2 / T ) * integral ( 0 , T , data .* sin ( 2 * pi * n / T )) ( returned in imag ( FC ( n + 1 ))) Each entry of FC is the sum of Bn + An * sqrt ( -1 ) so that Bn = real ( FC ( n + 1 )) and An = imag ( FC ( n + 1 )) Note that these Fourier cofficients are normalized differently than those returned by the Matlab function FFT . [ 1 ] : _Waves_ , Berkeley Physics Course Volume 3 , Crawford , 1968 See also : FFT Example : t = 0 : 0 . 001 : 3 ; f = 4 ; % 4 Hz phase = pi / 3 ; s = 2 + 0 . 5 * sin ( 2 * pi * f * t + phase ); % sinusoidal function with amplitude 0 . 5 [ fc , freqs ] = fouriercoeffs ( s , 0 . 001 ); figure ; subplot ( 2 , 1 , 1 ); plot ( t , s ); xlabel ( 'Time(s)' ); ylabel ( 'Signal(a.u.)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( freqs , abs ( fc ), 'o' ); A = axis ; axis ( [ 0 10 0 3 ] ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Magnitude of Fourier coefficient' ); box off ;","title":"fouriercoeffs"},{"location":"reference/math/fouriercoeffs.m/#fouriercoeffs","text":"FOURIERCOEFFS - find Fourier coefficients for data Uses FFT to compute the Fourier coefficients for a vector of data . [ FC , FREQS ] = FOURIERCOEFFS ( DATA , SI ) where DATA is a vector of data and SI is the sampling interval ( in seconds ), returns FC the Fourier coefficients and FREQS , the frequency of each coefficient . The Fourier coefficients are defined [ 1 ] to be : B0 = ( 1 / T ) * sum ( data ) ( returned in FC ( 1 )) Bn = ( 2 / T ) * integral ( 0 , T , data .* cos ( 2 * pi * n / T )) ( returned in real ( FC ( n + 1 ))) An = ( 2 / T ) * integral ( 0 , T , data .* sin ( 2 * pi * n / T )) ( returned in imag ( FC ( n + 1 ))) Each entry of FC is the sum of Bn + An * sqrt ( -1 ) so that Bn = real ( FC ( n + 1 )) and An = imag ( FC ( n + 1 )) Note that these Fourier cofficients are normalized differently than those returned by the Matlab function FFT . [ 1 ] : _Waves_ , Berkeley Physics Course Volume 3 , Crawford , 1968 See also : FFT Example : t = 0 : 0 . 001 : 3 ; f = 4 ; % 4 Hz phase = pi / 3 ; s = 2 + 0 . 5 * sin ( 2 * pi * f * t + phase ); % sinusoidal function with amplitude 0 . 5 [ fc , freqs ] = fouriercoeffs ( s , 0 . 001 ); figure ; subplot ( 2 , 1 , 1 ); plot ( t , s ); xlabel ( 'Time(s)' ); ylabel ( 'Signal(a.u.)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( freqs , abs ( fc ), 'o' ); A = axis ; axis ( [ 0 10 0 3 ] ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Magnitude of Fourier coefficient' ); box off ;","title":"fouriercoeffs"},{"location":"reference/math/fouriercoeffs_2d.m/","text":"fouriercoeffs_2d \u00b6 FOURIERCOEFFS_2D - calculate Fourier coeffients for 2 - d fourier analysis [ Y , FX , FY , R , FR ] = FOURIERCOEFFS_2D ( X , PIXELSIZE ) Given a 2 - dimensional signal X ( such as an image ) and the pixel size in meters ( PIXELSIZE ), then the following are computed : Y = shifted discrete 2 d fourier transform of X ( shifted with fftshift ) These coefficients are normalized so that a * exp ( - sqrt ( - 1 ) * 2 * pi * n / T )) has coefficient of a This differs from the default normalization ( none ) of the discrete 2 d fourier transform FX - the frequencies examined in the first dimension ( shifted ) FY - the frequencies examined in the second dimension ( shifted ) R - the Fourier cofficients at fixed radii FR - the Fourier frequencies at fixed radii A progress bar is shown during radial averaging . Example : % a grating X_1 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter X_2 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter f1 = 3 ; % 3 cycles per meter f2 = 10 ; % 10 cycles per meter f3 = 5 ; % 5 cycles per meter [ X1 , X2 ] = meshgrid ( X_1 , X_2 ); X = 1 + 0.5 * sin ( 2 * pi * f1 * X1 ); imagedisplay ( X ); X_ = 1 + 0.5 * sin ( 2 * pi * f2 * X2 + 2 * pi * f3 * X1 ) + X ; imagedisplay ( X_ ); [ Y , FX , FY , R , FR ] = fouriercoeffs_2d ( X , 0.001 ); [ Y_ , FX_ , FY_ , R_ , FR_ ] = fouriercoeffs_2d ( X_ , 0.001 ); figure ; plot ( FR , abs ( R ), 'mo' ); % average spatial frequency tuning across all directions hold on ; plot ( FR_ , abs ( R_ ), 'bo' ); % average spatial frequency tuning across all directions xlabel ( 'Spatial frequency (cycles/unit)' ); ylabel ( 'Magnitude' );","title":"fouriercoeffs_2d"},{"location":"reference/math/fouriercoeffs_2d.m/#fouriercoeffs_2d","text":"FOURIERCOEFFS_2D - calculate Fourier coeffients for 2 - d fourier analysis [ Y , FX , FY , R , FR ] = FOURIERCOEFFS_2D ( X , PIXELSIZE ) Given a 2 - dimensional signal X ( such as an image ) and the pixel size in meters ( PIXELSIZE ), then the following are computed : Y = shifted discrete 2 d fourier transform of X ( shifted with fftshift ) These coefficients are normalized so that a * exp ( - sqrt ( - 1 ) * 2 * pi * n / T )) has coefficient of a This differs from the default normalization ( none ) of the discrete 2 d fourier transform FX - the frequencies examined in the first dimension ( shifted ) FY - the frequencies examined in the second dimension ( shifted ) R - the Fourier cofficients at fixed radii FR - the Fourier frequencies at fixed radii A progress bar is shown during radial averaging . Example : % a grating X_1 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter X_2 = 0 : 0.001 : 1 ; % 1 mm steps to 1 meter f1 = 3 ; % 3 cycles per meter f2 = 10 ; % 10 cycles per meter f3 = 5 ; % 5 cycles per meter [ X1 , X2 ] = meshgrid ( X_1 , X_2 ); X = 1 + 0.5 * sin ( 2 * pi * f1 * X1 ); imagedisplay ( X ); X_ = 1 + 0.5 * sin ( 2 * pi * f2 * X2 + 2 * pi * f3 * X1 ) + X ; imagedisplay ( X_ ); [ Y , FX , FY , R , FR ] = fouriercoeffs_2d ( X , 0.001 ); [ Y_ , FX_ , FY_ , R_ , FR_ ] = fouriercoeffs_2d ( X_ , 0.001 ); figure ; plot ( FR , abs ( R ), 'mo' ); % average spatial frequency tuning across all directions hold on ; plot ( FR_ , abs ( R_ ), 'bo' ); % average spatial frequency tuning across all directions xlabel ( 'Spatial frequency (cycles/unit)' ); ylabel ( 'Magnitude' );","title":"fouriercoeffs_2d"},{"location":"reference/math/fouriercoeffs_tf.m/","text":"fouriercoeffs_tf \u00b6 FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . Only the data within an integer number of periods are considered . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"fouriercoeffs_tf"},{"location":"reference/math/fouriercoeffs_tf.m/#fouriercoeffs_tf","text":"FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . Only the data within an integer number of periods are considered . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"fouriercoeffs_tf"},{"location":"reference/math/fouriercoeffs_tf2.m/","text":"fouriercoeffs_tf2 \u00b6 FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"fouriercoeffs_tf2"},{"location":"reference/math/fouriercoeffs_tf2.m/#fouriercoeffs_tf2","text":"FOURIERCOEFFS_TF Fourier Transform at a particular frequency . ft ( response , tf , SAMPLERATE ) is the product of response with exp ( 2 * pi * i * tf / SAMPLERATE ) . If tf is zero it returns the mean . If response is two - dimensional , ft operates on the columns and returns a row vector . tf is expressed in whatever units SAMPLERATE is expressed in ( I usually use Hz ) . From Sooyoung Chung , from Matteo Carandini , modified slightly by Steve Van Hooser","title":"fouriercoeffs_tf2"},{"location":"reference/math/fouriercoeffs_tf_spikes.m/","text":"fouriercoeffs_tf_spikes \u00b6 FOURIERCOEFFS_TF_SPIKES Fourier Transform of a spike train at a particular frequency . F = FOURIERCOEFFS_TF_SPIKES ( SPIKETIMES , TF , DURATION ) This function returns the normalized fourier coefficient of a spike train that is defined by an array of SPIKETIMES with a duration DURATION . The function calculates ( 2 / DURATION ) * exp ( - 2 * pi * sqrt ( - 1 ) * tf ) . If tf is zero it returns the number of spikes times divided by the duration . Modified from Sooyoung Chung , from Matteo Carandini , by Steve Van Hooser","title":"fouriercoeffs_tf_spikes"},{"location":"reference/math/fouriercoeffs_tf_spikes.m/#fouriercoeffs_tf_spikes","text":"FOURIERCOEFFS_TF_SPIKES Fourier Transform of a spike train at a particular frequency . F = FOURIERCOEFFS_TF_SPIKES ( SPIKETIMES , TF , DURATION ) This function returns the normalized fourier coefficient of a spike train that is defined by an array of SPIKETIMES with a duration DURATION . The function calculates ( 2 / DURATION ) * exp ( - 2 * pi * sqrt ( - 1 ) * tf ) . If tf is zero it returns the number of spikes times divided by the duration . Modified from Sooyoung Chung , from Matteo Carandini , by Steve Van Hooser","title":"fouriercoeffs_tf_spikes"},{"location":"reference/math/gauss2d_ellipse.m/","text":"gauss2d_ellipse \u00b6 GAUSS2D_ELLIPSE Compute a fullwidth at half - weight ellipse from a 2 d gaussian ELLIPSE_OUT = GAUSS2D_ELLIPSE ( MU , C , [ N ] ) Given a 2 - d multivariate normal that is described with a mean MU and covariance matrix C , return the size of the major and minor axes at half - height and points for an ellipse that circles the mean at the location of the half - height contour . The equation of the half max ellipse is : ( x - mu ( 1 )) ^ 2 / a ^ 2 + ( y - mu ( 2 )) ^ 2 ) / b ^ 2 == 1 N is an optional argument ( default 10 ) that determines the number of points to include in each branch of the ellipse graph . ( The total number of points will be 2 * N .) The structure ELLIPSE_OUT contains the parameters of the ellipse : Fieldname | Description ----------------------------------------------------------------- plot_ellipse | Ellipse plot points ( 2 by 2 * N ); the first | row are the X points , the second rows are | the Y points a | The value of a in the ellipse equation b | The value of b in the ellipse equation major | max ( a , b ) - the major axis minor | min ( a , b ) - the minor axis w / contribution by Shen Wang","title":"gauss2d_ellipse"},{"location":"reference/math/gauss2d_ellipse.m/#gauss2d_ellipse","text":"GAUSS2D_ELLIPSE Compute a fullwidth at half - weight ellipse from a 2 d gaussian ELLIPSE_OUT = GAUSS2D_ELLIPSE ( MU , C , [ N ] ) Given a 2 - d multivariate normal that is described with a mean MU and covariance matrix C , return the size of the major and minor axes at half - height and points for an ellipse that circles the mean at the location of the half - height contour . The equation of the half max ellipse is : ( x - mu ( 1 )) ^ 2 / a ^ 2 + ( y - mu ( 2 )) ^ 2 ) / b ^ 2 == 1 N is an optional argument ( default 10 ) that determines the number of points to include in each branch of the ellipse graph . ( The total number of points will be 2 * N .) The structure ELLIPSE_OUT contains the parameters of the ellipse : Fieldname | Description ----------------------------------------------------------------- plot_ellipse | Ellipse plot points ( 2 by 2 * N ); the first | row are the X points , the second rows are | the Y points a | The value of a in the ellipse equation b | The value of b in the ellipse equation major | max ( a , b ) - the major axis minor | min ( a , b ) - the minor axis w / contribution by Shen Wang","title":"gauss2d_ellipse"},{"location":"reference/math/generate_random_data.m/","text":"generate_random_data \u00b6 GENERATE_RANDOM_DATA Produce data from different distributions DATA = GENERATE_RANDOM_DATA ( N , DIST , PARAM1 , PARAM2 , ...) Generates data from different distributions . Inputs : N - the number of data points to produce . DIST - the distribution string ; see HELP ICDF Examples : 'Normal' , 'Uniform' PARAM1 - The first parameter of the distribution PARAM2 - The second parameter of the distribution ( see HELP ICDF ) Outputs : DATA - N data points from the distribution .","title":"generate_random_data"},{"location":"reference/math/generate_random_data.m/#generate_random_data","text":"GENERATE_RANDOM_DATA Produce data from different distributions DATA = GENERATE_RANDOM_DATA ( N , DIST , PARAM1 , PARAM2 , ...) Generates data from different distributions . Inputs : N - the number of data points to produce . DIST - the distribution string ; see HELP ICDF Examples : 'Normal' , 'Uniform' PARAM1 - The first parameter of the distribution PARAM2 - The second parameter of the distribution ( see HELP ICDF ) Outputs : DATA - N data points from the distribution .","title":"generate_random_data"},{"location":"reference/math/inside.m/","text":"inside \u00b6 INSIDE Points inside a polygonal region in the plane . k = inside ( z , w ) is a vector of indices . The points z ( k ) are strictly inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) Developer note: This is an old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"inside"},{"location":"reference/math/inside.m/#inside","text":"INSIDE Points inside a polygonal region in the plane . k = inside ( z , w ) is a vector of indices . The points z ( k ) are strictly inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) Developer note: This is an old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"inside"},{"location":"reference/math/insideorborder.m/","text":"insideorborder \u00b6 INSIDE Points inside a polygonal region in the plane . k = inside ( z , w , eps ) is a vector of indices . The points z ( k ) are strictly inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) On border adaptation includes points on the border , within eps . Copyright ( c ) 1984 - 98 by The MathWorks , Inc . Developer note: This is a modified old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"insideorborder"},{"location":"reference/math/insideorborder.m/#insideorborder","text":"INSIDE Points inside a polygonal region in the plane . k = inside ( z , w , eps ) is a vector of indices . The points z ( k ) are strictly inside the region defined by w . Here , z is a complex vector of points in the plane , and w is a complex vector of points definining the vertices of a polygonal region in the plane . The region should be \"starlike\" wth respect to the \"center\" , i . e . any ray eminating from mean ( w ) should intersect the boundary only once . Convex regions satisfy this requirement . For example , the vertices of the unit square are w = [ 0 1 1 + i i ] and k = inside ( z , w ) is the same as k = find (( real ( z ) > 0 ) & ( real ( z ) < 1 ) & ( imag ( z ) > 0 ) & ( imag ( z ) < 1 )) On border adaptation includes points on the border , within eps . Copyright ( c ) 1984 - 98 by The MathWorks , Inc . Developer note: This is a modified old Matlab function that has been replaced by INPOLYGON . Here for backwards compatibility","title":"insideorborder"},{"location":"reference/math/interval2continuous.m/","text":"interval2continuous \u00b6 INTERVAL2CONTINUOUS - transform a discrete interval to continuous time at timesteps [DATA,T] = interval2continuous(TIMESTAMPS,DATAPOINTS,TRES) Transforms a discrete interval function to continuous time. The function is expressed as a set of TIMESTAMPS and values (DATAPOINTS), where the function takes the value DATAPOINT(i) from TIMESTAMP(i) to TIMESTAMP(i+1). Thus, length(TIMESTAMPS)=length(DATAPOINT)+1. The data are sampled continuously with sample difference TRES. The data and sample times are returned in DATA and T, respectively. Note: The function STEPFUNC does the same thing and is easier to understand. See also: STEPFUNC","title":"interval2continuous"},{"location":"reference/math/interval2continuous.m/#interval2continuous","text":"INTERVAL2CONTINUOUS - transform a discrete interval to continuous time at timesteps [DATA,T] = interval2continuous(TIMESTAMPS,DATAPOINTS,TRES) Transforms a discrete interval function to continuous time. The function is expressed as a set of TIMESTAMPS and values (DATAPOINTS), where the function takes the value DATAPOINT(i) from TIMESTAMP(i) to TIMESTAMP(i+1). Thus, length(TIMESTAMPS)=length(DATAPOINT)+1. The data are sampled continuously with sample difference TRES. The data and sample times are returned in DATA and T, respectively. Note: The function STEPFUNC does the same thing and is easier to understand. See also: STEPFUNC","title":"interval2continuous"},{"location":"reference/math/interval_add.m/","text":"interval_add \u00b6 INTERVAL_ADD - add intervals I_OUT = INTERVAL_ADD ( I_IN , I_ADD ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that includes the interval I_ADD = [ S0 S1 ]. I_IN can be empty . Examples : i_out = interval_add ([ 0 3 ],[ 3 6 ]) % yields [ 0 6 ] i_out = interval_add ([ 0 2 ],[ 3 4 ]) % yields [ 0 2 ; 3 4 ] i_out = interval_add ([ 0 10 ],[ 0 2 ]) % yields [ 0 10 ]","title":"interval_add"},{"location":"reference/math/interval_add.m/#interval_add","text":"INTERVAL_ADD - add intervals I_OUT = INTERVAL_ADD ( I_IN , I_ADD ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that includes the interval I_ADD = [ S0 S1 ]. I_IN can be empty . Examples : i_out = interval_add ([ 0 3 ],[ 3 6 ]) % yields [ 0 6 ] i_out = interval_add ([ 0 2 ],[ 3 4 ]) % yields [ 0 2 ; 3 4 ] i_out = interval_add ([ 0 10 ],[ 0 2 ]) % yields [ 0 10 ]","title":"interval_add"},{"location":"reference/math/interval_notation.m/","text":"interval_notation \u00b6 INTERVAL_NOTATION - Description of interval notation in mathematics Interval notation is a means of expressing an interval as a pair of numbers . The numbers indicate the endpoints of the interval . Parentheses and / or brackets are used to show whether the endpoints are excluded in the interval , or are included . ( N , M ] is the interval from N to M , excluding N and including M ( N , M ) is the interval from N to M , excluding N and M [ N , M ] is the interval from N to M , including N and M Note that this is a mathematical notation ( described for documentation purposes ) , and does not have meaning in Matlab code . ( That is , brackets and parentheses have different meanings in Matlab code . )","title":"interval_notation"},{"location":"reference/math/interval_notation.m/#interval_notation","text":"INTERVAL_NOTATION - Description of interval notation in mathematics Interval notation is a means of expressing an interval as a pair of numbers . The numbers indicate the endpoints of the interval . Parentheses and / or brackets are used to show whether the endpoints are excluded in the interval , or are included . ( N , M ] is the interval from N to M , excluding N and including M ( N , M ) is the interval from N to M , excluding N and M [ N , M ] is the interval from N to M , including N and M Note that this is a mathematical notation ( described for documentation purposes ) , and does not have meaning in Matlab code . ( That is , brackets and parentheses have different meanings in Matlab code . )","title":"interval_notation"},{"location":"reference/math/interval_subtract.m/","text":"interval_subtract \u00b6 INTERVAL_SUBTRACT - remove an interval from a larger interval I_OUT = INTERVAL_SUBTRACT ( I_IN , I_SUB ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that excludes the interval I_SUB = [ S0 S1 ]. Examples : i_out = interval_subtract ([ 0 10 ],[ 1 2 ]) % yields [ 0 1 ; 2 10 ] i_out = interval_subtract ([ 0 10 ],[ 0 2 ]) % yields [ 2 10 ]","title":"interval_subtract"},{"location":"reference/math/interval_subtract.m/#interval_subtract","text":"INTERVAL_SUBTRACT - remove an interval from a larger interval I_OUT = INTERVAL_SUBTRACT ( I_IN , I_SUB ) Given a matrix of intervals I_IN = [ T1_0 T1_1 ; T2_0 T2_1 ; ... ] where T is increasing ( that is , where T ( i ) _0 > T ( i -1 ) _0 and Ti_0 < Ti_1 for all i ), produce another matrix of intervals I_OUT that excludes the interval I_SUB = [ S0 S1 ]. Examples : i_out = interval_subtract ([ 0 10 ],[ 1 2 ]) % yields [ 0 1 ; 2 10 ] i_out = interval_subtract ([ 0 10 ],[ 0 2 ]) % yields [ 2 10 ]","title":"interval_subtract"},{"location":"reference/math/intnchoosek.m/","text":"intnchoosek \u00b6 INTNCHOOSEK n choose k , 0 for non - integer , negative values INTNCHOOSEK ( N , K ) calls NCHOOSEK ( N , K ) , but defines the result to be zero when N and K are not positive integers with N >= K . This is different from matlab 's normal behavior of producing an error or returning an empty matrix.","title":"intnchoosek"},{"location":"reference/math/intnchoosek.m/#intnchoosek","text":"INTNCHOOSEK n choose k , 0 for non - integer , negative values INTNCHOOSEK ( N , K ) calls NCHOOSEK ( N , K ) , but defines the result to be zero when N and K are not positive integers with N >= K . This is different from matlab 's normal behavior of producing an error or returning an empty matrix.","title":"intnchoosek"},{"location":"reference/math/linearize_complex_discrete.m/","text":"linearize_complex_discrete \u00b6 LINEARIZE_COMPLEX_DISCRETE - create a linear plot by concatenating discrete complex elements [ Y , INDEXES , SET ] = LINEARIZE_COMPLEX_DISCRETE ( X , ... ) Given an array X of complex - valued elements that correspond to discrete sets of real , imaginary pairs , this function creates a linearized array Y where the real values are repeated in a linear fashion with gap GAP . INDEXES indicate which entry in X corresponds to each entry in Y . SET indicates which set of the imaginary values each point is associated with ( where the imaginary values are sorted from least ( first set ) to greatest ( nth set )). If there is a real , imaginary pair value that is missing , then NaN will be filled in Y and INDEXES . This function can be modified by passing parameters as name / value pairs : Parameter ( default value ) | Description ----------------------------------------------------------------------- GAP ( 1 ) | The gap between successive steps of the imaginary values EPSILON ( 1e-10 ) | How close values must be in order to be considered the \"same\" See also : REAL , IMAG , NAMEVALUEPAIR Example : X = [ [ 1 2 3 ] [ 1 2 3 ] + sqrt ( - 1 ) [ 1 2 3 ] + 2 * sqrt ( - 1 ) ] [ Y , IND ] = linearize_complex_discrete ( X , 1 ) % Y = [ [1 2 3] [4 5 6] [7 8 9] ]', % IND = [ [1 2 3] [4 5 6] [7 8 9] ]', % SET = [ [1 1 1] [2 2 2] [3 3 3] ]'","title":"linearize_complex_discrete"},{"location":"reference/math/linearize_complex_discrete.m/#linearize_complex_discrete","text":"LINEARIZE_COMPLEX_DISCRETE - create a linear plot by concatenating discrete complex elements [ Y , INDEXES , SET ] = LINEARIZE_COMPLEX_DISCRETE ( X , ... ) Given an array X of complex - valued elements that correspond to discrete sets of real , imaginary pairs , this function creates a linearized array Y where the real values are repeated in a linear fashion with gap GAP . INDEXES indicate which entry in X corresponds to each entry in Y . SET indicates which set of the imaginary values each point is associated with ( where the imaginary values are sorted from least ( first set ) to greatest ( nth set )). If there is a real , imaginary pair value that is missing , then NaN will be filled in Y and INDEXES . This function can be modified by passing parameters as name / value pairs : Parameter ( default value ) | Description ----------------------------------------------------------------------- GAP ( 1 ) | The gap between successive steps of the imaginary values EPSILON ( 1e-10 ) | How close values must be in order to be considered the \"same\" See also : REAL , IMAG , NAMEVALUEPAIR Example : X = [ [ 1 2 3 ] [ 1 2 3 ] + sqrt ( - 1 ) [ 1 2 3 ] + 2 * sqrt ( - 1 ) ] [ Y , IND ] = linearize_complex_discrete ( X , 1 ) % Y = [ [1 2 3] [4 5 6] [7 8 9] ]', % IND = [ [1 2 3] [4 5 6] [7 8 9] ]', % SET = [ [1 1 1] [2 2 2] [3 3 3] ]'","title":"linearize_complex_discrete"},{"location":"reference/math/local_max.m/","text":"local_max \u00b6 k = local_max ( x ) finds location of local maxima Copyright ( c ) 1988 - 1999 The MathWorks , Inc . All Rights Reserved . $ Revision : 1.3 $","title":"local_max"},{"location":"reference/math/local_max.m/#local_max","text":"k = local_max ( x ) finds location of local maxima Copyright ( c ) 1988 - 1999 The MathWorks , Inc . All Rights Reserved . $ Revision : 1.3 $","title":"local_max"},{"location":"reference/math/magsqrt.m/","text":"magsqrt \u00b6 MAGSQRT - Magnitude square root MSR = MAGSQRT ( A ) returns the magnitude of the square root that is sign appropriate . If A ( i ) is negative , then - sqrt ( - A ( i )) is returned . Otherwise , sqrt ( A ( i )) is returned .","title":"magsqrt"},{"location":"reference/math/magsqrt.m/#magsqrt","text":"MAGSQRT - Magnitude square root MSR = MAGSQRT ( A ) returns the magnitude of the square root that is sign appropriate . If A ( i ) is negative , then - sqrt ( - A ( i )) is returned . Otherwise , sqrt ( A ( i )) is returned .","title":"magsqrt"},{"location":"reference/math/meshgridarea.m/","text":"meshgridarea \u00b6 AREA = MESHGRIDAREA - Compute the area of each element of a meshgrid AREA = MESHGRIDAREA ( XMESH , YMESH ) Computes the area for a mesh grid with points XMESH YMESH . This function assumes that the 'area' for each MESH pixel i , j is equal to ( XMESH ( i ) - XMESH ( i - 1 )) * ( YMESH ( j ) - YMESH ( j - 1 )) and that the area of the first row and column are equal to the second row and column , respectively .","title":"meshgridarea"},{"location":"reference/math/meshgridarea.m/#meshgridarea","text":"AREA = MESHGRIDAREA - Compute the area of each element of a meshgrid AREA = MESHGRIDAREA ( XMESH , YMESH ) Computes the area for a mesh grid with points XMESH YMESH . This function assumes that the 'area' for each MESH pixel i , j is equal to ( XMESH ( i ) - XMESH ( i - 1 )) * ( YMESH ( j ) - YMESH ( j - 1 )) and that the area of the first row and column are equal to the second row and column , respectively .","title":"meshgridarea"},{"location":"reference/math/mod_ellipse_on_mvnpdf.m/","text":"mod_ellipse_on_mvnpdf \u00b6 MOD_ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on multivariate normal , modulated by surround region Y = MOD_ELLIPSE_ON_MVNPDF ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) MOD_AMP - the amplitude by which the response in the \"surround\" modulates the center \" MOD_SIGMA - the multiplier to SIGMA that defines the \"surround\" region ; the region and intensity that corresponds to the surround is the rectified difference between a mvn distribution with mean MU and covariance SIGMA * MOD_SIGMA and a mvn distribution with mean MU and covariance SIGMA ( so only the surround is positive and contributes ) . Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"mod_ellipse_on_mvnpdf"},{"location":"reference/math/mod_ellipse_on_mvnpdf.m/#mod_ellipse_on_mvnpdf","text":"MOD_ELLIPSE_ON_MVNPDF - Calcluate 'response' of an ellipse on multivariate normal , modulated by surround region Y = MOD_ELLIPSE_ON_MVNPDF ( XMESH , YMESH , ELLIPSE_PARAMS , MU , SIGMA ) Computes the overlap of an ellipse on a multivariate normal distribution . Inputs : XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) MU - The mean for the multivariate normal pdf ; can be a column vector or row vector ( see MVNPDF ) SIGMA - the covariance matrix for the multivariate normal pdf ( must be 2 x2 , see MVNPDF ) MOD_AMP - the amplitude by which the response in the \"surround\" modulates the center \" MOD_SIGMA - the multiplier to SIGMA that defines the \"surround\" region ; the region and intensity that corresponds to the surround is the rectified difference between a mvn distribution with mean MU and covariance SIGMA * MOD_SIGMA and a mvn distribution with mean MU and covariance SIGMA ( so only the surround is positive and contributes ) . Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"mod_ellipse_on_mvnpdf"},{"location":"reference/math/mod_ellipse_on_mvnpdf_x0.m/","text":"mod_ellipse_on_mvnpdf_x0 \u00b6 ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = ELLIPSE_ON_MVNPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor MOD_AMP = X0 ( 7 ) - scale factor for modulating surround MOD_SIGMA = X0 ( 8 ) - scale factor for SIGMA to determine surround ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"mod_ellipse_on_mvnpdf_x0"},{"location":"reference/math/mod_ellipse_on_mvnpdf_x0.m/#mod_ellipse_on_mvnpdf_x0","text":"ELLIPSE_ON_MVNPDF_X0 - Calcluate 'response' of an ellipse on multivariate normal Y = ELLIPSE_ON_MVNPDF_X0 ( X , ELLIPSE_PARAMS , XMESH , YMESH ) Computes the overlap of an ellipse on a multivariate normal distribution . This form facilitates passing to LSQCURVEFIT because the parameters MU and SIGMA are all passed in a vector , X0 Inputs : X0 - A vector with the multivariate normal parameters MU = [ X0 ( 1 ) X0 ( 2 )] : The mean for the multivariate normal pdf SIGMA = [ X0 ([ 3 4 ]); XO ([ 4 5 ])] - the covariance matrix for the multivariate normal pdf ALPHA = X0 ( 6 ) - scale factor MOD_AMP = X0 ( 7 ) - scale factor for modulating surround MOD_SIGMA = X0 ( 8 ) - scale factor for SIGMA to determine surround ELLIPSE_PARAMS = a list of column vectors ; each column describes 1 ellipse the first row has the X_Ctr position , the second row has the Y_Ctr position , the third row has the X axis vertex , the fourth row has the Y axis vertex , and the fifth row has the rotation ( in radians ) XMESH = The X coordinates over which to calculate the response YMESH = The Y coordinates over which to calculate the response Outputs : Y - The response , in a column vector , for each ellipse See also : INSIDE_ELLIPSE , MVNPDF","title":"mod_ellipse_on_mvnpdf_x0"},{"location":"reference/math/mvnskewpdf.m/","text":"mvnskewpdf \u00b6 MVNSKEWPDF - Multivariate normal skewed probability density function ( pdf ) Y = MVNSKEWPDF ( X , MU , SIGMA , ALPHA ) returns the probability density of the multivariate normal distribution with mean MU , covariance SIGMA , and skewness ALPHA , evaluated at each row of X . Rows of the N - by - D matrix X correspond to observations ( or points ), and columns correspond to variables or coordinate . Y is an N by 1 vector . The multivariate skewed distribution is defined as in Azzalini and Dalla Valle ( 1996 ): For each value of x : MVNSKEWPDF ( X , MU , SIGMA , ALPHA ) = 2 * MVNPDF ( X , MU , SIGMA ) * NORMCDF ( ALPHA '*(X-MU))","title":"mvnskewpdf"},{"location":"reference/math/mvnskewpdf.m/#mvnskewpdf","text":"MVNSKEWPDF - Multivariate normal skewed probability density function ( pdf ) Y = MVNSKEWPDF ( X , MU , SIGMA , ALPHA ) returns the probability density of the multivariate normal distribution with mean MU , covariance SIGMA , and skewness ALPHA , evaluated at each row of X . Rows of the N - by - D matrix X correspond to observations ( or points ), and columns correspond to variables or coordinate . Y is an N by 1 vector . The multivariate skewed distribution is defined as in Azzalini and Dalla Valle ( 1996 ): For each value of x : MVNSKEWPDF ( X , MU , SIGMA , ALPHA ) = 2 * MVNPDF ( X , MU , SIGMA ) * NORMCDF ( ALPHA '*(X-MU))","title":"mvnskewpdf"},{"location":"reference/math/normalizebounds.m/","text":"normalizebounds \u00b6 NORMALIZEBOUNDS - Normalize data to lower, upper bound X = NORMALIZEBOUNDS(DATA, LOWERBOUND, UPPERBOUND) Normalizes the data as follows X = (DATA-LOWERBOUND)/(UPPERBOUND-LOWERBOUND) So points between LOWERBOUND and UPPERBOUND are projected onto the interval [0..1] with points equal to LOWERBOUND set to 0 and points set to UPPERBOUND equal to 1. Note that it is possible to have points out of bounds.","title":"normalizebounds"},{"location":"reference/math/normalizebounds.m/#normalizebounds","text":"NORMALIZEBOUNDS - Normalize data to lower, upper bound X = NORMALIZEBOUNDS(DATA, LOWERBOUND, UPPERBOUND) Normalizes the data as follows X = (DATA-LOWERBOUND)/(UPPERBOUND-LOWERBOUND) So points between LOWERBOUND and UPPERBOUND are projected onto the interval [0..1] with points equal to LOWERBOUND set to 0 and points set to UPPERBOUND equal to 1. Note that it is possible to have points out of bounds.","title":"normalizebounds"},{"location":"reference/math/oriented_grid.m/","text":"oriented_grid \u00b6 ORIENTED_GRID Create an oriented sinwave on a grid ORI = ORIENTED_GRID(XSIZE, YSIZE, SPATIALPHASE, ORIENTATION, SPATIALFREQ) This will create an oriented sinwave grating pattern on a grid of size XSIZE x YSIZE with the given spatial phase SPATIALPHASE and orientation ORIENTATION (in degrees) with spatial frequency SPATIALFREQ.","title":"oriented_grid"},{"location":"reference/math/oriented_grid.m/#oriented_grid","text":"ORIENTED_GRID Create an oriented sinwave on a grid ORI = ORIENTED_GRID(XSIZE, YSIZE, SPATIALPHASE, ORIENTATION, SPATIALFREQ) This will create an oriented sinwave grating pattern on a grid of size XSIZE x YSIZE with the given spatial phase SPATIALPHASE and orientation ORIENTATION (in degrees) with spatial frequency SPATIALFREQ.","title":"oriented_grid"},{"location":"reference/math/phase_advance.m/","text":"phase_advance \u00b6 PHASE_ADVANCE - Computes phase advance from a list of angles ADV = PHASE_ADVANCE(ANGLES) Computes the advance in phase from each angle, assuming an angle does not advance more than pi.","title":"phase_advance"},{"location":"reference/math/phase_advance.m/#phase_advance","text":"PHASE_ADVANCE - Computes phase advance from a list of angles ADV = PHASE_ADVANCE(ANGLES) Computes the advance in phase from each angle, assuming an angle does not advance more than pi.","title":"phase_advance"},{"location":"reference/math/prctile01.m/","text":"prctile01 \u00b6 PRCTILE20 - 1 st percentile of a data set Y = PRCTILE01 ( X ) Simply returns Y = PRCTILE ( X , 1 ) Useful for passing to FEVAL .","title":"prctile01"},{"location":"reference/math/prctile01.m/#prctile01","text":"PRCTILE20 - 1 st percentile of a data set Y = PRCTILE01 ( X ) Simply returns Y = PRCTILE ( X , 1 ) Useful for passing to FEVAL .","title":"prctile01"},{"location":"reference/math/prctile20.m/","text":"prctile20 \u00b6 PRCTILE20 - 20 th percentile of a data set Y = PRCTILE20 ( X ) Simply returns Y = PRCTILE ( X , 20 ) Useful for passing to FEVAL .","title":"prctile20"},{"location":"reference/math/prctile20.m/#prctile20","text":"PRCTILE20 - 20 th percentile of a data set Y = PRCTILE20 ( X ) Simply returns Y = PRCTILE ( X , 20 ) Useful for passing to FEVAL .","title":"prctile20"},{"location":"reference/math/ptontoline.m/","text":"ptontoline \u00b6 PTONTOLINE - calculate distance of point onto nearest point on line (2D) [XLYL, BS] = PTONTOLINE(XY, M, B) XLYL is the distance in X and Y. BS of offset of the line that joins the point to the specified line M and B. See also: PTS2LINE","title":"ptontoline"},{"location":"reference/math/ptontoline.m/#ptontoline","text":"PTONTOLINE - calculate distance of point onto nearest point on line (2D) [XLYL, BS] = PTONTOLINE(XY, M, B) XLYL is the distance in X and Y. BS of offset of the line that joins the point to the specified line M and B. See also: PTS2LINE","title":"ptontoline"},{"location":"reference/math/ptontovector.m/","text":"ptontovector \u00b6 PTONTOVECTOR - Find distance between point and a vector [ D , CPT ] = PTONTOVECTOR ( OFFSET , VECTOR_DIR , PT ) Calculates the Euclidean distance D between a vector that is specified by the line X = OFFSET + VECTOR_DIR * t for all t and the given PT . The closest point on the line X , CPT , is returned . This function accepts additional arguments in the form of name / value pairs . Parameter ( default ) | Description ---------------------------------------------------------------------- Segment ( 0 ) | Only calculate distance to points within the | segment from offset to offset + vector_dir","title":"ptontovector"},{"location":"reference/math/ptontovector.m/#ptontovector","text":"PTONTOVECTOR - Find distance between point and a vector [ D , CPT ] = PTONTOVECTOR ( OFFSET , VECTOR_DIR , PT ) Calculates the Euclidean distance D between a vector that is specified by the line X = OFFSET + VECTOR_DIR * t for all t and the given PT . The closest point on the line X , CPT , is returned . This function accepts additional arguments in the form of name / value pairs . Parameter ( default ) | Description ---------------------------------------------------------------------- Segment ( 0 ) | Only calculate distance to points within the | segment from offset to offset + vector_dir","title":"ptontovector"},{"location":"reference/math/pts2line.m/","text":"pts2line \u00b6 PTS2LINE - Create a 2D line from 2 points [M,B] = PTS2LINE(X1Y1, X2Y2) Returns slope (M) and offset (B) of a line through 2 2-d points. See also: PTONTOLINE","title":"pts2line"},{"location":"reference/math/pts2line.m/#pts2line","text":"PTS2LINE - Create a 2D line from 2 points [M,B] = PTS2LINE(X1Y1, X2Y2) Returns slope (M) and offset (B) of a line through 2 2-d points. See also: PTONTOLINE","title":"pts2line"},{"location":"reference/math/rad2deg.m/","text":"rad2deg \u00b6 RAD2DEG D = RAD2DEG(R) Converts radians to degrees D = R * 180 / pi;","title":"rad2deg"},{"location":"reference/math/rad2deg.m/#rad2deg","text":"RAD2DEG D = RAD2DEG(R) Converts radians to degrees D = R * 180 / pi;","title":"rad2deg"},{"location":"reference/math/rect2rect.m/","text":"rect2rect \u00b6 RECT2RECT - Convert among rectangle formats , eg [ left bottom width height ] -> [ left top right bottom ] R_OUT = RECT2RECT ( R_IN , DIRECTION ) Converts rectangle R_IN to R_OUT according to format specified in DIRECTION . DIRECTION should be a string 'IN2OUT' , where IN and OUT can be any of : 'ltrb' [ left top right bottom ] 'lbrt' [ left bottom right top ] 'lbwh' [ left bottom width height ] 'ltwh' [ left top width height ] Case is ignored in the DIRECTION command . See also : RESCALE_RECT","title":"rect2rect"},{"location":"reference/math/rect2rect.m/#rect2rect","text":"RECT2RECT - Convert among rectangle formats , eg [ left bottom width height ] -> [ left top right bottom ] R_OUT = RECT2RECT ( R_IN , DIRECTION ) Converts rectangle R_IN to R_OUT according to format specified in DIRECTION . DIRECTION should be a string 'IN2OUT' , where IN and OUT can be any of : 'ltrb' [ left top right bottom ] 'lbrt' [ left bottom right top ] 'lbwh' [ left bottom width height ] 'ltwh' [ left top width height ] Case is ignored in the DIRECTION command . See also : RESCALE_RECT","title":"rect2rect"},{"location":"reference/math/rectify.m/","text":"rectify \u00b6 RECTIFY - Rectify around 0 R = RECTIFY(X) Returns X except where X is less than 0, in which case 0 is returned. One can also use the form: R = RECTIFY(X, RECTVALUE) where points below 0 are given the value RECTVALUE.","title":"rectify"},{"location":"reference/math/rectify.m/#rectify","text":"RECTIFY - Rectify around 0 R = RECTIFY(X) Returns X except where X is less than 0, in which case 0 is returned. One can also use the form: R = RECTIFY(X, RECTVALUE) where points below 0 are given the value RECTVALUE.","title":"rectify"},{"location":"reference/math/refl2d.m/","text":"refl2d \u00b6 REFL2D - 2D reflection matrix R = REFL2D(THETA) Returns R = [cos(2*THETA) sin(2*THETA) ; sin(2*THETA) -cos(2*THETA) ];","title":"refl2d"},{"location":"reference/math/refl2d.m/#refl2d","text":"REFL2D - 2D reflection matrix R = REFL2D(THETA) Returns R = [cos(2*THETA) sin(2*THETA) ; sin(2*THETA) -cos(2*THETA) ];","title":"refl2d"},{"location":"reference/math/rescale.m/","text":"rescale \u00b6 RESCALE - Rescale a quantity to a new interval NEWVALS = RESCALE ( VALS , INT1 , INT2 ) Takes values in an interval INT1 = [ a b ] and scales them so they are now in an interval [ c d ]. Any values less than a are set to c , and any values greater than b are set to d . NEWVALS = RESCALE ( VALS , INT1 , INT2 , ' noclip ' ) will do the same as above but will not clip values above b or below a .","title":"rescale"},{"location":"reference/math/rescale.m/#rescale","text":"RESCALE - Rescale a quantity to a new interval NEWVALS = RESCALE ( VALS , INT1 , INT2 ) Takes values in an interval INT1 = [ a b ] and scales them so they are now in an interval [ c d ]. Any values less than a are set to c , and any values greater than b are set to d . NEWVALS = RESCALE ( VALS , INT1 , INT2 , ' noclip ' ) will do the same as above but will not clip values above b or below a .","title":"rescale"},{"location":"reference/math/rescale_subrect.m/","text":"rescale_subrect \u00b6 RESCALE_SUBRECT - resize a rectangle within a larger rectangle according to a scale and shift [ NEWRECT ] = RESCALE_SUBRECT ( SUBRECT , ORIGINAL_RECT , SCALED_RECT , [ FORMAT ] ) This function rescales a rectangle SUBRECT , whose coordinates are located with respect to ORIGINAL_RECT . The same transformation that would be required to scale and shift ORIGINAL_RECT to SCALED_RECT is applied to SUBRECT , and returned in NEWRECT . FORMAT is an optional argument that specifies the format of the rectangles . FORMAT == 1 ( default ) means [ left top right bottom ] FORMAT == 2 means [ left bottom right top ] FORMAT == 3 means [ left bottom width height ] FORMAT == 4 means [ left top width height ] See also : RESCALE , RECT2RECT","title":"rescale_subrect"},{"location":"reference/math/rescale_subrect.m/#rescale_subrect","text":"RESCALE_SUBRECT - resize a rectangle within a larger rectangle according to a scale and shift [ NEWRECT ] = RESCALE_SUBRECT ( SUBRECT , ORIGINAL_RECT , SCALED_RECT , [ FORMAT ] ) This function rescales a rectangle SUBRECT , whose coordinates are located with respect to ORIGINAL_RECT . The same transformation that would be required to scale and shift ORIGINAL_RECT to SCALED_RECT is applied to SUBRECT , and returned in NEWRECT . FORMAT is an optional argument that specifies the format of the rectangles . FORMAT == 1 ( default ) means [ left top right bottom ] FORMAT == 2 means [ left bottom right top ] FORMAT == 3 means [ left bottom width height ] FORMAT == 4 means [ left top width height ] See also : RESCALE , RECT2RECT","title":"rescale_subrect"},{"location":"reference/math/rot2d.m/","text":"rot2d \u00b6 ROT2D ( THETA ) 2D rotation matrix Returns the 2D rotation matrix : R = [ cos ( theta ) -sin ( theta ) ; sin ( theta ) cos ( theta ) ]","title":"rot2d"},{"location":"reference/math/rot2d.m/#rot2d","text":"ROT2D ( THETA ) 2D rotation matrix Returns the 2D rotation matrix : R = [ cos ( theta ) -sin ( theta ) ; sin ( theta ) cos ( theta ) ]","title":"rot2d"},{"location":"reference/math/rot3d.m/","text":"rot3d \u00b6 ROT3D - Rotation in 3 d space R = ROT3D ( THETA , AXIS ) Performs a 3 d rotation about one of the 3 - dimensional axes . If AXIS == 1 , the rotation is performed about the X axis ( dimension 1 ) . If AXIS == 2 , the rotation is performed about the Y axis ( dimension 2 ) . If AXIS == 3 , the rotation is performed about the Z axis ( dimension 3 ) . Example 1 : See also : ROT2D","title":"rot3d"},{"location":"reference/math/rot3d.m/#rot3d","text":"ROT3D - Rotation in 3 d space R = ROT3D ( THETA , AXIS ) Performs a 3 d rotation about one of the 3 - dimensional axes . If AXIS == 1 , the rotation is performed about the X axis ( dimension 1 ) . If AXIS == 2 , the rotation is performed about the Y axis ( dimension 2 ) . If AXIS == 3 , the rotation is performed about the Z axis ( dimension 3 ) . Example 1 : See also : ROT2D","title":"rot3d"},{"location":"reference/math/sample_difference_error.m/","text":"sample_difference_error \u00b6 SAMPLE_DIFFERENCE_ERROR - calculate the uncertainty in the difference between 2 samples [ SD , SDE ] = SAMPLE_DIFFERENCE_ERROR ( X1 , X2 , ... ) Computes the mean sample difference SD and the \"error\" or \"uncertainty\" in that difference SDE in the mean of X2 minus the mean of X1 . This function takes name / value pairs that modify the behavior of the function . Parameter ( default ) | Description -------------------------------------------------------------------------------- algorithm ( 'assume_normality' ) | If 'assume_normality' , then | uses standard error based on 'normal' assumption | ( that is , SDE = sqrt ( SME1 ^ 2 + SME2 ^ 2 ), where | SME is standard error of the mean . | If 'bootstrap' , then | simulations are performed that draw from samples X1 | and X2 with replacement ( sample sizes remain fixed ) | and the difference in means computed . bootstrap_samples ( 10000 ) | Number of simulations to perform when bootstrap is used bootstrap_confidence ... | The bootstrap confidence interval to report for SDE ([ cdf ( 'norm' , - 1 , 0 , 1 ) ... | (the default is the percentiles that correspond to cdf ( 'norm' , 1 , 0 , 1 )]) | +/- 1 standard deviation around the normal | distribution ). SDE is half of this | confidence interval . meanfunction ( 'nanmean' ) | The mean function to use ( could use 'nanmedian' ) Example : x1 = randn ( 50 , 1 ) + 5 ; x2 = randn ( 50 , 1 ) + 0 ; [ sd , sde ]= sample_difference_error ( x1 , x2 ), % show the bootstrap version is similar to standard when data is normally distributed [ sdb , sdeb ]= sample_difference_error ( x1 , x2 , 'algorithm' , 'bootstrap' ),","title":"sample_difference_error"},{"location":"reference/math/sample_difference_error.m/#sample_difference_error","text":"SAMPLE_DIFFERENCE_ERROR - calculate the uncertainty in the difference between 2 samples [ SD , SDE ] = SAMPLE_DIFFERENCE_ERROR ( X1 , X2 , ... ) Computes the mean sample difference SD and the \"error\" or \"uncertainty\" in that difference SDE in the mean of X2 minus the mean of X1 . This function takes name / value pairs that modify the behavior of the function . Parameter ( default ) | Description -------------------------------------------------------------------------------- algorithm ( 'assume_normality' ) | If 'assume_normality' , then | uses standard error based on 'normal' assumption | ( that is , SDE = sqrt ( SME1 ^ 2 + SME2 ^ 2 ), where | SME is standard error of the mean . | If 'bootstrap' , then | simulations are performed that draw from samples X1 | and X2 with replacement ( sample sizes remain fixed ) | and the difference in means computed . bootstrap_samples ( 10000 ) | Number of simulations to perform when bootstrap is used bootstrap_confidence ... | The bootstrap confidence interval to report for SDE ([ cdf ( 'norm' , - 1 , 0 , 1 ) ... | (the default is the percentiles that correspond to cdf ( 'norm' , 1 , 0 , 1 )]) | +/- 1 standard deviation around the normal | distribution ). SDE is half of this | confidence interval . meanfunction ( 'nanmean' ) | The mean function to use ( could use 'nanmedian' ) Example : x1 = randn ( 50 , 1 ) + 5 ; x2 = randn ( 50 , 1 ) + 0 ; [ sd , sde ]= sample_difference_error ( x1 , x2 ), % show the bootstrap version is similar to standard when data is normally distributed [ sdb , sdeb ]= sample_difference_error ( x1 , x2 , 'algorithm' , 'bootstrap' ),","title":"sample_difference_error"},{"location":"reference/math/scale2d.m/","text":"scale2d \u00b6 SCALE2D - Scaling matrix in 2D S = SCALE2D(ALPHA) S = [ ALPHA 0 ; 0 ALPHA];","title":"scale2d"},{"location":"reference/math/scale2d.m/#scale2d","text":"SCALE2D - Scaling matrix in 2D S = SCALE2D(ALPHA) S = [ ALPHA 0 ; 0 ALPHA];","title":"scale2d"},{"location":"reference/math/single_gaussian_plot.m/","text":"single_gaussian_plot \u00b6 single_gaussian_plot is a function. Z = single_gaussian_plot(P, xi, wrap)","title":"single_gaussian_plot"},{"location":"reference/math/single_gaussian_plot.m/#single_gaussian_plot","text":"single_gaussian_plot is a function. Z = single_gaussian_plot(P, xi, wrap)","title":"single_gaussian_plot"},{"location":"reference/math/slidingwindowfunc.m/","text":"slidingwindowfunc \u00b6 SLIDINGWINDOWFUNC - Sliding window analysis for 1 - dimensional data [ Yn,Xn,Yint ] = SLIDINGWINDOWFUNC ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE ,... FUNC , ZEROPAD , [ INTERVALFUNC ] ) Slides a window of size WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If a third output argument is given , then the standard error of the mean in each Xn bin is returned in Yint . The user can optionally specify his own interval function in INTERVALFUNC . The data to be analyzed are put into a variable called 'y' , so example INTERVALFUNC values are 'stderr(y)' or 'diff(prctile(y,[33 66]))' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"slidingwindowfunc"},{"location":"reference/math/slidingwindowfunc.m/#slidingwindowfunc","text":"SLIDINGWINDOWFUNC - Sliding window analysis for 1 - dimensional data [ Yn,Xn,Yint ] = SLIDINGWINDOWFUNC ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE ,... FUNC , ZEROPAD , [ INTERVALFUNC ] ) Slides a window of size WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If a third output argument is given , then the standard error of the mean in each Xn bin is returned in Yint . The user can optionally specify his own interval function in INTERVALFUNC . The data to be analyzed are put into a variable called 'y' , so example INTERVALFUNC values are 'stderr(y)' or 'diff(prctile(y,[33 66]))' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"slidingwindowfunc"},{"location":"reference/math/slidingwindowfunc2.m/","text":"slidingwindowfunc2 \u00b6 SLIDINGWINDOWFUNC2 - Sliding window analysis for 1 - dimensional data [ Yn , Xn ] = SLIDINGWINDOWFUNC2 ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE ,... FUNC , ZEROPAD ) Slides a window of WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"slidingwindowfunc2"},{"location":"reference/math/slidingwindowfunc2.m/#slidingwindowfunc2","text":"SLIDINGWINDOWFUNC2 - Sliding window analysis for 1 - dimensional data [ Yn , Xn ] = SLIDINGWINDOWFUNC2 ( X , Y , START , STEPSIZE , STOP , WINDOWSIZE ,... FUNC , ZEROPAD ) Slides a window of WINDOWSIZE across the data and performs the function FUNC on the set of ordered pairs defined in X and Y . The window starts at location START and stops at location STOP on X . STEPSIZE determines how far the window is advanced at each step . FUNC should be a string describing the function to be used . For example : 'mean' , or 'median' . If ZEROPAD is 1 , then a 0 is coded if no points are found within a given window . If ZEROPAD is 0 , and if no points are found within a given window , no Xn or Yn point is added for that window . Xn is the center location of each window and Yn is the result of the function in each window .","title":"slidingwindowfunc2"},{"location":"reference/math/stepfunc.m/","text":"stepfunc \u00b6 STEPFUNC - Evaluate a discrete step function at many times [ SI , INDS ] = STEPFUNC ( T , STEPS , TI [ , OUTOFBOUNDS ] ) Returns the value of a step function that takes values STEPS ( i ) between the times T ( i ) and T ( i + 1 ). ( STEPS ( end ) is assumed to be true between T ( end ) and T ( end )+ mean ( diff ( T )) ) If OUTOFBOUNDS is provided , one can specify the value of SI when ti is out of bounds . Default is NaN ; example choices might be NaN or 0 . INDS are the index values such that SI = STEPS ( INDS ); INDS that are out of bounds are NaN . STEPS can have many rows ; each row will be one step function , and the answer will have the same number of rows as STEPS ; the columns of SI will be the same number as ti . Example 1 : Evaluate a step function at a high sampling rate S = [ 0 1 2 3 4 5 6 7 8 9 10 ] ; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0 . 1 seconds ti = [ 0 : 0.001 : 1 ] ; Si = stepfunc ( t , S , ti ); figure ; plot ( ti , Si ); % plots at high temporal resolution xlabel ( 'X-axis' ); ylabel ( 'Value' ); Example 2 : Evaluate a step function at a few locations : S = [ 0 1 2 3 4 5 6 7 8 9 10 ] ; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0 . 1 seconds ti = [ 0 0.05 0.9 1.1 ] ; [ Si , inds ] = stepfunc ( t , S , ti ) gives Si : [ 0 0 9 NaN ] inds : [ 1 1 10 NaN ]","title":"stepfunc"},{"location":"reference/math/stepfunc.m/#stepfunc","text":"STEPFUNC - Evaluate a discrete step function at many times [ SI , INDS ] = STEPFUNC ( T , STEPS , TI [ , OUTOFBOUNDS ] ) Returns the value of a step function that takes values STEPS ( i ) between the times T ( i ) and T ( i + 1 ). ( STEPS ( end ) is assumed to be true between T ( end ) and T ( end )+ mean ( diff ( T )) ) If OUTOFBOUNDS is provided , one can specify the value of SI when ti is out of bounds . Default is NaN ; example choices might be NaN or 0 . INDS are the index values such that SI = STEPS ( INDS ); INDS that are out of bounds are NaN . STEPS can have many rows ; each row will be one step function , and the answer will have the same number of rows as STEPS ; the columns of SI will be the same number as ti . Example 1 : Evaluate a step function at a high sampling rate S = [ 0 1 2 3 4 5 6 7 8 9 10 ] ; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0 . 1 seconds ti = [ 0 : 0.001 : 1 ] ; Si = stepfunc ( t , S , ti ); figure ; plot ( ti , Si ); % plots at high temporal resolution xlabel ( 'X-axis' ); ylabel ( 'Value' ); Example 2 : Evaluate a step function at a few locations : S = [ 0 1 2 3 4 5 6 7 8 9 10 ] ; % steps t = [ 0 : 0.1 : 1 ] ; % steps each 0 . 1 seconds ti = [ 0 0.05 0.9 1.1 ] ; [ Si , inds ] = stepfunc ( t , S , ti ) gives Si : [ 0 0 9 NaN ] inds : [ 1 1 10 NaN ]","title":"stepfunc"},{"location":"reference/math/identity_tests/autocorr_step_white_poles.m/","text":"autocorr_step_white_poles \u00b6 AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , PIS ] = AUTOCORR_STEP_WHITE_POLES ( z , M , alpha , o ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"autocorr_step_white_poles"},{"location":"reference/math/identity_tests/autocorr_step_white_poles.m/#autocorr_step_white_poles","text":"AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , PIS ] = AUTOCORR_STEP_WHITE_POLES ( z , M , alpha , o ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"autocorr_step_white_poles"},{"location":"reference/math/identity_tests/autocorr_step_zeros.m/","text":"autocorr_step_zeros \u00b6 AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , ZI ] = AUTOCORR_STEP_ZEROS ( z , N , alpha ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"autocorr_step_zeros"},{"location":"reference/math/identity_tests/autocorr_step_zeros.m/#autocorr_step_zeros","text":"AUTOCORR_STEP_ZEROS - Evaluate z - transform of autocorrelation using zeros [ V , ZI ] = AUTOCORR_STEP_ZEROS ( z , N , alpha ) Evalutes the z - transform of the autocorrelation using the functions zeros ( This is for test purposes only )","title":"autocorr_step_zeros"},{"location":"reference/math/identity_tests/geometric_identities_tests.m/","text":"geometric_identities_tests \u00b6 GEOMETRIC_IDENTITIES_TESTS - Tests some mathematical geometric identities Displays several geometric identities and tests their validity for several random samples . ( Of course , not a proof , but a check of some of our proofs ) .","title":"geometric_identities_tests"},{"location":"reference/math/identity_tests/geometric_identities_tests.m/#geometric_identities_tests","text":"GEOMETRIC_IDENTITIES_TESTS - Tests some mathematical geometric identities Displays several geometric identities and tests their validity for several random samples . ( Of course , not a proof , but a check of some of our proofs ) .","title":"geometric_identities_tests"},{"location":"reference/matlab/isa_text.m/","text":"isa_text \u00b6 ISA_TEXT - examines whether a class is a subclass of another class type [ B , SUBCLASSES_INCLUSIVE ] = ISA_TEXT ( CLASSNAME_A , CLASSNAME_B ) Returns B as true if CLASSNAME_A is equal to CLASSNAME_B or if CLASSNAME_B is among the superclasses of CLASSNAME_A . SUPERCLASSES_INCLUSIVE is a cell array of all superclasses of CLASSNAME_A including itself . Similar to ISA ( A , CLASSNAME ) except that both arguments are character strings instead of requiring one input to be an object . See also : ISA","title":"isa_text"},{"location":"reference/matlab/isa_text.m/#isa_text","text":"ISA_TEXT - examines whether a class is a subclass of another class type [ B , SUBCLASSES_INCLUSIVE ] = ISA_TEXT ( CLASSNAME_A , CLASSNAME_B ) Returns B as true if CLASSNAME_A is equal to CLASSNAME_B or if CLASSNAME_B is among the superclasses of CLASSNAME_A . SUPERCLASSES_INCLUSIVE is a cell array of all superclasses of CLASSNAME_A including itself . Similar to ISA ( A , CLASSNAME ) except that both arguments are character strings instead of requiring one input to be an object . See also : ISA","title":"isa_text"},{"location":"reference/matlab/matlabvers.m/","text":"matlabvers \u00b6 matlabvers is a function. n = matlabvers","title":"matlabvers"},{"location":"reference/matlab/matlabvers.m/#matlabvers","text":"matlabvers is a function. n = matlabvers","title":"matlabvers"},{"location":"reference/matlab_graphics/cubeplot3d.m/","text":"cubeplot3d \u00b6 CUBEPLOT3D - Plot 3-dimensional data from many views simultaneously CUBEPLOT3D(NAME, 'data', DATA, ...)","title":"cubeplot3d"},{"location":"reference/matlab_graphics/cubeplot3d.m/#cubeplot3d","text":"CUBEPLOT3D - Plot 3-dimensional data from many views simultaneously CUBEPLOT3D(NAME, 'data', DATA, ...)","title":"cubeplot3d"},{"location":"reference/matlab_graphics/getline_3dplane.m/","text":"getline_3dplane \u00b6 GETLINE_3DPLANE Select polyline with mouse . [ X , Y , Z ] = GETLINE_3DPLANE ( FIG ) lets you select a polyline in the current axes of figure FIG using the mouse . Coordinates of the polyline are returned in X and Y and Z . Use normal button clicks to add points to the polyline . A shift - , right - , or double - click adds a final point and ends the polyline selection . Pressing RETURN or ENTER ends the polyline selection without adding a final point . Pressing BACKSPACE or DELETE removes the previously selected point from the polyline . [ X , Y , Z ] = GETLINE_3DPLANE ( AX ) lets you select a polyline in the axes specified by the handle AX . [ X , Y , Z ] = GETLINE_3DPLANE is the same as [ X , Y ] = GETLINE_3DPLANE ( GCF ) . [ X , Y , Z ] = GETLINE_3DPLANE ( ..., 'closed' ) animates and returns a closed polygon . Example -------- imshow ( 'moon.tif' ) [ x , y ] = getline_3dplane See also GETLINE , GETRECT , GETPTS . Modified from GETLINE by SDV","title":"getline_3dplane"},{"location":"reference/matlab_graphics/getline_3dplane.m/#getline_3dplane","text":"GETLINE_3DPLANE Select polyline with mouse . [ X , Y , Z ] = GETLINE_3DPLANE ( FIG ) lets you select a polyline in the current axes of figure FIG using the mouse . Coordinates of the polyline are returned in X and Y and Z . Use normal button clicks to add points to the polyline . A shift - , right - , or double - click adds a final point and ends the polyline selection . Pressing RETURN or ENTER ends the polyline selection without adding a final point . Pressing BACKSPACE or DELETE removes the previously selected point from the polyline . [ X , Y , Z ] = GETLINE_3DPLANE ( AX ) lets you select a polyline in the axes specified by the handle AX . [ X , Y , Z ] = GETLINE_3DPLANE is the same as [ X , Y ] = GETLINE_3DPLANE ( GCF ) . [ X , Y , Z ] = GETLINE_3DPLANE ( ..., 'closed' ) animates and returns a closed polygon . Example -------- imshow ( 'moon.tif' ) [ x , y ] = getline_3dplane See also GETLINE , GETRECT , GETPTS . Modified from GETLINE by SDV","title":"getline_3dplane"},{"location":"reference/matlab_graphics/grect2local.m/","text":"grect2local \u00b6 Normalize a rectangle in units of a local rectangle","title":"grect2local"},{"location":"reference/matlab_graphics/grect2local.m/#grect2local","text":"Normalize a rectangle in units of a local rectangle","title":"grect2local"},{"location":"reference/matlab_graphics/isinwhere.m/","text":"isinwhere \u00b6 ISINWHERE 0 / 1 is a rectangle within another rectangle ? B = ISINWHERE ( RECT , UNITS , WHERE ) B is 1 if the rectangle RECT in the units UNITS ( either 'normalized' or 'pixels' ) is in the location structure WHERE . The figure is assumed to be WHERE . FIGURE ; For a description of the location structure , see 'help analysis_generic' .","title":"isinwhere"},{"location":"reference/matlab_graphics/isinwhere.m/#isinwhere","text":"ISINWHERE 0 / 1 is a rectangle within another rectangle ? B = ISINWHERE ( RECT , UNITS , WHERE ) B is 1 if the rectangle RECT in the units UNITS ( either 'normalized' or 'pixels' ) is in the location structure WHERE . The figure is assumed to be WHERE . FIGURE ; For a description of the location structure , see 'help analysis_generic' .","title":"isinwhere"},{"location":"reference/matlab_graphics/normalized2pixels.m/","text":"normalized2pixels \u00b6 NORMALIZED2PIXELS - converts a 'normalized' figure rectangle to raw pixels NEWRECT = NORMALIZED2PIXELS ( FIG , RECT ) Converts a 'normalized' rectangle ( see help axes for definition ) to raw pixels . See also : PIXELS2NORMALIZED","title":"normalized2pixels"},{"location":"reference/matlab_graphics/normalized2pixels.m/#normalized2pixels","text":"NORMALIZED2PIXELS - converts a 'normalized' figure rectangle to raw pixels NEWRECT = NORMALIZED2PIXELS ( FIG , RECT ) Converts a 'normalized' rectangle ( see help axes for definition ) to raw pixels . See also : PIXELS2NORMALIZED","title":"normalized2pixels"},{"location":"reference/matlab_graphics/pcolordummyrowcolumn.m/","text":"pcolordummyrowcolumn \u00b6 PCOLORDUMMYROWCOLUMN - Add a dummy row and column to input to pcolor C_out = PCOLORDUMMYROWCOLUMN ( C ) Adds a dummy row and column of 0 data to the matrix C . This is especially made for use with the PCOLOR command , which , in SHADING FLAT or SHADING FACETED mode , completely ignores the contents of the last row and column . If you want them to show up , simply run your data through PCOLORDUMMYROWCOLUMN first . See also : PCOLOR , NONOPTIMAL - FUNCTION - BEHAVIOR ( sorry , I 've got some too)","title":"pcolordummyrowcolumn"},{"location":"reference/matlab_graphics/pcolordummyrowcolumn.m/#pcolordummyrowcolumn","text":"PCOLORDUMMYROWCOLUMN - Add a dummy row and column to input to pcolor C_out = PCOLORDUMMYROWCOLUMN ( C ) Adds a dummy row and column of 0 data to the matrix C . This is especially made for use with the PCOLOR command , which , in SHADING FLAT or SHADING FACETED mode , completely ignores the contents of the last row and column . If you want them to show up , simply run your data through PCOLORDUMMYROWCOLUMN first . See also : PCOLOR , NONOPTIMAL - FUNCTION - BEHAVIOR ( sorry , I 've got some too)","title":"pcolordummyrowcolumn"},{"location":"reference/matlab_graphics/pixels2normalized.m/","text":"pixels2normalized \u00b6 Part of the NeuralAnalysis package NEWRECT = PIXELS2NORMALIZED ( FIG , RECT ) Converts a rect in 'pixels' units to 'normalized' units ( see 'help axes' for definition ) . See also : NORMALIZED2PIXELS","title":"pixels2normalized"},{"location":"reference/matlab_graphics/pixels2normalized.m/#pixels2normalized","text":"Part of the NeuralAnalysis package NEWRECT = PIXELS2NORMALIZED ( FIG , RECT ) Converts a rect in 'pixels' units to 'normalized' units ( see 'help axes' for definition ) . See also : NORMALIZED2PIXELS","title":"pixels2normalized"},{"location":"reference/matlab_graphics/savefigurelist.m/","text":"savefigurelist \u00b6 SAVEFIGURELIST - Write the current figures to disk using figure tags for file names SAVEFIGURELIST ( FIGLIST , ... ) Writes all of the figures in FIGLIST to the present working directory , using the 'Tag' field of each figure as its filename . If FIGLIST is empty , then all figures are written . This function also accepts additional parameter name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------- ErrorIfTagEmpty ( 1 ) | 0 / 1 Produces an error if a 'tag' field is empty . | If 0 , then a warning is given and the figure is | skipped . Formats ( { 'fig' ,... | File formats to write 'epsc' , 'pdf' } ) | See also : SAVEAS , PWD","title":"savefigurelist"},{"location":"reference/matlab_graphics/savefigurelist.m/#savefigurelist","text":"SAVEFIGURELIST - Write the current figures to disk using figure tags for file names SAVEFIGURELIST ( FIGLIST , ... ) Writes all of the figures in FIGLIST to the present working directory , using the 'Tag' field of each figure as its filename . If FIGLIST is empty , then all figures are written . This function also accepts additional parameter name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------- ErrorIfTagEmpty ( 1 ) | 0 / 1 Produces an error if a 'tag' field is empty . | If 0 , then a warning is given and the figure is | skipped . Formats ( { 'fig' ,... | File formats to write 'epsc' , 'pdf' } ) | See also : SAVEAS , PWD","title":"savefigurelist"},{"location":"reference/matlab_graphics/selectpoints3d.m/","text":"selectpoints3d \u00b6 SELECTPOINTS3D - Graphically select a bunch of ( 2 D or 3 D ) points by making a polygon in the current axes view INSIDE = SELECTPOINTS3D ( PTS3D ) Select a subset of points on a ( potentially 3 D ) graph by dragging a polygon . Allows the user to drag a polygon over the current axes ( may be in 3 D or 2 D mode ) and this function will return the points in PTS3D that are inside the polygon . PTS3D should be a 2 xN or 3 xN matrix where N is the the number of points . If only 2 - dimensional points are passed then the function will still work . Output : INSIDE is an N dimensional vector of 0 's and 1' s ; INSIDE ( i ) is 1 if and only if PTS3D (:, i ) is inside the user - drawn polygon . Please note that this function does not plot the points ; the points should already be plotted if you want them to be visible to the user . Example : pts = randn ( 30 , 3 ); figure ; plot3 ( pts (:, 1 ), pts (:, 2 ), pts (:, 3 ), 'ko' ); drawnow (); % change the view , maybe use the rotate3d tool inside = selectpoints3d ( pts '); % need to transpose to column vectors hold on ; indexes = find ( inside ); plot3 ( pts ( indexes , 1 ), pts ( indexes , 2 ), pts ( indexes , 3 ), 'bs' ); % add red x to selected points % look around with rotate3d tool to make sure it is right","title":"selectpoints3d"},{"location":"reference/matlab_graphics/selectpoints3d.m/#selectpoints3d","text":"SELECTPOINTS3D - Graphically select a bunch of ( 2 D or 3 D ) points by making a polygon in the current axes view INSIDE = SELECTPOINTS3D ( PTS3D ) Select a subset of points on a ( potentially 3 D ) graph by dragging a polygon . Allows the user to drag a polygon over the current axes ( may be in 3 D or 2 D mode ) and this function will return the points in PTS3D that are inside the polygon . PTS3D should be a 2 xN or 3 xN matrix where N is the the number of points . If only 2 - dimensional points are passed then the function will still work . Output : INSIDE is an N dimensional vector of 0 's and 1' s ; INSIDE ( i ) is 1 if and only if PTS3D (:, i ) is inside the user - drawn polygon . Please note that this function does not plot the points ; the points should already be plotted if you want them to be visible to the user . Example : pts = randn ( 30 , 3 ); figure ; plot3 ( pts (:, 1 ), pts (:, 2 ), pts (:, 3 ), 'ko' ); drawnow (); % change the view , maybe use the rotate3d tool inside = selectpoints3d ( pts '); % need to transpose to column vectors hold on ; indexes = find ( inside ); plot3 ( pts ( indexes , 1 ), pts ( indexes , 2 ), pts ( indexes , 3 ), 'bs' ); % add red x to selected points % look around with rotate3d tool to make sure it is right","title":"selectpoints3d"},{"location":"reference/matlab_graphics/viewpoint3dto2d.m/","text":"viewpoint3dto2d \u00b6 VIEWPOINT3DTO2D Project a 3D point onto 2D with a given camera matrix PTS2D = VIEWPOINT3DTO2D ( PTS3D , CAMERAMATRIX ) Converts a list of 3D points PTS3D into their corresponding 2D projection for the camera matrix CAMERAMATRIX . The matrix PTS3D should be a list of column vectors ( 3xN , where N is the number of points ). CAMERAMATRIX is a standard camera matrix ( see Wikipedia for \"camera matrix\" ). Output : PTS2D is a list of column vectors ( 2xN ) that correspond to the 2D projection . There is an arbitrary scale factor that depends upon how you want to display the points ; you can scale these points with a multiplicative factor and the relative relationships will still be preserved . One can also call : PTS2D = VIEWPOINT3DTO2D ( PTS3D ) which takes the CAMERAMATRIX to be the current VIEW in the current axes . See also : VIEW","title":"viewpoint3dto2d"},{"location":"reference/matlab_graphics/viewpoint3dto2d.m/#viewpoint3dto2d","text":"VIEWPOINT3DTO2D Project a 3D point onto 2D with a given camera matrix PTS2D = VIEWPOINT3DTO2D ( PTS3D , CAMERAMATRIX ) Converts a list of 3D points PTS3D into their corresponding 2D projection for the camera matrix CAMERAMATRIX . The matrix PTS3D should be a list of column vectors ( 3xN , where N is the number of points ). CAMERAMATRIX is a standard camera matrix ( see Wikipedia for \"camera matrix\" ). Output : PTS2D is a list of column vectors ( 2xN ) that correspond to the 2D projection . There is an arbitrary scale factor that depends upon how you want to display the points ; you can scale these points with a multiplicative factor and the relative relationships will still be preserved . One can also call : PTS2D = VIEWPOINT3DTO2D ( PTS3D ) which takes the CAMERAMATRIX to be the current VIEW in the current axes . See also : VIEW","title":"viewpoint3dto2d"},{"location":"reference/neuroscience/anatomy/calc_cluster_index.m/","text":"calc_cluster_index \u00b6 CALC_CLUSTER_INDEX - Calculate cluster index from Ruthazer and Stryker CI = CALC_CLUSTER_INDEX ( CELL_PTS , ROI_PTS , SCALE , INJ_SIZE , WINDSIZE , WINDSTEP , AREA_THRESH , FRACT_CELLS , [ INDEXVALUES FUNC RANDFUNC ]) Calculates the cluster index as described by Ruthazer and Stryker JNeurosci 1996 16 : 7253 - 7269. Computes the cluster index over a region of interest drawn tightly around the data set excluding the injection site of size INJ_SIZE . Square windows of side size WINDSIZE are slid over the region of interest in steps of WINDSTEP . If the overlap of the window and the region of interest is at least AREA_THRESH ( a fraction of the total ), then the cluster index is computed in that window . ROI_PTS and INJ_SIZE can be empty , in which case no points will be excluded , the ROI will be taken to be a rectangle containing all points , the first point in the cell list is assumed to be a cell and not the injection location . The cluster index is computed by comparing nearest neighbor differences of all cells in the data set to a random point . Only FRACT_CELLS are used in the calculation . See the paper for a more complete description . The cells are specified as a list of X - Y pairs . It is assumed that the first entry in the list is actually the injection location , not a cell . The region of interest is also specified by a list of X - Y pairs that define a polygon around the region of interest . The points will be scaled by SCALE , which indicates the number of point units per unit . If the last three optional arguments are provided , then the cluster index is not computed based on physical distance between cells but rather the difference between index values in INDEXVALUES , a vector w / as many entries as there are cell points . FUNC should be a string describing how to take the difference between x1 and x2 , INDEX values from two cells . For example , ' min ( abs ([ x1 - x2 ; x1 - x2 - 360 ; x1 - x2 + 360 ]))' or ' abs ( x1 - x2 )'. RANDFUNC is a function that describes how to randomly generate an index value . For example , RANDFUNC = ' rand * 360 ' picks a value between 0 and 360 psuedorandomly .","title":"calc_cluster_index"},{"location":"reference/neuroscience/anatomy/calc_cluster_index.m/#calc_cluster_index","text":"CALC_CLUSTER_INDEX - Calculate cluster index from Ruthazer and Stryker CI = CALC_CLUSTER_INDEX ( CELL_PTS , ROI_PTS , SCALE , INJ_SIZE , WINDSIZE , WINDSTEP , AREA_THRESH , FRACT_CELLS , [ INDEXVALUES FUNC RANDFUNC ]) Calculates the cluster index as described by Ruthazer and Stryker JNeurosci 1996 16 : 7253 - 7269. Computes the cluster index over a region of interest drawn tightly around the data set excluding the injection site of size INJ_SIZE . Square windows of side size WINDSIZE are slid over the region of interest in steps of WINDSTEP . If the overlap of the window and the region of interest is at least AREA_THRESH ( a fraction of the total ), then the cluster index is computed in that window . ROI_PTS and INJ_SIZE can be empty , in which case no points will be excluded , the ROI will be taken to be a rectangle containing all points , the first point in the cell list is assumed to be a cell and not the injection location . The cluster index is computed by comparing nearest neighbor differences of all cells in the data set to a random point . Only FRACT_CELLS are used in the calculation . See the paper for a more complete description . The cells are specified as a list of X - Y pairs . It is assumed that the first entry in the list is actually the injection location , not a cell . The region of interest is also specified by a list of X - Y pairs that define a polygon around the region of interest . The points will be scaled by SCALE , which indicates the number of point units per unit . If the last three optional arguments are provided , then the cluster index is not computed based on physical distance between cells but rather the difference between index values in INDEXVALUES , a vector w / as many entries as there are cell points . FUNC should be a string describing how to take the difference between x1 and x2 , INDEX values from two cells . For example , ' min ( abs ([ x1 - x2 ; x1 - x2 - 360 ; x1 - x2 + 360 ]))' or ' abs ( x1 - x2 )'. RANDFUNC is a function that describes how to randomly generate an index value . For example , RANDFUNC = ' rand * 360 ' picks a value between 0 and 360 psuedorandomly .","title":"calc_cluster_index"},{"location":"reference/neuroscience/demos/demo_illustrate_facespace_build.m/","text":"demo_illustrate_facespace_build \u00b6 DEMO_ILLUSTRATE_FACESPACE_BUILD - illustrate the construction of face space from Cheng and Tsao 2017 Illustrates the construction of facespace from Cheng and Tsao 2017 Cell DIRNAME should be the name of the FEI face database files , frontal views http : // fei . edu . br /~ cet / facedatabase . html Reads only the neutral expression faces ( number 'a.jpg' )","title":"demo_illustrate_facespace_build"},{"location":"reference/neuroscience/demos/demo_illustrate_facespace_build.m/#demo_illustrate_facespace_build","text":"DEMO_ILLUSTRATE_FACESPACE_BUILD - illustrate the construction of face space from Cheng and Tsao 2017 Illustrates the construction of facespace from Cheng and Tsao 2017 Cell DIRNAME should be the name of the FEI face database files , frontal views http : // fei . edu . br /~ cet / facedatabase . html Reads only the neutral expression faces ( number 'a.jpg' )","title":"demo_illustrate_facespace_build"},{"location":"reference/neuroscience/demos/nbio140_wholecell.m/","text":"nbio140_wholecell \u00b6 NBIO140_WHOLECELL - A gui to simulate a Hodgkin-Huxley recording in voltage clamp/current clamp NBIO140_WHOLECELL() Brings up a graphical user interface to allow the user to explore a current clamp/voltage clamp environment with Hodgkin-Huxley channels.","title":"nbio140_wholecell"},{"location":"reference/neuroscience/demos/nbio140_wholecell.m/#nbio140_wholecell","text":"NBIO140_WHOLECELL - A gui to simulate a Hodgkin-Huxley recording in voltage clamp/current clamp NBIO140_WHOLECELL() Brings up a graphical user interface to allow the user to explore a current clamp/voltage clamp environment with Hodgkin-Huxley channels.","title":"nbio140_wholecell"},{"location":"reference/neuroscience/membrane_voltage/generate_normal_vm_fr.m/","text":"generate_normal_vm_fr \u00b6 GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = GENERATE_POISSON_VM_FR ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA ) Generates sample firing rates for a Normally - distrubuted process modulated by voltage measurements ( VM ) bins of size DELTAT . Firing rate is assumed to be generated according to a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and SIGMA is given . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : NORMAL_VM_FR , POISSON_VM_FR Example :","title":"generate_normal_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/generate_normal_vm_fr.m/#generate_normal_vm_fr","text":"GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = GENERATE_POISSON_VM_FR ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA ) Generates sample firing rates for a Normally - distrubuted process modulated by voltage measurements ( VM ) bins of size DELTAT . Firing rate is assumed to be generated according to a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and SIGMA is given . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : NORMAL_VM_FR , POISSON_VM_FR Example :","title":"generate_normal_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/generate_poisson_vm_fr.m/","text":"generate_poisson_vm_fr \u00b6 GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = GENERATE_POISSON_VM_FR ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , ... ) Generates sample firing rates for a Poisson process modulated by voltage measurements ( VM ) bins of size DELTAT . Spikes are assumed to be generated at a Poisson rate , where the rate lambda is determined by RATEFUNC ( VM , ... ) * DELTAT . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : POISSON_VM_FR Example :","title":"generate_poisson_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/generate_poisson_vm_fr.m/#generate_poisson_vm_fr","text":"GENERATE_POISSON_VM_FR - generate firing rate values from poisson process FR = GENERATE_POISSON_VM_FR ( VM , DELTAT , RATEFUNC , RATEFUNCPARAMS , ... ) Generates sample firing rates for a Poisson process modulated by voltage measurements ( VM ) bins of size DELTAT . Spikes are assumed to be generated at a Poisson rate , where the rate lambda is determined by RATEFUNC ( VM , ... ) * DELTAT . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:} ) ; See also : POISSON_VM_FR Example :","title":"generate_poisson_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/mle_normal_vm_fr.m/","text":"mle_normal_vm_fr \u00b6 MLE_NORMAL_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = MLE_NORMAL_VM_FR ( VM , FR , DELTAT , ...) Estimate the parameters of a Normal rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' linearthreshold ' , PARAMS is [ slope threshold sigma ] ( see help LINEPOWERTHRESHOLD ) For ' linepowerthreshold ' , PARAMS is [ slope threshold exponent sigma ] For ' Normal ' , PARAMS is [ rate sigma ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function ( ' linearthreshold ' ) | Uses function ' linearthreshold ' | that has form R ( v ) = rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins fr = icdf ( ' Normal ' , rand ( 500 , 1 ), 2 , 1 ); % generate rates , rate of 2 , standard deviation of 1 p_out = mle_normal_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Normal ' ) p_out_matlab = mle ( fr , ' distribution ',' Normal ' ) % they match","title":"mle_normal_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/mle_normal_vm_fr.m/#mle_normal_vm_fr","text":"MLE_NORMAL_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = MLE_NORMAL_VM_FR ( VM , FR , DELTAT , ...) Estimate the parameters of a Normal rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' linearthreshold ' , PARAMS is [ slope threshold sigma ] ( see help LINEPOWERTHRESHOLD ) For ' linepowerthreshold ' , PARAMS is [ slope threshold exponent sigma ] For ' Normal ' , PARAMS is [ rate sigma ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function ( ' linearthreshold ' ) | Uses function ' linearthreshold ' | that has form R ( v ) = rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins fr = icdf ( ' Normal ' , rand ( 500 , 1 ), 2 , 1 ); % generate rates , rate of 2 , standard deviation of 1 p_out = mle_normal_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Normal ' ) p_out_matlab = mle ( fr , ' distribution ',' Normal ' ) % they match","title":"mle_normal_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/mle_poisson_vm_fr.m/","text":"mle_poisson_vm_fr \u00b6 MLE_POISSON_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = MLE_POISSON_VM_FR ( VM , FR , DELTAT , ...) Estimate the parameters of a Poisson rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' linearthreshold ' , PARAMS is [ slope threshold ] ( see help LINEPOWERTHRESHOLD ) For ' linepowerthreshold ' , PARAMS is [ slope threshold exponent ] For ' Poisson ' , PARAMS is [ rate ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function ( ' linearthreshold ' ) | Uses function ' linearthreshold ' | that has form R ( v ) = rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins n = icdf ( ' Poisson ' , rand ( 500 , 1 ), 2 ); % generate spike counts in bins , rate of 2 fr = n / deltaT ; % convert to rates p_out = mle_poisson_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Poisson ' ) p_out_matlab = mle ( round ( fr * deltaT ), ' distribution ',' Poisson ' ) / deltaT % they match","title":"mle_poisson_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/mle_poisson_vm_fr.m/#mle_poisson_vm_fr","text":"MLE_POISSON_VM_FR - use maximum likelihood analysis to compute Poisson rate model of voltage -> firing rate PARAMS = MLE_POISSON_VM_FR ( VM , FR , DELTAT , ...) Estimate the parameters of a Poisson rate function for fitting spike counts in bins and voltage values in bins . VM should be measurements of membrane potential in bins of size DELTAT FR should be measurements of firing rate ( N_SPIKES / DELTAT ) It returns the free PARAMS for each fit function type . For ' linearthreshold ' , PARAMS is [ slope threshold ] ( see help LINEPOWERTHRESHOLD ) For ' linepowerthreshold ' , PARAMS is [ slope threshold exponent ] For ' Poisson ' , PARAMS is [ rate ] This function also accepts name / value pairs that alter its behavior : Parameters ( default ) | Description ----------------------------------------------------------------- fit_function ( ' linearthreshold ' ) | Uses function ' linearthreshold ' | that has form R ( v ) = rectify ( V - V0 ) | The name of any function that takes X , Y | as inputs and then name / value pairs can be used fit_function_params | Cell array of name / value pairs for the fit function . { ' threshold_start ' , 0 } | Note : This function has been tested with some known values but has not been tested to publication standard because the line of questioning petered out . SDV thinks it is right but more testing would be good . Example : ( simple test , without voltage dependence ) deltaT = 0.030 ; % 30 ms bins n = icdf ( ' Poisson ' , rand ( 500 , 1 ), 2 ); % generate spike counts in bins , rate of 2 fr = n / deltaT ; % convert to rates p_out = mle_poisson_vm_fr ( 0 * fr , fr , deltaT , ' fit_function ',' Poisson ' ) p_out_matlab = mle ( round ( fr * deltaT ), ' distribution ',' Poisson ' ) / deltaT % they match","title":"mle_poisson_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/normal_vm_fr.m/","text":"normal_vm_fr \u00b6 NORMAL_VM_FR - calculate log likelihood of seeing Vm / Fr pairs given model LOGP_OF_DATA = NORMAL_VM_FR ( VM , FR , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA , ... ) Calculate the log likelihood of observing a given set of binned membrane voltage measurements ( VM ) and corresponding binned firing rates ( FR ) in bins size DELTAT . Spikes are assumed to be generated from a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and the standard deviation SIGMA is constant and passed above . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:}); See also : MLE_NORMAL_VM_FR , POISSON_VM_FR , MLE_POISSON_VM_FR","title":"normal_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/normal_vm_fr.m/#normal_vm_fr","text":"NORMAL_VM_FR - calculate log likelihood of seeing Vm / Fr pairs given model LOGP_OF_DATA = NORMAL_VM_FR ( VM , FR , DELTAT , RATEFUNC , RATEFUNCPARAMS , SIGMA , ... ) Calculate the log likelihood of observing a given set of binned membrane voltage measurements ( VM ) and corresponding binned firing rates ( FR ) in bins size DELTAT . Spikes are assumed to be generated from a normal distribution , where the rate mu is determined by RATEFUNC ( VM , ... ) * DELTAT and the standard deviation SIGMA is constant and passed above . RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC , so that the call to RATEFUNC is RATEFUNC ( VM , RATEFUNCPARAMS {:}); See also : MLE_NORMAL_VM_FR , POISSON_VM_FR , MLE_POISSON_VM_FR","title":"normal_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/plot_voltage_firingrate_observations.m/","text":"plot_voltage_firingrate_observations \u00b6 PLOT_VOLTAGE_FIRINGRATE_OBSERVATIONS - plot a list of voltage - firing rate observations against real data [ H , HTEXT ] = PLOT_VOLTAGE_FIRINGRATE_OBSERVATIONS ( V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBTRACTED , T , VM , SPIKETIMES , ... ) Given inputs : V - voltage observations returned from VOLTAGE_FIRINGRATE_OBSERVATIONS FR - firing rate observations returned from VOLTAGE_FIRINGRATE_OBSERVATIONS STIMID - stimulus IDs TIMEPOINTS - Timepoints that are averaged together T - time points of raw data VM - voltage measurements of raw data SPIKETIMES - time of spiking events This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0 . 030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ( [] ) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ( [] ) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform See also : VOLTAGE_FIRINGRATE_OBSERVATIONS","title":"plot_voltage_firingrate_observations"},{"location":"reference/neuroscience/membrane_voltage/plot_voltage_firingrate_observations.m/#plot_voltage_firingrate_observations","text":"PLOT_VOLTAGE_FIRINGRATE_OBSERVATIONS - plot a list of voltage - firing rate observations against real data [ H , HTEXT ] = PLOT_VOLTAGE_FIRINGRATE_OBSERVATIONS ( V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBTRACTED , T , VM , SPIKETIMES , ... ) Given inputs : V - voltage observations returned from VOLTAGE_FIRINGRATE_OBSERVATIONS FR - firing rate observations returned from VOLTAGE_FIRINGRATE_OBSERVATIONS STIMID - stimulus IDs TIMEPOINTS - Timepoints that are averaged together T - time points of raw data VM - voltage measurements of raw data SPIKETIMES - time of spiking events This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0 . 030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ( [] ) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ( [] ) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform See also : VOLTAGE_FIRINGRATE_OBSERVATIONS","title":"plot_voltage_firingrate_observations"},{"location":"reference/neuroscience/membrane_voltage/poisson_vm_fr.m/","text":"poisson_vm_fr \u00b6 POISSON_VM_FR - calculate log likelihood of seeing Vm/Fr pairs given model LOGP_OF_DATA = POISSON_VM_FR(VM, FR, DELTAT, RATEFUNC, RATEFUNCPARAMS, ...) Calculate the log likelihood of observing a given set of binned membrane voltage measurements (VM) and corresponding binned firing rates (FR) in bins size DELTAT. Spikes are assumed to be generated at a Poisson rate, where the rate lambda is determined by RATEFUNC(VM, ...) * DELTAT. RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC, so that the call to RATEFUNC is RATEFUNC(VM, RATEFUNCPARAMS{:}); See also: MLE_POISSON_VM_FR","title":"poisson_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/poisson_vm_fr.m/#poisson_vm_fr","text":"POISSON_VM_FR - calculate log likelihood of seeing Vm/Fr pairs given model LOGP_OF_DATA = POISSON_VM_FR(VM, FR, DELTAT, RATEFUNC, RATEFUNCPARAMS, ...) Calculate the log likelihood of observing a given set of binned membrane voltage measurements (VM) and corresponding binned firing rates (FR) in bins size DELTAT. Spikes are assumed to be generated at a Poisson rate, where the rate lambda is determined by RATEFUNC(VM, ...) * DELTAT. RATEFUNCPARAMS are additional parameters to be passed to RATEFUNC, so that the call to RATEFUNC is RATEFUNC(VM, RATEFUNCPARAMS{:}); See also: MLE_POISSON_VM_FR","title":"poisson_vm_fr"},{"location":"reference/neuroscience/membrane_voltage/spikeFWHM.m/","text":"spikeFWHM \u00b6 spikeFWHM - find the full - width , half - maximum range in single spike waveforms [ FWHM ] = SPIKEFWHM ( SPIKEWAVES , V_SPIKEPEAK , SPIKEPEAK_LOC , V_INITIATION , SAMPLERATE ) Inputs : SPIKEWAVES | 1 D vector containing voltage values for each spikewave V_SPIKEPEAK | 1 D vector containing maximum voltage value of every | spike wave ( units V ) SPIKEPEAK_LOC | Position value of each spike peak KINK_VM | Value where action potential begins , calculated | by sister function spikekink ( units V ) SAMPLERATE | Rate of sampling for each epoch ( units Hz ), given by ndi_app_spikeextractor Outputs : FWHM | Full - width half maximum value , calculated from sample rate and converted to ms HM_PRESK_LOC | Position value of half - maximum value before spike peak | HM_POSTSK_LOC | Position value of half - maximum value after spike peak V_hm | Voltage value of the half - maximum points ( units V )","title":"spikeFWHM"},{"location":"reference/neuroscience/membrane_voltage/spikeFWHM.m/#spikefwhm","text":"spikeFWHM - find the full - width , half - maximum range in single spike waveforms [ FWHM ] = SPIKEFWHM ( SPIKEWAVES , V_SPIKEPEAK , SPIKEPEAK_LOC , V_INITIATION , SAMPLERATE ) Inputs : SPIKEWAVES | 1 D vector containing voltage values for each spikewave V_SPIKEPEAK | 1 D vector containing maximum voltage value of every | spike wave ( units V ) SPIKEPEAK_LOC | Position value of each spike peak KINK_VM | Value where action potential begins , calculated | by sister function spikekink ( units V ) SAMPLERATE | Rate of sampling for each epoch ( units Hz ), given by ndi_app_spikeextractor Outputs : FWHM | Full - width half maximum value , calculated from sample rate and converted to ms HM_PRESK_LOC | Position value of half - maximum value before spike peak | HM_POSTSK_LOC | Position value of half - maximum value after spike peak V_hm | Voltage value of the half - maximum points ( units V )","title":"spikeFWHM"},{"location":"reference/neuroscience/membrane_voltage/spikekink.m/","text":"spikekink \u00b6 SPIKEKINK - find the \"kink\" inflection point in spike waveforms , and maximum dv / dt after Azouz and Gray 1999 [ KINK_VM , MAX_DVDT , KINK_INDEX_ ] = SPIKEKINK ( SPIKE_TRACE , T , SPIKE_INDEXES , ... ) Inputs : SPIKE_WAVE | 1 D vector containing values for voltage at every | timestep in spike_wave ( units V ) T_VEC | 1 D vector containing timestamps in seconds SPIKE_INDEXES | Sample index values of approximate spike peaks in SPIKE_TRACE | and can be in either row or column vector form Calculates the \"kink\" in spike waveforms where spike begins to take off . See Azouz and Gray , J . Neurosci 1999 . SPIKE_LOCATIONS that are greater than Outputs : KINK_VM | Vector of voltage at each spike kink MAX_DVDT | Vector of maximum DV / DT for each spike ( volts / sec ) KINK_INDEX | Vector of times of each spike kink This function also takes additional parameters in the form of name / value pairs . Parameter ( default ) | Description --------------------------------------------------------------- slope_criterion ( 0 . 033 ) | Fraction of peak dV / dt , calibrated by visual | inspection to match threshold search_interval ( 0 . 004 ) | How much before each spike_location to begin | the search for the kink ( in seconds ) Jason Osik 2016 - 2017 , slight mods by SDV , DPL","title":"spikekink"},{"location":"reference/neuroscience/membrane_voltage/spikekink.m/#spikekink","text":"SPIKEKINK - find the \"kink\" inflection point in spike waveforms , and maximum dv / dt after Azouz and Gray 1999 [ KINK_VM , MAX_DVDT , KINK_INDEX_ ] = SPIKEKINK ( SPIKE_TRACE , T , SPIKE_INDEXES , ... ) Inputs : SPIKE_WAVE | 1 D vector containing values for voltage at every | timestep in spike_wave ( units V ) T_VEC | 1 D vector containing timestamps in seconds SPIKE_INDEXES | Sample index values of approximate spike peaks in SPIKE_TRACE | and can be in either row or column vector form Calculates the \"kink\" in spike waveforms where spike begins to take off . See Azouz and Gray , J . Neurosci 1999 . SPIKE_LOCATIONS that are greater than Outputs : KINK_VM | Vector of voltage at each spike kink MAX_DVDT | Vector of maximum DV / DT for each spike ( volts / sec ) KINK_INDEX | Vector of times of each spike kink This function also takes additional parameters in the form of name / value pairs . Parameter ( default ) | Description --------------------------------------------------------------- slope_criterion ( 0 . 033 ) | Fraction of peak dV / dt , calibrated by visual | inspection to match threshold search_interval ( 0 . 004 ) | How much before each spike_location to begin | the search for the kink ( in seconds ) Jason Osik 2016 - 2017 , slight mods by SDV , DPL","title":"spikekink"},{"location":"reference/neuroscience/membrane_voltage/spikewavetrimmer.m/","text":"spikewavetrimmer \u00b6 SPIKEWAVETRIMMER - remove the zero padding from spikewave and yield the time preceding spike peaks [ SPIKEWAVE_VTRIM ] = SPIKEWAVETRIMMER ( SPIKEWAVE , SPIKEPEAK_LOC ) Inputs : SPIKEWAVE | 1 D vector containing values for voltage at every | timestep in spike_trace ( units V ) SPIKEPEAK_LOC | Position of spike peak location Outputs : SPIKEWAVE_VTRIM | A trimmed vector of spikewave voltages with all | 0 padding removed and replaced with the leading ( or | trailing ) non - zero data points at the beginning and | end of the wave , respectively .","title":"spikewavetrimmer"},{"location":"reference/neuroscience/membrane_voltage/spikewavetrimmer.m/#spikewavetrimmer","text":"SPIKEWAVETRIMMER - remove the zero padding from spikewave and yield the time preceding spike peaks [ SPIKEWAVE_VTRIM ] = SPIKEWAVETRIMMER ( SPIKEWAVE , SPIKEPEAK_LOC ) Inputs : SPIKEWAVE | 1 D vector containing values for voltage at every | timestep in spike_trace ( units V ) SPIKEPEAK_LOC | Position of spike peak location Outputs : SPIKEWAVE_VTRIM | A trimmed vector of spikewave voltages with all | 0 padding removed and replaced with the leading ( or | trailing ) non - zero data points at the beginning and | end of the wave , respectively .","title":"spikewavetrimmer"},{"location":"reference/neuroscience/membrane_voltage/vmnospikes.m/","text":"vmnospikes \u00b6 VMNOSPIKES - Return underlying voltage with spikes removed [ VMNS , T , SPIKETIMES ] = VMNOSPIKES ( VM , SI ) Removes spikes from the trace VM with sample interval SI . Optionally , one can re-sample at a higher SI ( lower sampling rate ). SPIKETIMES that were detected are returned in SPIKETIMES . The behavior of this function can be modified by passing name / value pairs : Parameter ( default ): | Description : --------------------------------------------------------------- newsi ( si ) | If the interval is higher than si , | then the waveform is smoothed ( boxcar ) | and downsampled . filter_algorithm | Filter algorithm : choice of 'removespikes' , which employs ( 'removespikes' ) | detects spikes and removes them with REMOVESPIKES ; | or 'medfilt1' which performs a median filter using MEDFILT1 spiketimes ( [] ) | Extracted spike times from the trace | ( if empty , then spikes are extracted using | threshold crossing and refractory period ) | Spike times are in same units as SI | and are relative to Tstart thresh ( -0 . 030 ) | Spike threshold for spike detection ( not used | if spiketimes is given ) refract ( 0 . 0025 ) | Refractory period ( in same units as SI ) MedFilterWidth | MedFilterWidth ( see MEDFILT1 ) ( round ( 0 . 004 / SI ) ) | Tstart ( 0 ) | Time of the first sample of the VM trace removespikes_inputs ( {} ) | Any custom inputs we should pass to REMOVESPIKES | ( see REMOVESPIKES ) rm60hz ( 1 ) | 0 / 1 should we filter 60Hz noise ? ( uses REMOVE60HZ ) rm60hz_inputs ( {} ) | Any custom arguments we should pass to REMOVE60HZ | ( see REMOVE60HZ )","title":"vmnospikes"},{"location":"reference/neuroscience/membrane_voltage/vmnospikes.m/#vmnospikes","text":"VMNOSPIKES - Return underlying voltage with spikes removed [ VMNS , T , SPIKETIMES ] = VMNOSPIKES ( VM , SI ) Removes spikes from the trace VM with sample interval SI . Optionally , one can re-sample at a higher SI ( lower sampling rate ). SPIKETIMES that were detected are returned in SPIKETIMES . The behavior of this function can be modified by passing name / value pairs : Parameter ( default ): | Description : --------------------------------------------------------------- newsi ( si ) | If the interval is higher than si , | then the waveform is smoothed ( boxcar ) | and downsampled . filter_algorithm | Filter algorithm : choice of 'removespikes' , which employs ( 'removespikes' ) | detects spikes and removes them with REMOVESPIKES ; | or 'medfilt1' which performs a median filter using MEDFILT1 spiketimes ( [] ) | Extracted spike times from the trace | ( if empty , then spikes are extracted using | threshold crossing and refractory period ) | Spike times are in same units as SI | and are relative to Tstart thresh ( -0 . 030 ) | Spike threshold for spike detection ( not used | if spiketimes is given ) refract ( 0 . 0025 ) | Refractory period ( in same units as SI ) MedFilterWidth | MedFilterWidth ( see MEDFILT1 ) ( round ( 0 . 004 / SI ) ) | Tstart ( 0 ) | Time of the first sample of the VM trace removespikes_inputs ( {} ) | Any custom inputs we should pass to REMOVESPIKES | ( see REMOVESPIKES ) rm60hz ( 1 ) | 0 / 1 should we filter 60Hz noise ? ( uses REMOVE60HZ ) rm60hz_inputs ( {} ) | Any custom arguments we should pass to REMOVE60HZ | ( see REMOVE60HZ )","title":"vmnospikes"},{"location":"reference/neuroscience/membrane_voltage/voltage_firingrate_observations.m/","text":"voltage_firingrate_observations \u00b6 VOLTAGE_FIRINGRATE_OBSERVATIONS - compile a list of voltage measurements and firing rate measurements [ V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBECTRACTED , EXACTBINTIME , SUBTRACTED_VALUE ] = ... VOLTAGE_FIRINGRATE_OBSERVATIONS ( T , VM , SPIKETIMES , ... ) Compiles a list of membrane voltage measurements V and firing rate measurements FR given the following inputs : T is a vector with the time of each sample in VM VM is a vector of samples of absolute voltage measurement , should have spikes removed SPIKETIMES is a vector of spike times ( in units of t , should be seconds ) V and FR are paired , binned observations of voltage and firing rate , and TIMEPOINTS are the mid - point values of the bins in time . STIMID is a vector containing the stimulus id of each V , FR pair . VM_BASELINESUBTRACTED is the voltage waveform with baseline values subtracted . EXACTBINTIME is the time interval of each bin exactly , which varies depending upon the sampling rate of Vm . This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0.030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ([]) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ([]) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform vm_baseline_correct ([]) | If non - empty , perform a baseline correction of the | voltage waveform using this much pre - stimulus | time ( units of t , should be seconds ) . | ( Recommended for sharp electrode recordings , not receommended | for patch recordings . ) vm_baseline_correct_func | The function to use for correcting baseline ( usually 'median' or 'mean' ) . ( 'median' )","title":"voltage_firingrate_observations"},{"location":"reference/neuroscience/membrane_voltage/voltage_firingrate_observations.m/#voltage_firingrate_observations","text":"VOLTAGE_FIRINGRATE_OBSERVATIONS - compile a list of voltage measurements and firing rate measurements [ V , FR , STIMID , TIMEPOINTS , VM_BASELINESUBECTRACTED , EXACTBINTIME , SUBTRACTED_VALUE ] = ... VOLTAGE_FIRINGRATE_OBSERVATIONS ( T , VM , SPIKETIMES , ... ) Compiles a list of membrane voltage measurements V and firing rate measurements FR given the following inputs : T is a vector with the time of each sample in VM VM is a vector of samples of absolute voltage measurement , should have spikes removed SPIKETIMES is a vector of spike times ( in units of t , should be seconds ) V and FR are paired , binned observations of voltage and firing rate , and TIMEPOINTS are the mid - point values of the bins in time . STIMID is a vector containing the stimulus id of each V , FR pair . VM_BASELINESUBTRACTED is the voltage waveform with baseline values subtracted . EXACTBINTIME is the time interval of each bin exactly , which varies depending upon the sampling rate of Vm . This function can be modified by additional parameter name / value pairs : Parameter name ( default value ) | Description ---------------------------------------------------------------- binsize ( 0.030 ) | Sliding bin size ( units of t , should be seconds ) fr_smooth ([]) | If not empty , the spike times are smoothed | by Gaussian window with this standard | deviation ( in units of t ) . stim_onsetoffsetid ([]) | Each row should contain | [ stim_onset_time stim_offset_time stimid ] | where the times are in units of 't' ( seconds ) dotrialaverage ( 0 ) | If 1 , perform a trial - averaging of the spike times | and voltage waveform vm_baseline_correct ([]) | If non - empty , perform a baseline correction of the | voltage waveform using this much pre - stimulus | time ( units of t , should be seconds ) . | ( Recommended for sharp electrode recordings , not receommended | for patch recordings . ) vm_baseline_correct_func | The function to use for correcting baseline ( usually 'median' or 'mean' ) . ( 'median' )","title":"voltage_firingrate_observations"},{"location":"reference/neuroscience/membrane_voltage/voltage_firingrate_observations_per_stimulus.m/","text":"voltage_firingrate_observations_per_stimulus \u00b6 VOLTAGE_FIRINGRATE_OBSERVATIONS - calculate voltage and firing rate observations for a stimulus ( mean , mean at a frequency ) [ MEAN_V , MEAN_FR , STIMID , STIMPRES , VMOPSPERSTIM , FROBSPERSTIM ] = VOLTAGE_FIRINGRATE_OBSERVATIONS_PER_STIMULUS ( ... VM , SPIKERATE , TIME , STIM_ONSETOFFSETID , ... ) Calculates the mean response across each stimulus presentation described in STIM_ONSETOFFSETID for both voltage ( VM ) and SPIKERATE . SPIKERATE should be the firing rate at each time point T , VM is the voltage at each time point T . STIM_ONSETOFFSETID should have 1 row per stimulus and each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of 'TIME' ( such as seconds ) . STIMPRES is the stimulus presentation number . VMOPSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . FROBSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . This function also takes NAME / VALUE parameter pairs that modify its behavior . Parameter ( default value ) | Description ----------------------------------------------------------------------------- PRETIME ( [] ) | If not empty , the voltage PRETIME seconds before each | stimulus is subtracted from the response . F1 ( [] ) | If not empty , then the responses is taken to be the | magnitude of the fourier transform at the frequency F1 .","title":"voltage_firingrate_observations_per_stimulus"},{"location":"reference/neuroscience/membrane_voltage/voltage_firingrate_observations_per_stimulus.m/#voltage_firingrate_observations_per_stimulus","text":"VOLTAGE_FIRINGRATE_OBSERVATIONS - calculate voltage and firing rate observations for a stimulus ( mean , mean at a frequency ) [ MEAN_V , MEAN_FR , STIMID , STIMPRES , VMOPSPERSTIM , FROBSPERSTIM ] = VOLTAGE_FIRINGRATE_OBSERVATIONS_PER_STIMULUS ( ... VM , SPIKERATE , TIME , STIM_ONSETOFFSETID , ... ) Calculates the mean response across each stimulus presentation described in STIM_ONSETOFFSETID for both voltage ( VM ) and SPIKERATE . SPIKERATE should be the firing rate at each time point T , VM is the voltage at each time point T . STIM_ONSETOFFSETID should have 1 row per stimulus and each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of 'TIME' ( such as seconds ) . STIMPRES is the stimulus presentation number . VMOPSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . FROBSPERSTIM is a cell array containing the voltage observations for each stimulus ( F1 empty only ) . This function also takes NAME / VALUE parameter pairs that modify its behavior . Parameter ( default value ) | Description ----------------------------------------------------------------------------- PRETIME ( [] ) | If not empty , the voltage PRETIME seconds before each | stimulus is subtracted from the response . F1 ( [] ) | If not empty , then the responses is taken to be the | magnitude of the fourier transform at the frequency F1 .","title":"voltage_firingrate_observations_per_stimulus"},{"location":"reference/neuroscience/minis/minidetection.m/","text":"minidetection \u00b6 MINIDETECTION - Detect minis from noise -- THIS FUNCTION DOESNT WORK YET , STILL IN DEVELOPMENT MINISTRUCT = MINIDETECTION ( DATA , SI , ...) Finds spontaneous miniature evoked potential / current events in a recorded trace . Inputs : DATA should be an R x S matrix , where each row has a data set , and S is the number of samples in each recording . The sampling interval for the records is specified by SI . Additional modifications can be provided by specifying parameters as name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------------------------- do_detrend_median ( 1 ) | Should we detrend the data using DETREND_MEDIAN ? detrend_timescale ( 0.5 ) | Over what timescale ? ( in seconds ) estimate_std_median ( 1 ) | Should we use the median method ( STD_MEDIAN ) to estimate | standard deviation ( 1 ) or the standard method | of calling STD ( 0 ) ? minisimulation ( see txt )| What mini detection simulation should we use to | determine optimal threshold ? Default is | 'minidetectionsimulation_guassian' | This file must be on the path and it must be the | results of MINIDETECTIONSIMULATION t_before ( - 0.020 ) | Time before each mini to grab ( in seconds , rounded to | nearest sample based on SI ) t_after ( 0.100 ) | Time after each mini to grab ( in seconds , rounded to | nearest sample based on SI ) Outputs : MINISTRUCT is a structure with the following fields : Fieldname : | Description ----------------------------------------------------------------------------- frequency | The overall average frequency of detected mini events amplitude | The overall average amplitude of detected mini events intereventintervals | The time intervals between detected mini events wavetime | A time axis for plotting mini waveforms meanminiwaveform | The grand mean mini waveform miniamplitudes | The amplitude for each mini row_minisamples {} | For each row of DATA , the samples that correspond to mini peaks row_minitimes {} | For each row of DATA , the times ( from beginning of row DATA ) | that correspond to peaks row_miniwaveforms {} | For each row of DATA , the waveform associated with each mini row_miniamplitudes {} | For each row of DATA , the amplitude associated with each mini See also :","title":"minidetection"},{"location":"reference/neuroscience/minis/minidetection.m/#minidetection","text":"MINIDETECTION - Detect minis from noise -- THIS FUNCTION DOESNT WORK YET , STILL IN DEVELOPMENT MINISTRUCT = MINIDETECTION ( DATA , SI , ...) Finds spontaneous miniature evoked potential / current events in a recorded trace . Inputs : DATA should be an R x S matrix , where each row has a data set , and S is the number of samples in each recording . The sampling interval for the records is specified by SI . Additional modifications can be provided by specifying parameters as name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------------------------- do_detrend_median ( 1 ) | Should we detrend the data using DETREND_MEDIAN ? detrend_timescale ( 0.5 ) | Over what timescale ? ( in seconds ) estimate_std_median ( 1 ) | Should we use the median method ( STD_MEDIAN ) to estimate | standard deviation ( 1 ) or the standard method | of calling STD ( 0 ) ? minisimulation ( see txt )| What mini detection simulation should we use to | determine optimal threshold ? Default is | 'minidetectionsimulation_guassian' | This file must be on the path and it must be the | results of MINIDETECTIONSIMULATION t_before ( - 0.020 ) | Time before each mini to grab ( in seconds , rounded to | nearest sample based on SI ) t_after ( 0.100 ) | Time after each mini to grab ( in seconds , rounded to | nearest sample based on SI ) Outputs : MINISTRUCT is a structure with the following fields : Fieldname : | Description ----------------------------------------------------------------------------- frequency | The overall average frequency of detected mini events amplitude | The overall average amplitude of detected mini events intereventintervals | The time intervals between detected mini events wavetime | A time axis for plotting mini waveforms meanminiwaveform | The grand mean mini waveform miniamplitudes | The amplitude for each mini row_minisamples {} | For each row of DATA , the samples that correspond to mini peaks row_minitimes {} | For each row of DATA , the times ( from beginning of row DATA ) | that correspond to peaks row_miniwaveforms {} | For each row of DATA , the waveform associated with each mini row_miniamplitudes {} | For each row of DATA , the amplitude associated with each mini See also :","title":"minidetection"},{"location":"reference/neuroscience/minis/minidetectionsimulation.m/","text":"minidetectionsimulation \u00b6 MINIDETECTIONSIMULATION [ OPT_THRESHOLD , DETECTOR , CONV_SCALE , STATS ] = MINIDETECTIONSIMULATION Solves , through simulation , the optimum threshold for detecting miniature excitatory or inhibitory post - synaptic potentials or currents . Minis are assumed to arrive on a background of pure gaussian noise with a standard deviation of 1 . ( One can divide the threshold by the actual noise encountered in one 's own data to obtain the equivalent value for real data.) OPT_THRESHOLD - the threshold that produced the fewest overall errors of detection, weighing false positives and false negatives equally (because both errors have the same impact on average mini frequency and amplitude). DETECTOR - The filter used for detection. It assumes a positively-going wave (simply multiply this by -1 to switch sign). CONV_SCALE - The amount by which the convolution of the data and the DETECTOR should be scaled to reproduce the detection values used in this simulation (depends on sampling rate and number of samples). STATS - a structure with error rates for different values of threshold. The behavior of the function can be altered by passing name/value pairs: Parameter (default) | Description ------------------------------------------------------------------------------ DT (0.001) | The time step between adjacent samples Tau_Onset (0.0025) | The time of the synaptic potential onset (in seconds) Tau_Offset (0.0250) | The time of the synaptic potential offset (in seconds) Simulation_Duration (100) | The simulation duration (seconds) expected_rate_of_events (10) | The expected rate of real events (Hz) noise_fraction (0.1) | The fraction that Tau_Offset and Tau_Onset should be | altered by noise in the simulation threshold_steps (50) | Threshold steps to examine refractory_period (0.020) | Refractory period (time between events can be no shorter | than this, in seconds) plotit (0) | Plot the threshold vs. errors curve","title":"minidetectionsimulation"},{"location":"reference/neuroscience/minis/minidetectionsimulation.m/#minidetectionsimulation","text":"MINIDETECTIONSIMULATION [ OPT_THRESHOLD , DETECTOR , CONV_SCALE , STATS ] = MINIDETECTIONSIMULATION Solves , through simulation , the optimum threshold for detecting miniature excitatory or inhibitory post - synaptic potentials or currents . Minis are assumed to arrive on a background of pure gaussian noise with a standard deviation of 1 . ( One can divide the threshold by the actual noise encountered in one 's own data to obtain the equivalent value for real data.) OPT_THRESHOLD - the threshold that produced the fewest overall errors of detection, weighing false positives and false negatives equally (because both errors have the same impact on average mini frequency and amplitude). DETECTOR - The filter used for detection. It assumes a positively-going wave (simply multiply this by -1 to switch sign). CONV_SCALE - The amount by which the convolution of the data and the DETECTOR should be scaled to reproduce the detection values used in this simulation (depends on sampling rate and number of samples). STATS - a structure with error rates for different values of threshold. The behavior of the function can be altered by passing name/value pairs: Parameter (default) | Description ------------------------------------------------------------------------------ DT (0.001) | The time step between adjacent samples Tau_Onset (0.0025) | The time of the synaptic potential onset (in seconds) Tau_Offset (0.0250) | The time of the synaptic potential offset (in seconds) Simulation_Duration (100) | The simulation duration (seconds) expected_rate_of_events (10) | The expected rate of real events (Hz) noise_fraction (0.1) | The fraction that Tau_Offset and Tau_Onset should be | altered by noise in the simulation threshold_steps (50) | Threshold steps to examine refractory_period (0.020) | Refractory period (time between events can be no shorter | than this, in seconds) plotit (0) | Plot the threshold vs. errors curve","title":"minidetectionsimulation"},{"location":"reference/neuroscience/minis/minitemplates.m/","text":"minitemplates \u00b6 [MT,T,PARAMS] = MINITEMPLATES(...) Returns several rows of mini EPSC templates, ranging in amplitude from 0.1 to 1 in amplitude, and with a range of tau onsets and offsets. T is a series of time points that can be used to plot the templates. PARAMS is a structure that has one entry per template that indicates the Tau_Onset, Tau_Offset, and amplitude used. This function takes name/value pairs to modify its default behavior. Parameter (default) | Description ----------------------------------------------------------------------- Min_Amplitude (0.1) | The minimum amplitude to use Max_Amplitude (3) | The maximum amplitude to use Amplitude_Steps (9) | The number of amplitude steps from min to max Tau_Onsets ([0.001; | The range of Tau_Onset values to use (seconds) 0.003;]) | Tau_Offsets ([0.010; | The range of Tau_Offset values to use (seconds) 0.020; 0.030]); | t0 (0) | The time of the first sample in each template (seconds) t1 (0.100) | The time of the last sample in each template (seconds) dt (0.001) | The time interval between samples (seconds)","title":"minitemplates"},{"location":"reference/neuroscience/minis/minitemplates.m/#minitemplates","text":"[MT,T,PARAMS] = MINITEMPLATES(...) Returns several rows of mini EPSC templates, ranging in amplitude from 0.1 to 1 in amplitude, and with a range of tau onsets and offsets. T is a series of time points that can be used to plot the templates. PARAMS is a structure that has one entry per template that indicates the Tau_Onset, Tau_Offset, and amplitude used. This function takes name/value pairs to modify its default behavior. Parameter (default) | Description ----------------------------------------------------------------------- Min_Amplitude (0.1) | The minimum amplitude to use Max_Amplitude (3) | The maximum amplitude to use Amplitude_Steps (9) | The number of amplitude steps from min to max Tau_Onsets ([0.001; | The range of Tau_Onset values to use (seconds) 0.003;]) | Tau_Offsets ([0.010; | The range of Tau_Offset values to use (seconds) 0.020; 0.030]); | t0 (0) | The time of the first sample in each template (seconds) t1 (0.100) | The time of the last sample in each template (seconds) dt (0.001) | The time interval between samples (seconds)","title":"minitemplates"},{"location":"reference/neuroscience/mledenoise/MLE_PoisGauss.m/","text":"MLE_PoisGauss \u00b6 MLE_PoisGauss - Calculate maximum likelihood of gain and average stimulus responses given raw responses [ PARAMS , FVAL ] = MLE_PoisGauss ( STIM_CENTER_TIMES , STIM_DURATIONS , RESPONSES_OBSERVED , ... SP , STIMLIST , MODEL , FIXPARAM , G_PARAMS , S_I_PARAMS , SMOOTHNESS ); Inputs : STIM_CENTER_TIMES - The time points at which the stimuli were presented ( middle of the stimuli ) Note that this vector should be as long as the number of stimuli times the number of repetitions of those stimuli . STIM_DURATIONS - The duration of each stimulus ( should be a vector ) RESPONSES_OBSERVED - The observed spike counts ( for Poisson model ) or rates ( for Gaussian model ) that occurred for stimulus presentation i ( should be vector as long as number of stimui times number of repetitions ) SP - Sinwave parameters STIMLIST - Stim ID numbers for all presented stimuli MODEL - 'Poisson' or 'Gaussian' FIXPARAM - Is the fixed parameter g ( FIXPARAM == 1 ) or s_i ( FIXPARAM == 0 ) ? G_PARAMS - A list of amplitudes for the 4 sinwaves S_I_PARAMS - The estimated mean firing rate for the i different types of stimuli that were presented ( note that this is as long as the number of unique stimuli ) . SMOOTHNESS - A constraint on the 2 nd derivative ( must be smoother than SMOOTHNESS ) If Inf is provided , or empty ([]), then this constraint is not used . Outputs : PARAMS - The estimated parameters , either s_i ( FIXPARAM == 1 ) or g ( FIXPARAM == 0 ) Fval - the value of the function to be minimized","title":"MLE_PoisGauss"},{"location":"reference/neuroscience/mledenoise/MLE_PoisGauss.m/#mle_poisgauss","text":"MLE_PoisGauss - Calculate maximum likelihood of gain and average stimulus responses given raw responses [ PARAMS , FVAL ] = MLE_PoisGauss ( STIM_CENTER_TIMES , STIM_DURATIONS , RESPONSES_OBSERVED , ... SP , STIMLIST , MODEL , FIXPARAM , G_PARAMS , S_I_PARAMS , SMOOTHNESS ); Inputs : STIM_CENTER_TIMES - The time points at which the stimuli were presented ( middle of the stimuli ) Note that this vector should be as long as the number of stimuli times the number of repetitions of those stimuli . STIM_DURATIONS - The duration of each stimulus ( should be a vector ) RESPONSES_OBSERVED - The observed spike counts ( for Poisson model ) or rates ( for Gaussian model ) that occurred for stimulus presentation i ( should be vector as long as number of stimui times number of repetitions ) SP - Sinwave parameters STIMLIST - Stim ID numbers for all presented stimuli MODEL - 'Poisson' or 'Gaussian' FIXPARAM - Is the fixed parameter g ( FIXPARAM == 1 ) or s_i ( FIXPARAM == 0 ) ? G_PARAMS - A list of amplitudes for the 4 sinwaves S_I_PARAMS - The estimated mean firing rate for the i different types of stimuli that were presented ( note that this is as long as the number of unique stimuli ) . SMOOTHNESS - A constraint on the 2 nd derivative ( must be smoother than SMOOTHNESS ) If Inf is provided , or empty ([]), then this constraint is not used . Outputs : PARAMS - The estimated parameters , either s_i ( FIXPARAM == 1 ) or g ( FIXPARAM == 0 ) Fval - the value of the function to be minimized","title":"MLE_PoisGauss"},{"location":"reference/neuroscience/mledenoise/SlowMLEDeNoise.m/","text":"SlowMLEDeNoise \u00b6 SlowMLEDeNoise -- Estimate underlying stimulus response assuming a slow background drift in gain [ RESPONSES , SIN_WEIGHTS ] = SLOWMLEDENOISE ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); ( see additional output arguments below ) This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . The parameters g ( t ) and s_i ( t ) are estimated using a maximum likelihood approach . First , initial estimates of g ( t ) and s_i ( t ) are made . The function g ( t ) is fit as the sum of 4 sinusoids . These sinwaves are constrained to have very low temporal frequencies , and cannot take a temporal frequency faster than 1 / 10 of the total trial duration by default ( see 'maxFrequency' parameter below ) . The measured mean response to each stimulus is taken to be the initial estimate of s_i ( t ) . We then iteratively re - estimate s_i ( t ) and g ( t ) to increase the likelihood of the data r ( t ) that we actually observed . First , s_i ( t ) is fixed while g ( t ) is re - estimated , and then g ( t ) is fixed while s_i ( t ) is re - estimated . This process is repeated 10 times be default ( see 'numIterations' parameter below ) . Note : This is a generalization of code that Dan Rubin wrote as part of his PhD Thesis : \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012 RESPONSES are the estimated mean responses to each unique stimulus . SIN_WEIGHTS are the best - fit amplitude coefficients to the underlying 4 term sinusoidal fit . PARAMETERS that can be modified , with default values : 'mlesmoothness' : Constraint of smoothness of second derivative of stimulus : response . Default 0.1 response units squared / stimvalues squared . : The 2 nd derivative calculation assumess that STIMVALUES are : equally spaced . Any change that is faster than this constraint : is not allowed . 'tFilter' : Timecourse of spikerate filter , default 100 ( seconds ) 'sin_dt' : Step size for smoothed sinusoid function , default 0.1 ( seconds ) 'dt' : Step size for simulated firing rate , default 1 / 1000 ( seconds ) 'model' : Can be 'Poisson' or 'Gaussian' ( case insensitive ) : Use 'Poisson' for spike responses , and 'Gaussian' for : continuous - valued measurements ( spike rates / voltages / etc ) 'responses_s_i' : Responses to each stimulus ; if this is : empty , then the spike rates are calculated from the : stimulus on and off times ( average rate ) ( default []) : If you want to calculate the response to a continuous : process such as the F1 component or a voltage , then : you must provide this . : This quantity serves as the r ( t ) to be fit , and also : serves as the initial estimate of s ( t ) . 'prerecordtime' : Number of seconds before the first stimulus that we assume : the recording of spikes began ( default 5 ) 'postrecordtime' : Number of seconds after the last stimulus that we assume : the recording of spikes continued ( default 5 ) 'maxFrequency' : Maximum temporal frequency of the smoothed sinewave , where : 1 cycle is the duration of the whole experiment . Default 10 'numIterations' : Number of re - estimation steps to perform . Default 10. 'verbose' : 0 / 1 Prints what is going on as function runs ( default 0 ) One can also retrieve additional outputs : [ RESPONSES , SIN_WEIGHT , FIT_SIN4 , MLE , RESPONSE_OBSERVED , ... STIMLIST , RESPONSES_S_I , SMOOTH_TIME , SMOOTH_SPIKERATE , SINFIT_SMOOTH_SPIKERATE ] ... = SLOWMLEDENOISE ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); FIT_SIN4 is a set of 13 coefficients to a 4 th order sinusoidal fit ( see SIN4_FIT ), MLE is the actual maximum likelihood value RESPONSE_OBSERVED is the actual responses that were observed . In the case of the Poisson model , this is the number of spikes per stimulus . In the case of the Gaussian model , this is the response rate . STIMLIST is the order in which the stimuli were presented ; stimuli are numbered according to the value of STIMVALUES , from least to greatest ( see help UNIQUE ) RESPONSES_S_I are the responses ( r ( t ) * g ( t )) for each stimulus in STIMLIST Examples : see TESTSLOWMLE and TESTSLOWMLE_MODULATION ( 'type testSlowMLE' and 'type testSlowMLE_modulation' ) See also : FIT_SIN4","title":"SlowMLEDeNoise"},{"location":"reference/neuroscience/mledenoise/SlowMLEDeNoise.m/#slowmledenoise","text":"SlowMLEDeNoise -- Estimate underlying stimulus response assuming a slow background drift in gain [ RESPONSES , SIN_WEIGHTS ] = SLOWMLEDENOISE ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); ( see additional output arguments below ) This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . The parameters g ( t ) and s_i ( t ) are estimated using a maximum likelihood approach . First , initial estimates of g ( t ) and s_i ( t ) are made . The function g ( t ) is fit as the sum of 4 sinusoids . These sinwaves are constrained to have very low temporal frequencies , and cannot take a temporal frequency faster than 1 / 10 of the total trial duration by default ( see 'maxFrequency' parameter below ) . The measured mean response to each stimulus is taken to be the initial estimate of s_i ( t ) . We then iteratively re - estimate s_i ( t ) and g ( t ) to increase the likelihood of the data r ( t ) that we actually observed . First , s_i ( t ) is fixed while g ( t ) is re - estimated , and then g ( t ) is fixed while s_i ( t ) is re - estimated . This process is repeated 10 times be default ( see 'numIterations' parameter below ) . Note : This is a generalization of code that Dan Rubin wrote as part of his PhD Thesis : \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012 RESPONSES are the estimated mean responses to each unique stimulus . SIN_WEIGHTS are the best - fit amplitude coefficients to the underlying 4 term sinusoidal fit . PARAMETERS that can be modified , with default values : 'mlesmoothness' : Constraint of smoothness of second derivative of stimulus : response . Default 0.1 response units squared / stimvalues squared . : The 2 nd derivative calculation assumess that STIMVALUES are : equally spaced . Any change that is faster than this constraint : is not allowed . 'tFilter' : Timecourse of spikerate filter , default 100 ( seconds ) 'sin_dt' : Step size for smoothed sinusoid function , default 0.1 ( seconds ) 'dt' : Step size for simulated firing rate , default 1 / 1000 ( seconds ) 'model' : Can be 'Poisson' or 'Gaussian' ( case insensitive ) : Use 'Poisson' for spike responses , and 'Gaussian' for : continuous - valued measurements ( spike rates / voltages / etc ) 'responses_s_i' : Responses to each stimulus ; if this is : empty , then the spike rates are calculated from the : stimulus on and off times ( average rate ) ( default []) : If you want to calculate the response to a continuous : process such as the F1 component or a voltage , then : you must provide this . : This quantity serves as the r ( t ) to be fit , and also : serves as the initial estimate of s ( t ) . 'prerecordtime' : Number of seconds before the first stimulus that we assume : the recording of spikes began ( default 5 ) 'postrecordtime' : Number of seconds after the last stimulus that we assume : the recording of spikes continued ( default 5 ) 'maxFrequency' : Maximum temporal frequency of the smoothed sinewave , where : 1 cycle is the duration of the whole experiment . Default 10 'numIterations' : Number of re - estimation steps to perform . Default 10. 'verbose' : 0 / 1 Prints what is going on as function runs ( default 0 ) One can also retrieve additional outputs : [ RESPONSES , SIN_WEIGHT , FIT_SIN4 , MLE , RESPONSE_OBSERVED , ... STIMLIST , RESPONSES_S_I , SMOOTH_TIME , SMOOTH_SPIKERATE , SINFIT_SMOOTH_SPIKERATE ] ... = SLOWMLEDENOISE ( STIM_ONSETS , STIMOFFSETS , STIMVALUES , ... SPIKE_TIMES , [ PARAM1 , VALUE1 , ... ]); FIT_SIN4 is a set of 13 coefficients to a 4 th order sinusoidal fit ( see SIN4_FIT ), MLE is the actual maximum likelihood value RESPONSE_OBSERVED is the actual responses that were observed . In the case of the Poisson model , this is the number of spikes per stimulus . In the case of the Gaussian model , this is the response rate . STIMLIST is the order in which the stimuli were presented ; stimuli are numbered according to the value of STIMVALUES , from least to greatest ( see help UNIQUE ) RESPONSES_S_I are the responses ( r ( t ) * g ( t )) for each stimulus in STIMLIST Examples : see TESTSLOWMLE and TESTSLOWMLE_MODULATION ( 'type testSlowMLE' and 'type testSlowMLE_modulation' ) See also : FIT_SIN4","title":"SlowMLEDeNoise"},{"location":"reference/neuroscience/mledenoise/gaindriftexample.m/","text":"gaindriftexample \u00b6 GAINDRIFTEXAMPLE - Create an artificial stimulus response where gain varies [ SPIKETIMES , R , T , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS , G ] = ... GAINDRIFTEXAMPLE Creates a spike train that with the following rate : r ( t ) = g ( t ) * s_i ( t ) The ongoing gain of the system is g ( t ), and is a slow sinusoid . s_i ( t ) is the response to stimulus i . Outputs : SPIKETIMES is the time of all of the stimulated spikes . R is the rate used to generate the spikes T is an array of time value for the simulated rate values STIM_ON_TIMES is an array of times of stimulus onset STIM_OFF_TIMES is an array of time of stimulus offset STIM_NUMBERS is an array of stim ids G is the gain as a function of time . Alternatively , one may use : [ SPIKETIMES , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS ] = ... GAINDRIFTEXAMPLE ( 'PROPERTY1' , VALUE1 , ... ); can be used to alter the parameters used to create the model as follows : NAME : DESCRIPTION : ------------------------------------------------------------------------- 'gain_amplitude' The amplitude of the gain modulation ( default 2 ) 'gain_frequency' Frequency of gain modulation ( default 1 / 300 Hz ) 'gain_offset' Offset of gain modulation ( default 0.5 ) 'stim_response' Mean responses to each stim ( default [ 20 10 5 0 ]) 'stim_repeats' Number of times to repeat each stim ( default 50 ) 'stim_duration' Duration of each stimulus ( default 2 seconds ) 'stim_isi' Inter - stimulus - interval ( default 5 seconds ) 'response_tf' Temporal frequency of response ( default 0 Hz ) 'dt' Time step of simulation ; default 0.001 seconds Creates an artificial stimulus response where gain varies . Creates REPS numbers of repetitions of the stimuli that have mean responses STIM_RESPONSES ( i ) . The length of STIM_RESPONSES determines the number of stimuli that are produced . Each stimulus is assumed to last STIM_DURATION seconds . Example : [ spiketimes , r , t , stimon , stimoff , stimids , g ] = gaindriftexample ; figure ; plot ( t , r ); hold on ; plot ( spiketimes , 50 , 'kx' ); % plot an x for each simulated spike time plot ( t , g , 'g' ); % plot gain for i = 1 : length ( stimon ), text ( mean ([ stimon ( i ) stimoff ( i )]), 55 , int2str ( stimids ( i ))); end ; axis ([ t ( 1 ) t ( end ) - 60 60 ]); box off ; xlabel ( 'Time(s)' ); ylabel ( 'Firing rate' ); title ( 'x indicates spike, numbers indicate stimulus number' );","title":"gaindriftexample"},{"location":"reference/neuroscience/mledenoise/gaindriftexample.m/#gaindriftexample","text":"GAINDRIFTEXAMPLE - Create an artificial stimulus response where gain varies [ SPIKETIMES , R , T , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS , G ] = ... GAINDRIFTEXAMPLE Creates a spike train that with the following rate : r ( t ) = g ( t ) * s_i ( t ) The ongoing gain of the system is g ( t ), and is a slow sinusoid . s_i ( t ) is the response to stimulus i . Outputs : SPIKETIMES is the time of all of the stimulated spikes . R is the rate used to generate the spikes T is an array of time value for the simulated rate values STIM_ON_TIMES is an array of times of stimulus onset STIM_OFF_TIMES is an array of time of stimulus offset STIM_NUMBERS is an array of stim ids G is the gain as a function of time . Alternatively , one may use : [ SPIKETIMES , STIM_ON_TIMES , STIM_OFF_TIMES , STIM_NUMBERS ] = ... GAINDRIFTEXAMPLE ( 'PROPERTY1' , VALUE1 , ... ); can be used to alter the parameters used to create the model as follows : NAME : DESCRIPTION : ------------------------------------------------------------------------- 'gain_amplitude' The amplitude of the gain modulation ( default 2 ) 'gain_frequency' Frequency of gain modulation ( default 1 / 300 Hz ) 'gain_offset' Offset of gain modulation ( default 0.5 ) 'stim_response' Mean responses to each stim ( default [ 20 10 5 0 ]) 'stim_repeats' Number of times to repeat each stim ( default 50 ) 'stim_duration' Duration of each stimulus ( default 2 seconds ) 'stim_isi' Inter - stimulus - interval ( default 5 seconds ) 'response_tf' Temporal frequency of response ( default 0 Hz ) 'dt' Time step of simulation ; default 0.001 seconds Creates an artificial stimulus response where gain varies . Creates REPS numbers of repetitions of the stimuli that have mean responses STIM_RESPONSES ( i ) . The length of STIM_RESPONSES determines the number of stimuli that are produced . Each stimulus is assumed to last STIM_DURATION seconds . Example : [ spiketimes , r , t , stimon , stimoff , stimids , g ] = gaindriftexample ; figure ; plot ( t , r ); hold on ; plot ( spiketimes , 50 , 'kx' ); % plot an x for each simulated spike time plot ( t , g , 'g' ); % plot gain for i = 1 : length ( stimon ), text ( mean ([ stimon ( i ) stimoff ( i )]), 55 , int2str ( stimids ( i ))); end ; axis ([ t ( 1 ) t ( end ) - 60 60 ]); box off ; xlabel ( 'Time(s)' ); ylabel ( 'Firing rate' ); title ( 'x indicates spike, numbers indicate stimulus number' );","title":"gaindriftexample"},{"location":"reference/neuroscience/mledenoise/response_gaindrift_model.m/","text":"response_gaindrift_model \u00b6 RESPONSE_GAINDRIFT_MODEL - Computes the response of the gain drift model R = RESPONSE_GAINDRIFT_MODEL ( STIM_TIMES , STIM_DURATION , STIMLIST , ... SINPARAMS , G_PARAMS , S_I_PARAMS ); This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . This function computes the response to a specific model , where the stimuli are presented in order STIMLIST at times STIM_TIMES and have stim duration STIM_DURATION . It is further assumed that SINPARAMS are parameters of a 4 sinusoidal fit to the data that describes the slow drift in gain g . S_I_PARAMS is the mean response to stimulus type i , which can occur more than once in the STIMLIST . G_PARAMS is a 4 element vector that describes the weighting of the 4 sinusoids . If G_PARAMS has a 5 th element , it is assumed to be a constant offset for g ( t ) . R is returned at the STIM_TIMES . If R is less than or equal to 0 , R is set to eps .","title":"response_gaindrift_model"},{"location":"reference/neuroscience/mledenoise/response_gaindrift_model.m/#response_gaindrift_model","text":"RESPONSE_GAINDRIFT_MODEL - Computes the response of the gain drift model R = RESPONSE_GAINDRIFT_MODEL ( STIM_TIMES , STIM_DURATION , STIMLIST , ... SINPARAMS , G_PARAMS , S_I_PARAMS ); This function assumes that the response to a neural spike train in response to stimuli s_i can be written as r ( t ) = g ( t ) * s_i ( t ) where r ( t ) is the actual response observed as a function of time , g ( t ) is an unknown slow background gain modulation of the cortex , and s_i ( t ) is the unknown mean response to each stimulus . This function computes the response to a specific model , where the stimuli are presented in order STIMLIST at times STIM_TIMES and have stim duration STIM_DURATION . It is further assumed that SINPARAMS are parameters of a 4 sinusoidal fit to the data that describes the slow drift in gain g . S_I_PARAMS is the mean response to stimulus type i , which can occur more than once in the STIMLIST . G_PARAMS is a 4 element vector that describes the weighting of the 4 sinusoids . If G_PARAMS has a 5 th element , it is assumed to be a constant offset for g ( t ) . R is returned at the STIM_TIMES . If R is less than or equal to 0 , R is set to eps .","title":"response_gaindrift_model"},{"location":"reference/neuroscience/mledenoise/testSlowMLE.m/","text":"testSlowMLE \u00b6 testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of testSlowMLE in action on simulated data . See also : TESTSLOWMLE_MODULATION for an example where the response is a modulated sinusoid instead of a constant response .","title":"testSlowMLE"},{"location":"reference/neuroscience/mledenoise/testSlowMLE.m/#testslowmle","text":"testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of testSlowMLE in action on simulated data . See also : TESTSLOWMLE_MODULATION for an example where the response is a modulated sinusoid instead of a constant response .","title":"testSlowMLE"},{"location":"reference/neuroscience/mledenoise/testSlowMLE_modulation.m/","text":"testSlowMLE_modulation \u00b6 testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of testSlowMLE in action on simulated data that exhibits modulated responses to stimulation . See also : TESTSLOWMLE for an example where the response is a a constant response instead of modulated .","title":"testSlowMLE_modulation"},{"location":"reference/neuroscience/mledenoise/testSlowMLE_modulation.m/#testslowmle_modulation","text":"testSlowMLE - A function that demonstrates the use of SlowMLEDenoise . m Read this function to see a demo of testSlowMLE in action on simulated data that exhibits modulated responses to stimulation . See also : TESTSLOWMLE for an example where the response is a a constant response instead of modulated .","title":"testSlowMLE_modulation"},{"location":"reference/neuroscience/mledenoise/archived_code/MLE_Gauss.m/","text":"MLE_Gauss \u00b6 UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"MLE_Gauss"},{"location":"reference/neuroscience/mledenoise/archived_code/MLE_Gauss.m/#mle_gauss","text":"UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"MLE_Gauss"},{"location":"reference/neuroscience/mledenoise/archived_code/MLE_Pois.m/","text":"MLE_Pois \u00b6 UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"MLE_Pois"},{"location":"reference/neuroscience/mledenoise/archived_code/MLE_Pois.m/#mle_pois","text":"UNTITLED2 Summary of this function goes here Detailed explanation goes here","title":"MLE_Pois"},{"location":"reference/neuroscience/mledenoise/archived_code/slowdenoise.m/","text":"slowdenoise \u00b6 SLOWDENOISE - Remove slow gain changes from spike train [ RATE , GAIN , T ] = SLOWDENOISE ( SPIKETIMES , STIMTIMES , STIMIDS , T0 , T1 , DT , TFILTER , F ) STIMTIMES - An S x 2 matrix where S is the number of stims , and the first column is the onset timet for each stim , and the second column is the offset timet for each stim TFILTER - Time resolution of the filter ( e . g ., 0 . 1 seconds )","title":"slowdenoise"},{"location":"reference/neuroscience/mledenoise/archived_code/slowdenoise.m/#slowdenoise","text":"SLOWDENOISE - Remove slow gain changes from spike train [ RATE , GAIN , T ] = SLOWDENOISE ( SPIKETIMES , STIMTIMES , STIMIDS , T0 , T1 , DT , TFILTER , F ) STIMTIMES - An S x 2 matrix where S is the number of stims , and the first column is the onset timet for each stim , and the second column is the offset timet for each stim TFILTER - Time resolution of the filter ( e . g ., 0 . 1 seconds )","title":"slowdenoise"},{"location":"reference/neuroscience/models/hh/HHclass.m/","text":"CLASS HHclass \u00b6 developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Superclasses \u00b6 neuronmodelclass Properties \u00b6 Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial Methods \u00b6 Method Description HHclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt HHclass/dsdt is a function. hvar HHclass/hvar is a function. mvar HHclass/mvar is a function. nvar HHclass/nvar is a function. setup_command HHclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class voltage HHclass/voltage is a function. Methods help \u00b6 HHclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for HHclass / HHclass doc HHclass dsdt - HHclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - HHclass/hvar is a function. h = hvar ( HHobj ) mvar - HHclass/mvar is a function. m = mvar ( HHobj ) nvar - HHclass/nvar is a function. n = nvar ( HHobj ) setup_command - HHclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation Help for HHclass / simulate is inherited from superclass neuronmodelclass statemodifier - nothing to do in base class Help for HHclass / statemodifier is inherited from superclass neuronmodelclass voltage - HHclass/voltage is a function. V = voltage(HHobj)","title":"HHclass"},{"location":"reference/neuroscience/models/hh/HHclass.m/#class-hhclass","text":"developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller","title":"CLASS HHclass"},{"location":"reference/neuroscience/models/hh/HHclass.m/#superclasses","text":"neuronmodelclass","title":"Superclasses"},{"location":"reference/neuroscience/models/hh/HHclass.m/#properties","text":"Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial","title":"Properties"},{"location":"reference/neuroscience/models/hh/HHclass.m/#methods","text":"Method Description HHclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt HHclass/dsdt is a function. hvar HHclass/hvar is a function. mvar HHclass/mvar is a function. nvar HHclass/nvar is a function. setup_command HHclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class voltage HHclass/voltage is a function.","title":"Methods"},{"location":"reference/neuroscience/models/hh/HHclass.m/#methods-help","text":"HHclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for HHclass / HHclass doc HHclass dsdt - HHclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - HHclass/hvar is a function. h = hvar ( HHobj ) mvar - HHclass/mvar is a function. m = mvar ( HHobj ) nvar - HHclass/nvar is a function. n = nvar ( HHobj ) setup_command - HHclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation Help for HHclass / simulate is inherited from superclass neuronmodelclass statemodifier - nothing to do in base class Help for HHclass / statemodifier is inherited from superclass neuronmodelclass voltage - HHclass/voltage is a function. V = voltage(HHobj)","title":"Methods help"},{"location":"reference/neuroscience/models/hh/HHsynclass.m/","text":"CLASS HHsynclass \u00b6 developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Superclasses \u00b6 neuronmodelclass Properties \u00b6 Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA SR AMPA NMDA GABA E_ESyn E_ISyn GLUT_PNQ ESyn1_times ESyn2_times ISyn_times GABA_PNQ facilitation facilitation_tau V_recovery_time Total_AMPA_G Total_NMDA_G Total_GABA_G Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial Methods \u00b6 Method Description HHsynclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt HHsynclass/dsdt is a function. hvar HHsynclass/hvar is a function. mvar HHsynclass/mvar is a function. nvar HHsynclass/nvar is a function. setup_command HHsynclass/setup_command is a function. setup_synapses HHsynclass/setup_synapses is a function. simulate perform a simulation statemodifier nothing to do in base class voltage HHsynclass/voltage is a function. Methods help \u00b6 HHsynclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for HHsynclass / HHsynclass doc HHsynclass dsdt - HHsynclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - HHsynclass/hvar is a function. h = hvar ( HHobj ) mvar - HHsynclass/mvar is a function. m = mvar ( HHobj ) nvar - HHsynclass/nvar is a function. n = nvar ( HHobj ) setup_command - HHsynclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) setup_synapses - HHsynclass/setup_synapses is a function. HHobj = setup_synapses(HHobj) simulate - perform a simulation Help for HHsynclass / simulate is inherited from superclass neuronmodelclass statemodifier - nothing to do in base class Help for HHsynclass / statemodifier is inherited from superclass neuronmodelclass voltage - HHsynclass/voltage is a function. V = voltage(HHobj)","title":"HHsynclass"},{"location":"reference/neuroscience/models/hh/HHsynclass.m/#class-hhsynclass","text":"developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller","title":"CLASS HHsynclass"},{"location":"reference/neuroscience/models/hh/HHsynclass.m/#superclasses","text":"neuronmodelclass","title":"Superclasses"},{"location":"reference/neuroscience/models/hh/HHsynclass.m/#properties","text":"Property Description E_Na V_threshold spiketimes spikesamples E_K G_L G_Na G_K Na_Inactivation_Enable TTX TEA SR AMPA NMDA GABA E_ESyn E_ISyn GLUT_PNQ ESyn1_times ESyn2_times ISyn_times GABA_PNQ facilitation facilitation_tau V_recovery_time Total_AMPA_G Total_NMDA_G Total_GABA_G Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial","title":"Properties"},{"location":"reference/neuroscience/models/hh/HHsynclass.m/#methods","text":"Method Description HHsynclass developed by Steve Van Hooser and Ishaan Khurana, with code from dsdt HHsynclass/dsdt is a function. hvar HHsynclass/hvar is a function. mvar HHsynclass/mvar is a function. nvar HHsynclass/nvar is a function. setup_command HHsynclass/setup_command is a function. setup_synapses HHsynclass/setup_synapses is a function. simulate perform a simulation statemodifier nothing to do in base class voltage HHsynclass/voltage is a function.","title":"Methods"},{"location":"reference/neuroscience/models/hh/HHsynclass.m/#methods-help","text":"HHsynclass - developed by Steve Van Hooser and Ishaan Khurana, with code from _An Introductory Course in Computational Neuroscience_ by Paul Miller Documentation for HHsynclass / HHsynclass doc HHsynclass dsdt - HHsynclass/dsdt is a function. [dsdt, Itot] = dsdt(HHobj, S_value) hvar - HHsynclass/hvar is a function. h = hvar ( HHobj ) mvar - HHsynclass/mvar is a function. m = mvar ( HHobj ) nvar - HHsynclass/nvar is a function. n = nvar ( HHobj ) setup_command - HHsynclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) setup_synapses - HHsynclass/setup_synapses is a function. HHobj = setup_synapses(HHobj) simulate - perform a simulation Help for HHsynclass / simulate is inherited from superclass neuronmodelclass statemodifier - nothing to do in base class Help for HHsynclass / statemodifier is inherited from superclass neuronmodelclass voltage - HHsynclass/voltage is a function. V = voltage(HHobj)","title":"Methods help"},{"location":"reference/neuroscience/models/hh/neuronmodelclass.m/","text":"CLASS neuronmodelclass \u00b6 developed by Steve Van Hooser and Ishaan Khurana Superclasses \u00b6 none Properties \u00b6 Property Description Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial Methods \u00b6 Method Description dsdt neuronmodelclass/dsdt is a function. neuronmodelclass developed by Steve Van Hooser and Ishaan Khurana setup_command neuronmodelclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class Methods help \u00b6 dsdt - neuronmodelclass/dsdt is a function. dsdt = dsdt(neuronmodel_obj, S_value) neuronmodelclass - developed by Steve Van Hooser and Ishaan Khurana Documentation for neuronmodelclass / neuronmodelclass doc neuronmodelclass setup_command - neuronmodelclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation statemodifier - nothing to do in base class","title":"neuronmodelclass"},{"location":"reference/neuroscience/models/hh/neuronmodelclass.m/#class-neuronmodelclass","text":"developed by Steve Van Hooser and Ishaan Khurana","title":"CLASS neuronmodelclass"},{"location":"reference/neuroscience/models/hh/neuronmodelclass.m/#superclasses","text":"none","title":"Superclasses"},{"location":"reference/neuroscience/models/hh/neuronmodelclass.m/#properties","text":"Property Description Cm Rm E_leak dt t_start t_end f samplenumber_current update_method S I t command step1_time step2_time step1_value step2_value involtageclamp V_initial","title":"Properties"},{"location":"reference/neuroscience/models/hh/neuronmodelclass.m/#methods","text":"Method Description dsdt neuronmodelclass/dsdt is a function. neuronmodelclass developed by Steve Van Hooser and Ishaan Khurana setup_command neuronmodelclass/setup_command is a function. simulate perform a simulation statemodifier nothing to do in base class","title":"Methods"},{"location":"reference/neuroscience/models/hh/neuronmodelclass.m/#methods-help","text":"dsdt - neuronmodelclass/dsdt is a function. dsdt = dsdt(neuronmodel_obj, S_value) neuronmodelclass - developed by Steve Van Hooser and Ishaan Khurana Documentation for neuronmodelclass / neuronmodelclass doc neuronmodelclass setup_command - neuronmodelclass/setup_command is a function. neuronmodel_obj = setup_command ( neuronmodel_obj , varargin ) simulate - perform a simulation statemodifier - nothing to do in base class","title":"Methods help"},{"location":"reference/neuroscience/models/modelel/modelel/modelel_init.m/","text":"modelel_init \u00b6 MODELEL_INIT - Initialize a model element MODELEL = MODELEL_INIT or MODELEL = MODELEL_INIT ( PARAM1NAME , PARAM1VALUE , ...) Creates a MODELEL structure . A default model is created unless parameters are modified by passing name , value pairs . This framework can describe any element that has a time T and an integration step time dT . Returns a structure MODELEL describing a neuron : ------------------------------------------------------- T ( 0 ) | Current time ( seconds ) dT ( 1e-4 ) | Step time ( seconds ) name ( '' ) | Name of the neuron ( character string ) type ( 'modelel' ) | Type : must be 'modelel' ( not modifiable ) model ( 'none' ) | Structure for the model such as | that returned by 'intfireleaky' See HELP MODELELS for a list of valid neuron model types . Examples : intfire = intfireleaky_init ; % create a default LI & F neuron","title":"modelel_init"},{"location":"reference/neuroscience/models/modelel/modelel/modelel_init.m/#modelel_init","text":"MODELEL_INIT - Initialize a model element MODELEL = MODELEL_INIT or MODELEL = MODELEL_INIT ( PARAM1NAME , PARAM1VALUE , ...) Creates a MODELEL structure . A default model is created unless parameters are modified by passing name , value pairs . This framework can describe any element that has a time T and an integration step time dT . Returns a structure MODELEL describing a neuron : ------------------------------------------------------- T ( 0 ) | Current time ( seconds ) dT ( 1e-4 ) | Step time ( seconds ) name ( '' ) | Name of the neuron ( character string ) type ( 'modelel' ) | Type : must be 'modelel' ( not modifiable ) model ( 'none' ) | Structure for the model such as | that returned by 'intfireleaky' See HELP MODELELS for a list of valid neuron model types . Examples : intfire = intfireleaky_init ; % create a default LI & F neuron","title":"modelel_init"},{"location":"reference/neuroscience/models/modelel/modelel/modelel_reset.m/","text":"modelel_reset \u00b6 MODELEL_RESET - Reset a modelel to time 0 MODELEL = MODELEL_RESET(MODELEL) Reset a modelel model so that all T fields are starting at 0.","title":"modelel_reset"},{"location":"reference/neuroscience/models/modelel/modelel/modelel_reset.m/#modelel_reset","text":"MODELEL_RESET - Reset a modelel to time 0 MODELEL = MODELEL_RESET(MODELEL) Reset a modelel model so that all T fields are starting at 0.","title":"modelel_reset"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivity4cell_learning1.m/","text":"directionselectivity4cell_learning1 \u00b6 DIRECTIONSELECTIVITY4CELL_LEARNING1 OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp Gmax_initial ( 3e-9 ) | 1 x4 matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_learning1"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivity4cell_learning1.m/#directionselectivity4cell_learning1","text":"DIRECTIONSELECTIVITY4CELL_LEARNING1 OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp Gmax_initial ( 3e-9 ) | 1 x4 matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_learning1"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivity4cell_random.m/","text":"directionselectivity4cell_random \u00b6 DIRECTIONSELECTIVITY4CELL_RANDOM OUT = DIRECTIONSELECTIVITY4CELL_RANDOM Randomly choose weights for a 4 - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_random"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivity4cell_random.m/#directionselectivity4cell_random","text":"DIRECTIONSELECTIVITY4CELL_RANDOM OUT = DIRECTIONSELECTIVITY4CELL_RANDOM Randomly choose weights for a 4 - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_random"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivity4celldemo.m/","text":"directionselectivity4celldemo \u00b6 DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO Enter \"TYPE DIRECTIONSELECTIVITY4CELLDEMO\" to see the code . Input cells : 1 - 4 Cells 1 and 2 are at position 1 , cells 3 and 4 are at position 2. Cells 1 and 3 fire instantly , while cells 2 and 4 have a latency . One can modify the default parameters by passing name / value pairs to the function like this [ MODELEL , DI , UP , DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO ( PARAM1NAME , PARAM1VALUE , ... ) Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between cell 1 , 2 and 3 , 4 lag ( 0.200 ) | Lag of stimulus arrival between cell 1 , cell3 Syn_Gmax_initial ( 1 x4 , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivity4celldemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivity4celldemo.m/#directionselectivity4celldemo","text":"DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO Enter \"TYPE DIRECTIONSELECTIVITY4CELLDEMO\" to see the code . Input cells : 1 - 4 Cells 1 and 2 are at position 1 , cells 3 and 4 are at position 2. Cells 1 and 3 fire instantly , while cells 2 and 4 have a latency . One can modify the default parameters by passing name / value pairs to the function like this [ MODELEL , DI , UP , DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO ( PARAM1NAME , PARAM1VALUE , ... ) Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between cell 1 , 2 and 3 , 4 lag ( 0.200 ) | Lag of stimulus arrival between cell 1 , cell3 Syn_Gmax_initial ( 1 x4 , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivity4celldemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_GsynAP.m/","text":"directionselectivityNcell_GsynAP \u00b6 INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = DIRECTIONSELECTIVITYNCELL_GSYNAP ( SEARCHRANGE , SIZEINPUTS , RESPONSE , WEIGHT , DIR , PARAM1 , VALUE1 , ...); Determine minimum conducance necessary to generate RESPONSE action potentials in a single sweep over a model generated by DIRECTIONSELECTIVITYNCELLDEMO . By default , RESPONSE is 1. The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . ( Default : [ 0 10e-9 30 ]) SIZEINPUTS is the dimension of the inputs ([ N R ]). By default , SIZEINPUTS is [ 2 2 ]. WEIGHT is a matrix the same size as SIZEINPUTS that will be used to weight the GsynAP across the network . Default value is a matrix the size of SIZEINPUTS that is all 1 ' s . One could specify TRUI ( ONES ( N , R )) to specify that only the upper triangle of the inputs should be connected . DIR is 0 for ' up ' , 1 for ' down ' . ( default 0 ) If empty ([]) is passed for any of the inputs , then the defaults will be used . Examples : % using default parameters : GsynAP = directionselectivityNcell_GsynAP ([],[ 2 2 ],[],[]); % use defaults GsynAP = directionselectivityNcell_GsynAP ([],[ 5 5 ],[],[], 'N' , 5 , 'R' , 5 , ' isi ' , 2 ); See also : DIRECTIONSELECTIVITYNCELLDEMO","title":"directionselectivityNcell_GsynAP"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_GsynAP.m/#directionselectivityncell_gsynap","text":"INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = DIRECTIONSELECTIVITYNCELL_GSYNAP ( SEARCHRANGE , SIZEINPUTS , RESPONSE , WEIGHT , DIR , PARAM1 , VALUE1 , ...); Determine minimum conducance necessary to generate RESPONSE action potentials in a single sweep over a model generated by DIRECTIONSELECTIVITYNCELLDEMO . By default , RESPONSE is 1. The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . ( Default : [ 0 10e-9 30 ]) SIZEINPUTS is the dimension of the inputs ([ N R ]). By default , SIZEINPUTS is [ 2 2 ]. WEIGHT is a matrix the same size as SIZEINPUTS that will be used to weight the GsynAP across the network . Default value is a matrix the size of SIZEINPUTS that is all 1 ' s . One could specify TRUI ( ONES ( N , R )) to specify that only the upper triangle of the inputs should be connected . DIR is 0 for ' up ' , 1 for ' down ' . ( default 0 ) If empty ([]) is passed for any of the inputs , then the defaults will be used . Examples : % using default parameters : GsynAP = directionselectivityNcell_GsynAP ([],[ 2 2 ],[],[]); % use defaults GsynAP = directionselectivityNcell_GsynAP ([],[ 5 5 ],[],[], 'N' , 5 , 'R' , 5 , ' isi ' , 2 ); See also : DIRECTIONSELECTIVITYNCELLDEMO","title":"directionselectivityNcell_GsynAP"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_learning1.m/","text":"directionselectivityNcell_learning1 \u00b6 DIRECTIONSELECTIVITYNCELL_LEARNING1 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_learning1"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_learning1.m/#directionselectivityncell_learning1","text":"DIRECTIONSELECTIVITYNCELL_LEARNING1 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_learning1"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_learning2.m/","text":"directionselectivityNcell_learning2 \u00b6 DIRECTIONSELECTIVITYNCELL_LEARNING2 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING2 Observe an N - input process develop direction selectivity There is a single feed - forward inhibitory neuron One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights Gmax_initial_inhib ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters synapseparams_inhib | synapse parameters for synapses onto inhibitory cells { 'V_rev' , - 0.080 } | intfireparams | intfire parameters intfireparams_inhib | intfire parameters for inhibitory cell ISyn_Gmax_initial ( 1.5e-9 ) | Intial value of inhibitory cell synapse onto excitatory cell ISyn_change ( 1.05 ) | Multilpicative Change in inhibitory synapse conductance at each iteration ISyn_Max ( Inf ) | Ceiling for I to E weight dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? plasticity_method_inhib ( '' ) Method for inhibitory plasticity unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning2"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_learning2.m/#directionselectivityncell_learning2","text":"DIRECTIONSELECTIVITYNCELL_LEARNING2 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING2 Observe an N - input process develop direction selectivity There is a single feed - forward inhibitory neuron One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights Gmax_initial_inhib ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters synapseparams_inhib | synapse parameters for synapses onto inhibitory cells { 'V_rev' , - 0.080 } | intfireparams | intfire parameters intfireparams_inhib | intfire parameters for inhibitory cell ISyn_Gmax_initial ( 1.5e-9 ) | Intial value of inhibitory cell synapse onto excitatory cell ISyn_change ( 1.05 ) | Multilpicative Change in inhibitory synapse conductance at each iteration ISyn_Max ( Inf ) | Ceiling for I to E weight dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? plasticity_method_inhib ( '' ) Method for inhibitory plasticity unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning2"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_learning_thresh.m/","text":"directionselectivityNcell_learning_thresh \u00b6 DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH OUT = DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH Observe an N - input process develop direction selectivity No inhibition , threshold increases after each trial One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING_THRESH ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters { 'V_rev' , - 0.080 } | intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? V_threshold_initial | Starting threshold value ( volts ) ( - 0.055 ) V_threshold_change | Multilpicative change in threshold at each iteration must be < 1 ( 0.95 ) V_threshold_max ( - 0.04 ) | Ceiling output cell threshold can reach mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning_thresh"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_learning_thresh.m/#directionselectivityncell_learning_thresh","text":"DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH OUT = DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH Observe an N - input process develop direction selectivity No inhibition , threshold increases after each trial One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING_THRESH ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters { 'V_rev' , - 0.080 } | intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? V_threshold_initial | Starting threshold value ( volts ) ( - 0.055 ) V_threshold_change | Multilpicative change in threshold at each iteration must be < 1 ( 0.95 ) V_threshold_max ( - 0.04 ) | Ceiling output cell threshold can reach mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning_thresh"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_random.m/","text":"directionselectivityNcell_random \u00b6 DIRECTIONSELECTIVITYNCELL_RANDOM OUT = DIRECTIONSELECTIVITYNCELL_RANDOM Randomly choose weights for a N - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITYNCELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights Gmax_weightlist ( [] ) | If provided , Gmax will be randomly chosen from this list | Under this condition , Gmax_max and Gmax_min will be | ignored . classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies isi ( 1 ) | Interstimulus interval ( must be long enough ) randomness ( 0 ) | Randomness plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_random"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcell_random.m/#directionselectivityncell_random","text":"DIRECTIONSELECTIVITYNCELL_RANDOM OUT = DIRECTIONSELECTIVITYNCELL_RANDOM Randomly choose weights for a N - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITYNCELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights Gmax_weightlist ( [] ) | If provided , Gmax will be randomly chosen from this list | Under this condition , Gmax_max and Gmax_min will be | ignored . classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies isi ( 1 ) | Interstimulus interval ( must be long enough ) randomness ( 0 ) | Randomness plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_random"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo.m/","text":"directionselectivityNcelldemo \u00b6 DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) nreps ( 1 ) | Number of times to repeat plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo.m/#directionselectivityncelldemo","text":"DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) nreps ( 1 ) | Number of times to repeat plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo_inhib.m/","text":"directionselectivityNcelldemo_inhib \u00b6 DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo_inhib.m/#directionselectivityncelldemo_inhib","text":"DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo_inhib_orig.m/","text":"directionselectivityNcelldemo_inhib_orig \u00b6 DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib_orig"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo_inhib_orig.m/#directionselectivityncelldemo_inhib_orig","text":"DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib_orig"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo_thresh.m/","text":"directionselectivityNcelldemo_thresh \u00b6 DIRECTIONSELECTIVITY4CELLDEMO_thresh - Demo of a N * R input , single layer direction - selective output cell with rising threshold [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_thresh Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_THRESH\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init % synapseparams_ffI | {'name1','value1'} parameter list to pass to synapset1t2el_init for feedforward connections to I cell | default value { 'V_rev' , - 0.080 } V_threshold ( - 0.055 ) | Threshold value ( volts ) slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_thresh"},{"location":"reference/neuroscience/models/modelel/modeleldemo/directionselectivityNcelldemo_thresh.m/#directionselectivityncelldemo_thresh","text":"DIRECTIONSELECTIVITY4CELLDEMO_thresh - Demo of a N * R input , single layer direction - selective output cell with rising threshold [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_thresh Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_THRESH\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init % synapseparams_ffI | {'name1','value1'} parameter list to pass to synapset1t2el_init for feedforward connections to I cell | default value { 'V_rev' , - 0.080 } V_threshold ( - 0.055 ) | Threshold value ( volts ) slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_thresh"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_GsynAP.m/","text":"intfireleaky_GsynAP \u00b6 INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine minimum current necessary to generate a single action potential in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The default synapse is a SYNAPSET1T2EL_INIT . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . Examples : % using default intfire and synapse GsynAP = intfireleaky_GsynAP ([],[],[],[]) % use defaults GsynAP = intfireleaky_GsynAP ([], synapset1t2el_init ( 'tau2' , 0.200 ),[],[]) See also : INTFIRELEAKYEL_INIT , SYNAPSET1T2EL_INIT","title":"intfireleaky_GsynAP"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_GsynAP.m/#intfireleaky_gsynap","text":"INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine minimum current necessary to generate a single action potential in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The default synapse is a SYNAPSET1T2EL_INIT . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . Examples : % using default intfire and synapse GsynAP = intfireleaky_GsynAP ([],[],[],[]) % use defaults GsynAP = intfireleaky_GsynAP ([], synapset1t2el_init ( 'tau2' , 0.200 ),[],[]) See also : INTFIRELEAKYEL_INIT , SYNAPSET1T2EL_INIT","title":"intfireleaky_GsynAP"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_Gsyn_vs_F.m/","text":"intfireleaky_Gsyn_vs_F \u00b6 INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP [ GSYN , F ] = INTFIRELEAKY_GSYN_VS_F ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine number of action potentials generated by various synaptic input conductances in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be explored between MIN and MAX in STEPS number of steps . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT , INTFIRELEAKY_GSYNAP","title":"intfireleaky_Gsyn_vs_F"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_Gsyn_vs_F.m/#intfireleaky_gsyn_vs_f","text":"INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP [ GSYN , F ] = INTFIRELEAKY_GSYN_VS_F ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine number of action potentials generated by various synaptic input conductances in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be explored between MIN and MAX in STEPS number of steps . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT , INTFIRELEAKY_GSYNAP","title":"intfireleaky_Gsyn_vs_F"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_SynMemTau.m/","text":"intfireleaky_SynMemTau \u00b6 INTFIRELEAKY_SynMemTau - Empirically determine combined tau of synapse and membrane TAU = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL ) Determine time it takes for a subthreshold input to return to 1 / exp ( 1 ) of baseline value . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT","title":"intfireleaky_SynMemTau"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_SynMemTau.m/#intfireleaky_synmemtau","text":"INTFIRELEAKY_SynMemTau - Empirically determine combined tau of synapse and membrane TAU = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL ) Determine time it takes for a subthreshold input to return to 1 / exp ( 1 ) of baseline value . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT","title":"intfireleaky_SynMemTau"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_currentdemo.m/","text":"intfireleaky_currentdemo \u00b6 INTFIRELEAKY_CURRENTDEMO - Demo a leaky integrate and fire neuron Demonstrate a leaky integrate and fire neuron with constant current input . Plots a graph of voltage vs . time and outlines spike times with circles . See the code : type INTFIRELEAKY_CURRENTDEMO","title":"intfireleaky_currentdemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_currentdemo.m/#intfireleaky_currentdemo","text":"INTFIRELEAKY_CURRENTDEMO - Demo a leaky integrate and fire neuron Demonstrate a leaky integrate and fire neuron with constant current input . Plots a graph of voltage vs . time and outlines spike times with circles . See the code : type INTFIRELEAKY_CURRENTDEMO","title":"intfireleaky_currentdemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_synapsedemo.m/","text":"intfireleaky_synapsedemo \u00b6 INTFIRELEAKY_SYNAPSEDEMO - Demo a leaky integrate and fire neuron with synaptic input Demonstrate a leaky integrate and fire neuron with a synaptic input Plots a graph of voltage vs. time and outlines spike times with circles. See the code: type INTFIRELEAKY_SYNAPSEDEMO","title":"intfireleaky_synapsedemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/intfireleaky_synapsedemo.m/#intfireleaky_synapsedemo","text":"INTFIRELEAKY_SYNAPSEDEMO - Demo a leaky integrate and fire neuron with synaptic input Demonstrate a leaky integrate and fire neuron with a synaptic input Plots a graph of voltage vs. time and outlines spike times with circles. See the code: type INTFIRELEAKY_SYNAPSEDEMO","title":"intfireleaky_synapsedemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/plotdirectionselectivity4cell.m/","text":"plotdirectionselectivity4cell \u00b6 PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell"},{"location":"reference/neuroscience/models/modelel/modeleldemo/plotdirectionselectivity4cell.m/#plotdirectionselectivity4cell","text":"PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell"},{"location":"reference/neuroscience/models/modelel/modeleldemo/plotdirectionselectivity4cell_thresh.m/","text":"plotdirectionselectivity4cell_thresh \u00b6 PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell_thresh"},{"location":"reference/neuroscience/models/modelel/modeleldemo/plotdirectionselectivity4cell_thresh.m/#plotdirectionselectivity4cell_thresh","text":"PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell_thresh"},{"location":"reference/neuroscience/models/modelel/modeleldemo/synapseel_stdpdemo.m/","text":"synapseel_stdpdemo \u00b6 SYNAPSEEEL_STDPDEMO - Demo of classic STDP at a synapset1t2 synapse Enter \"TYPE SYNAPSEEL_STDPDEMO\" to see the code. See also: SYNAPSET1T2EL_INIT","title":"synapseel_stdpdemo"},{"location":"reference/neuroscience/models/modelel/modeleldemo/synapseel_stdpdemo.m/#synapseel_stdpdemo","text":"SYNAPSEEEL_STDPDEMO - Demo of classic STDP at a synapset1t2 synapse Enter \"TYPE SYNAPSEEL_STDPDEMO\" to see the code. See also: SYNAPSET1T2EL_INIT","title":"synapseel_stdpdemo"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_convertforc.m/","text":"modelel_convertforc \u00b6 MODELEL_CONVERTFORC - Convert a modelel structure into a format that can be parsed by the C ++ implementation MODELELOUT = MODELEL_CONVERTFORC ( MODELEL , VARS ) Converts the structure representation that is used for MATLAB ( see help MODELEL ) into a format suitable for C ++. VARS is the list of state variables to track . It is expected that this is in the same format as the argument to modelel_run : { 'modelrunstruct.Model_Initial_Structure(1).T' }","title":"modelel_convertforc"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_convertforc.m/#modelel_convertforc","text":"MODELEL_CONVERTFORC - Convert a modelel structure into a format that can be parsed by the C ++ implementation MODELELOUT = MODELEL_CONVERTFORC ( MODELEL , VARS ) Converts the structure representation that is used for MATLAB ( see help MODELEL ) into a format suitable for C ++. VARS is the list of state variables to track . It is expected that this is in the same format as the argument to modelel_run : { 'modelrunstruct.Model_Initial_Structure(1).T' }","title":"modelel_convertforc"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_convertfromc.m/","text":"modelel_convertfromc \u00b6 MODELEL_CONVERTFROMC - Convert the text string output of the executable file to a Matlab modelel MODELELSTRUCT = MODELEL_CONVERTFROMC ( DESC_STR ) Given a full , multi - line string , converts to Matlab structures . Example input : eol = sprintf ( ' \\n ' ); % end of line character desc_str = [ '0:' eol ... % first element 'type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0001' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it '1: ' eol ... 'Type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0002' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it ];","title":"modelel_convertfromc"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_convertfromc.m/#modelel_convertfromc","text":"MODELEL_CONVERTFROMC - Convert the text string output of the executable file to a Matlab modelel MODELELSTRUCT = MODELEL_CONVERTFROMC ( DESC_STR ) Given a full , multi - line string , converts to Matlab structures . Example input : eol = sprintf ( ' \\n ' ); % end of line character desc_str = [ '0:' eol ... % first element 'type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0001' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it '1: ' eol ... 'Type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0002' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it ];","title":"modelel_convertfromc"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_importvariables.m/","text":"modelel_importvariables \u00b6 MODELEL_IMPORTVARIABLES - Import variable values from the external C modelel simulator OUT = MODELEL_IMPORTVARIABLES ( FILENAME , MODELELSTRUCT , VARS ) Returns the values of the output variables that were requested . Reads these values from the file FILENAME . VARS are the Matlab variable names that were requested . See also : MODELELRUN","title":"modelel_importvariables"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_importvariables.m/#modelel_importvariables","text":"MODELEL_IMPORTVARIABLES - Import variable values from the external C modelel simulator OUT = MODELEL_IMPORTVARIABLES ( FILENAME , MODELELSTRUCT , VARS ) Returns the values of the output variables that were requested . Reads these values from the file FILENAME . VARS are the Matlab variable names that were requested . See also : MODELELRUN","title":"modelel_importvariables"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_runvarname2log.m/","text":"modelel_runvarname2log \u00b6 MODELEL_RUNVARNAME2LOG - Convert a variable name output for the C version [ ELEMENT , STRING ] = MODELEL_RUNVARNAME2LOG ( VARNAME ) Looks at the VARNAME string and identifies the element number that is operated upon ( returned as an integer in ELEMENT ) and the string of the variable name .","title":"modelel_runvarname2log"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelel_runvarname2log.m/#modelel_runvarname2log","text":"MODELEL_RUNVARNAME2LOG - Convert a variable name output for the C version [ ELEMENT , STRING ] = MODELEL_RUNVARNAME2LOG ( VARNAME ) Looks at the VARNAME string and identifies the element number that is operated upon ( returned as an integer in ELEMENT ) and the string of the variable name .","title":"modelel_runvarname2log"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelelrun.m/","text":"modelelrun \u00b6 MODELELRUN - Run a set of model elements modelel MODELELRUNSTRUCT = MODELELRUN ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step Verbose ( 10000 ) | Prints a comment every N steps ; use Inf to disable UseExecutable ( 0 ) | Uses an external function","title":"modelelrun"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelelrun.m/#modelelrun","text":"MODELELRUN - Run a set of model elements modelel MODELELRUNSTRUCT = MODELELRUN ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step Verbose ( 10000 ) | Prints a comment every N steps ; use Inf to disable UseExecutable ( 0 ) | Uses an external function","title":"modelelrun"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelelrun_executable.m/","text":"modelelrun_executable \u00b6 MODELELRUN_EXECUTABLE - Run a set of model elements modelel using external executable MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step","title":"modelelrun_executable"},{"location":"reference/neuroscience/models/modelel/modelelrun/modelelrun_executable.m/#modelelrun_executable","text":"MODELELRUN_EXECUTABLE - Run a set of model elements modelel using external executable MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step","title":"modelelrun_executable"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/isspiking.m/","text":"isspiking \u00b6 ISSPIKING - Is a NEURONMODELEL neuron spiking right now ? B = ISSPIKING ( NEURONMODELEL ) Returns 1 if the neuronmodelel has exhibited a spike between now and the last time step ( that is , in the interval ( neuronmodelel . T - neuronmodelel . dT , neuronmodelel . T ] ) , and 0 otherwise . A list of valid neuron model types is available by typing NEURONMODELEL See also : NEURONMODELEL","title":"isspiking"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/isspiking.m/#isspiking","text":"ISSPIKING - Is a NEURONMODELEL neuron spiking right now ? B = ISSPIKING ( NEURONMODELEL ) Returns 1 if the neuronmodelel has exhibited a spike between now and the last time step ( that is , in the interval ( neuronmodelel . T - neuronmodelel . dT , neuronmodelel . T ] ) , and 0 otherwise . A list of valid neuron model types is available by typing NEURONMODELEL See also : NEURONMODELEL","title":"isspiking"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/neuronmodelel.m/","text":"neuronmodelel \u00b6 NEURONMODELEL - A list of neuron model element classes LIST = NEURONMODELEL This is a list of neuron models that can be used with the NEURONMODEL class of functions. ----------------------------------------------------------- 'spiketimelistel' | No model, just a list of spike times 'intfireleakyel' | Leaky integrate and fire neuron | (see HELP INTFIRELEAKY_INIT)","title":"neuronmodelel"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/neuronmodelel.m/#neuronmodelel","text":"NEURONMODELEL - A list of neuron model element classes LIST = NEURONMODELEL This is a list of neuron models that can be used with the NEURONMODEL class of functions. ----------------------------------------------------------- 'spiketimelistel' | No model, just a list of spike times 'intfireleakyel' | Leaky integrate and fire neuron | (see HELP INTFIRELEAKY_INIT)","title":"neuronmodelel"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/intfiremodels/intfireleakyel_init.m/","text":"intfireleakyel_init \u00b6 INTFIRELEAKY_INIT - Initialize a leaky integrate and fire neuron INTFIRELEAKYEL = INTFIRELEAKYel_INIT or INTFIRELEAKYEL = INTFIRELEAKYel_INIT ( 'param1name' , param1value , ... ); Returns a MODELEL structure ( see MODELEL_INIT ) for a leaky integrate and fire neuron . One can modify the default parameters of both the INTFIRE structure and the inherited parameters in MODELEL by passing name / value pairs as input arguments . The parameters in the structure are as follows : INTFIRE structure : ------------------------------------------------------- Ie ( 0 ) | Any electrode current ( Amps ) V ( - 0.075 ) | The current voltage ( volts ) V_leak ( default - 0.075 ) | Leak potential ( volts ) Rm ( 10e6 ) | Input resistance ( Ohms ) Taum ( 10e-3 ) | Membrane time constant ( seconds ) Area ( 0.1 ) | Area ( mm ^ 2 ; for calculating specific resistance ) V_reset ( - 0.080 ) | Reset potential ( volts ) V_threshold ( - 0.055 ) | Threshold value ( volts ) synapse_list ([]) | List of modelel numbers that correspond to synapses spiketimes ([]) | List of spike times V_spike ( 0.010 ) | Potential the neuron rises to upon spiking type ( 'intfireleakyel' ) | Must be the string 'intfireleakyel' See HELP MODELEL for the generic model element parameters .","title":"intfireleakyel_init"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/intfiremodels/intfireleakyel_init.m/#intfireleakyel_init","text":"INTFIRELEAKY_INIT - Initialize a leaky integrate and fire neuron INTFIRELEAKYEL = INTFIRELEAKYel_INIT or INTFIRELEAKYEL = INTFIRELEAKYel_INIT ( 'param1name' , param1value , ... ); Returns a MODELEL structure ( see MODELEL_INIT ) for a leaky integrate and fire neuron . One can modify the default parameters of both the INTFIRE structure and the inherited parameters in MODELEL by passing name / value pairs as input arguments . The parameters in the structure are as follows : INTFIRE structure : ------------------------------------------------------- Ie ( 0 ) | Any electrode current ( Amps ) V ( - 0.075 ) | The current voltage ( volts ) V_leak ( default - 0.075 ) | Leak potential ( volts ) Rm ( 10e6 ) | Input resistance ( Ohms ) Taum ( 10e-3 ) | Membrane time constant ( seconds ) Area ( 0.1 ) | Area ( mm ^ 2 ; for calculating specific resistance ) V_reset ( - 0.080 ) | Reset potential ( volts ) V_threshold ( - 0.055 ) | Threshold value ( volts ) synapse_list ([]) | List of modelel numbers that correspond to synapses spiketimes ([]) | List of spike times V_spike ( 0.010 ) | Potential the neuron rises to upon spiking type ( 'intfireleakyel' ) | Must be the string 'intfireleakyel' See HELP MODELEL for the generic model element parameters .","title":"intfireleakyel_init"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/intfiremodels/intfireleakyel_step.m/","text":"intfireleakyel_step \u00b6 INTFIRELEAKYEL_STEP - Compute a time step of an integrate and fire neuron modelel INTFIRE = INTFIRELEAKYEL_STEP ( INTFIREMODELEL , MODELSTRUCT ) Given a model leaky integrate and fire neurons in INTFIRE , and a full list of model elements MODELSTRUCT , calculate the voltage at the next step . INTFIRE is a structure describing a leaky integrate and fire neuron : -------------------------------------------------------------------- V_leak | Leak potential ( volts ) Rm | Input resistance ( Ohms ) Taum | Membrane time constant ( seconds ) Area | Membrane area ( mm ^ 2 ) V_reset | Reset potential ( volts ) V_threshold | Threshold value ( volts ) V | The current voltage ( volts , updated here ) synapse_list | List of modelel numbers in MODELSTRUCT that | correspond to synapses of this neuron spiketimes | The spike times of the | intfire neuron ( seconds , updated here ) V_spike | The voltage the neuron produces upon spiking","title":"intfireleakyel_step"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/intfiremodels/intfireleakyel_step.m/#intfireleakyel_step","text":"INTFIRELEAKYEL_STEP - Compute a time step of an integrate and fire neuron modelel INTFIRE = INTFIRELEAKYEL_STEP ( INTFIREMODELEL , MODELSTRUCT ) Given a model leaky integrate and fire neurons in INTFIRE , and a full list of model elements MODELSTRUCT , calculate the voltage at the next step . INTFIRE is a structure describing a leaky integrate and fire neuron : -------------------------------------------------------------------- V_leak | Leak potential ( volts ) Rm | Input resistance ( Ohms ) Taum | Membrane time constant ( seconds ) Area | Membrane area ( mm ^ 2 ) V_reset | Reset potential ( volts ) V_threshold | Threshold value ( volts ) V | The current voltage ( volts , updated here ) synapse_list | List of modelel numbers in MODELSTRUCT that | correspond to synapses of this neuron spiketimes | The spike times of the | intfire neuron ( seconds , updated here ) V_spike | The voltage the neuron produces upon spiking","title":"intfireleakyel_step"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/spiketimelistel/spiketimelistel_init.m/","text":"spiketimelistel_init \u00b6 SPIKETIMELISTEL_INIT - Initialize a spiketimelistel model SPIKETIMELIST = SPIKETIMELISTEL_INIT or SPIKETIMELIST = SPIKETIMELISTEL_INIT ( PARAM1NAME , PARAM1VALUE , ... ) Creates a SPIKETIMELISTEL model . A default model is created unless parameters are modified by passing name , value pairs . Name / parameter values will be passed along to the modelel class as well . The spiketimelistel parameters : ------------------------------------------------------- spiketimes ( [] ) | Spike times of the neuron ( seconds ) , can assume sorted type ( 'spiketimelistel' ) | Type : must be 'spiketimelistel' ( not modifiable ) See HELP SPIKETIMELIST for a list of valid neuron model types .","title":"spiketimelistel_init"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/spiketimelistel/spiketimelistel_init.m/#spiketimelistel_init","text":"SPIKETIMELISTEL_INIT - Initialize a spiketimelistel model SPIKETIMELIST = SPIKETIMELISTEL_INIT or SPIKETIMELIST = SPIKETIMELISTEL_INIT ( PARAM1NAME , PARAM1VALUE , ... ) Creates a SPIKETIMELISTEL model . A default model is created unless parameters are modified by passing name , value pairs . Name / parameter values will be passed along to the modelel class as well . The spiketimelistel parameters : ------------------------------------------------------- spiketimes ( [] ) | Spike times of the neuron ( seconds ) , can assume sorted type ( 'spiketimelistel' ) | Type : must be 'spiketimelistel' ( not modifiable ) See HELP SPIKETIMELIST for a list of valid neuron model types .","title":"spiketimelistel_init"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/spiketimelistel/spiketimelistel_step.m/","text":"spiketimelistel_step \u00b6 SPIKETIMELISTEL_STEP - Performs no operation SPIKETIMELISTEL = SPIKETIMELISTEL_STEP(SPIKETIMELISTEL, MODELSTRUCT) Just adds dT T.","title":"spiketimelistel_step"},{"location":"reference/neuroscience/models/modelel/neuronmodelel/spiketimelistel/spiketimelistel_step.m/#spiketimelistel_step","text":"SPIKETIMELISTEL_STEP - Performs no operation SPIKETIMELISTEL = SPIKETIMELISTEL_STEP(SPIKETIMELISTEL, MODELSTRUCT) Just adds dT T.","title":"spiketimelistel_step"},{"location":"reference/neuroscience/models/modelel/synapseel/modelelgetsyn.m/","text":"modelelgetsyn \u00b6 MODELELGETSYN - Return element number of synapses among particular neurons SYN_NUMS = MODELELGETSYN ( MODELEL , PRELIST , POSTLIST ) Return the model elements that correspond to synapses between elements PRELIST and POSTLIST . SYN_NUMS ( i ) will be the synapse between PRELIST ( i ) and POSTLIST ( i ) , if they are both present and have a synapse . Otherwise , the SYN_NUMS ( i ) will be NaN ;","title":"modelelgetsyn"},{"location":"reference/neuroscience/models/modelel/synapseel/modelelgetsyn.m/#modelelgetsyn","text":"MODELELGETSYN - Return element number of synapses among particular neurons SYN_NUMS = MODELELGETSYN ( MODELEL , PRELIST , POSTLIST ) Return the model elements that correspond to synapses between elements PRELIST and POSTLIST . SYN_NUMS ( i ) will be the synapse between PRELIST ( i ) and POSTLIST ( i ) , if they are both present and have a synapse . Otherwise , the SYN_NUMS ( i ) will be NaN ;","title":"modelelgetsyn"},{"location":"reference/neuroscience/models/modelel/synapseel/modelelsynconn.m/","text":"modelelsynconn \u00b6 MODELELSYNCONN - Make synaptic connections among modelel elements MODEL = MODELELSYNCONN ( MODEL , INDS , W , PROTOSYN ) PROTOSYN can be a prototpe synapse or the number of a modelel element in MODEL that should serve as a prototype synapse . INDS is the subset of the modelel elements to operate on for connecting . For example , if the neurons in your model are 1 2 3 , you might set INDS to [ 1 2 3 ]. ( This way you don 't have to specify weights of connections between elements that are not numbered 1 2 3). W(i,j) should be the weight of the synaptic connection from element INDS(i) to element INDS(j). If 2 elements are not to be connected, then NaN should be passed as the weight.","title":"modelelsynconn"},{"location":"reference/neuroscience/models/modelel/synapseel/modelelsynconn.m/#modelelsynconn","text":"MODELELSYNCONN - Make synaptic connections among modelel elements MODEL = MODELELSYNCONN ( MODEL , INDS , W , PROTOSYN ) PROTOSYN can be a prototpe synapse or the number of a modelel element in MODEL that should serve as a prototype synapse . INDS is the subset of the modelel elements to operate on for connecting . For example , if the neurons in your model are 1 2 3 , you might set INDS to [ 1 2 3 ]. ( This way you don 't have to specify weights of connections between elements that are not numbered 1 2 3). W(i,j) should be the weight of the synaptic connection from element INDS(i) to element INDS(j). If 2 elements are not to be connected, then NaN should be passed as the weight.","title":"modelelsynconn"},{"location":"reference/neuroscience/models/modelel/synapseel/plasticity_methods/synapseel_stdp.m/","text":"synapseel_stdp \u00b6 SYNAPSEEL_CLASSICSTDP - Apply classic stdp to a SYNAPSEEL synapse SYNAPSEEL = SYNAPSEEL_STDP ( SYNAPSEEL , MODELSTRUCT ) Apply stdp to a SYNAPSEEL object . This requires that the SYNAPSEEL object have a field 'plasticity_params' with several fields : -------------------------------------------------------------------------- Gmax_max | The maximum value that the maximum conductance can take | ( that is , a ceiling value ) . Use Inf for none . Gmax_min | The minimum value that the maximum conductance can take | ( that is , a floor value ) . Use - Inf for none . classic_stdp | 0 / 1 should we use classic stdp or triplet stdp ? params | { 'name1,' value1 ',...} parameters to pass along to | stdp_apply or stdp_triplet_apply (optional) See also: SYNAPSEEL_INIT","title":"synapseel_stdp"},{"location":"reference/neuroscience/models/modelel/synapseel/plasticity_methods/synapseel_stdp.m/#synapseel_stdp","text":"SYNAPSEEL_CLASSICSTDP - Apply classic stdp to a SYNAPSEEL synapse SYNAPSEEL = SYNAPSEEL_STDP ( SYNAPSEEL , MODELSTRUCT ) Apply stdp to a SYNAPSEEL object . This requires that the SYNAPSEEL object have a field 'plasticity_params' with several fields : -------------------------------------------------------------------------- Gmax_max | The maximum value that the maximum conductance can take | ( that is , a ceiling value ) . Use Inf for none . Gmax_min | The minimum value that the maximum conductance can take | ( that is , a floor value ) . Use - Inf for none . classic_stdp | 0 / 1 should we use classic stdp or triplet stdp ? params | { 'name1,' value1 ',...} parameters to pass along to | stdp_apply or stdp_triplet_apply (optional) See also: SYNAPSEEL_INIT","title":"synapseel_stdp"},{"location":"reference/neuroscience/models/modelel/synapseel/synapset1t2el/synapset1t2el_init.m/","text":"synapset1t2el_init \u00b6 SYNAPSET1T2EL_INIT - Initialize a new synapset1t2el object Conductance after each presynaptic spike is modeled as G = Gmax * (exp(-deltaT/tau1) - exp(-deltaT/tau2)), where deltaT is the difference between now and all previous spikes SYNAPSET1T2EL parameters are the following: -------------------------------------------------------------- V_rev (0) | Reversal potential (volts) Gmax (10e-9) | Maximal conductance (Siemens) G (0) | The current conductance value (Siemens) tau1 (0.001) | Tau1 (seconds) tau2 (0.050) | Tau2 (seconds) pre ([]) | Modelel number of presynaptic cell post ([]) | Modelel number of postsynaptic cell Tpast_ignore (1) | How long in the past to monitor spikes (seconds) plasticity_method ('') | Plasticity method plasticity_params ([]) | Plasticity method parameters type | Must be 'synapset1t2el' (not editable)","title":"synapset1t2el_init"},{"location":"reference/neuroscience/models/modelel/synapseel/synapset1t2el/synapset1t2el_init.m/#synapset1t2el_init","text":"SYNAPSET1T2EL_INIT - Initialize a new synapset1t2el object Conductance after each presynaptic spike is modeled as G = Gmax * (exp(-deltaT/tau1) - exp(-deltaT/tau2)), where deltaT is the difference between now and all previous spikes SYNAPSET1T2EL parameters are the following: -------------------------------------------------------------- V_rev (0) | Reversal potential (volts) Gmax (10e-9) | Maximal conductance (Siemens) G (0) | The current conductance value (Siemens) tau1 (0.001) | Tau1 (seconds) tau2 (0.050) | Tau2 (seconds) pre ([]) | Modelel number of presynaptic cell post ([]) | Modelel number of postsynaptic cell Tpast_ignore (1) | How long in the past to monitor spikes (seconds) plasticity_method ('') | Plasticity method plasticity_params ([]) | Plasticity method parameters type | Must be 'synapset1t2el' (not editable)","title":"synapset1t2el_init"},{"location":"reference/neuroscience/models/modelel/synapseel/synapset1t2el/synapset1t2el_step.m/","text":"synapset1t2el_step \u00b6 SYNAPSET1T2EL_STEP - Calculate the conductance at a list of synapses SYNAPSET1T2EL = SYNAPSET1T2EL_STEP(SYNAPSET1T2EL, MODELSTRUCT) Given a model synapse SYNAPSET1T2EL, and the full model structure MODELSTRUCT, updates the conductance field. See also: SYNAPSET1T2EL_INIT","title":"synapset1t2el_step"},{"location":"reference/neuroscience/models/modelel/synapseel/synapset1t2el/synapset1t2el_step.m/#synapset1t2el_step","text":"SYNAPSET1T2EL_STEP - Calculate the conductance at a list of synapses SYNAPSET1T2EL = SYNAPSET1T2EL_STEP(SYNAPSET1T2EL, MODELSTRUCT) Given a model synapse SYNAPSET1T2EL, and the full model structure MODELSTRUCT, updates the conductance field. See also: SYNAPSET1T2EL_INIT","title":"synapset1t2el_step"},{"location":"reference/neuroscience/models/ode/simpleodedemo.m/","text":"simpleodedemo \u00b6 SIMPLEODEDEMO - A simple demonstration of a first order, ordinary differential equation SIMPLEODEDEMO - Popups up a window that allows the user to watch the operation of a simple ode. The equation simulated is the following: tau * d r(t)/dt = -(r(t)-C)+I The window has graphical user elements that allow the user to specify all of the parameters and to watch the simulation run.","title":"simpleodedemo"},{"location":"reference/neuroscience/models/ode/simpleodedemo.m/#simpleodedemo","text":"SIMPLEODEDEMO - A simple demonstration of a first order, ordinary differential equation SIMPLEODEDEMO - Popups up a window that allows the user to watch the operation of a simple ode. The equation simulated is the following: tau * d r(t)/dt = -(r(t)-C)+I The window has graphical user elements that allow the user to specify all of the parameters and to watch the simulation run.","title":"simpleodedemo"},{"location":"reference/neuroscience/models/synapses/depression_model_comp.m/","text":"depression_model_comp \u00b6 DEPRESSION_MODEL_COMP - Computes synaptic currents for Varela depression model SYNCURRS = DEPRESSION_MODEL_COMP ( SPIKETIMES , A0 , F , FTAU , D , DTAU ) Computes synaptic currents for a facilitating and / or depressing synapse . Presynaptic spike times are given in SPIKETIMES , and the unfacilitated , undepressed amplitude of the synapse is A0 . Synaptic currents are modeled as A = A0 * F1 *...* FN * D1 *...* DN , where F1 ... FN are facilitating factors and D1 ... DN are depressing factors . After each presynaptic spike , Fi -> Fi + fi , where fi is a positive number , and Fi decays back to 1 with time constant fitau . Input argument F is an array containing fi , and the length of F determines the number of facilitating factors ( use empty for none ) . FTAU is an array of the same length of F and contains the time constants fitau . After each presynaptic spike , Di -> Di * di , where 0 < di <= 1 , and Di decays back to 1 with time constant ditau . Input argument D is an array containing di , and the length of D determines the number of facilitating factors ( use empty for none ) . DTAU is an array of the same length of D and contains the time constants ditau . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neurosci . 17 : 7926 - 40 , 1997.","title":"depression_model_comp"},{"location":"reference/neuroscience/models/synapses/depression_model_comp.m/#depression_model_comp","text":"DEPRESSION_MODEL_COMP - Computes synaptic currents for Varela depression model SYNCURRS = DEPRESSION_MODEL_COMP ( SPIKETIMES , A0 , F , FTAU , D , DTAU ) Computes synaptic currents for a facilitating and / or depressing synapse . Presynaptic spike times are given in SPIKETIMES , and the unfacilitated , undepressed amplitude of the synapse is A0 . Synaptic currents are modeled as A = A0 * F1 *...* FN * D1 *...* DN , where F1 ... FN are facilitating factors and D1 ... DN are depressing factors . After each presynaptic spike , Fi -> Fi + fi , where fi is a positive number , and Fi decays back to 1 with time constant fitau . Input argument F is an array containing fi , and the length of F determines the number of facilitating factors ( use empty for none ) . FTAU is an array of the same length of F and contains the time constants fitau . After each presynaptic spike , Di -> Di * di , where 0 < di <= 1 , and Di decays back to 1 with time constant ditau . Input argument D is an array containing di , and the length of D determines the number of facilitating factors ( use empty for none ) . DTAU is an array of the same length of D and contains the time constants ditau . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neurosci . 17 : 7926 - 40 , 1997.","title":"depression_model_comp"},{"location":"reference/neuroscience/models/synapses/depression_model_err.m/","text":"depression_model_err \u00b6 DEPRESSION_MODEL_ERR - Depression model error function","title":"depression_model_err"},{"location":"reference/neuroscience/models/synapses/depression_model_err.m/#depression_model_err","text":"DEPRESSION_MODEL_ERR - Depression model error function","title":"depression_model_err"},{"location":"reference/neuroscience/models/synapses/depression_model_fit.m/","text":"depression_model_fit \u00b6 DEPRESSION_MODEL - Compute parameters of model for synaptic depression [ A0,F,FTAU,D,TAU,ERR ]= DEPRESSION_MODEL ( SPIKETIMES , SYNAPTIC_CURRENT ,... FORDER , DORDER , [ NUMATTEMPTS ] ) Finds the best fit depression model with FORDER facilitating factors and DORDER depressing factors for the synaptic currents measured in the array SYNAPTIC_CURRENT at presynaptic spike times SPIKETIMES . This program tries NUMATTEMPTS different random starting positions ( default 10 ) and picks the best solution . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neuroscience 17 : 7926 - 40 ( 1997 ) and 'help depression_model_comp' for details of the model and parameters . ERR is the squared error over the whole data .","title":"depression_model_fit"},{"location":"reference/neuroscience/models/synapses/depression_model_fit.m/#depression_model_fit","text":"DEPRESSION_MODEL - Compute parameters of model for synaptic depression [ A0,F,FTAU,D,TAU,ERR ]= DEPRESSION_MODEL ( SPIKETIMES , SYNAPTIC_CURRENT ,... FORDER , DORDER , [ NUMATTEMPTS ] ) Finds the best fit depression model with FORDER facilitating factors and DORDER depressing factors for the synaptic currents measured in the array SYNAPTIC_CURRENT at presynaptic spike times SPIKETIMES . This program tries NUMATTEMPTS different random starting positions ( default 10 ) and picks the best solution . See Varela , Sen , Gibson , Fost , Abbott , and Nelson , J . Neuroscience 17 : 7926 - 40 ( 1997 ) and 'help depression_model_comp' for details of the model and parameters . ERR is the squared error over the whole data .","title":"depression_model_fit"},{"location":"reference/neuroscience/models/synapses/nmda_voltage_gate.m/","text":"nmda_voltage_gate \u00b6 NMDA_VOLTAGE_GATE - voltage gate for NMDA channels , dependent on Mg block G = NMDA_VOLTAGE_GATE ( V ) Returns a simulated gating variable based on the NMDA voltage dependence as measured from Mayar , Westbrook , and Guthrie 1984. At V = 0 volts , the gating variable is 1. It goes up and down according to Figure 3 C of the paper . For example , at V = - 0.080 volts , g is 0.0564 . At V = 0.020 V , g is 1.2359 .","title":"nmda_voltage_gate"},{"location":"reference/neuroscience/models/synapses/nmda_voltage_gate.m/#nmda_voltage_gate","text":"NMDA_VOLTAGE_GATE - voltage gate for NMDA channels , dependent on Mg block G = NMDA_VOLTAGE_GATE ( V ) Returns a simulated gating variable based on the NMDA voltage dependence as measured from Mayar , Westbrook , and Guthrie 1984. At V = 0 volts , the gating variable is 1. It goes up and down according to Figure 3 C of the paper . For example , at V = - 0.080 volts , g is 0.0564 . At V = 0.020 V , g is 1.2359 .","title":"nmda_voltage_gate"},{"location":"reference/neuroscience/models/synapses/probabilistic_release.m/","text":"probabilistic_release \u00b6 probabilistic_release is a function . [ g , g_ ] = probabilistic_release ( varargin )","title":"probabilistic_release"},{"location":"reference/neuroscience/models/synapses/probabilistic_release.m/#probabilistic_release","text":"probabilistic_release is a function . [ g , g_ ] = probabilistic_release ( varargin )","title":"probabilistic_release"},{"location":"reference/neuroscience/reverse_correlation/createdirkernel.m/","text":"createdirkernel \u00b6 CREATEDIRKERNEL - Create a model direction - selective kernel D = CREATEDIRKERNEL ( X , T , SPFREQ , SPHASE , TF , DIR , SPACE_GAUSS , TIME_DE , ABSNORM ) Creates a model direction - selective kernel X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values of the kernel to create ( kernel is assumed to be constant in each bin ) ( example : 0 : 0.001 : 0.5 is 0.5 seconds in 0.001 s steps ) SPFREQ is the spatial frequency preference of the kernel ( say 0.1 cycles per degree ) SPPHASE is the spatial phase pref of the grating ( between 0 and 2 * pi ) TF is the temporal frequency of drifting ( in Hz ) DIR is the slant direction ( 1 is left , - 1 is right , 0 for no slant ) SPACE_GAUSS is a 2 element vector for gaussian envelope [ mean and variance ] TIME_DE is a 3 element vector describing a double exponential function TIME_DE = [ onset tau1 tau2 ], where G > 0 only for T > offset , and then G = (( tau1 * tau2 ) / ( tau1 - tau2 )) * ( exp ( - t / tau1 ) - exp ( - t / tau2 )) ( rougly speaking , tau1 is the onset time constant , tau2 is offset ) ABSNORM -- if this parameter is not empty ([]) then the kernel will be normalized so the optimal stimulus will produce a response of ABSNORM .","title":"createdirkernel"},{"location":"reference/neuroscience/reverse_correlation/createdirkernel.m/#createdirkernel","text":"CREATEDIRKERNEL - Create a model direction - selective kernel D = CREATEDIRKERNEL ( X , T , SPFREQ , SPHASE , TF , DIR , SPACE_GAUSS , TIME_DE , ABSNORM ) Creates a model direction - selective kernel X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values of the kernel to create ( kernel is assumed to be constant in each bin ) ( example : 0 : 0.001 : 0.5 is 0.5 seconds in 0.001 s steps ) SPFREQ is the spatial frequency preference of the kernel ( say 0.1 cycles per degree ) SPPHASE is the spatial phase pref of the grating ( between 0 and 2 * pi ) TF is the temporal frequency of drifting ( in Hz ) DIR is the slant direction ( 1 is left , - 1 is right , 0 for no slant ) SPACE_GAUSS is a 2 element vector for gaussian envelope [ mean and variance ] TIME_DE is a 3 element vector describing a double exponential function TIME_DE = [ onset tau1 tau2 ], where G > 0 only for T > offset , and then G = (( tau1 * tau2 ) / ( tau1 - tau2 )) * ( exp ( - t / tau1 ) - exp ( - t / tau2 )) ( rougly speaking , tau1 is the onset time constant , tau2 is offset ) ABSNORM -- if this parameter is not empty ([]) then the kernel will be normalized so the optimal stimulus will produce a response of ABSNORM .","title":"createdirkernel"},{"location":"reference/neuroscience/reverse_correlation/reverse_correlation_mv_stepfunc.m/","text":"reverse_correlation_mv_stepfunc \u00b6 REVERSE_CORRELATION_MV_STEPFUNC - Performs RC between a continuously valued signal and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... REVERSE_CORRELATION_MV_STEPFUNC ( SIGNAL , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a signal SIGNAL and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct SIGNAL from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SIGNAL is the signal to be related to the stimulus SIGNAL_T is the time of each sample in SIGNAL STIM_OFFSETS is a list of times of SIGNAL relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to REVERSE_CORRELATION_MV_STEPFUNC as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt normalize_xc_stimsignal ( 0 ) | Perform normalization of xc_stimsignal by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : STEPFUNC , DIRRFMODEL_EXAMPLE2 , FIRWIENER","title":"reverse_correlation_mv_stepfunc"},{"location":"reference/neuroscience/reverse_correlation/reverse_correlation_mv_stepfunc.m/#reverse_correlation_mv_stepfunc","text":"REVERSE_CORRELATION_MV_STEPFUNC - Performs RC between a continuously valued signal and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... REVERSE_CORRELATION_MV_STEPFUNC ( SIGNAL , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a signal SIGNAL and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct SIGNAL from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SIGNAL is the signal to be related to the stimulus SIGNAL_T is the time of each sample in SIGNAL STIM_OFFSETS is a list of times of SIGNAL relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to REVERSE_CORRELATION_MV_STEPFUNC as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt normalize_xc_stimsignal ( 0 ) | Perform normalization of xc_stimsignal by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : STEPFUNC , DIRRFMODEL_EXAMPLE2 , FIRWIENER","title":"reverse_correlation_mv_stepfunc"},{"location":"reference/neuroscience/reverse_correlation/reverse_correlation_stepfunc.m/","text":"reverse_correlation_stepfunc \u00b6 REVERSE_CORRELATION_STEPFUNC - Performs RC between a spike train and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... REVERSE_CORRELATION_STEPFUNC ( SPIKETIMES , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a spike train with spikes at SPIKETIMES and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct the underlying response kernel from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SPIKETIMES is an array of spike times SIGNAL_T is the time of each sample in the stimulus record ( used to calculate the autocorrelation of the stimulus ) STIM_OFFSETS is a list of times of SPIKETIMES relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to REVERSE_CORRELATION_MV_STEPFUNC as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : STEPFUNC , DIRRFMODEL_EXAMPLE2 , FIRWIENER","title":"reverse_correlation_stepfunc"},{"location":"reference/neuroscience/reverse_correlation/reverse_correlation_stepfunc.m/#reverse_correlation_stepfunc","text":"REVERSE_CORRELATION_STEPFUNC - Performs RC between a spike train and step function stimulus [ REV_CORR , REV_CORR_RAW , XC_STIMSIGNAL , XC_STIMSTIM ] = ... REVERSE_CORRELATION_STEPFUNC ( SPIKETIMES , SIGNAL_T , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation between a spike train with spikes at SPIKETIMES and a stimulus STIM to obtain the best linear filter ( FIR Wiener filter ) that can be used to reconstruct the underlying response kernel from the STIM . It achieves this by computing : REV_CORR_RAW = Rinv * XC_STIMSIGNAL , where XC_STIMSIGNAL is the correlation between the SIGNAL and STIM , and Rinv is the inverse of the covariance matrix R of the stimulus . This matrix R is computed from the autocorrelation of the stimulus XC_STIMSTIM . Further , this function offers the ability to return a filtered version of REV_CORR_RAW , which is often necessary when the stimulus STIM is not purely white . Inputs : SPIKETIMES is an array of spike times SIGNAL_T is the time of each sample in the stimulus record ( used to calculate the autocorrelation of the stimulus ) STIM_OFFSETS is a list of times of SPIKETIMES relative to STIM over which to compute the correlation . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each column corresponds to one stimulus variable . In calculating the autocorrelation of the stimulus , it is assumed that each column vector of the stimulus has the same statistics . Outputs : REV_CORR is the filtered reverse correlation kernel for each time lag ( rows ) and each spatial component the kernel ( columns ) . REV_CORR is filtered according to the parameters below ( typically a median filter ) in order to aid in removing the influence of a non - white stimulus . REV_CORR has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) REV_CORR_RAW is the unfiltered reverse correlation for each lag ( rows ) and each spatial component of the kernel ( columns ) . REV_CORR_RAW has units of units ( 'SIGNAL' ) / ( units ( 'STIM' ) * units ( 'dt' ) * units ( 'dx' )) XC_STIMSIGNAL is the correlation between SIGNAL and the STIM . Lags are in rows and spatial components are in columns . XC_STIMSIGNAL has units of units ( 'SIGNAL' ) * units ( 'STIM' ) XC_STIMSTIM is the autocorrelation of the STIM for different lags . It has units of units ( 'STIM' ) ^ 2 Note : IF you have a theoretically - determined autocorrelation function for your stimulus , it is highly recommended that you pass it to REVERSE_CORRELATION_MV_STEPFUNC as a name / value pair ( 'xc_stimstim' , myxc ) . This will reduce the likelihood of an unstable / garbage solution . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 , and any source on FIR Optimal Filtering / FIR Wiener Filtering This function also accepts extra parameter inputs in the form of PARAMETER / VALUE pairs that modify default behavior : Parameter ( default ) | Description ---------------------------------------------------------------------------------- DoMedFilter ( 1 ) | Perform a median filter on the output to deal with | noise due to non - white stimulus MedFilterWidth ( 3 ) | Width of the median filter xc_stimstim ([]) | If empty , then xc_stimstim is computed empircally from | the stimulus . Otherwise , the xc_stimstim can be specified , | which might be useful if the theoretical shape of the | stimulus autocorrelation is known . xc_stimstim ( 1 ) should be | the autocorrelation with 0 lag , xc_stimstim ( 2 ) should be the | autocorrelation with lag 1 , etc . Rinv ([]) | The 'whitening function' , determined by inverting the | autocorrelation function . If empty , then it is calculated | from xc_stimstim . normalize ( 1 ) | Perform normalization of the kernel by dx and dt dx ( 1 ) | Resolution of kernel in columns dt ( 1 ) | Resolution of kernel in time See also : STEPFUNC , DIRRFMODEL_EXAMPLE2 , FIRWIENER","title":"reverse_correlation_stepfunc"},{"location":"reference/neuroscience/reverse_correlation/reverse_correlation_stepfunc_old.m/","text":"reverse_correlation_stepfunc_old \u00b6 REVERSE_CORRELATION_STEPFUNC - Performs RC between spike times and step function stimulus AVG_STIM = REVERSE_CORRELATION_STEPFUNC ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation ( AKA the spike triggered average , STA , AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : STEPFUNC , DIRRFMODEL_EXAMPLE3","title":"reverse_correlation_stepfunc_old"},{"location":"reference/neuroscience/reverse_correlation/reverse_correlation_stepfunc_old.m/#reverse_correlation_stepfunc_old","text":"REVERSE_CORRELATION_STEPFUNC - Performs RC between spike times and step function stimulus AVG_STIM = REVERSE_CORRELATION_STEPFUNC ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function performs reverse correlation ( AKA the spike triggered average , STA , AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : STEPFUNC , DIRRFMODEL_EXAMPLE3","title":"reverse_correlation_stepfunc_old"},{"location":"reference/neuroscience/reverse_correlation/simulate_1dkernel_response.m/","text":"simulate_1dkernel_response \u00b6 SIMULATE_1DKERNEL_RESPONSE -- Simulate response of a linear kernel R = SIMULATE_1DKERNEL_RESPONSE(D,DX,DT,STIM,STIMX,STIMT) Simulates the responses of a 1D (in space) kernel D to a stimulus STIM. DX is the spatial positions of the kernel, DT is the temporal positions of the kernel, STIMX is the spatial positions of the stimulus and STIMT is the temporal positions of the stimulus.","title":"simulate_1dkernel_response"},{"location":"reference/neuroscience/reverse_correlation/simulate_1dkernel_response.m/#simulate_1dkernel_response","text":"SIMULATE_1DKERNEL_RESPONSE -- Simulate response of a linear kernel R = SIMULATE_1DKERNEL_RESPONSE(D,DX,DT,STIM,STIMX,STIMT) Simulates the responses of a 1D (in space) kernel D to a stimulus STIM. DX is the spatial positions of the kernel, DT is the temporal positions of the kernel, STIMX is the spatial positions of the stimulus and STIMT is the temporal positions of the stimulus.","title":"simulate_1dkernel_response"},{"location":"reference/neuroscience/reverse_correlation/spike_triggered_average_stepfunc.m/","text":"spike_triggered_average_stepfunc \u00b6 SPIKE_TRIGGERED_AVERAGE_STEPFUNC - Performs STA between spike times and step function stimulus AVG_STIM = SPIKE_TRIGGERED_AVERAGE_STEPFUNC ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function calculates the spike triggered average ( STA ), AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : STEPFUNC , DIRRFMODEL_EXAMPLE3","title":"spike_triggered_average_stepfunc"},{"location":"reference/neuroscience/reverse_correlation/spike_triggered_average_stepfunc.m/#spike_triggered_average_stepfunc","text":"SPIKE_TRIGGERED_AVERAGE_STEPFUNC - Performs STA between spike times and step function stimulus AVG_STIM = SPIKE_TRIGGERED_AVERAGE_STEPFUNC ( SPIKETIMES , STIM_OFFSETS , STIMTIMES , STIM ) This function calculates the spike triggered average ( STA ), AKA the stimulus that was present ( on average ) at the time of a spike ) analysis between a series of spike times and a step function stimulus . AVG_STIM is the stimulus that was present ( on average ) at the time of a spike SPIKETIMES is the list of spike times STIM_OFFSETS is a list of times relative to the spike at which to compute the stimulus . The stimulus is assumed to be a step function that assumes different values at each step . STIMTIMES is a list of the time of each step , and STIM is a matrix of row vectors , where each row corresponds to one stimulus variable . See Dayan and Abbott ( 2005 ), Chapters 1 - 2 See also : STEPFUNC , DIRRFMODEL_EXAMPLE3","title":"spike_triggered_average_stepfunc"},{"location":"reference/neuroscience/reverse_correlation/stim1d_motion.m/","text":"stim1d_motion \u00b6 STIM1D_MOTION -- Creates a 1 - D ( space ) motion stimulus for model computation STIM = STIM1D_MOTION ( X , T , SPFREQ , SPPHASE , TF , DIR ) Creates a discrete 1 - D ( in space ) motion stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) SPFREQ is the spatial frequency of the grating ( say 0.1 cycles per degree ) SPPHASE is the spatial phase of the grating ( between 0 and 2 * pi ) TF is the temporal frequency ( in Hz ) DIR is the direction ( 1 is left , - 1 is right , 0 for no motion ) One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = stim1d_motion ([ 0 : 0.1 : 10 ],[ 0 : 0.01 : 2 ], 0.1 , 0 , 4 , 1 );","title":"stim1d_motion"},{"location":"reference/neuroscience/reverse_correlation/stim1d_motion.m/#stim1d_motion","text":"STIM1D_MOTION -- Creates a 1 - D ( space ) motion stimulus for model computation STIM = STIM1D_MOTION ( X , T , SPFREQ , SPPHASE , TF , DIR ) Creates a discrete 1 - D ( in space ) motion stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) SPFREQ is the spatial frequency of the grating ( say 0.1 cycles per degree ) SPPHASE is the spatial phase of the grating ( between 0 and 2 * pi ) TF is the temporal frequency ( in Hz ) DIR is the direction ( 1 is left , - 1 is right , 0 for no motion ) One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = stim1d_motion ([ 0 : 0.1 : 10 ],[ 0 : 0.01 : 2 ], 0.1 , 0 , 4 , 1 );","title":"stim1d_motion"},{"location":"reference/neuroscience/reverse_correlation/stim1d_random.m/","text":"stim1d_random \u00b6 STIM1D_RANDOM -- Creates a 1 - D ( space ) random stimulus for model computation STIM = STIM1D_MOTION ( X , T , VALUES , DISTRIBUTION ) Creates a discrete 1 - D ( in space ) random stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) VALUES should be an array list of brightness values that the stimulus can take DISTRIBUTION should be an array list of probabilities that the brightness will assume each value in VALUE . One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = stim1d_random ([ 0 : 0.1 : 10 ],[ 0 : 0.1 : 300 ],[ 1 0 - 1 ],[ 0.1 0.8 0.1 ]);","title":"stim1d_random"},{"location":"reference/neuroscience/reverse_correlation/stim1d_random.m/#stim1d_random","text":"STIM1D_RANDOM -- Creates a 1 - D ( space ) random stimulus for model computation STIM = STIM1D_MOTION ( X , T , VALUES , DISTRIBUTION ) Creates a discrete 1 - D ( in space ) random stimulus that can be fed to a 1 - d spatial model X should be a vector indicating the spatial positions to create , in degrees ( example : 0 : 0.1 : 10 creates 100 positions in increments of 0.1 degrees ) T should be the time values to compute ( stim is assumed to be constant in each bin ) ( example : 0 : 0.01 : 2 simulates 2 seconds in 0.01 s steps , or a 100 Hz monitor ) VALUES should be an array list of brightness values that the stimulus can take DISTRIBUTION should be an array list of probabilities that the brightness will assume each value in VALUE . One can imagine that the units of the returned stimulus is brightness . Each row of the returned stimulus represents the stimulus at 1 value of time ; time is represented across the columns . Example : stim = stim1d_random ([ 0 : 0.1 : 10 ],[ 0 : 0.1 : 300 ],[ 1 0 - 1 ],[ 0.1 0.8 0.1 ]);","title":"stim1d_random"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModelTestCode.m/","text":"DirRFModelTestCode \u00b6 DirRFModelTestCode is a script.","title":"DirRFModelTestCode"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModelTestCode.m/#dirrfmodeltestcode","text":"DirRFModelTestCode is a script.","title":"DirRFModelTestCode"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example0.m/","text":"DirRFModel_example0 \u00b6 DIRRFMODEL_EXAMPLE0 - Tests 1d kernel with a \"trivial\" kernel This simulates the response of a \"trivial\" kernel with only 1 non-zero value. The output should equal the input.","title":"DirRFModel_example0"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example0.m/#dirrfmodel_example0","text":"DIRRFMODEL_EXAMPLE0 - Tests 1d kernel with a \"trivial\" kernel This simulates the response of a \"trivial\" kernel with only 1 non-zero value. The output should equal the input.","title":"DirRFModel_example0"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example1.m/","text":"DirRFModel_example1 \u00b6 DIRRFMODEL_EXAMPLE1 - Direction selective responses from a hand-picked kernel","title":"DirRFModel_example1"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example1.m/#dirrfmodel_example1","text":"DIRRFMODEL_EXAMPLE1 - Direction selective responses from a hand-picked kernel","title":"DirRFModel_example1"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example2.m/","text":"DirRFModel_example2 \u00b6 DIRRFMODEL_EXAMPLE2 - Generating a firing rate with hand - picked kernel , then Reconstructing the linear kernel from that firing rate . ( Note that there are no spikes generated here , that is DIRRFMODEL_EXAMPLE3 )","title":"DirRFModel_example2"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example2.m/#dirrfmodel_example2","text":"DIRRFMODEL_EXAMPLE2 - Generating a firing rate with hand - picked kernel , then Reconstructing the linear kernel from that firing rate . ( Note that there are no spikes generated here , that is DIRRFMODEL_EXAMPLE3 )","title":"DirRFModel_example2"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example3.m/","text":"DirRFModel_example3 \u00b6 DIRRFMODEL_EXAMPLE3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"DirRFModel_example3"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example3.m/#dirrfmodel_example3","text":"DIRRFMODEL_EXAMPLE3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"DirRFModel_example3"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example3_old.m/","text":"DirRFModel_example3_old \u00b6 DIRRFMODEL_EXAMPLE3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"DirRFModel_example3_old"},{"location":"reference/neuroscience/reverse_correlation/demos/DirRFModel_example3_old.m/#dirrfmodel_example3_old","text":"DIRRFMODEL_EXAMPLE3 - Using reverse correlation to reconstruct linear kernel in response to noise","title":"DirRFModel_example3_old"},{"location":"reference/neuroscience/reverse_correlation/demos/RandomRDTestCode.m/","text":"RandomRDTestCode \u00b6 RandomRDTestCode is a script.","title":"RandomRDTestCode"},{"location":"reference/neuroscience/reverse_correlation/demos/RandomRDTestCode.m/#randomrdtestcode","text":"RandomRDTestCode is a script.","title":"RandomRDTestCode"},{"location":"reference/neuroscience/reverse_correlation/hartley/hartley_image.m/","text":"hartley_image \u00b6 HARTLEY_IMAGE - A Hartley image function IM = HARTLEY_IMAGE(KX, KY, M) Returns the Hartley image defined by the equation H(kx,ky) = cas(2*pi*(kx*l+ky*m)/M) where l and m run from 0 to M-1. From Ringach et al., 1997","title":"hartley_image"},{"location":"reference/neuroscience/reverse_correlation/hartley/hartley_image.m/#hartley_image","text":"HARTLEY_IMAGE - A Hartley image function IM = HARTLEY_IMAGE(KX, KY, M) Returns the Hartley image defined by the equation H(kx,ky) = cas(2*pi*(kx*l+ky*m)/M) where l and m run from 0 to M-1. From Ringach et al., 1997","title":"hartley_image"},{"location":"reference/neuroscience/spikesorting/centerspikes_neg.m/","text":"centerspikes_neg \u00b6 CENTERSPIKES_NEG Center negative - going spike waveforms based on minimum [ CENTEREDSPIKES ] = CENTERSPIKES_NEG ( SPIKESHAPES , CENTER_RANGE ) Inputs : SPIKESHAPES : an NxMxD vector where N is the number of spikes , M is the number of samples that comprise each spike waveform , and D is dimensions ( i . e ., number of channels ). CENTER_RANGE : the range , in samples , around the center sample that the program should search to identify the center ( e . g ., 10 ) Outputs : CENTEREDSPIKES : the re - centered spikes ; if the center of a spike has shifted , then the edges will be zero padded .","title":"centerspikes_neg"},{"location":"reference/neuroscience/spikesorting/centerspikes_neg.m/#centerspikes_neg","text":"CENTERSPIKES_NEG Center negative - going spike waveforms based on minimum [ CENTEREDSPIKES ] = CENTERSPIKES_NEG ( SPIKESHAPES , CENTER_RANGE ) Inputs : SPIKESHAPES : an NxMxD vector where N is the number of spikes , M is the number of samples that comprise each spike waveform , and D is dimensions ( i . e ., number of channels ). CENTER_RANGE : the range , in samples , around the center sample that the program should search to identify the center ( e . g ., 10 ) Outputs : CENTEREDSPIKES : the re - centered spikes ; if the center of a spike has shifted , then the edges will be zero padded .","title":"centerspikes_neg"},{"location":"reference/neuroscience/spikesorting/cluster_spikewaves_gui.m/","text":"cluster_spikewaves_gui \u00b6 CLUSTER_SPIKEWAVES_GUI - Cluster spikewaves into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = CLUSTER_SPIKEWAVES_GUI ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in READVHLSPIKEWAVEFORMFILE ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"cluster_spikewaves_gui"},{"location":"reference/neuroscience/spikesorting/cluster_spikewaves_gui.m/#cluster_spikewaves_gui","text":"CLUSTER_SPIKEWAVES_GUI - Cluster spikewaves into groups with manual checking [ CLUSTERIDS , CLUSTERINFO ] = CLUSTER_SPIKEWAVES_GUI ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in READVHLSPIKEWAVEFORMFILE ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"cluster_spikewaves_gui"},{"location":"reference/neuroscience/spikesorting/cluster_spikewaves_trivial.m/","text":"cluster_spikewaves_trivial \u00b6 CLUSTER_SPIKEWAVES_TRIVIAL - Cluster spikewaves into a single ' multi - unit ' group [ CLUSTERIDS , CLUSTERINFO ] = CLUSTER_SPIKEWAVES_TRIVIAL ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Classifies all spikes in the manner of CLUSTER_SPIKEWAVES_GUI , except that all spikes are put into a single cluster and labeled with quality ' Multi - unit ' . Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in READVHLSPIKEWAVEFORMFILE ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"cluster_spikewaves_trivial"},{"location":"reference/neuroscience/spikesorting/cluster_spikewaves_trivial.m/#cluster_spikewaves_trivial","text":"CLUSTER_SPIKEWAVES_TRIVIAL - Cluster spikewaves into a single ' multi - unit ' group [ CLUSTERIDS , CLUSTERINFO ] = CLUSTER_SPIKEWAVES_TRIVIAL ( ' WAVES ' , WAVES , ... ' WAVEPARAMETERS ' , WAVEPARAMETERS , ...) Classifies all spikes in the manner of CLUSTER_SPIKEWAVES_GUI , except that all spikes are put into a single cluster and labeled with quality ' Multi - unit ' . Brings up a graphical user interface to allow the user to divide the spikewaves WAVES into groups using several algorithms , and to check the output of these algorithms with different views ( raw data views , feature views , etc ). WAVES should be NumSamples X NumChannels X NumSpikes WAVEPARAMETERS should be a structure with the following fields : NAME ( type ) : DESCRIPTION ------------------------------------------------------------------------- waveparameters . numchannels ( uint8 ) : Number of channels waveparameters . S0 ( int8 ) : Number of samples before spike center : ( usually negative ) waveparameters . S1 ( int8 ) : Number of samples after spike center : ( usually positive ) waveparameters . name ( 80 xchar ) : Name ( up to 80 characters ) waveparameters . ref ( uint8 ) : Reference number waveparameters . comment ( 80 xchar ) : Up to 80 characters of comment waveparameters . samplingrate : The sampling rate ( float64 ) ( this is the same as the output of HEADER in READVHLSPIKEWAVEFORMFILE ) Additional parameters can be adjusted by passing name / value pairs at the end of the function : ' clusterids ' : preliminary cluster ids ' wavetimes ' : 1 xNumSpikes ; the time of each spike ' spikewaves2NpointfeatureSampleList ' : [ x1 x2 ] the locations where we should measure the : voltage , defaults [ half_way 5 / 6 of way ] ' spikewaves2pcaRange ' : [ x1 x2 ] the locations within which we should examine pca : default [ 6 22 ] / 24 * number of spike samples ' ColorOrder ' : Color order for cluster drawings ; defaults : to axes color order ' UnclassifiedColor ' : Color of unclassified spikes , default [ 0.5 0.5 0.5 ] ' NotPresentColor ' : Color of spikes not present , default [ 1 0.5 0.5 ] ( light pink ) ' RandomSubset ' : Do we plot a random subset of spikes ? Default 1 ' RandomSubsetSize ' : How many ? Default 200 ' ForceQualityAssessment ' : Should we force the user to choose cluster quality : before closing ? Default 1 ' EnableClusterEditing ' : Should we enable cluster editing ? Default 1 ' AskBeforeDone ' : Ask user to confirm they are really done Default 1 ' MarkerSize ' : MarkerSize for plotting ; default 10 ' FigureName ' : Name of the figure ; default \"Cluster spikewaves\" . ' IsModal ' : Is it a modal dialog ? That is , should it stop all other : windows until the user finishes ? Default is 1. : If the dialog is not modal then it cannot return : any values . ' EpochStartSamples ' : Array with the sample corresponding to the start : of each recording epoch . Default [ 1 ], which specifies : a single recording epoch that starts with the first : sample . ' EpochNames ' : Cell list of string names of the recording epochs . : Default { ' Epoch1 ' }. There must be the same number : of EpochNames as there are entries in the array : EpochStartSamples .","title":"cluster_spikewaves_trivial"},{"location":"reference/neuroscience/spikesorting/fitspike_neg.m/","text":"fitspike_neg \u00b6 this function is under development, not good","title":"fitspike_neg"},{"location":"reference/neuroscience/spikesorting/fitspike_neg.m/#fitspike_neg","text":"this function is under development, not good","title":"fitspike_neg"},{"location":"reference/neuroscience/spikesorting/oversamplespikes.m/","text":"oversamplespikes \u00b6 OVERSAMPLESPIKES - Oversample spike waveforms using spline interpolation [ SPIKESHAPESUP,TUP ] = OVERSAMPLESPIKES ( SPIKESHAPES , UPSAMPLEFACTOR , [ T ] ) Inputs : SPIKESHAPES : an NxMxD matrix of spikes shapes ; N is the number of spikes , M is the number of samples per spike , and D is the number of dimensions ( e . g ., D = 1 for a single channel recording ). UPSAMPLEFACTOR : the number of times to oversample ( e . g ., 5 ) T : ( optional ), the relative time values within each spike sample ( shoudl be length M ) Outputs : SPIKESHAPESUP : An NxM * UPSCALEFACTOR * D matrix with the upsampled spikeshapes . N is the number of spikes , M * UPSCALEFACTOR is the number of samples for each spike , and D is the number of dimensions . N , M , and D are unchanged from the input SPIKESHAPES . TUP : If T is given , TUP is the upscaled time values for each spike .","title":"oversamplespikes"},{"location":"reference/neuroscience/spikesorting/oversamplespikes.m/#oversamplespikes","text":"OVERSAMPLESPIKES - Oversample spike waveforms using spline interpolation [ SPIKESHAPESUP,TUP ] = OVERSAMPLESPIKES ( SPIKESHAPES , UPSAMPLEFACTOR , [ T ] ) Inputs : SPIKESHAPES : an NxMxD matrix of spikes shapes ; N is the number of spikes , M is the number of samples per spike , and D is the number of dimensions ( e . g ., D = 1 for a single channel recording ). UPSAMPLEFACTOR : the number of times to oversample ( e . g ., 5 ) T : ( optional ), the relative time values within each spike sample ( shoudl be length M ) Outputs : SPIKESHAPESUP : An NxM * UPSCALEFACTOR * D matrix with the upsampled spikeshapes . N is the number of spikes , M * UPSCALEFACTOR is the number of samples for each spike , and D is the number of dimensions . N , M , and D are unchanged from the input SPIKESHAPES . TUP : If T is given , TUP is the upscaled time values for each spike .","title":"oversamplespikes"},{"location":"reference/neuroscience/spikesorting/plotspikewaves.m/","text":"plotspikewaves \u00b6 PLOTSPIKEWAVES - Plot spike waveforms to the current axes H = PLOTSPIKEWAVES ( WAVES , [ INDEXES ] , ...) Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . All channels are combined into 1 dimension for the plot . INDEXES : Optional , a list of index values to plot . If not provided , then all waves are plotted ( subject to restrictions below ). Additional name / value pairs can be provided to modify the default settings below : 'SampleTimes' : The sample times of each spike ; default 1 : ( NumSamples * NumChannels ) ( sample numbers ) 't' : The time of each spike ( default 1 : NumSpikes , indicating spike order only ) 'TimeGraphBin' ** : If > 0 and if t has real times , show a second graph in front of the spike : waveforms indicating the firing rate in time bins of this size ( default 0 ); : otherwise show no graph 'TimeGraphMax' ** : The firing rate in the time graph that is considered \"maximum\" ( default 20 ( Hz )) 'ClassID' : 1 xNumSpikes - class identity of each waveform ( default 1 : NumSpikes , meaning each unique ) 'ColorOrder' : List of colors ( Nx3 ) to cycle through with class ID ; defaults to the default : color order for the axes , that is , get ( gca , 'ColorOrder' ). 'RandomSubset' : Should we plot only a random subset ? ( 0 / 1 , default 1 ) 'RandomSubsetSize' : How many waves should we plot ? ( default 200 ) 'LineWidth' : Default 0.5 'ClearAxes' : Default 0 ** not implemented yet Outputs : H : A list of the plot handles for these waves","title":"plotspikewaves"},{"location":"reference/neuroscience/spikesorting/plotspikewaves.m/#plotspikewaves","text":"PLOTSPIKEWAVES - Plot spike waveforms to the current axes H = PLOTSPIKEWAVES ( WAVES , [ INDEXES ] , ...) Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . All channels are combined into 1 dimension for the plot . INDEXES : Optional , a list of index values to plot . If not provided , then all waves are plotted ( subject to restrictions below ). Additional name / value pairs can be provided to modify the default settings below : 'SampleTimes' : The sample times of each spike ; default 1 : ( NumSamples * NumChannels ) ( sample numbers ) 't' : The time of each spike ( default 1 : NumSpikes , indicating spike order only ) 'TimeGraphBin' ** : If > 0 and if t has real times , show a second graph in front of the spike : waveforms indicating the firing rate in time bins of this size ( default 0 ); : otherwise show no graph 'TimeGraphMax' ** : The firing rate in the time graph that is considered \"maximum\" ( default 20 ( Hz )) 'ClassID' : 1 xNumSpikes - class identity of each waveform ( default 1 : NumSpikes , meaning each unique ) 'ColorOrder' : List of colors ( Nx3 ) to cycle through with class ID ; defaults to the default : color order for the axes , that is , get ( gca , 'ColorOrder' ). 'RandomSubset' : Should we plot only a random subset ? ( 0 / 1 , default 1 ) 'RandomSubsetSize' : How many waves should we plot ? ( default 200 ) 'LineWidth' : Default 0.5 'ClearAxes' : Default 0 ** not implemented yet Outputs : H : A list of the plot handles for these waves","title":"plotspikewaves"},{"location":"reference/neuroscience/spikesorting/spikewaves2Npointfeature.m/","text":"spikewaves2Npointfeature \u00b6 SPIKEWAVES2NPOINTFEATURE - Select samples from spike waves FEATURES = SPIKEWAVES2NPOINTFEATURE(WAVES, SAMPLELIST) Creates a set of \"features\" of the spike waveform WAVES by grabbing samples at the locations SAMPLELIST. Inputs: WAVES: A NumSamples x NumChannels x NumSpikes list of spike waveforms. SAMPLELIST: A list of samples [S1 S2 ...] at which to sample the spike waveforms on each channel. Outputs: FEATURES: A (NumSampleList*NumChannel) x NumSpikes list of features. Each spike waveform is sampled on each channel at the sample offsets in SAMPLELIST. Each column has the sample values on the first channel, followed by the second, and so on.","title":"spikewaves2Npointfeature"},{"location":"reference/neuroscience/spikesorting/spikewaves2Npointfeature.m/#spikewaves2npointfeature","text":"SPIKEWAVES2NPOINTFEATURE - Select samples from spike waves FEATURES = SPIKEWAVES2NPOINTFEATURE(WAVES, SAMPLELIST) Creates a set of \"features\" of the spike waveform WAVES by grabbing samples at the locations SAMPLELIST. Inputs: WAVES: A NumSamples x NumChannels x NumSpikes list of spike waveforms. SAMPLELIST: A list of samples [S1 S2 ...] at which to sample the spike waveforms on each channel. Outputs: FEATURES: A (NumSampleList*NumChannel) x NumSpikes list of features. Each spike waveform is sampled on each channel at the sample offsets in SAMPLELIST. Each column has the sample values on the first channel, followed by the second, and so on.","title":"spikewaves2Npointfeature"},{"location":"reference/neuroscience/spikesorting/spikewaves2pca.m/","text":"spikewaves2pca \u00b6 SPIKEWAVES2PCA - Compute first N principle components of spike waveforms FEATURES = SPIKEWAVES2PCA ( WAVES , N , [ RANGE ] ) Creates a set of \"features\" of the spike waveform WAVES by calculating the values of the first N principle components . Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . N : the number of principle components to include Optional input : RANGE : A 2 element vector with the START and STOP range to examine Outputs : FEATURES : An N x NumSpikes list of features .","title":"spikewaves2pca"},{"location":"reference/neuroscience/spikesorting/spikewaves2pca.m/#spikewaves2pca","text":"SPIKEWAVES2PCA - Compute first N principle components of spike waveforms FEATURES = SPIKEWAVES2PCA ( WAVES , N , [ RANGE ] ) Creates a set of \"features\" of the spike waveform WAVES by calculating the values of the first N principle components . Inputs : WAVES : A NumSamples x NumChannels x NumSpikes list of spike waveforms . N : the number of principle components to include Optional input : RANGE : A 2 element vector with the START and STOP range to examine Outputs : FEATURES : An N x NumSpikes list of features .","title":"spikewaves2pca"},{"location":"reference/neuroscience/spiketrains/interspikeinterval.m/","text":"interspikeinterval \u00b6 INTERSPIKEINTERVAL - Calculate interspike interval distribution for spiketrain ISI = INTERSPIKEINTERVAL ( SPIKETIMES , BINS ) Calculates the distribution of interspike intervals for the list of spikes SPIKETIMES . SPIKETIMES should be in the same time units as BINS . If the function is called without a BINS argument : ISI = INTERSPIKEINTERVAL ( SPIKETIMES ) then BINS is taken to be [ 0 : 0.001 : 0.100 ] ( that is , 1 ms bins from 0 to 0.100 seconds ) Example : % Poisson spike train at 3Hz dt = 0.001 ; t = 0 : dt : 100 ; rate = 3 ; spikebins = rand ( size ( t )) < rate * dt ; % 0's and 1's spikebin_indexes = find ( spikebins ); % find locations of spikes spiketimes = t ( spikebin_indexes ); % get the corresponding time values bins = 0 : 0.001 : 0.1 ; ISI = interspikeinterval ( spiketimes , bins ); % plot as a fraction of total bar ( bins + 0.001 / 2 , ISI / sum ( ISI ));","title":"interspikeinterval"},{"location":"reference/neuroscience/spiketrains/interspikeinterval.m/#interspikeinterval","text":"INTERSPIKEINTERVAL - Calculate interspike interval distribution for spiketrain ISI = INTERSPIKEINTERVAL ( SPIKETIMES , BINS ) Calculates the distribution of interspike intervals for the list of spikes SPIKETIMES . SPIKETIMES should be in the same time units as BINS . If the function is called without a BINS argument : ISI = INTERSPIKEINTERVAL ( SPIKETIMES ) then BINS is taken to be [ 0 : 0.001 : 0.100 ] ( that is , 1 ms bins from 0 to 0.100 seconds ) Example : % Poisson spike train at 3Hz dt = 0.001 ; t = 0 : dt : 100 ; rate = 3 ; spikebins = rand ( size ( t )) < rate * dt ; % 0's and 1's spikebin_indexes = find ( spikebins ); % find locations of spikes spiketimes = t ( spikebin_indexes ); % get the corresponding time values bins = 0 : 0.001 : 0.1 ; ISI = interspikeinterval ( spiketimes , bins ); % plot as a fraction of total bar ( bins + 0.001 / 2 , ISI / sum ( ISI ));","title":"interspikeinterval"},{"location":"reference/neuroscience/spiketrains/loglikelihood_spikerate.m/","text":"loglikelihood_spikerate \u00b6 LOGLIKELIHOOD_SPIKERATE - Compute the log likelihood of seeing spike rates LL = LOGLIKELIHOOD_SPIKERATE(BIN_RATES, BIN_DURATIONS, SPIKERATES, SIGMA) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of -log((sqrt(2*pi)*sigma))-(spikerates(i)-bin_rates(i))^2/(2*sigma^2) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"loglikelihood_spikerate"},{"location":"reference/neuroscience/spiketrains/loglikelihood_spikerate.m/#loglikelihood_spikerate","text":"LOGLIKELIHOOD_SPIKERATE - Compute the log likelihood of seeing spike rates LL = LOGLIKELIHOOD_SPIKERATE(BIN_RATES, BIN_DURATIONS, SPIKERATES, SIGMA) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of -log((sqrt(2*pi)*sigma))-(spikerates(i)-bin_rates(i))^2/(2*sigma^2) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"loglikelihood_spikerate"},{"location":"reference/neuroscience/spiketrains/loglikelihood_spiketrain.m/","text":"loglikelihood_spiketrain \u00b6 LOGLIKELIHOOD_SPIKETRAIN - Compute the log likelihood of seeing spike counts LL = LOGLIKELIHOOD_SPIKETRAIN(BIN_RATES, BIN_DURATIONS, SPIKECOUNTS) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of bin_rates(i)*bin_durations(i) + spikecounts(i)*log(bin_rates(i)*bin_durations)-log(k!) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"loglikelihood_spiketrain"},{"location":"reference/neuroscience/spiketrains/loglikelihood_spiketrain.m/#loglikelihood_spiketrain","text":"LOGLIKELIHOOD_SPIKETRAIN - Compute the log likelihood of seeing spike counts LL = LOGLIKELIHOOD_SPIKETRAIN(BIN_RATES, BIN_DURATIONS, SPIKECOUNTS) Computes the log likelihood of observing SPIKECOUNTS(i) in bins of length BIN_DURATION(i) with firing rates BIN_RATES(i). The following equation is used to calculate the log likelihood: logP = sum over i of bin_rates(i)*bin_durations(i) + spikecounts(i)*log(bin_rates(i)*bin_durations)-log(k!) See \"A Novel Circuit Model of Contextual Modulation and Normalization in Primary Visual Cortex\" Columbia University 2012","title":"loglikelihood_spiketrain"},{"location":"reference/neuroscience/spiketrains/make_psth.m/","text":"make_psth \u00b6 [ N , X , RAST ] = MAKE_PSTH ( SPIKEDATA , TRIGGERS , INTERV , RES , NORMALIZE , RASTTYPE ) MAKE_PSTH gives a peri - stimulus time histogram . The bins of the histogram are given in X , while the values in each bin are given in N . Rasters are also returned in the sparse matrix RAST ; each trial has a separate row . The function takes as arguments SPIKEDATA , a spikedata object to be evaluated , TRIGGERS , a list of trigger times , INTERV = [ before after ], which tells how much before and after the trigger the histogram should examine , and RES , which is the time resolution of the histogram . NORMALIZE = 0 / 1 , and if it is 1 then the output is normalized by the number of triggers . RASTTYPE == 1 specifies RAST should be a cell with number of trigger entries , each of which has all spike times for that peri - stimulus time . RASTTYPE == 0 specifies that the RAST should be an X x ( length of histogram ) sparse matrix with each peri - stimulus time in a row . All units are SI . ( documentation cryptic ... fix ) Questions ? vanhoosr @ brandeis . edu","title":"make_psth"},{"location":"reference/neuroscience/spiketrains/make_psth.m/#make_psth","text":"[ N , X , RAST ] = MAKE_PSTH ( SPIKEDATA , TRIGGERS , INTERV , RES , NORMALIZE , RASTTYPE ) MAKE_PSTH gives a peri - stimulus time histogram . The bins of the histogram are given in X , while the values in each bin are given in N . Rasters are also returned in the sparse matrix RAST ; each trial has a separate row . The function takes as arguments SPIKEDATA , a spikedata object to be evaluated , TRIGGERS , a list of trigger times , INTERV = [ before after ], which tells how much before and after the trigger the histogram should examine , and RES , which is the time resolution of the histogram . NORMALIZE = 0 / 1 , and if it is 1 then the output is normalized by the number of triggers . RASTTYPE == 1 specifies RAST should be a cell with number of trigger entries , each of which has all spike times for that peri - stimulus time . RASTTYPE == 0 specifies that the RAST should be an X x ( length of histogram ) sparse matrix with each peri - stimulus time in a row . All units are SI . ( documentation cryptic ... fix ) Questions ? vanhoosr @ brandeis . edu","title":"make_psth"},{"location":"reference/neuroscience/spiketrains/plot_psth.m/","text":"plot_psth \u00b6 [ H ] = PLOT_PSTH ( N , X , rast , ratioPSTH , PSTHclear , theAxes )","title":"plot_psth"},{"location":"reference/neuroscience/spiketrains/plot_psth.m/#plot_psth","text":"[ H ] = PLOT_PSTH ( N , X , rast , ratioPSTH , PSTHclear , theAxes )","title":"plot_psth"},{"location":"reference/neuroscience/spiketrains/spikeresponse.m/","text":"spikeresponse \u00b6 [ RESPONSE_CURVE ] = SPIKERESPONSE ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES ) Return a response curve of responses to the presentation of multiple stimuli . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) Test example : % Step 1 , use gaindriftexample . m to generate spike responses . % See help gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ); % Step 2 , use spikeresponse to calculate the actual responses response_curve = spikeresponse ( stimon , stimoff , stimids , spiketimes ); % see if the average spikes are equal to what we expect from gaindriftexample ' s help response_curve . curve ( 2 , : ), See also : SPIKERESPONSE_TF","title":"spikeresponse"},{"location":"reference/neuroscience/spiketrains/spikeresponse.m/#spikeresponse","text":"[ RESPONSE_CURVE ] = SPIKERESPONSE ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES ) Return a response curve of responses to the presentation of multiple stimuli . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) Test example : % Step 1 , use gaindriftexample . m to generate spike responses . % See help gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ); % Step 2 , use spikeresponse to calculate the actual responses response_curve = spikeresponse ( stimon , stimoff , stimids , spiketimes ); % see if the average spikes are equal to what we expect from gaindriftexample ' s help response_curve . curve ( 2 , : ), See also : SPIKERESPONSE_TF","title":"spikeresponse"},{"location":"reference/neuroscience/spiketrains/spikeresponse_tf.m/","text":"spikeresponse_tf \u00b6 [ RESPONSE_CURVE ] = SPIKERESPONSE_TF ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES , BINSIZE , FREQUENCY ) Return a response curve of responses to the presentation of multiple stimuli . In this function , only the portion of the response that is modulated at temporal fequency FREQUENCY is reported . Spike trains are first discretized into bins with binsize BINSIZE . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the % same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) % See help gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ,... 'response_tf' , 4 ); % Step 2 , use spikeresponse to calculate the actual responses response_curve = spikeresponse_tf ( stimon , stimoff , stimids , spiketimes , 0.001 , 4 ); % see if the average spikes are equal to what we expect from gaindriftexample ' s help abs ( response_curve . curve ( 2 , : )), See also : SPIKERESPONSE","title":"spikeresponse_tf"},{"location":"reference/neuroscience/spiketrains/spikeresponse_tf.m/#spikeresponse_tf","text":"[ RESPONSE_CURVE ] = SPIKERESPONSE_TF ( STIMTIMES_ON , STIMTIMES_OFF , STIM_VALUES , SPIKETIMES , BINSIZE , FREQUENCY ) Return a response curve of responses to the presentation of multiple stimuli . In this function , only the portion of the response that is modulated at temporal fequency FREQUENCY is reported . Spike trains are first discretized into bins with binsize BINSIZE . The onset time of each stimulus should be in the vector STIMTIMES_ON , and the offset time of each stimulus should be in the vector STIMTIMES_OFF . STIM_VALUES should be a vector list with the value of the stimulus parameter for each stimulus that is indicated in STIMTIMES_ON and STIMTIMES_OFF . One can specify that a stimulus is \"BLANK\" or \"CONTROL\" by giving NaN as the STIM_VALUE for that stimulus . SPIKETIMES are the spike times of a neuron in the % same time units as STIMTIMES_ON and STIMTIMES_OFF . Output : RESPONSE_CURVE is a struture with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } ) % See help gaindriftexample for a description of the spike responses it generates . [ spiketimes,r,t,stimon,stimoff,stimids,g ]= gaindriftexample ( 'gain_amplitude' , 0 , 'gain_offset' , 1 ,... 'response_tf' , 4 ); % Step 2 , use spikeresponse to calculate the actual responses response_curve = spikeresponse_tf ( stimon , stimoff , stimids , spiketimes , 0.001 , 4 ); % see if the average spikes are equal to what we expect from gaindriftexample ' s help abs ( response_curve . curve ( 2 , : )), See also : SPIKERESPONSE","title":"spikeresponse_tf"},{"location":"reference/neuroscience/spiketrains/spiketimes2bins.m/","text":"spiketimes2bins \u00b6 SPIKETIMES2BINS - Convert a list of spike times to discrete time bins SPIKE_COUNTS = SPIKETIMES2BINS ( SPIKETIMES , TIMES ) Takes a list of spike times ( in units of TIMES ) and calculates the number of spikes that fall within time bins TIMES ( i ) - TIMES ( i + 1 ). If a spike occurred at exactly time TIMES ( i ) then it is included in bin i . Note that bins can contain more than one spike . Example : Generate a list of bins in spike times , get the spike times , and then convert it back to bins . dt = 0 . 001 ; T = 0 : dt : 10 ; % 10 seconds R = 5 * rectify ( sin ( 2 * pi * 3 * T )); S = ( rand ( size ( T ))< R * dt ); % generate spikes with probability R * dt spike_indexes = find ( S ); % find which bins have spikes spiketimes = T ( spike_indexes ); % get the time of those bins S2 = spiketimes2bins ( spiketimes , T ); % convert back all ( S == S2 ) % are these vectors equal ? Yes !","title":"spiketimes2bins"},{"location":"reference/neuroscience/spiketrains/spiketimes2bins.m/#spiketimes2bins","text":"SPIKETIMES2BINS - Convert a list of spike times to discrete time bins SPIKE_COUNTS = SPIKETIMES2BINS ( SPIKETIMES , TIMES ) Takes a list of spike times ( in units of TIMES ) and calculates the number of spikes that fall within time bins TIMES ( i ) - TIMES ( i + 1 ). If a spike occurred at exactly time TIMES ( i ) then it is included in bin i . Note that bins can contain more than one spike . Example : Generate a list of bins in spike times , get the spike times , and then convert it back to bins . dt = 0 . 001 ; T = 0 : dt : 10 ; % 10 seconds R = 5 * rectify ( sin ( 2 * pi * 3 * T )); S = ( rand ( size ( T ))< R * dt ); % generate spikes with probability R * dt spike_indexes = find ( S ); % find which bins have spikes spiketimes = T ( spike_indexes ); % get the time of those bins S2 = spiketimes2bins ( spiketimes , T ); % convert back all ( S == S2 ) % are these vectors equal ? Yes !","title":"spiketimes2bins"},{"location":"reference/neuroscience/spiketrains/spiketimes_correlation.m/","text":"spiketimes_correlation \u00b6 SPIKETIMES_CORRELATION - Compute correlation of 2 spike trains [ CORR , LAGS ] = SPIKETIMES_CORRELATION ( TRAIN1 , TRAIN2 , BINSIZE , MAXLAG ) Computes the raw correlation between 2 spike trains that are specified by the spike times of TRAIN1 and TRAIN2 at the lags requested from -MAXLAG to MAXLAG . Spike events are binned into bins of size BINSIZE ( same time units as LAGS ). MAXLAG should be evenly divided by BINSIZE ( such that MAXLAG / BINSIZE yields an integer ). For example , if LAGS ( i ) is 0 , then CORR ( i ) returns the number of times the 2 cells spiked stimulateously ( within the resolution BINSIZE ). If LAGS ( i ) is 0 . 010 , then CORR ( i ) returns the number of times cell 2 spiked 10ms after cell 1 ( with a resolution of BINSIZE ). Note that this treatment of \"LAGS\" is backwards from the function XCORR . Example : train1 = [ 0 0.010 0.020 ] ; train2 = [ 0 0.010 0.020 0.022 ] ; [ corr , lags ] = spiketimes_correlation ( train1 , train2 , 0 . 001 , 0 . 010 ); figure ; bar ( lags , corr ); xlabel ( 'Time lags' ); ylabel ( 'Counts' ); See also : XCORR","title":"spiketimes_correlation"},{"location":"reference/neuroscience/spiketrains/spiketimes_correlation.m/#spiketimes_correlation","text":"SPIKETIMES_CORRELATION - Compute correlation of 2 spike trains [ CORR , LAGS ] = SPIKETIMES_CORRELATION ( TRAIN1 , TRAIN2 , BINSIZE , MAXLAG ) Computes the raw correlation between 2 spike trains that are specified by the spike times of TRAIN1 and TRAIN2 at the lags requested from -MAXLAG to MAXLAG . Spike events are binned into bins of size BINSIZE ( same time units as LAGS ). MAXLAG should be evenly divided by BINSIZE ( such that MAXLAG / BINSIZE yields an integer ). For example , if LAGS ( i ) is 0 , then CORR ( i ) returns the number of times the 2 cells spiked stimulateously ( within the resolution BINSIZE ). If LAGS ( i ) is 0 . 010 , then CORR ( i ) returns the number of times cell 2 spiked 10ms after cell 1 ( with a resolution of BINSIZE ). Note that this treatment of \"LAGS\" is backwards from the function XCORR . Example : train1 = [ 0 0.010 0.020 ] ; train2 = [ 0 0.010 0.020 0.022 ] ; [ corr , lags ] = spiketimes_correlation ( train1 , train2 , 0 . 001 , 0 . 010 ); figure ; bar ( lags , corr ); xlabel ( 'Time lags' ); ylabel ( 'Counts' ); See also : XCORR","title":"spiketimes_correlation"},{"location":"reference/neuroscience/spiketrains/spiketimes_correlation_timeshiftsubtract.m/","text":"spiketimes_correlation_timeshiftsubtract \u00b6 SPIKETIMES_CORRELATION_TIMESHIFTSUBTRACT - Correlation that subtracts correlation not due to precise times [ XCORR_ACTUAL , XCORR_SHIFTED , XCORR_PERCENTILE , LAGS ] = SPIKETIMES_CORRELATION_TIMESHIFTSUBTRACT ( TRAIN1 , TRAIN2 , BINSIZE , ... MAXLAG , SHIFT , TRIALS ) Computes both the standard spike train correlation ( XCORR_ACTUAL ) between TRAIN1 and TRAIN2 , lists of spike times , using SPIKETIMES_CORRELATION , and computes an estimate of the amount of this correlation that is due to slow covarying spike rates with a time scale of SHIFT . BINSIZE is the resolution ( e . g . , 0.002 for 2 ms bins ), and MAXLAG is the maximum lag between the two trains TRAIN1 and TRAIN2 that will be computed . ( See help spiketimes_correlation ) The estimate of the amount of correlation that is due to slow covarying spike rates is computed over TRIALS trials ( e . g . , 100 ), during which each spike in the trains is time - shifted by a variable amount between 0 and SHIFT ( uniform distribution ) . SHIFT might be 0.100 to shift 100 ms , for example . This estimate is returned in XCORR_SHIFTED . The percentile distribution of XCORR_SHIFTED is returned in XCORR_PERCENTILE . Each Nth row of XCORR_PERCENTILE is the N - 1 th percentile of the distribution .","title":"spiketimes_correlation_timeshiftsubtract"},{"location":"reference/neuroscience/spiketrains/spiketimes_correlation_timeshiftsubtract.m/#spiketimes_correlation_timeshiftsubtract","text":"SPIKETIMES_CORRELATION_TIMESHIFTSUBTRACT - Correlation that subtracts correlation not due to precise times [ XCORR_ACTUAL , XCORR_SHIFTED , XCORR_PERCENTILE , LAGS ] = SPIKETIMES_CORRELATION_TIMESHIFTSUBTRACT ( TRAIN1 , TRAIN2 , BINSIZE , ... MAXLAG , SHIFT , TRIALS ) Computes both the standard spike train correlation ( XCORR_ACTUAL ) between TRAIN1 and TRAIN2 , lists of spike times , using SPIKETIMES_CORRELATION , and computes an estimate of the amount of this correlation that is due to slow covarying spike rates with a time scale of SHIFT . BINSIZE is the resolution ( e . g . , 0.002 for 2 ms bins ), and MAXLAG is the maximum lag between the two trains TRAIN1 and TRAIN2 that will be computed . ( See help spiketimes_correlation ) The estimate of the amount of correlation that is due to slow covarying spike rates is computed over TRIALS trials ( e . g . , 100 ), during which each spike in the trains is time - shifted by a variable amount between 0 and SHIFT ( uniform distribution ) . SHIFT might be 0.100 to shift 100 ms , for example . This estimate is returned in XCORR_SHIFTED . The percentile distribution of XCORR_SHIFTED is returned in XCORR_PERCENTILE . Each Nth row of XCORR_PERCENTILE is the N - 1 th percentile of the distribution .","title":"spiketimes_correlation_timeshiftsubtract"},{"location":"reference/neuroscience/spiketrains/spiketimes_plot.m/","text":"spiketimes_plot \u00b6 SPIKETIMES_PLOT - Plot a spike train as a bunch of hash ticks H = SPIKETIMES_PLOT ( SPIKETIMES ) Plot a spiketrain ( with spike times SPIKETIMES ) on the current axes as a series of hash ticks . One can also modify the plot using the following options passed as name / value pairs ( for example , h = spiketimes_plot ( spiketimes , 'color' ,[ 1 0 0 ] ) plots in red ) : Parameter ( default ) | Description --------------------------------------------------------------------- color [ 0 0 0 ] | Hash color ( [ red green blue ], 0 .. 1 ) linewidth 1 | Line thickness hashheight 0 . 8 | Height of the hash marks in axis Y units hashcenter 0 . 5 | Center location of the hash marks Keywords : spiketrain spike train spiketimes times hash","title":"spiketimes_plot"},{"location":"reference/neuroscience/spiketrains/spiketimes_plot.m/#spiketimes_plot","text":"SPIKETIMES_PLOT - Plot a spike train as a bunch of hash ticks H = SPIKETIMES_PLOT ( SPIKETIMES ) Plot a spiketrain ( with spike times SPIKETIMES ) on the current axes as a series of hash ticks . One can also modify the plot using the following options passed as name / value pairs ( for example , h = spiketimes_plot ( spiketimes , 'color' ,[ 1 0 0 ] ) plots in red ) : Parameter ( default ) | Description --------------------------------------------------------------------- color [ 0 0 0 ] | Hash color ( [ red green blue ], 0 .. 1 ) linewidth 1 | Line thickness hashheight 0 . 8 | Height of the hash marks in axis Y units hashcenter 0 . 5 | Center location of the hash marks Keywords : spiketrain spike train spiketimes times hash","title":"spiketimes_plot"},{"location":"reference/neuroscience/spiketrains/spiketrain2rate.m/","text":"spiketrain2rate \u00b6 SPIKETRAIN2RATE - compute a 'blurred' spike rate from 0 / 1 spike train RATE = SPIKETRAIN2RATE ( SPIKETRAIN , DT , BLUR , ...) Given a vector of 0 / 1 binned SPIKETRAIN data and the sampling interval DT of the SPIKETRAIN , estimate a RATE of the spiking process by blurring with a parameter BLUR . This function takes extra parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------------- BlurFunc ( 'gaussian' ) | The blur function to use . Default is 'gaussian' . See also : NAMEVALUEPAIR , SPIKETIMES2BINS Example : dt = 0 . 001 ; t_start = 0 ; t_end = 50 / 2 ; maxrate = 50 ; tFreq = 2 ; phase = 0 ; rate_offset = 20 ; ST = spiketrain_sinusoidal ( maxrate , tFreq , phase , rate_offset , t_start , t_end , dt ); % 50 cycles at 2Hz T = t_start : dt : t_end ; SC = spiketimes2bins ( ST , T ); R = spiketrain2rate ( SC , dt , 0 . 005 ); figure ; subplot ( 2 , 1 , 1 ); plot ( T , R ); hold on ; plot ( T , rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase )), 'g' ); xlabel ( 'Time(s)' ); ylabel ( 'Rate (spikes/s)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( cumsum ( R ), cumsum ( rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase ))), 'bo' ); hold on ; plot ( [ 0 sum ( R ) ] , [ 0 sum ( R ) ] , 'k--' ); xlabel ( 'Cumulative rate measured (spikes)' ); ylabel ( 'Actual cumulative rate (spikes)' ); axis equal square ; box off ;","title":"spiketrain2rate"},{"location":"reference/neuroscience/spiketrains/spiketrain2rate.m/#spiketrain2rate","text":"SPIKETRAIN2RATE - compute a 'blurred' spike rate from 0 / 1 spike train RATE = SPIKETRAIN2RATE ( SPIKETRAIN , DT , BLUR , ...) Given a vector of 0 / 1 binned SPIKETRAIN data and the sampling interval DT of the SPIKETRAIN , estimate a RATE of the spiking process by blurring with a parameter BLUR . This function takes extra parameters as name / value pairs that modify its behavior : Parameter ( default ) | Description ----------------------------------------------------------------------------- BlurFunc ( 'gaussian' ) | The blur function to use . Default is 'gaussian' . See also : NAMEVALUEPAIR , SPIKETIMES2BINS Example : dt = 0 . 001 ; t_start = 0 ; t_end = 50 / 2 ; maxrate = 50 ; tFreq = 2 ; phase = 0 ; rate_offset = 20 ; ST = spiketrain_sinusoidal ( maxrate , tFreq , phase , rate_offset , t_start , t_end , dt ); % 50 cycles at 2Hz T = t_start : dt : t_end ; SC = spiketimes2bins ( ST , T ); R = spiketrain2rate ( SC , dt , 0 . 005 ); figure ; subplot ( 2 , 1 , 1 ); plot ( T , R ); hold on ; plot ( T , rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase )), 'g' ); xlabel ( 'Time(s)' ); ylabel ( 'Rate (spikes/s)' ); box off ; subplot ( 2 , 1 , 2 ); plot ( cumsum ( R ), cumsum ( rectify ( rate_offset + maxrate * sin ( 2 * pi * tFreq * T + phase ))), 'bo' ); hold on ; plot ( [ 0 sum ( R ) ] , [ 0 sum ( R ) ] , 'k--' ); xlabel ( 'Cumulative rate measured (spikes)' ); ylabel ( 'Actual cumulative rate (spikes)' ); axis equal square ; box off ;","title":"spiketrain2rate"},{"location":"reference/neuroscience/spiketrains/spiketrain_poisson_n.m/","text":"spiketrain_poisson_n \u00b6 SPIKETRAIN_POISSON_N - Return a Poisson spike train with N spikes SPIKETIMES = SPIKETRAIN_POISSON_N ( LAMBDA , N , TIMERESOLUTION ) Returns a list of SPIKETIMES of length N that are generated by a Poisson process with mean rate LAMBDA and time resolution TIMERESOLUTION . Example : lambda = 10 ; % 10Hz timeres = 0.001 ; % 1ms bins spiketimes = spiketrain_posson_n ( lambda , 10 , timeres ); % returns 10 spikes distributed in a Poisson manner with rate % 10Hz, 1ms bins","title":"spiketrain_poisson_n"},{"location":"reference/neuroscience/spiketrains/spiketrain_poisson_n.m/#spiketrain_poisson_n","text":"SPIKETRAIN_POISSON_N - Return a Poisson spike train with N spikes SPIKETIMES = SPIKETRAIN_POISSON_N ( LAMBDA , N , TIMERESOLUTION ) Returns a list of SPIKETIMES of length N that are generated by a Poisson process with mean rate LAMBDA and time resolution TIMERESOLUTION . Example : lambda = 10 ; % 10Hz timeres = 0.001 ; % 1ms bins spiketimes = spiketrain_posson_n ( lambda , 10 , timeres ); % returns 10 spikes distributed in a Poisson manner with rate % 10Hz, 1ms bins","title":"spiketrain_poisson_n"},{"location":"reference/neuroscience/spiketrains/spiketrain_powerspectrum.m/","text":"spiketrain_powerspectrum \u00b6 SPIKETRAIN_POWERSPECTRUM - Compute power spectrum of a spiketrain using pmtm [ Pxx , Pxxc , F ] = SPIKETRAIN_POWERSPECTRUM ( SPIKETIMES , TIME_RESOLUTION ) Use the Tomson Multi-Taper method ( see help pmtm ) to calculate the power spectrum of a list of SPIKETIMES , sampled with time resolution TIME_RESOLUTION ( e . g ., 0 . 001 for 1 / 1000 of the units of SPIKETIMES ). One may modify the behavior of the function by passing name / value pairs : Parameter ( default value ) : Description ------------------------------------------------------------------------ NFFT ( [] ) : Number of points to include in the FFT : ( see HELP PMTM ) Example : dt = 0 . 001 ; t = 0 : dt : 100 ; % 100 seconds long rate = 10 * rectify ( cos ( 2 * pi * 0 . 5 * t )* dt ); % spiketimes = t ( find ( rand ( size ( rate ))< rate )); [ Pxx , Pxxc , F ] = spiketrain_powerspectrum ( spiketimes , 0 . 01 ); figure ; loglog ( F , Pxx ); hold on ; loglog ( F , Pxxc (:, 1 ), 'r-' ); loglog ( F , Pxxc (:, 2 ), 'r-' ); title ( 'Tomson Multitaper Power Spectral Density Estimate' ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Power/frequency (dB/Hz)' );","title":"spiketrain_powerspectrum"},{"location":"reference/neuroscience/spiketrains/spiketrain_powerspectrum.m/#spiketrain_powerspectrum","text":"SPIKETRAIN_POWERSPECTRUM - Compute power spectrum of a spiketrain using pmtm [ Pxx , Pxxc , F ] = SPIKETRAIN_POWERSPECTRUM ( SPIKETIMES , TIME_RESOLUTION ) Use the Tomson Multi-Taper method ( see help pmtm ) to calculate the power spectrum of a list of SPIKETIMES , sampled with time resolution TIME_RESOLUTION ( e . g ., 0 . 001 for 1 / 1000 of the units of SPIKETIMES ). One may modify the behavior of the function by passing name / value pairs : Parameter ( default value ) : Description ------------------------------------------------------------------------ NFFT ( [] ) : Number of points to include in the FFT : ( see HELP PMTM ) Example : dt = 0 . 001 ; t = 0 : dt : 100 ; % 100 seconds long rate = 10 * rectify ( cos ( 2 * pi * 0 . 5 * t )* dt ); % spiketimes = t ( find ( rand ( size ( rate ))< rate )); [ Pxx , Pxxc , F ] = spiketrain_powerspectrum ( spiketimes , 0 . 01 ); figure ; loglog ( F , Pxx ); hold on ; loglog ( F , Pxxc (:, 1 ), 'r-' ); loglog ( F , Pxxc (:, 2 ), 'r-' ); title ( 'Tomson Multitaper Power Spectral Density Estimate' ); xlabel ( 'Frequency (Hz)' ); ylabel ( 'Power/frequency (dB/Hz)' );","title":"spiketrain_powerspectrum"},{"location":"reference/neuroscience/spiketrains/spiketrain_powerspectrum_window.m/","text":"spiketrain_powerspectrum_window \u00b6 SPIKETRAIN_POWERSPECTRUM_WINDOW - calculate the power spectrum of a spike train using a sliding window [ Pxx , Fxx , BANDVALUES , BANDS ] = SPIKETRAIN_POWERSPECTRUM_WINDOW ( SPIKETRAIN ,... [ START WINDOWSIZE STEP STOP ] , ...) Returns the power spectrum Pxx at different frequencies Fxx . The power spectrum is calculated from time START to STOP using sliding windows of size WINDOWSIZE . The window is advanced STEP units each time . The power spectrum is calculated by calling the function SPIKETRAIN_POWERSPECTRUM . One can modify the default parameters by adding name / value pairs to the function : Parameter ( default value ) : Description -------------------------------------------------------------------------------- BINSIZE ( 0 . 002 ) : Bin size for spike trains ( seconds ) NFFT ( 2 ^ 15 ) : Number of FFT values to use in powerspectrum bands ( [ 0.1 4 ;, ... : Frequency bands for averaging. 4 8 ; ... 8 12 ; ... 12 30 ] ); 0 . 1-4 Hz , theta 4-8 , alpha 8-12 , beta 12-30 See also : SPIKETRAIN_POWERSPECTRUM","title":"spiketrain_powerspectrum_window"},{"location":"reference/neuroscience/spiketrains/spiketrain_powerspectrum_window.m/#spiketrain_powerspectrum_window","text":"SPIKETRAIN_POWERSPECTRUM_WINDOW - calculate the power spectrum of a spike train using a sliding window [ Pxx , Fxx , BANDVALUES , BANDS ] = SPIKETRAIN_POWERSPECTRUM_WINDOW ( SPIKETRAIN ,... [ START WINDOWSIZE STEP STOP ] , ...) Returns the power spectrum Pxx at different frequencies Fxx . The power spectrum is calculated from time START to STOP using sliding windows of size WINDOWSIZE . The window is advanced STEP units each time . The power spectrum is calculated by calling the function SPIKETRAIN_POWERSPECTRUM . One can modify the default parameters by adding name / value pairs to the function : Parameter ( default value ) : Description -------------------------------------------------------------------------------- BINSIZE ( 0 . 002 ) : Bin size for spike trains ( seconds ) NFFT ( 2 ^ 15 ) : Number of FFT values to use in powerspectrum bands ( [ 0.1 4 ;, ... : Frequency bands for averaging. 4 8 ; ... 8 12 ; ... 12 30 ] ); 0 . 1-4 Hz , theta 4-8 , alpha 8-12 , beta 12-30 See also : SPIKETRAIN_POWERSPECTRUM","title":"spiketrain_powerspectrum_window"},{"location":"reference/neuroscience/spiketrains/spiketrain_sinusoidal.m/","text":"spiketrain_sinusoidal \u00b6 SPIKETRAIN_SINUSOIDAL - Create a spike train with a sinusoidal rate SPIKETIMES = SPIKETRAIN_SINUSOIDAL ( MAXRATE , FREQUENCY ,... PHASE , RATE_OFFSET , T_START , T_END , DT ) On top of a background spike rate of RATE_OFFSET , create a sinusoidal spike train with a maximum rate MAXRATE , sinusoidal frequency equal to FREQUENCY , with a phase of PHASE radians . Time will start at T_START and end at T_END in steps of DT . SPIKETIMES will be the spike times generated by a poisson process . Example : Generate a sinusoidal spike train and verify the modulation rate with fourier analysis . dt = 0.001 ; t_start = 0 ; t_end = 50 / 4 ; % 50 cycles at 4 Hz % Generate a spike train with modulation rate of 4 Hz and amplitude of 20 Hz on %a background of 50 Hz rate ST = spiketrain_sinusoidal ( 20 , 4 , 0 , 50 , t_start , t_end , dt ); % convert back to bins T = t_start : dt : t_end ; % time bins SC = spiketimes2bins ( ST , T ); % convert spikes to be instantaneous rates SCr = SC / dt ; [ fc , freqs ] = fouriercoeffs ( SCr , dt ); figure ; subplot ( 2 , 1 , 1 , ' box ',' off ' ); plot ( T ( find ( SC )), SC ( find ( SC )), 'x' ); xlabel ( ' Time ( s ) ' ); ylabel ( ' Spike ' ); subplot ( 2 , 1 , 2 , ' box ',' off ' ); plot ( freqs , abs ( fc )); xlabel ( ' Frequency ' ); ylabel ( ' Fourier magnitude ' ); A = axis ; axis ([ 0 10 A ( 3 ) A ( 4 )]);","title":"spiketrain_sinusoidal"},{"location":"reference/neuroscience/spiketrains/spiketrain_sinusoidal.m/#spiketrain_sinusoidal","text":"SPIKETRAIN_SINUSOIDAL - Create a spike train with a sinusoidal rate SPIKETIMES = SPIKETRAIN_SINUSOIDAL ( MAXRATE , FREQUENCY ,... PHASE , RATE_OFFSET , T_START , T_END , DT ) On top of a background spike rate of RATE_OFFSET , create a sinusoidal spike train with a maximum rate MAXRATE , sinusoidal frequency equal to FREQUENCY , with a phase of PHASE radians . Time will start at T_START and end at T_END in steps of DT . SPIKETIMES will be the spike times generated by a poisson process . Example : Generate a sinusoidal spike train and verify the modulation rate with fourier analysis . dt = 0.001 ; t_start = 0 ; t_end = 50 / 4 ; % 50 cycles at 4 Hz % Generate a spike train with modulation rate of 4 Hz and amplitude of 20 Hz on %a background of 50 Hz rate ST = spiketrain_sinusoidal ( 20 , 4 , 0 , 50 , t_start , t_end , dt ); % convert back to bins T = t_start : dt : t_end ; % time bins SC = spiketimes2bins ( ST , T ); % convert spikes to be instantaneous rates SCr = SC / dt ; [ fc , freqs ] = fouriercoeffs ( SCr , dt ); figure ; subplot ( 2 , 1 , 1 , ' box ',' off ' ); plot ( T ( find ( SC )), SC ( find ( SC )), 'x' ); xlabel ( ' Time ( s ) ' ); ylabel ( ' Spike ' ); subplot ( 2 , 1 , 2 , ' box ',' off ' ); plot ( freqs , abs ( fc )); xlabel ( ' Frequency ' ); ylabel ( ' Fourier magnitude ' ); A = axis ; axis ([ 0 10 A ( 3 ) A ( 4 )]);","title":"spiketrain_sinusoidal"},{"location":"reference/neuroscience/spiketrains/spiketrain_timingcorrelated.m/","text":"spiketrain_timingcorrelated \u00b6 SPIKETRAIN_TIMINGCORRELATED - Make spike train that is correlated in spike timing with an input spike train [ CORRELATED_TRAIN , CORR ] = SPIKETRAIN_TIMINGCORRELATED ( INPUT_TRAIN , C ) Creates a spike train that is correlated with the spike train INPUT_TRAIN . INPUT_TRAIN should be a list of spike times in seconds . C indicates how correlated the spike trains should be in terms of 1 ms spike timing , from 0 ( all spikes different ) to 1 ( all spikes the same ) . CORRELATED_TRAIN will have the same number of spikes as INPUT_TRAIN . CORR is the actual correlation that was achieved . This may differ slightly from the requested correlation if the fraction correlation requested times the number of spikes is not an integer .","title":"spiketrain_timingcorrelated"},{"location":"reference/neuroscience/spiketrains/spiketrain_timingcorrelated.m/#spiketrain_timingcorrelated","text":"SPIKETRAIN_TIMINGCORRELATED - Make spike train that is correlated in spike timing with an input spike train [ CORRELATED_TRAIN , CORR ] = SPIKETRAIN_TIMINGCORRELATED ( INPUT_TRAIN , C ) Creates a spike train that is correlated with the spike train INPUT_TRAIN . INPUT_TRAIN should be a list of spike times in seconds . C indicates how correlated the spike trains should be in terms of 1 ms spike timing , from 0 ( all spikes different ) to 1 ( all spikes the same ) . CORRELATED_TRAIN will have the same number of spikes as INPUT_TRAIN . CORR is the actual correlation that was achieved . This may differ slightly from the requested correlation if the fraction correlation requested times the number of spikes is not an integer .","title":"spiketrain_timingcorrelated"},{"location":"reference/neuroscience/stdp/ltpi_apply.m/","text":"ltpi_apply \u00b6 LTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = LTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the \"veto\" long term potentiation of inhibition rule based on the experimental data of Maffei et . al 2006 ( Nature ) and on the equations in Bourjaily and Miller 2011 ( Frontiers in Computational Neuroscience ) . For all presynaptic ( inhibitory ) spikes , we look to see if there is a postsynaptic spike in the interval [ t_pre - tau_minus , tpre + tau_plus ] . If so , there is an inhibitory potentiation : weight = weight + dIW WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott ( 2001 ), the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) Normally , we do not know what additional spikes are coming in the future . The code assumes that we only know up to time of the latest spike in the 2 trains . ( That is , if an inhibitory spike is the last spike to occur , and it has no postsynaptic partners , then we do not yet know if it will generate a potentiation event . One can explicitly set T1 to indicate the latest time that we have information for ( which might be later than the latest spike time ) . The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = LTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 dIW | 0.001 ( a 1 % change ) T0 | 0 T1 | max ( spiketimes_pre ( end ), spiketimes_post ( end ))","title":"ltpi_apply"},{"location":"reference/neuroscience/stdp/ltpi_apply.m/#ltpi_apply","text":"LTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = LTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the \"veto\" long term potentiation of inhibition rule based on the experimental data of Maffei et . al 2006 ( Nature ) and on the equations in Bourjaily and Miller 2011 ( Frontiers in Computational Neuroscience ) . For all presynaptic ( inhibitory ) spikes , we look to see if there is a postsynaptic spike in the interval [ t_pre - tau_minus , tpre + tau_plus ] . If so , there is an inhibitory potentiation : weight = weight + dIW WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott ( 2001 ), the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) Normally , we do not know what additional spikes are coming in the future . The code assumes that we only know up to time of the latest spike in the 2 trains . ( That is , if an inhibitory spike is the last spike to occur , and it has no postsynaptic partners , then we do not yet know if it will generate a potentiation event . One can explicitly set T1 to indicate the latest time that we have information for ( which might be later than the latest spike time ) . The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = LTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 dIW | 0.001 ( a 1 % change ) T0 | 0 T1 | max ( spiketimes_pre ( end ), spiketimes_post ( end ))","title":"ltpi_apply"},{"location":"reference/neuroscience/stdp/ltpi_test.m/","text":"ltpi_test \u00b6 LTPI_TEST - Simple test function to test the ltpi_apply.m function Test function - read code","title":"ltpi_test"},{"location":"reference/neuroscience/stdp/ltpi_test.m/#ltpi_test","text":"LTPI_TEST - Simple test function to test the ltpi_apply.m function Test function - read code","title":"ltpi_test"},{"location":"reference/neuroscience/stdp/sjostrom_freq_stdp.m/","text":"sjostrom_freq_stdp \u00b6 SJOSTROM_FREQ_STDP - Sjostrom's data on plasticity vs. spike rate and timing A = SJOSTROM_FREQ_STPD Returns data from Sjostrom et al. 2001, showing how the change in synaptic weight depends on frequency and timing. The data represent the synaptic change (in percent (I think)) as a function of 60 repetitions of pairings of pre-synaptic and postsynaptic spikes. The first column of the table indicates the frequency used in the experiment. The second column is the synaptic change when pre-before-post firing with a gap of 10ms was used. The third column is the standard error of the quantity in column 2. The fourth column is the synaptic change when post-before-per firing with a gap of 10ms was used. The fifth column is the standard error of the quantity in column 4. A = [ ... 0.1 -0.04 0.05 -0.29 0.08; 10 0.14 0.1 -0.41 0.11; 20 0.29 0.14 -0.34 0.1; 40 0.53 0.11 0.56 0.32; 50 0.56 0.26 0.75 0.19; ];","title":"sjostrom_freq_stdp"},{"location":"reference/neuroscience/stdp/sjostrom_freq_stdp.m/#sjostrom_freq_stdp","text":"SJOSTROM_FREQ_STDP - Sjostrom's data on plasticity vs. spike rate and timing A = SJOSTROM_FREQ_STPD Returns data from Sjostrom et al. 2001, showing how the change in synaptic weight depends on frequency and timing. The data represent the synaptic change (in percent (I think)) as a function of 60 repetitions of pairings of pre-synaptic and postsynaptic spikes. The first column of the table indicates the frequency used in the experiment. The second column is the synaptic change when pre-before-post firing with a gap of 10ms was used. The third column is the standard error of the quantity in column 2. The fourth column is the synaptic change when post-before-per firing with a gap of 10ms was used. The fifth column is the standard error of the quantity in column 4. A = [ ... 0.1 -0.04 0.05 -0.29 0.08; 10 0.14 0.1 -0.41 0.11; 20 0.29 0.14 -0.34 0.1; 40 0.53 0.11 0.56 0.32; 50 0.56 0.26 0.75 0.19; ];","title":"sjostrom_freq_stdp"},{"location":"reference/neuroscience/stdp/sjostrom_spiketrain.m/","text":"sjostrom_spiketrain \u00b6 SJOSTROM_SPIKETRAIN - Generate a pre / post synaptic spiketrain pair from Sjostrom 2001 [ PRE , POST ] = SJOSTROM_STPD ( deltaT , frequency , N ) Generates a list of N pre - and post - synaptic spike times that have spacing deltaT ( that is , the pre - synaptic cell fires deltaT before the post - synaptic cell ). Pre - and postsynaptic spikes are generated at a rate of frequency Hz . The first spike ( whether it is pre - or post - synaptic ) will occur at time 0. Example : % Generate pre- and post-synaptic spiketrains to pair % with 10ms pre-before-post firing at 10Hz, with 60 repetitions [ PRE , POST ] = SJOSTROM_SPIKETRAIN ( 0.010 , 10 , 60 )","title":"sjostrom_spiketrain"},{"location":"reference/neuroscience/stdp/sjostrom_spiketrain.m/#sjostrom_spiketrain","text":"SJOSTROM_SPIKETRAIN - Generate a pre / post synaptic spiketrain pair from Sjostrom 2001 [ PRE , POST ] = SJOSTROM_STPD ( deltaT , frequency , N ) Generates a list of N pre - and post - synaptic spike times that have spacing deltaT ( that is , the pre - synaptic cell fires deltaT before the post - synaptic cell ). Pre - and postsynaptic spikes are generated at a rate of frequency Hz . The first spike ( whether it is pre - or post - synaptic ) will occur at time 0. Example : % Generate pre- and post-synaptic spiketrains to pair % with 10ms pre-before-post firing at 10Hz, with 60 repetitions [ PRE , POST ] = SJOSTROM_SPIKETRAIN ( 0.010 , 10 , 60 )","title":"sjostrom_spiketrain"},{"location":"reference/neuroscience/stdp/stdp_apply.m/","text":"stdp_apply \u00b6 STDP_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = STDP_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the classic SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Song and Abbott 2001 ( Neuron ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = - A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = STDP_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 A_plus | 0.005 ( a 5 % change ) A_minus | 0.00525 ( a 5.25 % change ) T0 | 0","title":"stdp_apply"},{"location":"reference/neuroscience/stdp/stdp_apply.m/#stdp_apply","text":"STDP_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = STDP_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the classic SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Song and Abbott 2001 ( Neuron ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = - A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = STDP_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.020 ( units are same as spiketimes ) tau_minus | 0.020 A_plus | 0.005 ( a 5 % change ) A_minus | 0.00525 ( a 5.25 % change ) T0 | 0","title":"stdp_apply"},{"location":"reference/neuroscience/stdp/stdp_eltpi_apply.m/","text":"stdp_eltpi_apply \u00b6 STDP_ELTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = STDP_ELTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the early LTPi rule discovered by Maffei and colleages ( unpublished ) . The model is closely related to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( dT / tau_minus ) In addition , this pre / post synaptic activity is boosted by integrating the pre ( tau_y ) or post ( tau_x ) rate activity as described in Bourjaily and Miller 2011. ( describe this better ) The \"boost\" is further modified by a gaussian transformation such that the effect is boosted only at particular firing rates close the center of the gaussian . WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = STDP_ELTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.100 ( units are same as spiketimes ) tau_minus | 0.100 tau_x | 0.100 tau_y | 0.100 tau_x2 | 0.025 tau_y2 | 0.025 A2_plus | 0.00001 A2_minus |- 0.00001 A3_plus | 1e-3 A3_minus |- 1e-3 A4_minusgaussmean | 1.4 ( from sum ( exp ( - ( 0 : 1 / 8 : 10 ) / tau_x )) ), 8 Hz peak A4_minusgausswidth | 0.17 ( from diff of 8 Hz and 6 Hz values above ) A4_plusgaussmean | 1.4 A4_plusgausswidth | 0.17 T0 | 0","title":"stdp_eltpi_apply"},{"location":"reference/neuroscience/stdp/stdp_eltpi_apply.m/#stdp_eltpi_apply","text":"STDP_ELTPI_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = STDP_ELTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the early LTPi rule discovered by Maffei and colleages ( unpublished ) . The model is closely related to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( dT / tau_minus ) In addition , this pre / post synaptic activity is boosted by integrating the pre ( tau_y ) or post ( tau_x ) rate activity as described in Bourjaily and Miller 2011. ( describe this better ) The \"boost\" is further modified by a gaussian transformation such that the effect is boosted only at particular firing rates close the center of the gaussian . WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = STDP_ELTPI_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.100 ( units are same as spiketimes ) tau_minus | 0.100 tau_x | 0.100 tau_y | 0.100 tau_x2 | 0.025 tau_y2 | 0.025 A2_plus | 0.00001 A2_minus |- 0.00001 A3_plus | 1e-3 A3_minus |- 1e-3 A4_minusgaussmean | 1.4 ( from sum ( exp ( - ( 0 : 1 / 8 : 10 ) / tau_x )) ), 8 Hz peak A4_minusgausswidth | 0.17 ( from diff of 8 Hz and 6 Hz values above ) A4_plusgaussmean | 1.4 A4_plusgausswidth | 0.17 T0 | 0","title":"stdp_eltpi_apply"},{"location":"reference/neuroscience/stdp/stdp_study.m/","text":"stdp_study \u00b6 stdp_study is a script.","title":"stdp_study"},{"location":"reference/neuroscience/stdp/stdp_study.m/#stdp_study","text":"stdp_study is a script.","title":"stdp_study"},{"location":"reference/neuroscience/stdp/stdp_study_plotspiketrains.m/","text":"stdp_study_plotspiketrains \u00b6 plot spike-timing examples at different correlations, rates","title":"stdp_study_plotspiketrains"},{"location":"reference/neuroscience/stdp/stdp_study_plotspiketrains.m/#stdp_study_plotspiketrains","text":"plot spike-timing examples at different correlations, rates","title":"stdp_study_plotspiketrains"},{"location":"reference/neuroscience/stdp/stdp_test.m/","text":"stdp_test \u00b6 STDP_TEST Test performance of STPD_APPLY and STDP_TRIPLET_APPLY Performs a test of STDP_APPLY and STDP_TRIPLET_APPLY using data from SJOSTROM_FREQ_STDP. See also: STDP_APPLY, STDP_TRIPLET","title":"stdp_test"},{"location":"reference/neuroscience/stdp/stdp_test.m/#stdp_test","text":"STDP_TEST Test performance of STPD_APPLY and STDP_TRIPLET_APPLY Performs a test of STDP_APPLY and STDP_TRIPLET_APPLY using data from SJOSTROM_FREQ_STDP. See also: STDP_APPLY, STDP_TRIPLET","title":"stdp_test"},{"location":"reference/neuroscience/stdp/stdp_triplet_apply.m/","text":"stdp_triplet_apply \u00b6 STDP_TRIPLET_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = STDP_TRIPLET_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = STDP_TRIPLET_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.01668 ( units are same as spiketimes ) tau_minus | 0.0337 tau_x | 0.101 tau_y | 0.125 A2_plus | 5e-5 A2_minus | 7e-3 A3_plus | 6.2e-3 A3_minus | 2.3e-4 T0 | 0","title":"stdp_triplet_apply"},{"location":"reference/neuroscience/stdp/stdp_triplet_apply.m/#stdp_triplet_apply","text":"STDP_TRIPLET_APPLY Spike - timing dependent - plasticity for calculating changes in synaptic weights WEIGHT = STDP_TRIPLET_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST ) Calculates the change in synaptic weight due to the triplet SPIKE - TIMING - DEPENDENT - PLASTICITY model curve provided in Pfister and Gerstner 2006 ( J Neurosci ) and described in Bourjaily and Miller 2011 ( Frontiers in Comp . Neurosci ): For all pairs of pre - and post - synaptic spikes , let the time between them be called dT = t_pre - t_post . If dT < 0 , delta_weight = A_plus * exp ( dT / tau_plus ) If dT >= 0 , delta_weight = A_minus * exp ( - dT / tau_minus ) WEIGHT is a factor that indicates how the maximumal conductance is modified . In Song and Abbott , the synaptic conductance was modified by the following forumla : G -> G + G_max * WEIGHT Only spikes that occur at or after the time T0 will be examined for STDP . By default , T0 is 0. ( One could use this to restrict the influence of STDP to spike pairs where at least one member of the pair occurs after a particular time . ) The parameters of the synapse can be varied by providing additional inputs as name , value pairs . The names and values that are default are shown here . For example , WEIGHT = STDP_TRIPLET_APPLY ( SPIKETIMES_PRE , SPIKETIMES_POST , 'tau_plus' , 0.050 ) Parameter name : | default value ------------------------------|----------------------------- tau_plus | 0.01668 ( units are same as spiketimes ) tau_minus | 0.0337 tau_x | 0.101 tau_y | 0.125 A2_plus | 5e-5 A2_minus | 7e-3 A3_plus | 6.2e-3 A3_minus | 2.3e-4 T0 | 0","title":"stdp_triplet_apply"},{"location":"reference/neuroscience/stdp/stdp_tripletvscorrelation.m/","text":"stdp_tripletvscorrelation \u00b6 STDP_TRIPLETVSCORRELATION - Examine dependency of weight change vs. time shift, average firing rate, and spike timing correlation correlation","title":"stdp_tripletvscorrelation"},{"location":"reference/neuroscience/stdp/stdp_tripletvscorrelation.m/#stdp_tripletvscorrelation","text":"STDP_TRIPLETVSCORRELATION - Examine dependency of weight change vs. time shift, average firing rate, and spike timing correlation correlation","title":"stdp_tripletvscorrelation"},{"location":"reference/neuroscience/stdp/stdp_tripletvsratecorrelation.m/","text":"stdp_tripletvsratecorrelation \u00b6 stdp_tripletvsratecorrelation is a function. [W, Werr, shifts, freqs, lambda] = stdp_tripletvsratecorrelation","title":"stdp_tripletvsratecorrelation"},{"location":"reference/neuroscience/stdp/stdp_tripletvsratecorrelation.m/#stdp_tripletvsratecorrelation","text":"stdp_tripletvsratecorrelation is a function. [W, Werr, shifts, freqs, lambda] = stdp_tripletvsratecorrelation","title":"stdp_tripletvsratecorrelation"},{"location":"reference/neuroscience/stimulus_analysis/descramble_pseudorandom.m/","text":"descramble_pseudorandom \u00b6 DESCRAMBLE_PSEUDORANDOM - Descramble responses to pseduorandomly varied stimuli [ RESPONSE_CURVE ] = DESCRAMBLE_PSEUDORANDOM ( STIM_RESPONSES , STIMVALUES ) Descrambles responses to pseudorandomly varied stimuli . Inputs : STIM_RESPONSES : | Responses to individual stimuli ( 1 xN or Nx1 list ) STIMVALUES : | The stimulus value ( or , could be stimulus ID ) | for each of the N presented stimuli ( 1 xN or Nx1 ) | To indicate that a stimulus is a \"blank\" or \"control\" | provide NaN for its value . Output : RESPONSE_CURVE is a structure with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } )","title":"descramble_pseudorandom"},{"location":"reference/neuroscience/stimulus_analysis/descramble_pseudorandom.m/#descramble_pseudorandom","text":"DESCRAMBLE_PSEUDORANDOM - Descramble responses to pseduorandomly varied stimuli [ RESPONSE_CURVE ] = DESCRAMBLE_PSEUDORANDOM ( STIM_RESPONSES , STIMVALUES ) Descrambles responses to pseudorandomly varied stimuli . Inputs : STIM_RESPONSES : | Responses to individual stimuli ( 1 xN or Nx1 list ) STIMVALUES : | The stimulus value ( or , could be stimulus ID ) | for each of the N presented stimuli ( 1 xN or Nx1 ) | To indicate that a stimulus is a \"blank\" or \"control\" | provide NaN for its value . Output : RESPONSE_CURVE is a structure with the following fields : curve | 4 xN matrix , where N is the number of distinct | stimuli ; the first row has the stim values | the second row has the mean responses in | spikes per time unit of STIMTIMES_ON / OFF , | the third row has the standard deivation of | these spike rates , and the fourth row has | the standard error . blank | 1 x3 vector with the mean , standard deviation , and | standard error . inds | 1 xN cell array ; each value inds { i } has the individual responses for the ith repetition of stimulus i blankinds | 1 xM vector with individual responses to the blank stimulus indexes | 2 xnum_stims Indicates where the nth stim is represented in | in inds ( first column is stimid , second column is entry | number in vector inds { stimid } )","title":"descramble_pseudorandom"},{"location":"reference/neuroscience/stimulus_analysis/findcontrolstimulus.m/","text":"findcontrolstimulus \u00b6 FINDCONTROLSTIMULUS - find the corresponding 'control' stimulus for a set of stimuli CONTROLSTIMNUMBER = FINDCONTROLSTIMULUS ( STIMID , CONTROLSTIMID ) Given an array of STIMID values that indicate stimulus presentation , and an array of CONTROLSTIMID value ( s ) that indicate the identification number of a 'control' stimulus ( such as a blank screen ), this function finds the control stimulus id that corresponds to each STIMID presentation . If the stimulus presentation is regular ( stimuli are presented from 1. .. numstims in some order , followed by a second presentation of 1. .. numstims in some order , etc , with only a single control stimulus ), then the control stimulus for each stimulus is the control stimulus that corresponds to the same stimulus repetition . If the stimulus presentation is not regular , then the 'closest' control stimulus is taken to be the control stimulus ; if 2 stimuli are equally close , then the first stimulus will be taken as the control stimulus . CONTROLSTIMNUMBER will always be returned as a column vector . See also : STIMIDS2REPS Example : stimid = [ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 ]; cs = findcontrolstimulus ( stimid , 3 ) ' % cs == [ 3 3 3 6 6 6 9 9 9 12 12 12 15 15 15 ]","title":"findcontrolstimulus"},{"location":"reference/neuroscience/stimulus_analysis/findcontrolstimulus.m/#findcontrolstimulus","text":"FINDCONTROLSTIMULUS - find the corresponding 'control' stimulus for a set of stimuli CONTROLSTIMNUMBER = FINDCONTROLSTIMULUS ( STIMID , CONTROLSTIMID ) Given an array of STIMID values that indicate stimulus presentation , and an array of CONTROLSTIMID value ( s ) that indicate the identification number of a 'control' stimulus ( such as a blank screen ), this function finds the control stimulus id that corresponds to each STIMID presentation . If the stimulus presentation is regular ( stimuli are presented from 1. .. numstims in some order , followed by a second presentation of 1. .. numstims in some order , etc , with only a single control stimulus ), then the control stimulus for each stimulus is the control stimulus that corresponds to the same stimulus repetition . If the stimulus presentation is not regular , then the 'closest' control stimulus is taken to be the control stimulus ; if 2 stimuli are equally close , then the first stimulus will be taken as the control stimulus . CONTROLSTIMNUMBER will always be returned as a column vector . See also : STIMIDS2REPS Example : stimid = [ 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 ]; cs = findcontrolstimulus ( stimid , 3 ) ' % cs == [ 3 3 3 6 6 6 9 9 9 12 12 12 15 15 15 ]","title":"findcontrolstimulus"},{"location":"reference/neuroscience/stimulus_analysis/generate_test_stimulus_responses.m/","text":"generate_test_stimulus_responses \u00b6 GENERATE_TEST_STIMULUS_RESPONSES - generate test stimuli and responses to test analysis code [ TIMESERIES , TIMESTAMPS , STIMONSETOFFSETID ] = GENERATE_TEST_STIMULUS_RESPONSE ( ... ) Generates a timeseries ( with timestamps ) that exhibits responses to a stimulus ( described using options below ) . This function accepts additional arguments as name / value pairs that modify the default behavior : Parameter ( default value ) | Description ----------------------------------------------------------------------------------------------- N ( 10 ) | Number of stimuli control_stim ( 1 ) | 0 / 1 Use a control stimulus ? Value will just be 0. reps ( 5 ) | Number of full pseudorandom repetitions userandom ( 1 ) | Display in random order ? f ( 1 ) | Frequency component for stimfunc DC ( 1 ) | DC component for stimfunc AC ( 1 ) | Modulated component for stimfunc stimfunc ( 'sin(pi*(n-1)/N)*... | n is the stimulus number from 1..N, t is the stimulus time ( DC + AC * sin ( 2 * pi * f * t )) ') | ctrlfunc ( '0*t' ) | Function to evaluate for control stimulus randomness ( 0.3 ) | Additive randomness to all stims ( multiplies randn ) dt ( 0.001 ) | Time step ( in seconds ) T ( 2 ) | Stimulus duration in seconds ISI ( 2 ) | Stimulus interstimulus interval PoissonProcess ( 0 ) | Should the function produce a Poisson process ? | If so , TIMESTAMPS will only contain the values when the | process is triggered and TIMESERIES will be a vector of 1 s . PoissonProcessMultiplier ( 10 ) | The value that stimfunc should be multiplied by before checking whether | each dt of the Poisson process is a 'hit' . Example : % continuous signal example figure ; [ timeseries , timestamps , stimonsetoffsetid ] = generate_test_stimulus_responses ( 'reps' , 10 ); plot ( timestamps , timeseries , 'k-' ); hold on ; plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 ); S = stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' ); % spike example [ timeseries , timestamps , stimonsetoffsetid ] = generate_test_stimulus_responses ( 'PoissonProcess' , 1 , 'reps' , 10 ); spiketimes_plot ( timestamps ); hold on ; plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 , 'isspike' , 1 ); S = stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' );","title":"generate_test_stimulus_responses"},{"location":"reference/neuroscience/stimulus_analysis/generate_test_stimulus_responses.m/#generate_test_stimulus_responses","text":"GENERATE_TEST_STIMULUS_RESPONSES - generate test stimuli and responses to test analysis code [ TIMESERIES , TIMESTAMPS , STIMONSETOFFSETID ] = GENERATE_TEST_STIMULUS_RESPONSE ( ... ) Generates a timeseries ( with timestamps ) that exhibits responses to a stimulus ( described using options below ) . This function accepts additional arguments as name / value pairs that modify the default behavior : Parameter ( default value ) | Description ----------------------------------------------------------------------------------------------- N ( 10 ) | Number of stimuli control_stim ( 1 ) | 0 / 1 Use a control stimulus ? Value will just be 0. reps ( 5 ) | Number of full pseudorandom repetitions userandom ( 1 ) | Display in random order ? f ( 1 ) | Frequency component for stimfunc DC ( 1 ) | DC component for stimfunc AC ( 1 ) | Modulated component for stimfunc stimfunc ( 'sin(pi*(n-1)/N)*... | n is the stimulus number from 1..N, t is the stimulus time ( DC + AC * sin ( 2 * pi * f * t )) ') | ctrlfunc ( '0*t' ) | Function to evaluate for control stimulus randomness ( 0.3 ) | Additive randomness to all stims ( multiplies randn ) dt ( 0.001 ) | Time step ( in seconds ) T ( 2 ) | Stimulus duration in seconds ISI ( 2 ) | Stimulus interstimulus interval PoissonProcess ( 0 ) | Should the function produce a Poisson process ? | If so , TIMESTAMPS will only contain the values when the | process is triggered and TIMESERIES will be a vector of 1 s . PoissonProcessMultiplier ( 10 ) | The value that stimfunc should be multiplied by before checking whether | each dt of the Poisson process is a 'hit' . Example : % continuous signal example figure ; [ timeseries , timestamps , stimonsetoffsetid ] = generate_test_stimulus_responses ( 'reps' , 10 ); plot ( timestamps , timeseries , 'k-' ); hold on ; plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 ); S = stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' ); % spike example [ timeseries , timestamps , stimonsetoffsetid ] = generate_test_stimulus_responses ( 'PoissonProcess' , 1 , 'reps' , 10 ); spiketimes_plot ( timestamps ); hold on ; plot_stimulus_timeseries ( 3 , stimonsetoffsetid (:, 1 ), stimonsetoffsetid (:, 2 ), 'stimid' , stimonsetoffsetid (:, 3 )); axis ([ timestamps ( 1 ) timestamps ( end ) - 2 3 + 2 ]); ylabel ( 'Activity' ); xlabel ( 'Time (s)' ); R = stimulus_response_scalar ( timeseries , timestamps , stimonsetoffsetid , 'control_stimid' , 11 , 'freq_response' , 1 , 'isspike' , 1 ); S = stimulus_response_stats ( R , 'control_normalization' , 'subtract' ); figure ; myerrorbar ( 1 : 10 , abs ( S . mean ), S . stderr , S . stderr ); % F1 response is complex , convert to magnitude xlabel ( 'Stim ID' ); ylabel ( 'F1 response' );","title":"generate_test_stimulus_responses"},{"location":"reference/neuroscience/stimulus_analysis/plot_stimulus_timeseries.m/","text":"plot_stimulus_timeseries \u00b6 PLOT_STIMULUS_TIMESERIES - plot the occurence of a stimulus or stimuli as a thick bar on a time series plot [ H , HTEXT ] = plot_stimulus_timeseries ( Y , STIMON , STIMOFF , ...) Uses a thick horizontal bar to indicate the presentation time of a set of stimuli . STIMON should be a vector containing all stimulus ON times . STIMOFF should be a vector containing all stimulus OFF times . This function takes additional arguments in the form of name / value pairs : Parameter ( default value ) | Description --------------------------------------------------------------------------- stimid ( [] ) | Stimulus ID numbers for each entry in | STIMON / STIMOFF ; if present , will be plotted | Can also be a cell array of string names linewidth ( 2 ) | Line size linecolor ( [ 0 0 0 ] ) | Line color FontSize ( 12 ) | Font size for text ( if 'stimid' is present ) FontWeight ( 'normal' ) | Font weight FontColor ( [ 0 0 0 ] ) | Text default color textycoord ( Y + 1 ) | Text y coordinate HorizontalAlignment ( 'center' ) | Text horizontal alignment","title":"plot_stimulus_timeseries"},{"location":"reference/neuroscience/stimulus_analysis/plot_stimulus_timeseries.m/#plot_stimulus_timeseries","text":"PLOT_STIMULUS_TIMESERIES - plot the occurence of a stimulus or stimuli as a thick bar on a time series plot [ H , HTEXT ] = plot_stimulus_timeseries ( Y , STIMON , STIMOFF , ...) Uses a thick horizontal bar to indicate the presentation time of a set of stimuli . STIMON should be a vector containing all stimulus ON times . STIMOFF should be a vector containing all stimulus OFF times . This function takes additional arguments in the form of name / value pairs : Parameter ( default value ) | Description --------------------------------------------------------------------------- stimid ( [] ) | Stimulus ID numbers for each entry in | STIMON / STIMOFF ; if present , will be plotted | Can also be a cell array of string names linewidth ( 2 ) | Line size linecolor ( [ 0 0 0 ] ) | Line color FontSize ( 12 ) | Font size for text ( if 'stimid' is present ) FontWeight ( 'normal' ) | Font weight FontColor ( [ 0 0 0 ] ) | Text default color textycoord ( Y + 1 ) | Text y coordinate HorizontalAlignment ( 'center' ) | Text horizontal alignment","title":"plot_stimulus_timeseries"},{"location":"reference/neuroscience/stimulus_analysis/stimids2reps.m/","text":"stimids2reps \u00b6 STIMIDS2REPS - Label each stimulus id with the repetition number for a regular stimulus sequence [ REPS , ISREGULAR ] = STIMIDS2REPS ( STIMIDS , NUMSTIMS ) Given a list of STIMIDS that indicate an order of presentation , and given that STIMIDS range from 1. . NUMSTIMS , STIMIDS2REPS returns a label REPS , the same size as STIMIDS , that indicates the repetition number if the stimuli were to be presented in a regular order . Regular order means that all stimuli 1. .. NUMSTIMS are shown in some order once , followed by 1. . NUMSTIMS in some order a second time , etc . ISREGULAR is 1 if the sequence of STIMIDS is in a regular order . The last repetition need not be complete for the stimulus presentation to be regular ( that is , if a sequence ended early it can still be regular ). Example : [ reps , isregular ] = stimids2reps ([ 1 2 3 1 2 3 ], 3 ) % reps = [1 1 1 2 2 2] % isregular = 1","title":"stimids2reps"},{"location":"reference/neuroscience/stimulus_analysis/stimids2reps.m/#stimids2reps","text":"STIMIDS2REPS - Label each stimulus id with the repetition number for a regular stimulus sequence [ REPS , ISREGULAR ] = STIMIDS2REPS ( STIMIDS , NUMSTIMS ) Given a list of STIMIDS that indicate an order of presentation , and given that STIMIDS range from 1. . NUMSTIMS , STIMIDS2REPS returns a label REPS , the same size as STIMIDS , that indicates the repetition number if the stimuli were to be presented in a regular order . Regular order means that all stimuli 1. .. NUMSTIMS are shown in some order once , followed by 1. . NUMSTIMS in some order a second time , etc . ISREGULAR is 1 if the sequence of STIMIDS is in a regular order . The last repetition need not be complete for the stimulus presentation to be regular ( that is , if a sequence ended early it can still be regular ). Example : [ reps , isregular ] = stimids2reps ([ 1 2 3 1 2 3 ], 3 ) % reps = [1 1 1 2 2 2] % isregular = 1","title":"stimids2reps"},{"location":"reference/neuroscience/stimulus_analysis/stimulus_response_scalar.m/","text":"stimulus_response_scalar \u00b6 STIMULUS_RESPONSE_SUMMARY - compute stimulus responses to stimuli RESPONSE = STIMULUS_RESPONSE_SCALAR ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) Inputs : TIMESERIES is a 1 xT array of the data values of the thing exhibiting the response , such as a voltage signal , calcium dF / F signal , or spike signals ( 1 s ) . TIMESTAMPS is a 1 xT array of the occurrences of the signals in TIMESERIES STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed ; there will be 1 value of stimid | for each stimulus presentation ( so stimid values may repeat many times ) response | The scalar response to each stimulus response . control_response | The scalar response to the control stimulus for each stimulus controlstimnumber | The stimulus number used as the control stimulus for each stimulus parameters | A structure with the parameters used in the calculation ( described below ) The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . control_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse isspike ( see right ) | 0 / 1 Is the signal a spike process ? If so , timestamps correspond to spike events . spiketrain_dt ( 0.001 ) | Resolution to use for spike train reconstruction if computing Fourier transform","title":"stimulus_response_scalar"},{"location":"reference/neuroscience/stimulus_analysis/stimulus_response_scalar.m/#stimulus_response_scalar","text":"STIMULUS_RESPONSE_SUMMARY - compute stimulus responses to stimuli RESPONSE = STIMULUS_RESPONSE_SCALAR ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) Inputs : TIMESERIES is a 1 xT array of the data values of the thing exhibiting the response , such as a voltage signal , calcium dF / F signal , or spike signals ( 1 s ) . TIMESTAMPS is a 1 xT array of the occurrences of the signals in TIMESERIES STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed ; there will be 1 value of stimid | for each stimulus presentation ( so stimid values may repeat many times ) response | The scalar response to each stimulus response . control_response | The scalar response to the control stimulus for each stimulus controlstimnumber | The stimulus number used as the control stimulus for each stimulus parameters | A structure with the parameters used in the calculation ( described below ) The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . control_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse isspike ( see right ) | 0 / 1 Is the signal a spike process ? If so , timestamps correspond to spike events . spiketrain_dt ( 0.001 ) | Resolution to use for spike train reconstruction if computing Fourier transform","title":"stimulus_response_scalar"},{"location":"reference/neuroscience/stimulus_analysis/stimulus_response_stats.m/","text":"stimulus_response_stats \u00b6 STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data STATS = STIMULUS_RESPONSE_STATS ( RESPONSES , ... ) RESPONSES is a structure returned from STIMULUS_RESPONSE_SCALAR that has fields Field name : | Description -------------------------------------------------------------------------------- stimid | Stimulus id number for each stimulus presentation response | Computed scalar response for each stimulus presentation control_response | Computed scalar response to a control stimulus ( could be empty ) controlstimnumber | The stimulus number that was used as the control stimulus for | each stimulus presentation parameters | A structure of parameters used in the computation | ( see HELP STIMULUS_RESPONSE_SCALAR ) Computes a structure STATS with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stderr | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] ind ividual | A cell array with the ind ividual responses to each stimulus | ind ividual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) control_mean | The mean response of TIMESERIES to the control stimulus , if one is | specified with RESPONSES . parameters . control_stimulus control_stddev | The standard deviation of the response of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_stderr | The standard error of the mean of the responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_individual | The ind ividual responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ control_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response := Response - PrestimResponse | 2 ) Fractional change Response := (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response := Response ./ PreStimResponse See also : NAMEVALUEPAIR","title":"stimulus_response_stats"},{"location":"reference/neuroscience/stimulus_analysis/stimulus_response_stats.m/#stimulus_response_stats","text":"STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data STATS = STIMULUS_RESPONSE_STATS ( RESPONSES , ... ) RESPONSES is a structure returned from STIMULUS_RESPONSE_SCALAR that has fields Field name : | Description -------------------------------------------------------------------------------- stimid | Stimulus id number for each stimulus presentation response | Computed scalar response for each stimulus presentation control_response | Computed scalar response to a control stimulus ( could be empty ) controlstimnumber | The stimulus number that was used as the control stimulus for | each stimulus presentation parameters | A structure of parameters used in the computation | ( see HELP STIMULUS_RESPONSE_SCALAR ) Computes a structure STATS with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stderr | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] ind ividual | A cell array with the ind ividual responses to each stimulus | ind ividual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) control_mean | The mean response of TIMESERIES to the control stimulus , if one is | specified with RESPONSES . parameters . control_stimulus control_stddev | The standard deviation of the response of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_stderr | The standard error of the mean of the responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus control_individual | The ind ividual responses of TIMESERIES to the control stimulus , | if one is specified with RESPONSES . parameters . control_stimulus The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ control_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response := Response - PrestimResponse | 2 ) Fractional change Response := (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response := Response ./ PreStimResponse See also : NAMEVALUEPAIR","title":"stimulus_response_stats"},{"location":"reference/neuroscience/stimulus_analysis/stimulus_response_summary.m/","text":"stimulus_response_summary \u00b6 STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data RESPONSE = STIMULUS_RESPONSE_SUMMARY ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean_responses | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev_responses | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stderr_responses | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] individual_responses | A cell array with the individual responses to each stimulus | individual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) blank_mean | The mean response of TIMESERIES to the blank stimulus , if one is | specified with 'blank_stimid' blank_stddev | The standard deviation of the response of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_stderr | The standard error of the mean of the responses of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_individual_responses | The individual responses of TIMESERIES to the blank stimulus , if one | is specified with 'blank_stimid' The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . blank_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) | The 'blank' stimulus is not counted among the stimuli in 'stimid' prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse","title":"stimulus_response_summary"},{"location":"reference/neuroscience/stimulus_analysis/stimulus_response_summary.m/#stimulus_response_summary","text":"STIMULUS_RESPONSE_SUMMARY - compute a stimulus response summary for timeseries data RESPONSE = STIMULUS_RESPONSE_SUMMARY ( TIMESERIES , TIMESTAMPS , STIM_ONSETOFFSETID , ... ) STIM_ONSETOFFSETID is a variable that describes the stimulus history . Each row should contain [ stim_onset_time stim_offset_time stimid ] where the times are in units of TIMESTAMPS ( s ) . Computes a structure RESPONSE with fields : Field name : | Description : ------------------------------------------------------------------------ stimid | The stimulus id of each stimulus observed mean_responses | The mean response of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stddev_responses | The standard deviation of TIMESERIES across stimulus | presentations [ stimid ( 1 ) stimid ( 2 ) ... ] stderr_responses | The standard error of the mean of TIMESERIES | across stimulus presentations [ stimid ( 1 ) stimid ( 2 ) ... ] individual_responses | A cell array with the individual responses to each stimulus | individual_responses { i }( j ) has the jth response to stimulus with stimid ( i ) blank_mean | The mean response of TIMESERIES to the blank stimulus , if one is | specified with 'blank_stimid' blank_stddev | The standard deviation of the response of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_stderr | The standard error of the mean of the responses of TIMESERIES to the blank stimulus , | if one is specified with 'blank_stimid' blank_individual_responses | The individual responses of TIMESERIES to the blank stimulus , if one | is specified with 'blank_stimid' The behavior of the function can be modified by name / value pairs : Parameter ( default value ) | Description : ------------------------------------------------------------------------ freq_response ( 0 ) | The frequency response to measure using FFT of TIMESERIES . Can be | 0 ( to use the mean response ), or a number corresponding | to the frequency to analyze . Can also be a vector | the same size as the number of stimuli to indicate | the frequency to be used for each stimulus ( freq_response ( stimid ( i )) . | For example , to compute the response at the fundamental stimulus | frequency ( F1 ) when that frequency is 1 Hz , pass 1 for 'freq_response' . blank_stimid ([]) | Use this to pass the identity ( or identities ) of a 'blank' stimulus | ( some sort of control stimulus ; in vision , this is often presenting | a blank screen for same duration as the other stimuli . ) | The 'blank' stimulus is not counted among the stimuli in 'stimid' prestimulus_time ([]) | Calculate a baseline using a certain amount of TIMESERIES signal during | the pre - stimulus time given here . prestimulus_normalization ([]) | Normalize the stimulus response based on the prestimulus measurement . | [] or 0 ) No normalization | 1 ) Subtract : Response : = Response - PrestimResponse | 2 ) Fractional change Response : = (( Response - PrestimResponse ) / PrestimResponse ) | 3 ) Divide : Response : = Response ./ PreStimResponse","title":"stimulus_response_summary"},{"location":"reference/neuroscience/stimulus_analysis/trimrespcurve.m/","text":"trimrespcurve \u00b6 TRIMRESPCURVE - Trim a 4 xN response curve to remove NaN stimulus values CURVE = TRIMRESPCURVE ( MYCURVE ) Assumes MYCURVE is a 4 xN response curve where the first row MYCURVE ( 1 ,: ) has the stimulus values . If any of these entries are NaN , then those column is removed from MYCURVE . The result is returned in CURVE . One can use this function to remove the response of the blank stimulus from a response curve .","title":"trimrespcurve"},{"location":"reference/neuroscience/stimulus_analysis/trimrespcurve.m/#trimrespcurve","text":"TRIMRESPCURVE - Trim a 4 xN response curve to remove NaN stimulus values CURVE = TRIMRESPCURVE ( MYCURVE ) Assumes MYCURVE is a 4 xN response curve where the first row MYCURVE ( 1 ,: ) has the stimulus values . If any of these entries are NaN , then those column is removed from MYCURVE . The result is returned in CURVE . One can use this function to remove the response of the blank stimulus from a response curve .","title":"trimrespcurve"},{"location":"reference/neuroscience/vision/curved_monitor_view.m/","text":"curved_monitor_view \u00b6 CURVED_MONITOR_VIEW - Given the dimensions of a curved monitor, calculate the viewing angle of the animal SYSTEM = CURVED_MONITOR_VIEW(MONITOR_DIAG, ASPECTRATIO, RADIUS, VIEWING_DISTANCE) MONITOR_DIAG should be the diagonal monitor size (usually what is specified, multiply by 2.54 to get cm from inches). ASPECTRATIO should be aspect ratio of monitor (width in numerator) RADIUS should be the curvature of the monitor (e.g., 180 cm). VIEWING_DISTANCE should be the desired animal viewing distance. All angles are returned in degrees. SYSTEM is a structure with the following entries: Fieldname: | Description: ------------------------------------------------------ theta | Viewing angle of hemifield | (so 2*theta is whole view) monitor_diag | Monitor diag (from input) monitor_height | Monitor height monitor_width | Monitor width (along curve) radius | Radius of curvature from input viewing_distance | Viewing distance from input alpha | Angle from center of monitor to phi | Angle from center of monitor to line to edge of monitor | monitor edge edge when monitor is | viewed center-on at distance radius C | Distance between straight view of animal | and edge of monitor P | Distance between monitor and location that | makes a right angle with the edge of the monitor A | Distance between edge of monitor and point P","title":"curved_monitor_view"},{"location":"reference/neuroscience/vision/curved_monitor_view.m/#curved_monitor_view","text":"CURVED_MONITOR_VIEW - Given the dimensions of a curved monitor, calculate the viewing angle of the animal SYSTEM = CURVED_MONITOR_VIEW(MONITOR_DIAG, ASPECTRATIO, RADIUS, VIEWING_DISTANCE) MONITOR_DIAG should be the diagonal monitor size (usually what is specified, multiply by 2.54 to get cm from inches). ASPECTRATIO should be aspect ratio of monitor (width in numerator) RADIUS should be the curvature of the monitor (e.g., 180 cm). VIEWING_DISTANCE should be the desired animal viewing distance. All angles are returned in degrees. SYSTEM is a structure with the following entries: Fieldname: | Description: ------------------------------------------------------ theta | Viewing angle of hemifield | (so 2*theta is whole view) monitor_diag | Monitor diag (from input) monitor_height | Monitor height monitor_width | Monitor width (along curve) radius | Radius of curvature from input viewing_distance | Viewing distance from input alpha | Angle from center of monitor to phi | Angle from center of monitor to line to edge of monitor | monitor edge edge when monitor is | viewed center-on at distance radius C | Distance between straight view of animal | and edge of monitor P | Distance between monitor and location that | makes a right angle with the edge of the monitor A | Distance between edge of monitor and point P","title":"curved_monitor_view"},{"location":"reference/neuroscience/vision/make3dbar.m/","text":"make3dbar \u00b6 make3dbar is a function.","title":"make3dbar"},{"location":"reference/neuroscience/vision/make3dbar.m/#make3dbar","text":"make3dbar is a function.","title":"make3dbar"},{"location":"reference/neuroscience/vision/make3dwords2.m/","text":"make3dwords2 \u00b6 make3dwords2 is a script.","title":"make3dwords2"},{"location":"reference/neuroscience/vision/make3dwords2.m/#make3dwords2","text":"make3dwords2 is a script.","title":"make3dwords2"},{"location":"reference/neuroscience/vision/simp_sat_cgain.m/","text":"simp_sat_cgain \u00b6 SIMP_SAT_CGAIN - Simple saturating contrast gain G = SIMP_SAT_CGAIN ( C , Cs ) Returns a simple contrast gain . If contrast C is less than Cs , then G = 1 . Otherwise , gain is 1 - ( C - Cs ) . The gain falls off monotonically with slope 1 after the point Cs .","title":"simp_sat_cgain"},{"location":"reference/neuroscience/vision/simp_sat_cgain.m/#simp_sat_cgain","text":"SIMP_SAT_CGAIN - Simple saturating contrast gain G = SIMP_SAT_CGAIN ( C , Cs ) Returns a simple contrast gain . If contrast C is less than Cs , then G = 1 . Otherwise , gain is 1 - ( C - Cs ) . The gain falls off monotonically with slope 1 after the point Cs .","title":"simp_sat_cgain"},{"location":"reference/neuroscience/vision/squirrelcolor.m/","text":"squirrelcolor \u00b6 squirrelcolor is a script.","title":"squirrelcolor"},{"location":"reference/neuroscience/vision/squirrelcolor.m/#squirrelcolor","text":"squirrelcolor is a script.","title":"squirrelcolor"},{"location":"reference/neuroscience/vision/stereopoint.m/","text":"stereopoint \u00b6 STEREOPOINT - Compute shifts for a point in space for making a stereograph [ LEFTOFFSET , RIGHTOFFSET ] = STEREOPOINT ( VIEWDIST , EYEDIST , XOFFSET , DOFFSET ) Computes projections onto the two eyes for a point in 3 D space . VIEWDIST is the distance to the focal point ( or the screen ) . EYEDIST is the distance between the eyes ( same units as VIEWDIST ) . XOFFSET is the X offset between the focal point and the point in 3 space for which to compute shifts . Positive values are to the right , use same units as VIEWDIST . DOFFSET is the depth offset between the focal point and the point for which to compute shifts .","title":"stereopoint"},{"location":"reference/neuroscience/vision/stereopoint.m/#stereopoint","text":"STEREOPOINT - Compute shifts for a point in space for making a stereograph [ LEFTOFFSET , RIGHTOFFSET ] = STEREOPOINT ( VIEWDIST , EYEDIST , XOFFSET , DOFFSET ) Computes projections onto the two eyes for a point in 3 D space . VIEWDIST is the distance to the focal point ( or the screen ) . EYEDIST is the distance between the eyes ( same units as VIEWDIST ) . XOFFSET is the X offset between the focal point and the point in 3 space for which to compute shifts . Positive values are to the right , use same units as VIEWDIST . DOFFSET is the depth offset between the focal point and the point for which to compute shifts .","title":"stereopoint"},{"location":"reference/neuroscience/vision/visual_stim_row_correlator.m/","text":"visual_stim_row_correlator \u00b6 VISUAL_STIM_ROW_CORRELATOR - Compute the next visual stimulus frame for a given correlator NEXT_FRAME = VISUAL_STIM_ROW_CORRELATOR ( FRAME_DATA , CORRELATOR , SIGN ) Given a frame of visual stimulus data that consists of -1 's and 1s (FRAME_DATA), then a new frame (NEXT_FRAME) of -1' s and 1s is created such that the correlation between the new frame and the old frame is as described in CORRELATOR ( see below ). The algorithm operates on the rows of the stimulus , so that if the stimulus frame has many rows , each row will be operated on independently . CORRELATOR : A number that indicates which correlator to use 0 : 2-point leftward correlator 1 : 2-point rightward correlator 2 : 3-point converging leftward correlator 3 : 3-point converging rightward correlator 4 : 3-point diverging leftward correlator 5 : 3-point diverging rightward correlator SIGN : the sign of the correlator ; should the product be -1 or 1 ? For a graphical depiction of these correlators , see Clark , Fitzgerald , and Ales et al ., Nature Neuroscience 2014 ( in particular , Supplementary Figure 4 ) Example : Compute 10 frames for a single row , using a leftward 2-point correlator ( sign 1 ) correlator = 0 ; corelator_sign = 1 ; row_data = [ 1 1 - 1 1 - 1 - 1 1 1 ] ; % made up data for i = 1 : 10 , row_data ( i + 1 ,:) = visual_stim_row_correlator ( row_data ( i ,:), correlator , correlator_sign ); end ; row_data ,","title":"visual_stim_row_correlator"},{"location":"reference/neuroscience/vision/visual_stim_row_correlator.m/#visual_stim_row_correlator","text":"VISUAL_STIM_ROW_CORRELATOR - Compute the next visual stimulus frame for a given correlator NEXT_FRAME = VISUAL_STIM_ROW_CORRELATOR ( FRAME_DATA , CORRELATOR , SIGN ) Given a frame of visual stimulus data that consists of -1 's and 1s (FRAME_DATA), then a new frame (NEXT_FRAME) of -1' s and 1s is created such that the correlation between the new frame and the old frame is as described in CORRELATOR ( see below ). The algorithm operates on the rows of the stimulus , so that if the stimulus frame has many rows , each row will be operated on independently . CORRELATOR : A number that indicates which correlator to use 0 : 2-point leftward correlator 1 : 2-point rightward correlator 2 : 3-point converging leftward correlator 3 : 3-point converging rightward correlator 4 : 3-point diverging leftward correlator 5 : 3-point diverging rightward correlator SIGN : the sign of the correlator ; should the product be -1 or 1 ? For a graphical depiction of these correlators , see Clark , Fitzgerald , and Ales et al ., Nature Neuroscience 2014 ( in particular , Supplementary Figure 4 ) Example : Compute 10 frames for a single row , using a leftward 2-point correlator ( sign 1 ) correlator = 0 ; corelator_sign = 1 ; row_data = [ 1 1 - 1 1 - 1 - 1 1 1 ] ; % made up data for i = 1 : 10 , row_data ( i + 1 ,:) = visual_stim_row_correlator ( row_data ( i ,:), correlator , correlator_sign ); end ; row_data ,","title":"visual_stim_row_correlator"},{"location":"reference/neuroscience/vision/contrast/indexes/contrastfit2c50.m/","text":"contrastfit2c50 \u00b6 CONTRASTFIT2C50- Compute Half maximum C50 = CONTRASTFIT2C50(CONTRAST, RESPONSE) Given contrast in 1 percent steps in CONTRAST, this function computes the half maximum value that is defined as: value of C such that R(C50) = 0.5 * max(R) Units of contrast can be percent or from 0 to 1. See Heimel et al. 2005 (Journal of Neurophysiology)","title":"contrastfit2c50"},{"location":"reference/neuroscience/vision/contrast/indexes/contrastfit2c50.m/#contrastfit2c50","text":"CONTRASTFIT2C50- Compute Half maximum C50 = CONTRASTFIT2C50(CONTRAST, RESPONSE) Given contrast in 1 percent steps in CONTRAST, this function computes the half maximum value that is defined as: value of C such that R(C50) = 0.5 * max(R) Units of contrast can be percent or from 0 to 1. See Heimel et al. 2005 (Journal of Neurophysiology)","title":"contrastfit2c50"},{"location":"reference/neuroscience/vision/contrast/indexes/contrastfit2relativemaximumgain.m/","text":"contrastfit2relativemaximumgain \u00b6 CONTRASTFIT2RELATIVEMAXIMUMGAIN - Compute relative maximum gain [ RMG , CVALUE ] = CONTRASTFIT2RELATIVEMAXIMUMGAIN ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the relative maximum gain that is defined as : max ( dR / dC ) Units of contrast can be percent or from 0 to 1 . If they are percent these units will be converted to 0 - 1 , so that the units of dC are in fractions . CVALUE is the contrast value where the maximum occurs . See Heimel et al . 2005 ( J Neurophysiology )","title":"contrastfit2relativemaximumgain"},{"location":"reference/neuroscience/vision/contrast/indexes/contrastfit2relativemaximumgain.m/#contrastfit2relativemaximumgain","text":"CONTRASTFIT2RELATIVEMAXIMUMGAIN - Compute relative maximum gain [ RMG , CVALUE ] = CONTRASTFIT2RELATIVEMAXIMUMGAIN ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the relative maximum gain that is defined as : max ( dR / dC ) Units of contrast can be percent or from 0 to 1 . If they are percent these units will be converted to 0 - 1 , so that the units of dC are in fractions . CVALUE is the contrast value where the maximum occurs . See Heimel et al . 2005 ( J Neurophysiology )","title":"contrastfit2relativemaximumgain"},{"location":"reference/neuroscience/vision/contrast/indexes/contrastfit2saturationindex.m/","text":"contrastfit2saturationindex \u00b6 CONTRASTFIT2SATURATIONINDEX - Compute Saturation Index SI = CONTRASTFIT2SATURATIONINDEX ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the \"saturation index\" that is defined as : SI = ( Rmax - R ( 100 )) / ( Rmax - R ( 0 )) This is the amount of \"super saturation\" at 100 % contrast . Units of contrast can be percent or from 0 to 1 . If Rmax == R ( 0 ) , then the measure is undefined and the index that is returned is NaN . This index is called MI in Peirce 2007 ( JoV )","title":"contrastfit2saturationindex"},{"location":"reference/neuroscience/vision/contrast/indexes/contrastfit2saturationindex.m/#contrastfit2saturationindex","text":"CONTRASTFIT2SATURATIONINDEX - Compute Saturation Index SI = CONTRASTFIT2SATURATIONINDEX ( CONTRAST , RESPONSE ) Given contrast in 1 percent steps in CONTRAST , this function computes the \"saturation index\" that is defined as : SI = ( Rmax - R ( 100 )) / ( Rmax - R ( 0 )) This is the amount of \"super saturation\" at 100 % contrast . Units of contrast can be percent or from 0 to 1 . If Rmax == R ( 0 ) , then the measure is undefined and the index that is returned is NaN . This index is called MI in Peirce 2007 ( JoV )","title":"contrastfit2saturationindex"},{"location":"reference/neuroscience/vision/oridir/dirspace2orispace.m/","text":"dirspace2orispace \u00b6 DIRSPACE2ORISPACE - Converts direction responses to orientation responses [ ANGLES_ORI , RESPONSES_ORI ] = DIRSPACE2ORISPACE ( ANGLES , RESPONSES ) Converts direction responses and angles of stimulation into orientation space . Each angle in ANGLES that goes around the clock in direction space ( ranging from 0 to 360 degrees ) is converted to an orientation ranging from 0 to 180 degrees and returned in ANGLES_ORI . The new ANGLES_ORI is a column vector ( regardless of the form of the input ANGLES ). RESPONSES_ORI ( A , R ) is a matrix of all RESPONSES R that map to the orientation A . In the event that there are not an equal number of responses to each orientation , extra entries in the matrix will be NaN .","title":"dirspace2orispace"},{"location":"reference/neuroscience/vision/oridir/dirspace2orispace.m/#dirspace2orispace","text":"DIRSPACE2ORISPACE - Converts direction responses to orientation responses [ ANGLES_ORI , RESPONSES_ORI ] = DIRSPACE2ORISPACE ( ANGLES , RESPONSES ) Converts direction responses and angles of stimulation into orientation space . Each angle in ANGLES that goes around the clock in direction space ( ranging from 0 to 360 degrees ) is converted to an orientation ranging from 0 to 180 degrees and returned in ANGLES_ORI . The new ANGLES_ORI is a column vector ( regardless of the form of the input ANGLES ). RESPONSES_ORI ( A , R ) is a matrix of all RESPONSES R that map to the orientation A . In the event that there are not an equal number of responses to each orientation , extra entries in the matrix will be NaN .","title":"dirspace2orispace"},{"location":"reference/neuroscience/vision/oridir/dsi2dirparams.m/","text":"dsi2dirparams \u00b6 DSI2DIRPARAMS - Given a DSI , generate double gaussian parameters that has that dsi index [ RSP , RP , OP , SIGMA , RN ] = DSI2DIRPARAMS ( DSI , ...) Given a requested DSI index value , where DSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( OPPOSITE ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the DSI . By default , OP is 0 , SIGMA is 20 , RSP is 0 , RP = 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = DSI2DIRPARAMS ( DSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = dsi2dirparams ( i ); [ dummy , shape ] = otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = compute_directionindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : OTFIT_CARANDINI","title":"dsi2dirparams"},{"location":"reference/neuroscience/vision/oridir/dsi2dirparams.m/#dsi2dirparams","text":"DSI2DIRPARAMS - Given a DSI , generate double gaussian parameters that has that dsi index [ RSP , RP , OP , SIGMA , RN ] = DSI2DIRPARAMS ( DSI , ...) Given a requested DSI index value , where DSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( OPPOSITE ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the DSI . By default , OP is 0 , SIGMA is 20 , RSP is 0 , RP = 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = DSI2DIRPARAMS ( DSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = dsi2dirparams ( i ); [ dummy , shape ] = otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = compute_directionindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : OTFIT_CARANDINI","title":"dsi2dirparams"},{"location":"reference/neuroscience/vision/oridir/osi2oriparams.m/","text":"osi2oriparams \u00b6 OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are 10 , unless OSI == 0 , in which case RP and RN are 0 and RSP is 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = osi2oriparams ( i ); [ dummy , shape ] = otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : OTFIT_CARANDINI","title":"osi2oriparams"},{"location":"reference/neuroscience/vision/oridir/osi2oriparams.m/#osi2oriparams","text":"OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are 10 , unless OSI == 0 , in which case RP and RN are 0 and RSP is 10 . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = osi2oriparams ( i ); [ dummy , shape ] = otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : OTFIT_CARANDINI","title":"osi2oriparams"},{"location":"reference/neuroscience/vision/oridir/osi2oriparams2.m/","text":"osi2oriparams2 \u00b6 OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS2 ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are equal . RP + RSP will be 10 . RSP will be set to whatever is necessary to make the OSI be fit . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS2 ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = osi2oriparams2 ( i ); [ dummy , shape ] = otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : OTFIT_CARANDINI","title":"osi2oriparams2"},{"location":"reference/neuroscience/vision/oridir/osi2oriparams2.m/#osi2oriparams2","text":"OSI2ORIPARAMS - Given an OSI , generate double gaussian parameters that has that osi index [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS2 ( OSI , ...) Given a requested OSI index value , where OSI is defined as ( RESPONSE ( PREFERRED ) - RESPONSE ( ORTHOGONAL ))/ RESPONSE ( PREFERRED ) this function generates a set of double gaussian parameters that satisfies the OSI . By default , OP is 0 , SIGMA is 20 , RP and RN are equal . RP + RSP will be 10 . RSP will be set to whatever is necessary to make the OSI be fit . One can add extra arguments as name / value pairs to modify the SIGMA , OP , and RSP parameters of the double gaussian , for example : [ RSP , RP , OP , SIGMA , RN ] = OSI2ORIPARAMS2 ( OSI , 'SIGMA' , 40 ) One can use the following code to validate this function : desired_index = [] ; actual_index = [] ; for i = 0 : 0 . 1 : 1 , desired_index ( end + 1 ) = i ; [ rsp , rp , op , sigma , rn ] = osi2oriparams2 ( i ); [ dummy , shape ] = otfit_carandini_err ( [ rsp rp op sigma rn ] , [ 0 : 22.5 : 360 - 22.5 ] ); actual_index ( end + 1 ) = compute_orientationindex ( 0 : 22 . 5 : 360-22 . 5 , shape ); end ; [ desired_index ' actual_index' ] See also : OTFIT_CARANDINI","title":"osi2oriparams2"},{"location":"reference/neuroscience/vision/oridir/rotated_oripref_stats.m/","text":"rotated_oripref_stats \u00b6 ROTATED_ORIPREF_STATS - compute mean and dispersion of a set of orientation angle preferences with respect to a reference angle [ MEANANGLE , DISPERSION ] = ROTATED_ORIPREF_STATS ( ORI_PREF , REFERENCE_ANGLE ) Given a vector of ORI_PREF values ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) and a REFERENCE_ANGLE that defines '0' ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) returns the mean angle MEANANGLE and the DISPERSION , calculated as the circular variance ( CIRC_VAR ) .","title":"rotated_oripref_stats"},{"location":"reference/neuroscience/vision/oridir/rotated_oripref_stats.m/#rotated_oripref_stats","text":"ROTATED_ORIPREF_STATS - compute mean and dispersion of a set of orientation angle preferences with respect to a reference angle [ MEANANGLE , DISPERSION ] = ROTATED_ORIPREF_STATS ( ORI_PREF , REFERENCE_ANGLE ) Given a vector of ORI_PREF values ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) and a REFERENCE_ANGLE that defines '0' ( can be in 0. . 360 but will be converted to 0. . 180 with MOD ) returns the mean angle MEANANGLE and the DISPERSION , calculated as the circular variance ( CIRC_VAR ) .","title":"rotated_oripref_stats"},{"location":"reference/neuroscience/vision/oridir/rotatedircurve.m/","text":"rotatedircurve \u00b6 ROTATEDIRCURVE - rotate a direction curve so that it 's highest value is at a defined place NEWCURVE = ROTATEDIRCURVE(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT) Rotates the direction tuning curve measured at angles ANGLES and with responses RESPONSES so that the maximum response is at PREF_ANGLE_ASSIGNMENT. ANGLES are assumed to run from 0 .. 360. NEWCURVE is the shifted response curve that can be plotted with the existing ANGLES measurements. The function also has a form: NEWCURVE = ROTATEDIRCURVE(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT, ANCHOR_RESPONSES) That will shift the curve RESPONSES based on the responses of a different curve ANCHOR_RESPONSES. This is useful, for example, for shifting the surround tuning curve with respect to the responses of a center tuning curve, for example.","title":"rotatedircurve"},{"location":"reference/neuroscience/vision/oridir/rotatedircurve.m/#rotatedircurve","text":"ROTATEDIRCURVE - rotate a direction curve so that it 's highest value is at a defined place NEWCURVE = ROTATEDIRCURVE(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT) Rotates the direction tuning curve measured at angles ANGLES and with responses RESPONSES so that the maximum response is at PREF_ANGLE_ASSIGNMENT. ANGLES are assumed to run from 0 .. 360. NEWCURVE is the shifted response curve that can be plotted with the existing ANGLES measurements. The function also has a form: NEWCURVE = ROTATEDIRCURVE(ANGLES, RESPONSES, PREF_ANGLE_ASSIGNMENT, ANCHOR_RESPONSES) That will shift the curve RESPONSES based on the responses of a different curve ANCHOR_RESPONSES. This is useful, for example, for shifting the surround tuning curve with respect to the responses of a center tuning curve, for example.","title":"rotatedircurve"},{"location":"reference/neuroscience/vision/oridir/vector_direction_pref.m/","text":"vector_direction_pref \u00b6 VECTOR_DIRECTION_PREF - Determine dir preference / response w / vector methods [ PREF_RESP, NULL_RESP, DIR_PREF, ORI_PREF ] = ... VECTOR_DIRECTION_PREF ( ANGLES , RESPONSES , [ BLANK ] ) Calculates the preferred response PREF_RESP and the null response NULL_RESP with vector methods . First , the orientation preference is calculated using vector methods . Then , the preferred and null responses are computed at the 2 directions that correspond to the orientation angle indicated by the vector method . The responses are computed by interpolation .","title":"vector_direction_pref"},{"location":"reference/neuroscience/vision/oridir/vector_direction_pref.m/#vector_direction_pref","text":"VECTOR_DIRECTION_PREF - Determine dir preference / response w / vector methods [ PREF_RESP, NULL_RESP, DIR_PREF, ORI_PREF ] = ... VECTOR_DIRECTION_PREF ( ANGLES , RESPONSES , [ BLANK ] ) Calculates the preferred response PREF_RESP and the null response NULL_RESP with vector methods . First , the orientation preference is calculated using vector methods . Then , the preferred and null responses are computed at the 2 directions that correspond to the orientation angle indicated by the vector method . The responses are computed by interpolation .","title":"vector_direction_pref"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_circularvariance.m/","text":"compute_circularvariance \u00b6 COMPUTE_CIRCULARVARIANCE CV = COMPUTE_CIRCULARVARIANCE( ANGLES, RATES ) Takes ANGLES in degrees. ANGLES and RATES should be row vectors. CV = 1 - |R| R = (RATES * EXP(2I*ANGLES)') / SUM(RATES) See Ringach et al. J.Neurosci. 2002 22:5639-5651","title":"compute_circularvariance"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_circularvariance.m/#compute_circularvariance","text":"COMPUTE_CIRCULARVARIANCE CV = COMPUTE_CIRCULARVARIANCE( ANGLES, RATES ) Takes ANGLES in degrees. ANGLES and RATES should be row vectors. CV = 1 - |R| R = (RATES * EXP(2I*ANGLES)') / SUM(RATES) See Ringach et al. J.Neurosci. 2002 22:5639-5651","title":"compute_circularvariance"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_dircircularvariance.m/","text":"compute_dircircularvariance \u00b6 COMPUTE_DIRCIRCULARVARIANCE CV = COMPUTE_DIRCIRCULARVARIANCE( ANGLES, RATES ) Takes ANGLES in degrees. ANGLES and RATES should be row vectors. CV = 1 - |R| R = (RATES * EXP(I*ANGLES)') / SUM(RATES) See Ringach et al. J.Neurosci. 2002 22:5639-5651","title":"compute_dircircularvariance"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_dircircularvariance.m/#compute_dircircularvariance","text":"COMPUTE_DIRCIRCULARVARIANCE CV = COMPUTE_DIRCIRCULARVARIANCE( ANGLES, RATES ) Takes ANGLES in degrees. ANGLES and RATES should be row vectors. CV = 1 - |R| R = (RATES * EXP(I*ANGLES)') / SUM(RATES) See Ringach et al. J.Neurosci. 2002 22:5639-5651","title":"compute_dircircularvariance"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_directionindex.m/","text":"compute_directionindex \u00b6 COMPUTE_DIRECTIONINDEX DI = COMPUTE_DIRECTIONINDEX( ANGLES, RATES ) Takes ANGLES in degrees di = (maxrate - rate(stimulus in oppositedirection))/maxrate di == 1 means maximally selective di == 0 means not selective","title":"compute_directionindex"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_directionindex.m/#compute_directionindex","text":"COMPUTE_DIRECTIONINDEX DI = COMPUTE_DIRECTIONINDEX( ANGLES, RATES ) Takes ANGLES in degrees di = (maxrate - rate(stimulus in oppositedirection))/maxrate di == 1 means maximally selective di == 0 means not selective","title":"compute_directionindex"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_directionsignificancedotproduct.m/","text":"compute_directionsignificancedotproduct \u00b6 COMPUTE_DIRECTIONSIGNIFICANCEDOTPRODUCT Direction tuning significance using dot product with empirical orientation preference P = COMPUTE_DIRECTIONSIGNIFIANCEDOTPRODUCT ( ANGLES , RATES ) This function calculates the probability that the \"true\" direction tuning vector of a neuron has non-zero length . It performs this by empirically determing the unit orientation vector , and then computing the dot product of the direction vector for each trial onto the overall orientation vector , and then looking to see if the average is non-zero . Inputs : ANGLES is a vector of direction angles at which the response has been measured . RATES is the response of the neuron in to each angle ; each row should contain responses from a different trial . Output : P the probability that the \"true\" direction tuning vector is non-zero . See : Mazurek , Kagan , Van Hooser 2014 ; Frontiers in Neural Circuits","title":"compute_directionsignificancedotproduct"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_directionsignificancedotproduct.m/#compute_directionsignificancedotproduct","text":"COMPUTE_DIRECTIONSIGNIFICANCEDOTPRODUCT Direction tuning significance using dot product with empirical orientation preference P = COMPUTE_DIRECTIONSIGNIFIANCEDOTPRODUCT ( ANGLES , RATES ) This function calculates the probability that the \"true\" direction tuning vector of a neuron has non-zero length . It performs this by empirically determing the unit orientation vector , and then computing the dot product of the direction vector for each trial onto the overall orientation vector , and then looking to see if the average is non-zero . Inputs : ANGLES is a vector of direction angles at which the response has been measured . RATES is the response of the neuron in to each angle ; each row should contain responses from a different trial . Output : P the probability that the \"true\" direction tuning vector is non-zero . See : Mazurek , Kagan , Van Hooser 2014 ; Frontiers in Neural Circuits","title":"compute_directionsignificancedotproduct"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_dirvecconstrainedori.m/","text":"compute_dirvecconstrainedori \u00b6 COMPUTE_DIRVECCONSTRAINEDORI - Computes direction vector constrained by orientation ( DVCO ) [ DI , PREF , DV ] = COMPUTE_DIRVECCONSTRANEDORI ( ANGLES , RATES ) ANGLES and RATES should be ROW vectors .","title":"compute_dirvecconstrainedori"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_dirvecconstrainedori.m/#compute_dirvecconstrainedori","text":"COMPUTE_DIRVECCONSTRAINEDORI - Computes direction vector constrained by orientation ( DVCO ) [ DI , PREF , DV ] = COMPUTE_DIRVECCONSTRANEDORI ( ANGLES , RATES ) ANGLES and RATES should be ROW vectors .","title":"compute_dirvecconstrainedori"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_dirvecdotorivec.m/","text":"compute_dirvecdotorivec \u00b6 COMPUTE_DIRVECDOTORIVEC - Direction index based on dot product with computed orientation vector DI = COMPUTE_DIRVECDOTORIVEC ( ANGLES , RATES ) Takes ANGLES in degrees , and RATES is the response to each angle in a row vector . DI is a modified vector index ; the function first finds the empirical orientation vector and then computes dot product of direction vector with unit orentation vector","title":"compute_dirvecdotorivec"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_dirvecdotorivec.m/#compute_dirvecdotorivec","text":"COMPUTE_DIRVECDOTORIVEC - Direction index based on dot product with computed orientation vector DI = COMPUTE_DIRVECDOTORIVEC ( ANGLES , RATES ) Takes ANGLES in degrees , and RATES is the response to each angle in a row vector . DI is a modified vector index ; the function first finds the empirical orientation vector and then computes dot product of direction vector with unit orentation vector","title":"compute_dirvecdotorivec"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_halfwidth.m/","text":"compute_halfwidth \u00b6 COMPUTE_LOWHALFMAX [ LOW , MAX , HIGH ] = COMPUTE_HALFWIDTH ( X , Y ) interpolates function by linearly ( splines goes strange for small points ) and returns MAX , where x position where function attains its maximum value LOW < MAX , where function attains half its maximum HIGH > MAX , where function attains half its maximum returns NAN for LOW or / and HIGH , when function does not come below the point note : ugly , slow and crude routine , consider taking log x first","title":"compute_halfwidth"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_halfwidth.m/#compute_halfwidth","text":"COMPUTE_LOWHALFMAX [ LOW , MAX , HIGH ] = COMPUTE_HALFWIDTH ( X , Y ) interpolates function by linearly ( splines goes strange for small points ) and returns MAX , where x position where function attains its maximum value LOW < MAX , where function attains half its maximum HIGH > MAX , where function attains half its maximum returns NAN for LOW or / and HIGH , when function does not come below the point note : ugly , slow and crude routine , consider taking log x first","title":"compute_halfwidth"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_orientationindex.m/","text":"compute_orientationindex \u00b6 COMPUTE_ORIENTATIONINDEX DI = COMPUTE_ORIENTATIONINDEX( ANGLES, RATES ) Takes ANGLES in degrees oi = (max + max_180 - max_90 - max_270)/(max) no interpolation done","title":"compute_orientationindex"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_orientationindex.m/#compute_orientationindex","text":"COMPUTE_ORIENTATIONINDEX DI = COMPUTE_ORIENTATIONINDEX( ANGLES, RATES ) Takes ANGLES in degrees oi = (max + max_180 - max_90 - max_270)/(max) no interpolation done","title":"compute_orientationindex"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_orientationvector.m/","text":"compute_orientationvector \u00b6 COMPUTE_ORIENTATIONVECTOR VECTOR = COMPUTE_ORIENTATIONVECTOR ( ANGLES , RATES ) Takes ANGLES in degrees and returns the orientation vector : vector = ( rates * transpose ( exp ( sqrt ( - 1 ) * 2 * mod ( angles * pi / 180 , pi )))) / N The vector is normalized by a factor of N , which is 2 if the angles go all the way around the clock ( that is , they sample from 0 to 360 ) as opposed to from 0 to 180 ( N = 1 ). no interpolation done","title":"compute_orientationvector"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_orientationvector.m/#compute_orientationvector","text":"COMPUTE_ORIENTATIONVECTOR VECTOR = COMPUTE_ORIENTATIONVECTOR ( ANGLES , RATES ) Takes ANGLES in degrees and returns the orientation vector : vector = ( rates * transpose ( exp ( sqrt ( - 1 ) * 2 * mod ( angles * pi / 180 , pi )))) / N The vector is normalized by a factor of N , which is 2 if the angles go all the way around the clock ( that is , they sample from 0 to 360 ) as opposed to from 0 to 180 ( N = 1 ). no interpolation done","title":"compute_orientationvector"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_tuningwidth.m/","text":"compute_tuningwidth \u00b6 COMPUTE_TUNINGWIDTH TUNINGWIDTH = COMPUTE_TUNINGWIDTH( ANGLES, RATES ) Takes ANGLES in degrees linearly interpolates rates and returns the half of the distance between the two points sandwiching the maximum where the response is 1/sqrt(2) of the maximum rate. returns 90, when function does not come below the point See Rinach et al. J.Neurosci. 2002 22:5639-5651","title":"compute_tuningwidth"},{"location":"reference/neuroscience/vision/oridir/indexes/compute_tuningwidth.m/#compute_tuningwidth","text":"COMPUTE_TUNINGWIDTH TUNINGWIDTH = COMPUTE_TUNINGWIDTH( ANGLES, RATES ) Takes ANGLES in degrees linearly interpolates rates and returns the half of the distance between the two points sandwiching the maximum where the response is 1/sqrt(2) of the maximum rate. returns 90, when function does not come below the point See Rinach et al. J.Neurosci. 2002 22:5639-5651","title":"compute_tuningwidth"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdi.m/","text":"fit2fitdi \u00b6 FIT2FITDI - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = FIT2FITDI ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitdi"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdi.m/#fit2fitdi","text":"FIT2FITDI - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = FIT2FITDI ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitdi"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdibr.m/","text":"fit2fitdibr \u00b6 FIT2FITDIBR - Direction index from double gaussian fit ( blank rectified ) DSI = FIT2FITDIBR ( FITPARAMS , BLANKRESP ) Computes the \"direction selectivity index\" , or the fraction of the total response that is in the preferred direction compared to the opposite direction . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitdibr"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdibr.m/#fit2fitdibr","text":"FIT2FITDIBR - Direction index from double gaussian fit ( blank rectified ) DSI = FIT2FITDIBR ( FITPARAMS , BLANKRESP ) Computes the \"direction selectivity index\" , or the fraction of the total response that is in the preferred direction compared to the opposite direction . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The DSI is defined as DSI = ( Rpref - Rnull ) / Rpref See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitdibr"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdibr_orig.m/","text":"fit2fitdibr_orig \u00b6 fit2fitdibr_orig is a function. di = fit2fitdibr(fitparams, blank)","title":"fit2fitdibr_orig"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdibr_orig.m/#fit2fitdibr_orig","text":"fit2fitdibr_orig is a function. di = fit2fitdibr(fitparams, blank)","title":"fit2fitdibr_orig"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdidiffsum.m/","text":"fit2fitdidiffsum \u00b6 FIT2FITDIDIFFSUM - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = FIT2FITDIDIFFSUM ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / ( Rpref + Rnull ) where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR , FIT2FITDI","title":"fit2fitdidiffsum"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdidiffsum.m/#fit2fitdidiffsum","text":"FIT2FITDIDIFFSUM - direction selectivity index ( DSI ) from double gaussian fit of direction tuning curve DIIND = FIT2FITDIDIFFSUM ( R ) Calculates the direction selectivity index ( DSI ) from a double gaussian fit of a direction tuning curve . The DSI is defined as DSI = ( Rpref - Rnull ) / ( Rpref + Rnull ) where Rpref is the response to the preferred direction and Rnull is the response to the direction opposite to the preferred direction ( that is , the null direction ) . R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR , FIT2FITDI","title":"fit2fitdidiffsum"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdr_angle.m/","text":"fit2fitdr_angle \u00b6 FIT2FITDR_ANGLE - Direction ratio ( fraction of response in certain direction ) from double gaussian fit TDR = FIT2FITDR_ANGLE ( FITPARAMS , BLANKRESP , THEANGLE ) Computes the \"direction ratio\" , or the fraction of the total response that is in the given angle compared to the opposite angle . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The formula is TDR = Resp ( THEANGLE ) / ( Resp ( THEANGLE ) + Resp ( THEANGLE + 180 )) See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitdr_angle"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitdr_angle.m/#fit2fitdr_angle","text":"FIT2FITDR_ANGLE - Direction ratio ( fraction of response in certain direction ) from double gaussian fit TDR = FIT2FITDR_ANGLE ( FITPARAMS , BLANKRESP , THEANGLE ) Computes the \"direction ratio\" , or the fraction of the total response that is in the given angle compared to the opposite angle . FITPARAMS is a 5 - value vector describing a double gaussian fit to a direction tuning curve ( FITPARAMS ( 1 ) is offset , FITPARAMS ( 2 ) is weight of first gaussian peak , FITPARAMS ( 3 ) is the peak tuning position , FITPARAMS ( 4 ) is the variance around the peak , FITPARAMS ( % ) is the weight of the 'null' direction peak ): Resp = - BLANK + fitparams ( 1 ) +... fitparams ( 2 ) * exp ( - angdiff ( fitparams ( 3 ) - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )) +... fitparams ( 5 ) * exp ( - angdiff ( fitparams ( 3 ) + 180 - angs ) .^ 2 / ( 2 * fitparams ( 4 ) ^ 2 )); The formula is TDR = Resp ( THEANGLE ) / ( Resp ( THEANGLE ) + Resp ( THEANGLE + 180 )) See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitdr_angle"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitoi.m/","text":"fit2fitoi \u00b6 FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = FIT2FITOI ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / Rpref where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitoi"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitoi.m/#fit2fitoi","text":"FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = FIT2FITOI ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / Rpref where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR","title":"fit2fitoi"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitoidiffsum.m/","text":"fit2fitoidiffsum \u00b6 FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = FIT2FITOIDIFFSUM ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / ( Rpref + Rorth ) where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR , FIT2FITDIDIFFSUM","title":"fit2fitoidiffsum"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2fitoidiffsum.m/#fit2fitoidiffsum","text":"FIT2FITOI - Calculate orientation index from a double gaussian fit of direction tuning curve OIIND = FIT2FITOIDIFFSUM ( R ) Calculates the orientation selectivity index ( OSI ) from a double gaussian fit of a direction tuning curve . The OSI is defined as OSI = ( Rpref - Rorth ) / ( Rpref + Rorth ) where Rpref is the average response to the preferred direction and the opposite direction ( that is , the preferred orientations ) , and Rorth is the average response to the 2 directions orthogonal to the preferred direction ( that is , the orthogonal orientation .. R is a 2 - row vector . The first row is the directions that were evaluated by the fit ( e . g ., [ 0 : 359 ] is the most common for 1 degree steps between 0 and 359 ) , and the second row is the response of the fit for each angle . See also : OTFIT_CARANDINI , FIT2FITOI , FIT2FITDIBR , FIT2FITDIDIFFSUM","title":"fit2fitoidiffsum"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2null.m/","text":"fit2null \u00b6 FIT2NULL - calculate the null ( anti - preferred ) response from a fit to direction NULL = FIT2NULL ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 180 degrees away from the location with the maximum response . This is the null response or the response in the anti - preferred direction . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : FIT2PREF , FIT2ORTH","title":"fit2null"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2null.m/#fit2null","text":"FIT2NULL - calculate the null ( anti - preferred ) response from a fit to direction NULL = FIT2NULL ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 180 degrees away from the location with the maximum response . This is the null response or the response in the anti - preferred direction . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : FIT2PREF , FIT2ORTH","title":"fit2null"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2orth.m/","text":"fit2orth \u00b6 FIT2ORTH - calculate the orthogonal response from a fit to direction ORTH = FIT2ORTH ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 90 degrees away from the location with the maximum response . This is the orthogonal response or the response of the neuron to the orientation orthogonal to the preferred . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : FIT2PREF , FIT2NULL","title":"fit2orth"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2orth.m/#fit2orth","text":"FIT2ORTH - calculate the orthogonal response from a fit to direction ORTH = FIT2ORTH ( RESPONSE ) Given the RESPONSE of a double gaussian fit , return the response 90 degrees away from the location with the maximum response . This is the orthogonal response or the response of the neuron to the orientation orthogonal to the preferred . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . See also : FIT2PREF , FIT2NULL","title":"fit2orth"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2pref.m/","text":"fit2pref \u00b6 FIT2PREF - calculate the preferred response from a fit to direction PREF = FIT2PREF ( RESPONSE ) Given the RESPONSE of a double gaussian fit , find the maximum response . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . The largest response is returned in PREF . See also : FIT2NULL , FIT2ORTH","title":"fit2pref"},{"location":"reference/neuroscience/vision/oridir/indexes/fit2pref.m/#fit2pref","text":"FIT2PREF - calculate the preferred response from a fit to direction PREF = FIT2PREF ( RESPONSE ) Given the RESPONSE of a double gaussian fit , find the maximum response . RESPONSE is a 360 x2 vector of responses . The first row indicates the angles of the fit , and the second row indicates the responses . For backwards compatibility , if RESPONSE is a 360 x1 vector , a new first row is added equal to 0 : 359 . The largest response is returned in PREF . See also : FIT2NULL , FIT2ORTH","title":"fit2pref"},{"location":"reference/neuroscience/vision/oridir/indexes/oridir_fitindexes.m/","text":"oridir_fitindexes \u00b6 ORIDIR_FITINDEXES - compute orientation / direction fits , index values FI = ORIDIR_FITINDEXES ( RESPSTRUCT ) Computes orientation / direction index fit values from a response structure RESPSTRUCT . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords .) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Note that fits may be garbage if there are not significantly different responses across different directions . Returns a structure FI with fields : Field | Description ---------------------------------------------------------------------------------------- fit_parameters | [ Rsp Rp Ot sigm Rn ] fit | 2 row fit ; first row is set of directions , second row is responses ot_index | Orientation index ( ( pref-orth )/ pref ) ) ot_index_rectified | Orientation index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 ot_index_diffsum | Orientation index ( ( pref-orth )/( pref + orth ) ) ot_index_diffsum_rectified | Orientation index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1 dir_pref | Ot tuning_width | Fit tuning width ( HWHH , sigm * sqrt ( log ( 4 ))) dir_index | Direction index ( ( pref-orth )/ pref ) ) dir_index_rectified | Direction index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 dir_index_diffsum | Direction index ( ( pref-orth )/( pref + orth ) ) dir_index_diffsum_rectified | Direction index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1","title":"oridir_fitindexes"},{"location":"reference/neuroscience/vision/oridir/indexes/oridir_fitindexes.m/#oridir_fitindexes","text":"ORIDIR_FITINDEXES - compute orientation / direction fits , index values FI = ORIDIR_FITINDEXES ( RESPSTRUCT ) Computes orientation / direction index fit values from a response structure RESPSTRUCT . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords .) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Note that fits may be garbage if there are not significantly different responses across different directions . Returns a structure FI with fields : Field | Description ---------------------------------------------------------------------------------------- fit_parameters | [ Rsp Rp Ot sigm Rn ] fit | 2 row fit ; first row is set of directions , second row is responses ot_index | Orientation index ( ( pref-orth )/ pref ) ) ot_index_rectified | Orientation index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 ot_index_diffsum | Orientation index ( ( pref-orth )/( pref + orth ) ) ot_index_diffsum_rectified | Orientation index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1 dir_pref | Ot tuning_width | Fit tuning width ( HWHH , sigm * sqrt ( log ( 4 ))) dir_index | Direction index ( ( pref-orth )/ pref ) ) dir_index_rectified | Direction index ( ( pref-orth )/ pref ) ) rectified to be in 0 , 1 dir_index_diffsum | Direction index ( ( pref-orth )/( pref + orth ) ) dir_index_diffsum_rectified | Direction index ( ( pref-orth )/( pref + orth ) ), rectified to be in 0 , 1","title":"oridir_fitindexes"},{"location":"reference/neuroscience/vision/oridir/indexes/oridir_vectorindexes.m/","text":"oridir_vectorindexes \u00b6 ORIDIR_VECTORINDEX - compute orientation / direction vector indexes VI = ORIDIR_VECTORINDEXES ( RESPSTRUCT ) Computes orientation / direction index vector values from a response structure RESP . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4 xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords . ) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Returns a structure VI with fields : Field | Description ---------------------------------------------------------------------------------------- ot_HotellingT2_p | Hotelling 's T^2 test of orientation vector data ot_pref | Angle preference in orientation space ot_circularvariance | Magnitude of response in orientation space ( see Ringach et al . 2002 ) ot_index | Orientation index ( ( pref - orth ) / pref ) ) tuning_width | Vector tuning width ( see help COMPUTE_TUNINGWIDTH ) dir_HotellingT2_p | Hotelling 's T^2 test of direction vector data dir_pref | Angle preference in direction space dir_circularvariance | Direction index in vector space dir_dotproduct_sig_p | P value of dot product direction vector significance | method of Mazurek et al . 2014","title":"oridir_vectorindexes"},{"location":"reference/neuroscience/vision/oridir/indexes/oridir_vectorindexes.m/#oridir_vectorindexes","text":"ORIDIR_VECTORINDEX - compute orientation / direction vector indexes VI = ORIDIR_VECTORINDEXES ( RESPSTRUCT ) Computes orientation / direction index vector values from a response structure RESP . RESPSTRUCT is a structure of response properties with fields : Field | Description ----------------------------------------------------------------------------- curve | 4 xnumber of directions tested , | curve ( 1 ,:) is directions tested ( degrees , compass coords . ) | curve ( 2 ,:) is mean responses | curve ( 3 ,:) is standard deviation | curve ( 4 ,:) is standard error ind | cell list of individual trial responses for each direction Returns a structure VI with fields : Field | Description ---------------------------------------------------------------------------------------- ot_HotellingT2_p | Hotelling 's T^2 test of orientation vector data ot_pref | Angle preference in orientation space ot_circularvariance | Magnitude of response in orientation space ( see Ringach et al . 2002 ) ot_index | Orientation index ( ( pref - orth ) / pref ) ) tuning_width | Vector tuning width ( see help COMPUTE_TUNINGWIDTH ) dir_HotellingT2_p | Hotelling 's T^2 test of direction vector data dir_pref | Angle preference in direction space dir_circularvariance | Direction index in vector space dir_dotproduct_sig_p | P value of dot product direction vector significance | method of Mazurek et al . 2014","title":"oridir_vectorindexes"},{"location":"reference/neuroscience/vision/oridir/plotting/polarplot_dir.m/","text":"polarplot_dir \u00b6 POLARPLOT_DIR - Produces a polar plot of direction responses [ H , OUTPUTS ] = POLARPLOT_DIR ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of direction responses in direction space . The plot handle is returned in H . ANGLES should be direction angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean direction vector in the complex plane 'vectormag' : mean direction vector magnitude 'vectorpref' : vector direction preference in degrees 'dircircularvariance' : direction circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the dir circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean direction vector ( default 0 ) 'showdircircularvariance' : 0 / 1 show dir circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - dircircular : variance and angle equal to vector direction : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : DIRSPACE2ORISPACE , MMPOLAR , POLARPLOT_ORI","title":"polarplot_dir"},{"location":"reference/neuroscience/vision/oridir/plotting/polarplot_dir.m/#polarplot_dir","text":"POLARPLOT_DIR - Produces a polar plot of direction responses [ H , OUTPUTS ] = POLARPLOT_DIR ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of direction responses in direction space . The plot handle is returned in H . ANGLES should be direction angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean direction vector in the complex plane 'vectormag' : mean direction vector magnitude 'vectorpref' : vector direction preference in degrees 'dircircularvariance' : direction circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the dir circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean direction vector ( default 0 ) 'showdircircularvariance' : 0 / 1 show dir circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - dircircular : variance and angle equal to vector direction : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : DIRSPACE2ORISPACE , MMPOLAR , POLARPLOT_ORI","title":"polarplot_dir"},{"location":"reference/neuroscience/vision/oridir/plotting/polarplot_ori.m/","text":"polarplot_ori \u00b6 POLARPLOT_ORI - Produces a polar plot of orientation responses [ H , OUTPUTS ] = POLARPLOT_ORI ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of orientation responses in orientation space . The plot handle is returned in H . ANGLES should be orientation angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean orientation vector in the complex plane 'vectormag' : mean vector magnitude 'vectorpref' : vector preference in degrees 'circularvariance' : circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean orientation vector ( default 0 ) 'showcircularvariance' : 0 / 1 show circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - circular : variance and angle equal to orientation : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : DIRSPACE2ORISPACE , MMPOLAR , POLARPLOT_DIR","title":"polarplot_ori"},{"location":"reference/neuroscience/vision/oridir/plotting/polarplot_ori.m/#polarplot_ori","text":"POLARPLOT_ORI - Produces a polar plot of orientation responses [ H , OUTPUTS ] = POLARPLOT_ORI ( ANGLES , RESPONSES , ... ) Produces a polar plot ( using the third party library MMPOLAR ) of orientation responses in orientation space . The plot handle is returned in H . ANGLES should be orientation angles in degrees , and RESPONSES are the responses in appropriate units . OUTPUTS is a structure with the following fields : 'meanvector' : mean orientation vector in the complex plane 'vectormag' : mean vector magnitude 'vectorpref' : vector preference in degrees 'circularvariance' : circular variance 'h_meanvector' : plot handle to the mean vector 'h_circularvariance' : plot handle to the circular variance vector Additional name / value pairs can be provided as additional arguments : 'showmeanvector' : 0 / 1 show mean orientation vector ( default 0 ) 'showcircularvariance' : 0 / 1 show circular variance vector ( default 0 ) : ( plots vector with length equal to 1 - circular : variance and angle equal to orientation : preference ) 'style' : 'compass' or 'cartesian' , default 'compass' See also : DIRSPACE2ORISPACE , MMPOLAR , POLARPLOT_DIR","title":"polarplot_ori"},{"location":"reference/not_packaged/archived_code/modelel/modelel/modelel_init.m/","text":"modelel_init \u00b6 MODELEL_INIT - Initialize a model element MODELEL = MODELEL_INIT or MODELEL = MODELEL_INIT ( PARAM1NAME , PARAM1VALUE , ...) Creates a MODELEL structure . A default model is created unless parameters are modified by passing name , value pairs . This framework can describe any element that has a time T and an integration step time dT . Returns a structure MODELEL describing a neuron : ------------------------------------------------------- T ( 0 ) | Current time ( seconds ) dT ( 1e-4 ) | Step time ( seconds ) name ( '' ) | Name of the neuron ( character string ) type ( 'modelel' ) | Type : must be 'modelel' ( not modifiable ) model ( 'none' ) | Structure for the model such as | that returned by 'intfireleaky' See HELP MODELELS for a list of valid neuron model types . Examples : intfire = intfireleaky_init ; % create a default LI & F neuron","title":"modelel_init"},{"location":"reference/not_packaged/archived_code/modelel/modelel/modelel_init.m/#modelel_init","text":"MODELEL_INIT - Initialize a model element MODELEL = MODELEL_INIT or MODELEL = MODELEL_INIT ( PARAM1NAME , PARAM1VALUE , ...) Creates a MODELEL structure . A default model is created unless parameters are modified by passing name , value pairs . This framework can describe any element that has a time T and an integration step time dT . Returns a structure MODELEL describing a neuron : ------------------------------------------------------- T ( 0 ) | Current time ( seconds ) dT ( 1e-4 ) | Step time ( seconds ) name ( '' ) | Name of the neuron ( character string ) type ( 'modelel' ) | Type : must be 'modelel' ( not modifiable ) model ( 'none' ) | Structure for the model such as | that returned by 'intfireleaky' See HELP MODELELS for a list of valid neuron model types . Examples : intfire = intfireleaky_init ; % create a default LI & F neuron","title":"modelel_init"},{"location":"reference/not_packaged/archived_code/modelel/modelel/modelel_reset.m/","text":"modelel_reset \u00b6 MODELEL_RESET - Reset a modelel to time 0 MODELEL = MODELEL_RESET(MODELEL) Reset a modelel model so that all T fields are starting at 0.","title":"modelel_reset"},{"location":"reference/not_packaged/archived_code/modelel/modelel/modelel_reset.m/#modelel_reset","text":"MODELEL_RESET - Reset a modelel to time 0 MODELEL = MODELEL_RESET(MODELEL) Reset a modelel model so that all T fields are starting at 0.","title":"modelel_reset"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivity4cell_learning1.m/","text":"directionselectivity4cell_learning1 \u00b6 DIRECTIONSELECTIVITY4CELL_LEARNING1 OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp Gmax_initial ( 3e-9 ) | 1 x4 matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_learning1"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivity4cell_learning1.m/#directionselectivity4cell_learning1","text":"DIRECTIONSELECTIVITY4CELL_LEARNING1 OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp Gmax_initial ( 3e-9 ) | 1 x4 matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_learning1"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivity4cell_random.m/","text":"directionselectivity4cell_random \u00b6 DIRECTIONSELECTIVITY4CELL_RANDOM OUT = DIRECTIONSELECTIVITY4CELL_RANDOM Randomly choose weights for a 4 - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_random"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivity4cell_random.m/#directionselectivity4cell_random","text":"DIRECTIONSELECTIVITY4CELL_RANDOM OUT = DIRECTIONSELECTIVITY4CELL_RANDOM Randomly choose weights for a 4 - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivity4cell_random"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivity4celldemo.m/","text":"directionselectivity4celldemo \u00b6 DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO Enter \"TYPE DIRECTIONSELECTIVITY4CELLDEMO\" to see the code . Input cells : 1 - 4 Cells 1 and 2 are at position 1 , cells 3 and 4 are at position 2. Cells 1 and 3 fire instantly , while cells 2 and 4 have a latency . One can modify the default parameters by passing name / value pairs to the function like this [ MODELEL , DI , UP , DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO ( PARAM1NAME , PARAM1VALUE , ... ) Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between cell 1 , 2 and 3 , 4 lag ( 0.200 ) | Lag of stimulus arrival between cell 1 , cell3 Syn_Gmax_initial ( 1 x4 , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivity4celldemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivity4celldemo.m/#directionselectivity4celldemo","text":"DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO Enter \"TYPE DIRECTIONSELECTIVITY4CELLDEMO\" to see the code . Input cells : 1 - 4 Cells 1 and 2 are at position 1 , cells 3 and 4 are at position 2. Cells 1 and 3 fire instantly , while cells 2 and 4 have a latency . One can modify the default parameters by passing name / value pairs to the function like this [ MODELEL , DI , UP , DOWN ] = DIRECTIONSELECTIVITY4CELLDEMO ( PARAM1NAME , PARAM1VALUE , ... ) Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between cell 1 , 2 and 3 , 4 lag ( 0.200 ) | Lag of stimulus arrival between cell 1 , cell3 Syn_Gmax_initial ( 1 x4 , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivity4celldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivity4celldemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_GsynAP.m/","text":"directionselectivityNcell_GsynAP \u00b6 INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = DIRECTIONSELECTIVITYNCELL_GSYNAP ( SEARCHRANGE , SIZEINPUTS , RESPONSE , WEIGHT , DIR , PARAM1 , VALUE1 , ...); Determine minimum conducance necessary to generate RESPONSE action potentials in a single sweep over a model generated by DIRECTIONSELECTIVITYNCELLDEMO . By default , RESPONSE is 1. The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . ( Default : [ 0 10e-9 30 ]) SIZEINPUTS is the dimension of the inputs ([ N R ]). By default , SIZEINPUTS is [ 2 2 ]. WEIGHT is a matrix the same size as SIZEINPUTS that will be used to weight the GsynAP across the network . Default value is a matrix the size of SIZEINPUTS that is all 1 ' s . One could specify TRUI ( ONES ( N , R )) to specify that only the upper triangle of the inputs should be connected . DIR is 0 for ' up ' , 1 for ' down ' . ( default 0 ) If empty ([]) is passed for any of the inputs , then the defaults will be used . Examples : % using default parameters : GsynAP = directionselectivityNcell_GsynAP ([],[ 2 2 ],[],[]); % use defaults GsynAP = directionselectivityNcell_GsynAP ([],[ 5 5 ],[],[], 'N' , 5 , 'R' , 5 , ' isi ' , 2 ); See also : DIRECTIONSELECTIVITYNCELLDEMO","title":"directionselectivityNcell_GsynAP"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_GsynAP.m/#directionselectivityncell_gsynap","text":"INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = DIRECTIONSELECTIVITYNCELL_GSYNAP ( SEARCHRANGE , SIZEINPUTS , RESPONSE , WEIGHT , DIR , PARAM1 , VALUE1 , ...); Determine minimum conducance necessary to generate RESPONSE action potentials in a single sweep over a model generated by DIRECTIONSELECTIVITYNCELLDEMO . By default , RESPONSE is 1. The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . ( Default : [ 0 10e-9 30 ]) SIZEINPUTS is the dimension of the inputs ([ N R ]). By default , SIZEINPUTS is [ 2 2 ]. WEIGHT is a matrix the same size as SIZEINPUTS that will be used to weight the GsynAP across the network . Default value is a matrix the size of SIZEINPUTS that is all 1 ' s . One could specify TRUI ( ONES ( N , R )) to specify that only the upper triangle of the inputs should be connected . DIR is 0 for ' up ' , 1 for ' down ' . ( default 0 ) If empty ([]) is passed for any of the inputs , then the defaults will be used . Examples : % using default parameters : GsynAP = directionselectivityNcell_GsynAP ([],[ 2 2 ],[],[]); % use defaults GsynAP = directionselectivityNcell_GsynAP ([],[ 5 5 ],[],[], 'N' , 5 , 'R' , 5 , ' isi ' , 2 ); See also : DIRECTIONSELECTIVITYNCELLDEMO","title":"directionselectivityNcell_GsynAP"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_learning1.m/","text":"directionselectivityNcell_learning1 \u00b6 DIRECTIONSELECTIVITYNCELL_LEARNING1 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_learning1"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_learning1.m/#directionselectivityncell_learning1","text":"DIRECTIONSELECTIVITYNCELL_LEARNING1 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING1 Observe a 4 - input process develop and then lose direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights stdp_params | { 'name1' , 'value1' ,... } extra plasticity parameters | ( for example , { 'tau_plus' , 0.020 , 'tau_minus' , 0.020 } ) synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_learning1"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_learning2.m/","text":"directionselectivityNcell_learning2 \u00b6 DIRECTIONSELECTIVITYNCELL_LEARNING2 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING2 Observe an N - input process develop direction selectivity There is a single feed - forward inhibitory neuron One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights Gmax_initial_inhib ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters synapseparams_inhib | synapse parameters for synapses onto inhibitory cells { 'V_rev' , - 0.080 } | intfireparams | intfire parameters intfireparams_inhib | intfire parameters for inhibitory cell ISyn_Gmax_initial ( 1.5e-9 ) | Intial value of inhibitory cell synapse onto excitatory cell ISyn_change ( 1.05 ) | Multilpicative Change in inhibitory synapse conductance at each iteration ISyn_Max ( Inf ) | Ceiling for I to E weight dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? plasticity_method_inhib ( '' ) Method for inhibitory plasticity unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning2"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_learning2.m/#directionselectivityncell_learning2","text":"DIRECTIONSELECTIVITYNCELL_LEARNING2 OUT = DIRECTIONSELECTIVITYNCELL_LEARNING2 Observe an N - input process develop direction selectivity There is a single feed - forward inhibitory neuron One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING1 ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights Gmax_initial_inhib ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters synapseparams_inhib | synapse parameters for synapses onto inhibitory cells { 'V_rev' , - 0.080 } | intfireparams | intfire parameters intfireparams_inhib | intfire parameters for inhibitory cell ISyn_Gmax_initial ( 1.5e-9 ) | Intial value of inhibitory cell synapse onto excitatory cell ISyn_change ( 1.05 ) | Multilpicative Change in inhibitory synapse conductance at each iteration ISyn_Max ( Inf ) | Ceiling for I to E weight dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? plasticity_method_inhib ( '' ) Method for inhibitory plasticity unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning2"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_learning_thresh.m/","text":"directionselectivityNcell_learning_thresh \u00b6 DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH OUT = DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH Observe an N - input process develop direction selectivity No inhibition , threshold increases after each trial One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING_THRESH ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters { 'V_rev' , - 0.080 } | intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? V_threshold_initial | Starting threshold value ( volts ) ( - 0.055 ) V_threshold_change | Multilpicative change in threshold at each iteration must be < 1 ( 0.95 ) V_threshold_max ( - 0.04 ) | Ceiling output cell threshold can reach mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning_thresh"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_learning_thresh.m/#directionselectivityncell_learning_thresh","text":"DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH OUT = DIRECTIONSELECTIVITYNCELL_LEARNING_THRESH Observe an N - input process develop direction selectivity No inhibition , threshold increases after each trial One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITY4CELL_LEARNING_THRESH ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights classic_stdp ( 1 ) | 0 / 1 use classic stdp N ( 1 ) | Number of different positions R ( 1 ) | Number of different latencies Gmax_initial ( 3e-9 ) | 1 xN * R matrix of initial synaptic weights synapseparams | synapse parameters { 'V_rev' , - 0.080 } | intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ? unidir ( 1 ) | unidirectional trainin ( 1 ) or bi - directional training ( 2 ) ? slow ( 0 ) | Show stimulus at half speed ? V_threshold_initial | Starting threshold value ( volts ) ( - 0.055 ) V_threshold_change | Multilpicative change in threshold at each iteration must be < 1 ( 0.95 ) V_threshold_max ( - 0.04 ) | Ceiling output cell threshold can reach mask ( 1 ) nreps ( 1 ) phase ( [ 1:N ] ) | Phase ?","title":"directionselectivityNcell_learning_thresh"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_random.m/","text":"directionselectivityNcell_random \u00b6 DIRECTIONSELECTIVITYNCELL_RANDOM OUT = DIRECTIONSELECTIVITYNCELL_RANDOM Randomly choose weights for a N - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITYNCELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights Gmax_weightlist ( [] ) | If provided , Gmax will be randomly chosen from this list | Under this condition , Gmax_max and Gmax_min will be | ignored . classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies isi ( 1 ) | Interstimulus interval ( must be long enough ) randomness ( 0 ) | Randomness plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_random"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcell_random.m/#directionselectivityncell_random","text":"DIRECTIONSELECTIVITYNCELL_RANDOM OUT = DIRECTIONSELECTIVITYNCELL_RANDOM Randomly choose weights for a N - input single layer network and calculate direction selectivity One can also adjust the parameters using : OUT = DIRECTIONSELECTIVITYNCELL_RANDOM ( PARAM1NAME , PARAM1VALUE , ...) The following parameters are adjustable ( default value in ()) : --------------------------------------------------------------------- latency ( 0.200 ) | Latency between 1 st and 2 nd columns lag ( 0.200 ) | Lag between stim hitting 1 st and 2 nd rows Gmax_max ( 5e-9 ) | Maximum weights Gmax_min ( 0 ) | Minimum weights Gmax_weightlist ( [] ) | If provided , Gmax will be randomly chosen from this list | Under this condition , Gmax_max and Gmax_min will be | ignored . classic_stdp ( 1 ) | 0 / 1 use classic stdp synapseparams | synapse parameters intfireparams | intfire parameters dt ( 0.0001 ) | time resolution trials ( 100 ) | number of trials N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies isi ( 1 ) | Interstimulus interval ( must be long enough ) randomness ( 0 ) | Randomness plot_as_we_go ( 1 ) | 0 / 1 plot to a figure as we go ?","title":"directionselectivityNcell_random"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo.m/","text":"directionselectivityNcelldemo \u00b6 DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) nreps ( 1 ) | Number of times to repeat plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo.m/#directionselectivityncelldemo","text":"DIRECTIONSELECTIVITY4CELLDEMO - Demo of a 4 input , single layer direction - selective output cell [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params plasticity_method ( '' ) | Synapse plasticity method isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) nreps ( 1 ) | Number of times to repeat plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo ( 'Syn_Gmax_initial' ,[ 0 4 4 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo_inhib.m/","text":"directionselectivityNcelldemo_inhib \u00b6 DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo_inhib.m/#directionselectivityncelldemo_inhib","text":"DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo_inhib_orig.m/","text":"directionselectivityNcelldemo_inhib_orig \u00b6 DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib_orig"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo_inhib_orig.m/#directionselectivityncelldemo_inhib_orig","text":"DIRECTIONSELECTIVITY4CELLDEMO_INHIB - Demo of a 4 input , single layer direction - selective output cell with FF inhibition [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_INHIB Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_INHIB\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) Syn_Gmax_initial_inhib ( 1 xN * R , | Initial synaptic weight of LGN to I connections ( about 75 % of threshold) 4e-9 ) | plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections plasticity_params_inhib ([]) | Synapse plasticity params for I to E connection plasticity_method_inhib ( '' ) | Synapse plasticity method for I to E connection plasticity_params_ffinhib ([]) | Synapse plasticity params for feedforward LGN to I connection plasticity_method_ffinhib ( '' ) | Synapse plasticity method for feedforward LGN to I connection isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init intfireparams_inhib | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init synapseparams_ffI | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init for feedforward connections to I cell synapseparams_inhib | { 'name1' , 'value1' } parameter list of values to pass to inhibitory synapse | default value { 'V_rev' , - 0.080 } ISyn_Gmax_initial | 5.8e-9 slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_inhib ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_inhib ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_inhib_orig"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo_thresh.m/","text":"directionselectivityNcelldemo_thresh \u00b6 DIRECTIONSELECTIVITY4CELLDEMO_thresh - Demo of a N * R input , single layer direction - selective output cell with rising threshold [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_thresh Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_THRESH\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init % synapseparams_ffI | {'name1','value1'} parameter list to pass to synapset1t2el_init for feedforward connections to I cell | default value { 'V_rev' , - 0.080 } V_threshold ( - 0.055 ) | Threshold value ( volts ) slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_thresh"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/directionselectivityNcelldemo_thresh.m/#directionselectivityncelldemo_thresh","text":"DIRECTIONSELECTIVITY4CELLDEMO_thresh - Demo of a N * R input , single layer direction - selective output cell with rising threshold [ MODELEL , DI , R_UP , R_DOWN ] = DIRECTIONSELECTIVITYNCELLDEMO_thresh Enter \"TYPE DIRECTIONSELECTIVITYNCELLDEMO_THRESH\" to see the code . One can modify the default parameters by passing name / value pairs to the function like this Default parameters are as follows : ---------------------------------------------------------------------- dt ( 1e-4 ) | Step size of model latency ( 0.200 ) | Latency of between rows lag ( 0.200 ) | Lag of stimulus arrival at different positions N ( 2 ) | Number of different positions R ( 2 ) | Number of different latencies randomness ( 0 ) | Coefficient of gaussian random noise that is added to lag , latency | Note that the random value , once chosen , is used consistently each time | a visual stimulus is presented . Syn_Gmax_initial ( 1 xN * R , 4e-9 ) | Initial synaptic weight ( about 75 % of threshold) plasticity_params ([]) | Synapse plasticity params for LGN to E ctx connections plasticity_method ( '' ) | Synapse plasticity method for LGN to E ctx connections isi ( 0.75 ) | Inter - stimulus - interval ( seconds ) plotit ( 1 ) | 0 / 1 should we plot the behavior in a new figure ? simit ( 1 ) | 0 / 1 Actually do simulation ( 1 ) or just build model ( 0 ) ? simup ( 1 ) | 0 / 1 Actually simulate upward direction ( 1 ) ? simdown ( 1 ) | 0 / 1 Actually simulate downward direction ( 1 ) ? intfireparams | { 'name1' , 'value1' } parameter list to pass to intfireleakyel_init synapseparams | { 'name1' , 'value1' } parameter list to pass to synapset1t2el_init % synapseparams_ffI | {'name1','value1'} parameter list to pass to synapset1t2el_init for feedforward connections to I cell | default value { 'V_rev' , - 0.080 } V_threshold ( - 0.055 ) | Threshold value ( volts ) slow ( 0 ) | Show stimulus at half speed ? mask ( 1 ) | Mask out any input cells ? phase ([ 1 : N ]) | Order in which to move bar to different positions ( default 1 , 2 , 3 , etc ) Outputs : MODELEL is the model produced by the function . DI is ( R_UP - R_DOWN ) / ( R_UP + R_DOWN ), note this is - 1 to 1 R_UP is response to upward direction R_DOWN is response to downward direction Examples : % a totally non-direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ; % a direction-selective model [ mel , di , rup , rdown ]= directionselectivityNcelldemo_thresh ( 'Syn_Gmax_initial' ,[ 0 5 5 0 ] * 1e-9 ); % a 3 by 3 cell model [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 3 , 'R' , 3 , 'isi' , 1 ); % a 10 position by 3 latency cell model: [ mod , di , r_up , r_down ] = directionselectivityNcelldemo_thresh ( 'N' , 10 , 'R' , 3 , 'isi' , 3 ); See also: INTFIRELEAKY_SYNAPSEDEMO","title":"directionselectivityNcelldemo_thresh"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_GsynAP.m/","text":"intfireleaky_GsynAP \u00b6 INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine minimum current necessary to generate a single action potential in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The default synapse is a SYNAPSET1T2EL_INIT . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . Examples : % using default intfire and synapse GsynAP = intfireleaky_GsynAP ([],[],[],[]) % use defaults GsynAP = intfireleaky_GsynAP ([], synapset1t2el_init ( 'tau2' , 0.200 ),[],[]) See also : INTFIRELEAKYEL_INIT , SYNAPSET1T2EL_INIT","title":"intfireleaky_GsynAP"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_GsynAP.m/#intfireleaky_gsynap","text":"INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP GSYNAP = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine minimum current necessary to generate a single action potential in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The default synapse is a SYNAPSET1T2EL_INIT . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be searched between MIN and MAX in a binary search fashion of STEPS number of steps . Examples : % using default intfire and synapse GsynAP = intfireleaky_GsynAP ([],[],[],[]) % use defaults GsynAP = intfireleaky_GsynAP ([], synapset1t2el_init ( 'tau2' , 0.200 ),[],[]) See also : INTFIRELEAKYEL_INIT , SYNAPSET1T2EL_INIT","title":"intfireleaky_GsynAP"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_Gsyn_vs_F.m/","text":"intfireleaky_Gsyn_vs_F \u00b6 INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP [ GSYN , F ] = INTFIRELEAKY_GSYN_VS_F ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine number of action potentials generated by various synaptic input conductances in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be explored between MIN and MAX in STEPS number of steps . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT , INTFIRELEAKY_GSYNAP","title":"intfireleaky_Gsyn_vs_F"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_Gsyn_vs_F.m/#intfireleaky_gsyn_vs_f","text":"INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP [ GSYN , F ] = INTFIRELEAKY_GSYN_VS_F ( INTFIREEL , SYNAPSEEL , SEARCHTIME , SEARCHRANGE ) Determine number of action potentials generated by various synaptic input conductances in an integrate and fire neuron modelel INTFIRE and a synapse to be connected called SYNAPSEEL . The program will step from time 0 to time SEARCHTIME to see if an action potential is generated . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain . The conductance values will be explored between MIN and MAX in STEPS number of steps . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT , INTFIRELEAKY_GSYNAP","title":"intfireleaky_Gsyn_vs_F"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_SynMemTau.m/","text":"intfireleaky_SynMemTau \u00b6 INTFIRELEAKY_SynMemTau - Empirically determine combined tau of synapse and membrane TAU = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL ) Determine time it takes for a subthreshold input to return to 1 / exp ( 1 ) of baseline value . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT","title":"intfireleaky_SynMemTau"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_SynMemTau.m/#intfireleaky_synmemtau","text":"INTFIRELEAKY_SynMemTau - Empirically determine combined tau of synapse and membrane TAU = INTFIRELEAKY_GSYNAP ( INTFIREEL , SYNAPSEEL ) Determine time it takes for a subthreshold input to return to 1 / exp ( 1 ) of baseline value . If INTFIREEL and SYNAPSEEL are empty , defaults will be used . See also : INTFIRELEAKYEL_INIT , SYNAPSEEL_INIT","title":"intfireleaky_SynMemTau"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_currentdemo.m/","text":"intfireleaky_currentdemo \u00b6 INTFIRELEAKY_CURRENTDEMO - Demo a leaky integrate and fire neuron Demonstrate a leaky integrate and fire neuron with constant current input . Plots a graph of voltage vs . time and outlines spike times with circles . See the code : type INTFIRELEAKY_CURRENTDEMO","title":"intfireleaky_currentdemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_currentdemo.m/#intfireleaky_currentdemo","text":"INTFIRELEAKY_CURRENTDEMO - Demo a leaky integrate and fire neuron Demonstrate a leaky integrate and fire neuron with constant current input . Plots a graph of voltage vs . time and outlines spike times with circles . See the code : type INTFIRELEAKY_CURRENTDEMO","title":"intfireleaky_currentdemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_synapsedemo.m/","text":"intfireleaky_synapsedemo \u00b6 INTFIRELEAKY_SYNAPSEDEMO - Demo a leaky integrate and fire neuron with synaptic input Demonstrate a leaky integrate and fire neuron with a synaptic input Plots a graph of voltage vs. time and outlines spike times with circles. See the code: type INTFIRELEAKY_SYNAPSEDEMO","title":"intfireleaky_synapsedemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/intfireleaky_synapsedemo.m/#intfireleaky_synapsedemo","text":"INTFIRELEAKY_SYNAPSEDEMO - Demo a leaky integrate and fire neuron with synaptic input Demonstrate a leaky integrate and fire neuron with a synaptic input Plots a graph of voltage vs. time and outlines spike times with circles. See the code: type INTFIRELEAKY_SYNAPSEDEMO","title":"intfireleaky_synapsedemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/plotdirectionselectivity4cell.m/","text":"plotdirectionselectivity4cell \u00b6 PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/plotdirectionselectivity4cell.m/#plotdirectionselectivity4cell","text":"PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/plotdirectionselectivity4cell_thresh.m/","text":"plotdirectionselectivity4cell_thresh \u00b6 PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell_thresh"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/plotdirectionselectivity4cell_thresh.m/#plotdirectionselectivity4cell_thresh","text":"PLOTDIRECTIONSELECTIVITY4CELL - Plot the output of the 4 cell simulation PLOTDIRECTIONSELECTIVITY4CELL ( OUT ) Plots the output of DIRECTIONSELECTIVITY4CELL_LEARNING1 to the current figure . Note that the current figure is cleared before plotting . If SIMENDPOINT is 1 , then the endpoint condition is simulated . See also : DIRECTIONSELECTIVITY4CELL_LEARNING1","title":"plotdirectionselectivity4cell_thresh"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/synapseel_stdpdemo.m/","text":"synapseel_stdpdemo \u00b6 SYNAPSEEEL_STDPDEMO - Demo of classic STDP at a synapset1t2 synapse Enter \"TYPE SYNAPSEEL_STDPDEMO\" to see the code. See also: SYNAPSET1T2EL_INIT","title":"synapseel_stdpdemo"},{"location":"reference/not_packaged/archived_code/modelel/modeleldemo/synapseel_stdpdemo.m/#synapseel_stdpdemo","text":"SYNAPSEEEL_STDPDEMO - Demo of classic STDP at a synapset1t2 synapse Enter \"TYPE SYNAPSEEL_STDPDEMO\" to see the code. See also: SYNAPSET1T2EL_INIT","title":"synapseel_stdpdemo"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_convertforc.m/","text":"modelel_convertforc \u00b6 MODELEL_CONVERTFORC - Convert a modelel structure into a format that can be parsed by the C ++ implementation MODELELOUT = MODELEL_CONVERTFORC ( MODELEL , VARS ) Converts the structure representation that is used for MATLAB ( see help MODELEL ) into a format suitable for C ++. VARS is the list of state variables to track . It is expected that this is in the same format as the argument to modelel_run : { 'modelrunstruct.Model_Initial_Structure(1).T' }","title":"modelel_convertforc"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_convertforc.m/#modelel_convertforc","text":"MODELEL_CONVERTFORC - Convert a modelel structure into a format that can be parsed by the C ++ implementation MODELELOUT = MODELEL_CONVERTFORC ( MODELEL , VARS ) Converts the structure representation that is used for MATLAB ( see help MODELEL ) into a format suitable for C ++. VARS is the list of state variables to track . It is expected that this is in the same format as the argument to modelel_run : { 'modelrunstruct.Model_Initial_Structure(1).T' }","title":"modelel_convertforc"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_convertfromc.m/","text":"modelel_convertfromc \u00b6 MODELEL_CONVERTFROMC - Convert the text string output of the executable file to a Matlab modelel MODELELSTRUCT = MODELEL_CONVERTFROMC ( DESC_STR ) Given a full , multi - line string , converts to Matlab structures . Example input : eol = sprintf ( ' \\n ' ); % end of line character desc_str = [ '0:' eol ... % first element 'type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0001' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it '1: ' eol ... 'Type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0002' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it ];","title":"modelel_convertfromc"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_convertfromc.m/#modelel_convertfromc","text":"MODELEL_CONVERTFROMC - Convert the text string output of the executable file to a Matlab modelel MODELELSTRUCT = MODELEL_CONVERTFROMC ( DESC_STR ) Given a full , multi - line string , converts to Matlab structures . Example input : eol = sprintf ( ' \\n ' ); % end of line character desc_str = [ '0:' eol ... % first element 'type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0001' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it '1: ' eol ... 'Type: spiketimelistel' eol ... % indicates type 'index: 1' eol ... % the element number 'modelel: <' eol ... % indicates that the variables associated with the modelel are coming next 'T: 0' eol ... % indicates that the variable 'T' has a value of 0 'dT: 0.0001' eol ... % indicates that the variable dT has a value of 0.0001 'name: cell1' eol ... % name is 'cell1' '>' eol ... % end 'modelel' 'spiketimelistel: < ' eol ... % variables specific to class spiketimelistel coming next 'spiketimelist: 0.0002' eol ... % list of spike times '>' eol ... % indicate end of subobject eol ... % blank line ends it ];","title":"modelel_convertfromc"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_importvariables.m/","text":"modelel_importvariables \u00b6 MODELEL_IMPORTVARIABLES - Import variable values from the external C modelel simulator OUT = MODELEL_IMPORTVARIABLES ( FILENAME , MODELELSTRUCT , VARS ) Returns the values of the output variables that were requested . Reads these values from the file FILENAME . VARS are the Matlab variable names that were requested . See also : MODELELRUN","title":"modelel_importvariables"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_importvariables.m/#modelel_importvariables","text":"MODELEL_IMPORTVARIABLES - Import variable values from the external C modelel simulator OUT = MODELEL_IMPORTVARIABLES ( FILENAME , MODELELSTRUCT , VARS ) Returns the values of the output variables that were requested . Reads these values from the file FILENAME . VARS are the Matlab variable names that were requested . See also : MODELELRUN","title":"modelel_importvariables"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_runvarname2log.m/","text":"modelel_runvarname2log \u00b6 MODELEL_RUNVARNAME2LOG - Convert a variable name output for the C version [ ELEMENT , STRING ] = MODELEL_RUNVARNAME2LOG ( VARNAME ) Looks at the VARNAME string and identifies the element number that is operated upon ( returned as an integer in ELEMENT ) and the string of the variable name .","title":"modelel_runvarname2log"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelel_runvarname2log.m/#modelel_runvarname2log","text":"MODELEL_RUNVARNAME2LOG - Convert a variable name output for the C version [ ELEMENT , STRING ] = MODELEL_RUNVARNAME2LOG ( VARNAME ) Looks at the VARNAME string and identifies the element number that is operated upon ( returned as an integer in ELEMENT ) and the string of the variable name .","title":"modelel_runvarname2log"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelelrun.m/","text":"modelelrun \u00b6 MODELELRUN - Run a set of model elements modelel MODELELRUNSTRUCT = MODELELRUN ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step Verbose ( 10000 ) | Prints a comment every N steps ; use Inf to disable UseExecutable ( 0 ) | Uses an external function","title":"modelelrun"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelelrun.m/#modelelrun","text":"MODELELRUN - Run a set of model elements modelel MODELELRUNSTRUCT = MODELELRUN ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step Verbose ( 10000 ) | Prints a comment every N steps ; use Inf to disable UseExecutable ( 0 ) | Uses an external function","title":"modelelrun"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelelrun_executable.m/","text":"modelelrun_executable \u00b6 MODELELRUN_EXECUTABLE - Run a set of model elements modelel using external executable MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step","title":"modelelrun_executable"},{"location":"reference/not_packaged/archived_code/modelel/modelelrun/modelelrun_executable.m/#modelelrun_executable","text":"MODELELRUN_EXECUTABLE - Run a set of model elements modelel using external executable MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL ) Runs a model that is composed of a list of modelel . The default parameters of the model can be altered by calling the form : MODELELRUNSTRUCT = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) If a second output variable is provided , then the variables that are stored to disk ( if Directory isn 't empty) are also returned in VARS. The values are long doubles in a NUMBER_OF_VARIABLES by NUMBER_OF_STEPS array . [ MODELELRUNSTRUCT , VARS ] = MODELELRUN_EXECUTABLE ( MODELEL , PARAM1NAME , PARAM1VALUE , ... ) MODELRUN structure elements / model parameters ( defaults in parenthesis ): ------------------------------------------------------------------- RandomSeed ( structure ) | Info on Matlab version and random seed . version | Output of the ver ( 'Matlab' ) command . RandomSeed | The random seed Model_Initial_Structure ( modelel ) | Initial structure of the model Model_Final_Structure ( modelel ) | Final structure of the model Steps ( 100 ) | Number of steps to run Directory ( '' ) | Directory where data is to be | saved ( '' for none ) Comment ( '' ) | Comment on what this simulation is Variables ({}) | Variables that are saved | These are a cell list with one variable per row . | The variable should be specified as a subfield of | the variable modelrunstruct . For example , to grab | the time ( 'T' ) parameter of the first element , use | { 'modelrunstruct.Model_Initial_Structure(1).T' } . | In the second column , one can optionally provide a | variable name . | These variables are written to the file | variables . bin , 1 long double per variable , | one variable per time step","title":"modelelrun_executable"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/isspiking.m/","text":"isspiking \u00b6 ISSPIKING - Is a NEURONMODELEL neuron spiking right now ? B = ISSPIKING ( NEURONMODELEL ) Returns 1 if the neuronmodelel has exhibited a spike between now and the last time step ( that is , in the interval ( neuronmodelel . T - neuronmodelel . dT , neuronmodelel . T ] ) , and 0 otherwise . A list of valid neuron model types is available by typing NEURONMODELEL See also : NEURONMODELEL","title":"isspiking"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/isspiking.m/#isspiking","text":"ISSPIKING - Is a NEURONMODELEL neuron spiking right now ? B = ISSPIKING ( NEURONMODELEL ) Returns 1 if the neuronmodelel has exhibited a spike between now and the last time step ( that is , in the interval ( neuronmodelel . T - neuronmodelel . dT , neuronmodelel . T ] ) , and 0 otherwise . A list of valid neuron model types is available by typing NEURONMODELEL See also : NEURONMODELEL","title":"isspiking"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/neuronmodelel.m/","text":"neuronmodelel \u00b6 NEURONMODELEL - A list of neuron model element classes LIST = NEURONMODELEL This is a list of neuron models that can be used with the NEURONMODEL class of functions. ----------------------------------------------------------- 'spiketimelistel' | No model, just a list of spike times 'intfireleakyel' | Leaky integrate and fire neuron | (see HELP INTFIRELEAKY_INIT)","title":"neuronmodelel"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/neuronmodelel.m/#neuronmodelel","text":"NEURONMODELEL - A list of neuron model element classes LIST = NEURONMODELEL This is a list of neuron models that can be used with the NEURONMODEL class of functions. ----------------------------------------------------------- 'spiketimelistel' | No model, just a list of spike times 'intfireleakyel' | Leaky integrate and fire neuron | (see HELP INTFIRELEAKY_INIT)","title":"neuronmodelel"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/intfiremodels/intfireleakyel_init.m/","text":"intfireleakyel_init \u00b6 INTFIRELEAKY_INIT - Initialize a leaky integrate and fire neuron INTFIRELEAKYEL = INTFIRELEAKYel_INIT or INTFIRELEAKYEL = INTFIRELEAKYel_INIT ( 'param1name' , param1value , ... ); Returns a MODELEL structure ( see MODELEL_INIT ) for a leaky integrate and fire neuron . One can modify the default parameters of both the INTFIRE structure and the inherited parameters in MODELEL by passing name / value pairs as input arguments . The parameters in the structure are as follows : INTFIRE structure : ------------------------------------------------------- Ie ( 0 ) | Any electrode current ( Amps ) V ( - 0.075 ) | The current voltage ( volts ) V_leak ( default - 0.075 ) | Leak potential ( volts ) Rm ( 10e6 ) | Input resistance ( Ohms ) Taum ( 10e-3 ) | Membrane time constant ( seconds ) Area ( 0.1 ) | Area ( mm ^ 2 ; for calculating specific resistance ) V_reset ( - 0.080 ) | Reset potential ( volts ) V_threshold ( - 0.055 ) | Threshold value ( volts ) synapse_list ([]) | List of modelel numbers that correspond to synapses spiketimes ([]) | List of spike times V_spike ( 0.010 ) | Potential the neuron rises to upon spiking type ( 'intfireleakyel' ) | Must be the string 'intfireleakyel' See HELP MODELEL for the generic model element parameters .","title":"intfireleakyel_init"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/intfiremodels/intfireleakyel_init.m/#intfireleakyel_init","text":"INTFIRELEAKY_INIT - Initialize a leaky integrate and fire neuron INTFIRELEAKYEL = INTFIRELEAKYel_INIT or INTFIRELEAKYEL = INTFIRELEAKYel_INIT ( 'param1name' , param1value , ... ); Returns a MODELEL structure ( see MODELEL_INIT ) for a leaky integrate and fire neuron . One can modify the default parameters of both the INTFIRE structure and the inherited parameters in MODELEL by passing name / value pairs as input arguments . The parameters in the structure are as follows : INTFIRE structure : ------------------------------------------------------- Ie ( 0 ) | Any electrode current ( Amps ) V ( - 0.075 ) | The current voltage ( volts ) V_leak ( default - 0.075 ) | Leak potential ( volts ) Rm ( 10e6 ) | Input resistance ( Ohms ) Taum ( 10e-3 ) | Membrane time constant ( seconds ) Area ( 0.1 ) | Area ( mm ^ 2 ; for calculating specific resistance ) V_reset ( - 0.080 ) | Reset potential ( volts ) V_threshold ( - 0.055 ) | Threshold value ( volts ) synapse_list ([]) | List of modelel numbers that correspond to synapses spiketimes ([]) | List of spike times V_spike ( 0.010 ) | Potential the neuron rises to upon spiking type ( 'intfireleakyel' ) | Must be the string 'intfireleakyel' See HELP MODELEL for the generic model element parameters .","title":"intfireleakyel_init"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/intfiremodels/intfireleakyel_step.m/","text":"intfireleakyel_step \u00b6 INTFIRELEAKYEL_STEP - Compute a time step of an integrate and fire neuron modelel INTFIRE = INTFIRELEAKYEL_STEP ( INTFIREMODELEL , MODELSTRUCT ) Given a model leaky integrate and fire neurons in INTFIRE , and a full list of model elements MODELSTRUCT , calculate the voltage at the next step . INTFIRE is a structure describing a leaky integrate and fire neuron : -------------------------------------------------------------------- V_leak | Leak potential ( volts ) Rm | Input resistance ( Ohms ) Taum | Membrane time constant ( seconds ) Area | Membrane area ( mm ^ 2 ) V_reset | Reset potential ( volts ) V_threshold | Threshold value ( volts ) V | The current voltage ( volts , updated here ) synapse_list | List of modelel numbers in MODELSTRUCT that | correspond to synapses of this neuron spiketimes | The spike times of the | intfire neuron ( seconds , updated here ) V_spike | The voltage the neuron produces upon spiking","title":"intfireleakyel_step"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/intfiremodels/intfireleakyel_step.m/#intfireleakyel_step","text":"INTFIRELEAKYEL_STEP - Compute a time step of an integrate and fire neuron modelel INTFIRE = INTFIRELEAKYEL_STEP ( INTFIREMODELEL , MODELSTRUCT ) Given a model leaky integrate and fire neurons in INTFIRE , and a full list of model elements MODELSTRUCT , calculate the voltage at the next step . INTFIRE is a structure describing a leaky integrate and fire neuron : -------------------------------------------------------------------- V_leak | Leak potential ( volts ) Rm | Input resistance ( Ohms ) Taum | Membrane time constant ( seconds ) Area | Membrane area ( mm ^ 2 ) V_reset | Reset potential ( volts ) V_threshold | Threshold value ( volts ) V | The current voltage ( volts , updated here ) synapse_list | List of modelel numbers in MODELSTRUCT that | correspond to synapses of this neuron spiketimes | The spike times of the | intfire neuron ( seconds , updated here ) V_spike | The voltage the neuron produces upon spiking","title":"intfireleakyel_step"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/spiketimelistel/spiketimelistel_init.m/","text":"spiketimelistel_init \u00b6 SPIKETIMELISTEL_INIT - Initialize a spiketimelistel model SPIKETIMELIST = SPIKETIMELISTEL_INIT or SPIKETIMELIST = SPIKETIMELISTEL_INIT ( PARAM1NAME , PARAM1VALUE , ... ) Creates a SPIKETIMELISTEL model . A default model is created unless parameters are modified by passing name , value pairs . Name / parameter values will be passed along to the modelel class as well . The spiketimelistel parameters : ------------------------------------------------------- spiketimes ( [] ) | Spike times of the neuron ( seconds ) , can assume sorted type ( 'spiketimelistel' ) | Type : must be 'spiketimelistel' ( not modifiable ) See HELP SPIKETIMELIST for a list of valid neuron model types .","title":"spiketimelistel_init"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/spiketimelistel/spiketimelistel_init.m/#spiketimelistel_init","text":"SPIKETIMELISTEL_INIT - Initialize a spiketimelistel model SPIKETIMELIST = SPIKETIMELISTEL_INIT or SPIKETIMELIST = SPIKETIMELISTEL_INIT ( PARAM1NAME , PARAM1VALUE , ... ) Creates a SPIKETIMELISTEL model . A default model is created unless parameters are modified by passing name , value pairs . Name / parameter values will be passed along to the modelel class as well . The spiketimelistel parameters : ------------------------------------------------------- spiketimes ( [] ) | Spike times of the neuron ( seconds ) , can assume sorted type ( 'spiketimelistel' ) | Type : must be 'spiketimelistel' ( not modifiable ) See HELP SPIKETIMELIST for a list of valid neuron model types .","title":"spiketimelistel_init"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/spiketimelistel/spiketimelistel_step.m/","text":"spiketimelistel_step \u00b6 SPIKETIMELISTEL_STEP - Performs no operation SPIKETIMELISTEL = SPIKETIMELISTEL_STEP(SPIKETIMELISTEL, MODELSTRUCT) Just adds dT T.","title":"spiketimelistel_step"},{"location":"reference/not_packaged/archived_code/modelel/neuronmodelel/spiketimelistel/spiketimelistel_step.m/#spiketimelistel_step","text":"SPIKETIMELISTEL_STEP - Performs no operation SPIKETIMELISTEL = SPIKETIMELISTEL_STEP(SPIKETIMELISTEL, MODELSTRUCT) Just adds dT T.","title":"spiketimelistel_step"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/modelelgetsyn.m/","text":"modelelgetsyn \u00b6 MODELELGETSYN - Return element number of synapses among particular neurons SYN_NUMS = MODELELGETSYN ( MODELEL , PRELIST , POSTLIST ) Return the model elements that correspond to synapses between elements PRELIST and POSTLIST . SYN_NUMS ( i ) will be the synapse between PRELIST ( i ) and POSTLIST ( i ) , if they are both present and have a synapse . Otherwise , the SYN_NUMS ( i ) will be NaN ;","title":"modelelgetsyn"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/modelelgetsyn.m/#modelelgetsyn","text":"MODELELGETSYN - Return element number of synapses among particular neurons SYN_NUMS = MODELELGETSYN ( MODELEL , PRELIST , POSTLIST ) Return the model elements that correspond to synapses between elements PRELIST and POSTLIST . SYN_NUMS ( i ) will be the synapse between PRELIST ( i ) and POSTLIST ( i ) , if they are both present and have a synapse . Otherwise , the SYN_NUMS ( i ) will be NaN ;","title":"modelelgetsyn"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/modelelsynconn.m/","text":"modelelsynconn \u00b6 MODELELSYNCONN - Make synaptic connections among modelel elements MODEL = MODELELSYNCONN ( MODEL , INDS , W , PROTOSYN ) PROTOSYN can be a prototpe synapse or the number of a modelel element in MODEL that should serve as a prototype synapse . INDS is the subset of the modelel elements to operate on for connecting . For example , if the neurons in your model are 1 2 3 , you might set INDS to [ 1 2 3 ]. ( This way you don 't have to specify weights of connections between elements that are not numbered 1 2 3). W(i,j) should be the weight of the synaptic connection from element INDS(i) to element INDS(j). If 2 elements are not to be connected, then NaN should be passed as the weight.","title":"modelelsynconn"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/modelelsynconn.m/#modelelsynconn","text":"MODELELSYNCONN - Make synaptic connections among modelel elements MODEL = MODELELSYNCONN ( MODEL , INDS , W , PROTOSYN ) PROTOSYN can be a prototpe synapse or the number of a modelel element in MODEL that should serve as a prototype synapse . INDS is the subset of the modelel elements to operate on for connecting . For example , if the neurons in your model are 1 2 3 , you might set INDS to [ 1 2 3 ]. ( This way you don 't have to specify weights of connections between elements that are not numbered 1 2 3). W(i,j) should be the weight of the synaptic connection from element INDS(i) to element INDS(j). If 2 elements are not to be connected, then NaN should be passed as the weight.","title":"modelelsynconn"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/plasticity_methods/synapseel_stdp.m/","text":"synapseel_stdp \u00b6 SYNAPSEEL_CLASSICSTDP - Apply classic stdp to a SYNAPSEEL synapse SYNAPSEEL = SYNAPSEEL_STDP ( SYNAPSEEL , MODELSTRUCT ) Apply stdp to a SYNAPSEEL object . This requires that the SYNAPSEEL object have a field 'plasticity_params' with several fields : -------------------------------------------------------------------------- Gmax_max | The maximum value that the maximum conductance can take | ( that is , a ceiling value ) . Use Inf for none . Gmax_min | The minimum value that the maximum conductance can take | ( that is , a floor value ) . Use - Inf for none . classic_stdp | 0 / 1 should we use classic stdp or triplet stdp ? params | { 'name1,' value1 ',...} parameters to pass along to | stdp_apply or stdp_triplet_apply (optional) See also: SYNAPSEEL_INIT","title":"synapseel_stdp"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/plasticity_methods/synapseel_stdp.m/#synapseel_stdp","text":"SYNAPSEEL_CLASSICSTDP - Apply classic stdp to a SYNAPSEEL synapse SYNAPSEEL = SYNAPSEEL_STDP ( SYNAPSEEL , MODELSTRUCT ) Apply stdp to a SYNAPSEEL object . This requires that the SYNAPSEEL object have a field 'plasticity_params' with several fields : -------------------------------------------------------------------------- Gmax_max | The maximum value that the maximum conductance can take | ( that is , a ceiling value ) . Use Inf for none . Gmax_min | The minimum value that the maximum conductance can take | ( that is , a floor value ) . Use - Inf for none . classic_stdp | 0 / 1 should we use classic stdp or triplet stdp ? params | { 'name1,' value1 ',...} parameters to pass along to | stdp_apply or stdp_triplet_apply (optional) See also: SYNAPSEEL_INIT","title":"synapseel_stdp"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/synapset1t2el/synapset1t2el_init.m/","text":"synapset1t2el_init \u00b6 SYNAPSET1T2EL_INIT - Initialize a new synapset1t2el object Conductance after each presynaptic spike is modeled as G = Gmax * (exp(-deltaT/tau1) - exp(-deltaT/tau2)), where deltaT is the difference between now and all previous spikes SYNAPSET1T2EL parameters are the following: -------------------------------------------------------------- V_rev (0) | Reversal potential (volts) Gmax (10e-9) | Maximal conductance (Siemens) G (0) | The current conductance value (Siemens) tau1 (0.001) | Tau1 (seconds) tau2 (0.050) | Tau2 (seconds) pre ([]) | Modelel number of presynaptic cell post ([]) | Modelel number of postsynaptic cell Tpast_ignore (1) | How long in the past to monitor spikes (seconds) plasticity_method ('') | Plasticity method plasticity_params ([]) | Plasticity method parameters type | Must be 'synapset1t2el' (not editable)","title":"synapset1t2el_init"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/synapset1t2el/synapset1t2el_init.m/#synapset1t2el_init","text":"SYNAPSET1T2EL_INIT - Initialize a new synapset1t2el object Conductance after each presynaptic spike is modeled as G = Gmax * (exp(-deltaT/tau1) - exp(-deltaT/tau2)), where deltaT is the difference between now and all previous spikes SYNAPSET1T2EL parameters are the following: -------------------------------------------------------------- V_rev (0) | Reversal potential (volts) Gmax (10e-9) | Maximal conductance (Siemens) G (0) | The current conductance value (Siemens) tau1 (0.001) | Tau1 (seconds) tau2 (0.050) | Tau2 (seconds) pre ([]) | Modelel number of presynaptic cell post ([]) | Modelel number of postsynaptic cell Tpast_ignore (1) | How long in the past to monitor spikes (seconds) plasticity_method ('') | Plasticity method plasticity_params ([]) | Plasticity method parameters type | Must be 'synapset1t2el' (not editable)","title":"synapset1t2el_init"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/synapset1t2el/synapset1t2el_step.m/","text":"synapset1t2el_step \u00b6 SYNAPSET1T2EL_STEP - Calculate the conductance at a list of synapses SYNAPSET1T2EL = SYNAPSET1T2EL_STEP(SYNAPSET1T2EL, MODELSTRUCT) Given a model synapse SYNAPSET1T2EL, and the full model structure MODELSTRUCT, updates the conductance field. See also: SYNAPSET1T2EL_INIT","title":"synapset1t2el_step"},{"location":"reference/not_packaged/archived_code/modelel/synapseel/synapset1t2el/synapset1t2el_step.m/#synapset1t2el_step","text":"SYNAPSET1T2EL_STEP - Calculate the conductance at a list of synapses SYNAPSET1T2EL = SYNAPSET1T2EL_STEP(SYNAPSET1T2EL, MODELSTRUCT) Given a model synapse SYNAPSET1T2EL, and the full model structure MODELSTRUCT, updates the conductance field. See also: SYNAPSET1T2EL_INIT","title":"synapset1t2el_step"},{"location":"reference/office/addresslabels2pdf.m/","text":"addresslabels2pdf \u00b6 ADDRESSLABELS2PDF - print address labels to a set of PDFs following a template ADDRESSLABELS2PDF ( LABELS , ... ) This prints address labels LABELS to many pieces of figure 'paper' . It follows the template described below . LABELS { i }{:} is a cell array that contains each line of text for each label . This function accepts name / value pairs that modify its default behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- units ( 'inches' ) | The units to use first_label_Y ( 1 . 0 ) | The location of the first label in X first_label_X ( 1 . 5025 ) | The location of the first label in Y dX ( 2 . 75 ) | Offset between columns ( center - to - center ) dY ( 1 ) | Offset between rows ( center - to - center ) ncolumns ( 10 ) | Number of columns per sheet nrows ( 3 ) | Number of rows per sheet | ( These are for Avery Labels 8160 ) fontsize ( 13 ) | Fontsize to use","title":"addresslabels2pdf"},{"location":"reference/office/addresslabels2pdf.m/#addresslabels2pdf","text":"ADDRESSLABELS2PDF - print address labels to a set of PDFs following a template ADDRESSLABELS2PDF ( LABELS , ... ) This prints address labels LABELS to many pieces of figure 'paper' . It follows the template described below . LABELS { i }{:} is a cell array that contains each line of text for each label . This function accepts name / value pairs that modify its default behavior : Parameter ( default ) | Description ------------------------------------------------------------------------- units ( 'inches' ) | The units to use first_label_Y ( 1 . 0 ) | The location of the first label in X first_label_X ( 1 . 5025 ) | The location of the first label in Y dX ( 2 . 75 ) | Offset between columns ( center - to - center ) dY ( 1 ) | Offset between rows ( center - to - center ) ncolumns ( 10 ) | Number of columns per sheet nrows ( 3 ) | Number of rows per sheet | ( These are for Avery Labels 8160 ) fontsize ( 13 ) | Fontsize to use","title":"addresslabels2pdf"},{"location":"reference/office/vcarddata2addresslabels.m/","text":"vcarddata2addresslabels \u00b6 VCARD2LABELS - convert a VCARD file to a structure of label content V = VCARD2LABELS ( VCARDDATA , ... ) Identifies entries of the VCARDDATA ( from VCARD2MAT ) that have the field VFLAG . Then , an address is constructed and saved in the cell array of strings V . Each line of the address is a cell entry in the 2 nd dimension of V ( for example , V { i }{ 2 } is the 2 nd line of the ith address . This function also accepts name / value pairs that modify the default behavior : Parameter ( Default ) | Description -------------------------------------------------------------------------- VFLAG ( 'X-PHONETIC-ORG' ) | If this field is present , then the card should | be included in addresses . ADDRESSTITLELINE | The content of the first line of the address ( 'X-PHONETIC-ORG' ) | ADDRESS ( 'ADR' ) | The field to use to grab the address . If this | string ends the name of the field , it will be | used . ADDRESS_TYPE ( 'HOME' ) | The type of address to use Example : v = vcard2mat ( fname ); vout = vcarddata2addresslabels ( v ); addresslabels2pdf ( vout )","title":"vcarddata2addresslabels"},{"location":"reference/office/vcarddata2addresslabels.m/#vcarddata2addresslabels","text":"VCARD2LABELS - convert a VCARD file to a structure of label content V = VCARD2LABELS ( VCARDDATA , ... ) Identifies entries of the VCARDDATA ( from VCARD2MAT ) that have the field VFLAG . Then , an address is constructed and saved in the cell array of strings V . Each line of the address is a cell entry in the 2 nd dimension of V ( for example , V { i }{ 2 } is the 2 nd line of the ith address . This function also accepts name / value pairs that modify the default behavior : Parameter ( Default ) | Description -------------------------------------------------------------------------- VFLAG ( 'X-PHONETIC-ORG' ) | If this field is present , then the card should | be included in addresses . ADDRESSTITLELINE | The content of the first line of the address ( 'X-PHONETIC-ORG' ) | ADDRESS ( 'ADR' ) | The field to use to grab the address . If this | string ends the name of the field , it will be | used . ADDRESS_TYPE ( 'HOME' ) | The type of address to use Example : v = vcard2mat ( fname ); vout = vcarddata2addresslabels ( v ); addresslabels2pdf ( vout )","title":"vcarddata2addresslabels"},{"location":"reference/optics/ideal_optical_transfer_function.m/","text":"ideal_optical_transfer_function \u00b6 IDEAL_OPTICAL_TRANSFER_FUNCTION - ideal optical transfer function as a function of spatial frequency OTF_VALUE = IDEAL_OPTICAL_TRANSFER_FUNCTION ( V ) Computes the optical transfer function of an ideal diffraction-limited imaging system : OTF_VALUE = 2 / pi * ( acos ( abs ( v )) - abs ( v ).* sqrt ( 1-v .* v )) V is the spatial frequency , relative to the high spatial frequency cut off V_cutoff ( V_cutoff := 1 ). From Wikipedia : Example : v = 0 : 0 . 001 : 1 ; otf = ideal_optical_transfer_function ( v ); figure ; plot ( v , otf ); xlabel ( 'Spatial frequency (relative to max cut-off)' ); ylabel ( 'Contrast' );","title":"ideal_optical_transfer_function"},{"location":"reference/optics/ideal_optical_transfer_function.m/#ideal_optical_transfer_function","text":"IDEAL_OPTICAL_TRANSFER_FUNCTION - ideal optical transfer function as a function of spatial frequency OTF_VALUE = IDEAL_OPTICAL_TRANSFER_FUNCTION ( V ) Computes the optical transfer function of an ideal diffraction-limited imaging system : OTF_VALUE = 2 / pi * ( acos ( abs ( v )) - abs ( v ).* sqrt ( 1-v .* v )) V is the spatial frequency , relative to the high spatial frequency cut off V_cutoff ( V_cutoff := 1 ). From Wikipedia : Example : v = 0 : 0 . 001 : 1 ; otf = ideal_optical_transfer_function ( v ); figure ; plot ( v , otf ); xlabel ( 'Spatial frequency (relative to max cut-off)' ); ylabel ( 'Contrast' );","title":"ideal_optical_transfer_function"},{"location":"reference/optics/optics_tables/luminous_efficacy.m/","text":"luminous_efficacy \u00b6 LUMINOUS_EFFICACY - The luminous efficacy ( in lm / watt ) vs . wavelength VL = LUMINOUS_EFFICACY ( WAVELENGTHS ) or VL = LUMINOUS_EFFICACY ( WAVELENGTHS , SCOTOPIC ) Returns the luminous efficacy for the requested WAVELENGTHS ( in nm ) . If the second argument SCOTOPIC is provided and it is 1 , then the scotopic ( dark vision / rod vision ) values are returned . Otherwise , PHOTOTOPIC vision ( light vision ) values are provided . The luminous efficacy is the conversion factor between radiated light energy in watts and the brightness as experienced by the human visual system , which has units of lumens . For example , if you have a 5 mW laser beam at 680 nm , the luminous flux is lf = ( 0 . 005 W ) * luminous_efficacy ( 680 ) ( lm / watt ) = 0 . 0581 lm If you have a 5 mW laser beam at 630 nm , the luminous flux is lf = ( 0 . 005 W ) * luminous_efficacy ( 630 ) ( lm / watt ) = 0 . 9050 lm The latter is better because 630 nm has a stronger overlap with visual perception . Note : Values of VL for wavelengths < 380 nm and greater than 770 nm will be 0 by default . Source : http : // hyperphysics . phy - astr . gsu . edu / hbase / vision / efficacy . html Their source : Williamson & Cummins , Light and Color in Nature and Art , Wiley , 1983 .","title":"luminous_efficacy"},{"location":"reference/optics/optics_tables/luminous_efficacy.m/#luminous_efficacy","text":"LUMINOUS_EFFICACY - The luminous efficacy ( in lm / watt ) vs . wavelength VL = LUMINOUS_EFFICACY ( WAVELENGTHS ) or VL = LUMINOUS_EFFICACY ( WAVELENGTHS , SCOTOPIC ) Returns the luminous efficacy for the requested WAVELENGTHS ( in nm ) . If the second argument SCOTOPIC is provided and it is 1 , then the scotopic ( dark vision / rod vision ) values are returned . Otherwise , PHOTOTOPIC vision ( light vision ) values are provided . The luminous efficacy is the conversion factor between radiated light energy in watts and the brightness as experienced by the human visual system , which has units of lumens . For example , if you have a 5 mW laser beam at 680 nm , the luminous flux is lf = ( 0 . 005 W ) * luminous_efficacy ( 680 ) ( lm / watt ) = 0 . 0581 lm If you have a 5 mW laser beam at 630 nm , the luminous flux is lf = ( 0 . 005 W ) * luminous_efficacy ( 630 ) ( lm / watt ) = 0 . 9050 lm The latter is better because 630 nm has a stronger overlap with visual perception . Note : Values of VL for wavelengths < 380 nm and greater than 770 nm will be 0 by default . Source : http : // hyperphysics . phy - astr . gsu . edu / hbase / vision / efficacy . html Their source : Williamson & Cummins , Light and Color in Nature and Art , Wiley , 1983 .","title":"luminous_efficacy"},{"location":"reference/optics/optics_tables/optics_table.m/","text":"optics_table \u00b6 OPTICS_TABLE - Look up values from a table based on wavelength in nm [ Y , UNITS_STR , DESC_STR ] = OPTICS_TABLE ( WAVELENGTHS , FILENAME ) Reads in a table from the text file FILENAME . If no path is provided , it is assume that FILENAME sits in the same directory as OPTICS_TABLE . The table should have 2 or more columns . The first column is assumed to have the wavelengths in units of nanometers , and columns 2-N have the units to be returned . Each of the N-1 dimensions is interpolated from the table using linear interpolation in INTERP1 . Entries for wavelengths that are outside the bounds provided in the table are 0 . If there are files FILENAME_units . txt and FILENAME_desc . txt in the same directory as FILENAME , then units and a description are read . UNITS_STR is a string that gives human-readable units . DESC_STR is a human-readable description string . If these files are not present , then UNITS_STR and DESC_STR are empty strings . Example : Read in the intensity emissions from the NP510 projector : WAVES = [ 380 : 770 ] '; [ NP510 , NP510_units , NP510_desc ] =optics_table(WAVES,' NP510 . txt '); figure; plot(WAVES,NP510(:,1),' r '); hold on; plot(WAVES,NP510(:,2),' g '); plot(WAVES,NP510(:,3),' b '); xlabel(' Wavelength ( nm ) '); ylabel(' Intensity ( abitrary units ) ' );","title":"optics_table"},{"location":"reference/optics/optics_tables/optics_table.m/#optics_table","text":"OPTICS_TABLE - Look up values from a table based on wavelength in nm [ Y , UNITS_STR , DESC_STR ] = OPTICS_TABLE ( WAVELENGTHS , FILENAME ) Reads in a table from the text file FILENAME . If no path is provided , it is assume that FILENAME sits in the same directory as OPTICS_TABLE . The table should have 2 or more columns . The first column is assumed to have the wavelengths in units of nanometers , and columns 2-N have the units to be returned . Each of the N-1 dimensions is interpolated from the table using linear interpolation in INTERP1 . Entries for wavelengths that are outside the bounds provided in the table are 0 . If there are files FILENAME_units . txt and FILENAME_desc . txt in the same directory as FILENAME , then units and a description are read . UNITS_STR is a string that gives human-readable units . DESC_STR is a human-readable description string . If these files are not present , then UNITS_STR and DESC_STR are empty strings . Example : Read in the intensity emissions from the NP510 projector : WAVES = [ 380 : 770 ] '; [ NP510 , NP510_units , NP510_desc ] =optics_table(WAVES,' NP510 . txt '); figure; plot(WAVES,NP510(:,1),' r '); hold on; plot(WAVES,NP510(:,2),' g '); plot(WAVES,NP510(:,3),' b '); xlabel(' Wavelength ( nm ) '); ylabel(' Intensity ( abitrary units ) ' );","title":"optics_table"},{"location":"reference/paths/pathstr2cellarray.m/","text":"pathstr2cellarray \u00b6 PATHSTR2CELLARRAY - Convert a path string to a cell list of strings PATH_CELLSTR = PATHSTR2CELLARRAY Converts the current path string to a cell list of strings in PATH_CELLSTR . One can also use the constructions : PATH_CELLSTR = PATHSTR2CELLARRAY ( PATHSTR ) to specify a path string other than the current PATH , or PATH_CELLSTR = PATHSTR2CELLARRAY ( PATHSTR , SEPARATOR ) to use a path separator other than the current PATHSEP . Example : Remove all paths that have 'VH_matlab_code' in them path_cellstr = pathstr2cellarray ; matches = strfind ( path_cellstr , 'VH_matlab_code' ); inds = find ( 1 - isempty_cell ( matches )); % find indexes of all matches rmpath ( path_cellstr ( inds )); path_cellstr = pathstr2cellarray ; % update the list to reflect the changes See also : PATH , PATHSEP , ISEMPTY_CELL","title":"pathstr2cellarray"},{"location":"reference/paths/pathstr2cellarray.m/#pathstr2cellarray","text":"PATHSTR2CELLARRAY - Convert a path string to a cell list of strings PATH_CELLSTR = PATHSTR2CELLARRAY Converts the current path string to a cell list of strings in PATH_CELLSTR . One can also use the constructions : PATH_CELLSTR = PATHSTR2CELLARRAY ( PATHSTR ) to specify a path string other than the current PATH , or PATH_CELLSTR = PATHSTR2CELLARRAY ( PATHSTR , SEPARATOR ) to use a path separator other than the current PATHSEP . Example : Remove all paths that have 'VH_matlab_code' in them path_cellstr = pathstr2cellarray ; matches = strfind ( path_cellstr , 'VH_matlab_code' ); inds = find ( 1 - isempty_cell ( matches )); % find indexes of all matches rmpath ( path_cellstr ( inds )); path_cellstr = pathstr2cellarray ; % update the list to reflect the changes See also : PATH , PATHSEP , ISEMPTY_CELL","title":"pathstr2cellarray"},{"location":"reference/pcb/KiCadGerber2OSHPark.m/","text":"KiCadGerber2OSHPark \u00b6 KiCadGerber2OSHPark - Convert KiCad Gerber extensions to OSH Park convention KICADGERBER2OSHPARK ( DIRNAME ) Given a directory name with Gerber files , this function creates a subdirectory 'OSHPark' that has renamed Gerber files whose extensions match that expected by the OSH Park fabrication service . B . Cu . gbr -> B . Cu . gbr . GBL B . Mask . gbr -> B . Mask . gbr . GBS B . SilkS . gbr -> B . SilkS . gbr . GBO F . Cu . gbr -> F . Cu . gbr . GTL F . Mask . gbr -> F . Mask . gbr . GTS F . SilkS . gbr -> F . SilkS . gbr . GTO Edge . Cuts . gbr -> Edge . Cuts . gbr . GKO . drl -> drl . XLN","title":"KiCadGerber2OSHPark"},{"location":"reference/pcb/KiCadGerber2OSHPark.m/#kicadgerber2oshpark","text":"KiCadGerber2OSHPark - Convert KiCad Gerber extensions to OSH Park convention KICADGERBER2OSHPARK ( DIRNAME ) Given a directory name with Gerber files , this function creates a subdirectory 'OSHPark' that has renamed Gerber files whose extensions match that expected by the OSH Park fabrication service . B . Cu . gbr -> B . Cu . gbr . GBL B . Mask . gbr -> B . Mask . gbr . GBS B . SilkS . gbr -> B . SilkS . gbr . GBO F . Cu . gbr -> F . Cu . gbr . GTL F . Mask . gbr -> F . Mask . gbr . GTS F . SilkS . gbr -> F . SilkS . gbr . GTO Edge . Cuts . gbr -> Edge . Cuts . gbr . GKO . drl -> drl . XLN","title":"KiCadGerber2OSHPark"},{"location":"reference/plotting/arrowplot.m/","text":"arrowplot \u00b6 ARROWPLOT - Make a plot of arrow shapes, like quiver H=ARROWPLOT(X,Y,THETA,SCALE, ...) Plots arrows at positions X and Y with directions THETA (in DEGREES) and scale SCALE, according to the properties below, which can be modified by providing additional name/value pairs. The arrow will be rotated to point in THETA (in degrees, cartesian form, so 0 is rightward and angle proceeds counterclockwise). The arrow length and arrowhead length will be scaled by values in SCALE. The name/value pairs that can be specified: Property (default) : Description ------------------------------------------------------- length (1) : Line length linethickness (2) : Line thickness linecolor ([0 0 0]) : Line color (black by default) headangle (30) : Angle of arrowhead sweep back headlength (0.5) : Size of arrowhead length See also: DRAWSHAPE","title":"arrowplot"},{"location":"reference/plotting/arrowplot.m/#arrowplot","text":"ARROWPLOT - Make a plot of arrow shapes, like quiver H=ARROWPLOT(X,Y,THETA,SCALE, ...) Plots arrows at positions X and Y with directions THETA (in DEGREES) and scale SCALE, according to the properties below, which can be modified by providing additional name/value pairs. The arrow will be rotated to point in THETA (in degrees, cartesian form, so 0 is rightward and angle proceeds counterclockwise). The arrow length and arrowhead length will be scaled by values in SCALE. The name/value pairs that can be specified: Property (default) : Description ------------------------------------------------------- length (1) : Line length linethickness (2) : Line thickness linecolor ([0 0 0]) : Line color (black by default) headangle (30) : Angle of arrowhead sweep back headlength (0.5) : Size of arrowhead length See also: DRAWSHAPE","title":"arrowplot"},{"location":"reference/plotting/autohistogram.m/","text":"autohistogram \u00b6 AUTOHISTOGRAM - Choose bins based on Freedman - Diaconis ' choice [COUNTS,BIN_CENTERS, BIN_EDGES, FULLCOUNTS] = AUTOHISTOGRAM(DATA) Automatically chooses bin sizes based on Freedman - Diaconis ' choice, defined to be WIDTH = 2*IQR(DATA)/CUBE ROOT OF NUMBER OF DATAPOINTS (see Histogram on Wikipedia) In the event that the BIN_CENTERS would exceed 100,000 points, then the bins are trimmed at the edges in 1 percentile increments until the number of bins is fewer than 100,000 points. Inputs: DATA, a set of samples Outputs: COUNTS, the number of DATA samples in each bin BIN_CENTERS - the center location of each bin BIN_EDGES - the bin edges used FULLCOUNTS - the full counts returned from HISTC. If the bins were reduced at the edges so that the number of bins is < 100000 then BIN_EDGES and FULLCOUNTS allows the user to determine the number of data points that fall below and above the bins. (See help HISTC)","title":"autohistogram"},{"location":"reference/plotting/autohistogram.m/#autohistogram","text":"AUTOHISTOGRAM - Choose bins based on Freedman - Diaconis ' choice [COUNTS,BIN_CENTERS, BIN_EDGES, FULLCOUNTS] = AUTOHISTOGRAM(DATA) Automatically chooses bin sizes based on Freedman - Diaconis ' choice, defined to be WIDTH = 2*IQR(DATA)/CUBE ROOT OF NUMBER OF DATAPOINTS (see Histogram on Wikipedia) In the event that the BIN_CENTERS would exceed 100,000 points, then the bins are trimmed at the edges in 1 percentile increments until the number of bins is fewer than 100,000 points. Inputs: DATA, a set of samples Outputs: COUNTS, the number of DATA samples in each bin BIN_CENTERS - the center location of each bin BIN_EDGES - the bin edges used FULLCOUNTS - the full counts returned from HISTC. If the bins were reduced at the edges so that the number of bins is < 100000 then BIN_EDGES and FULLCOUNTS allows the user to determine the number of data points that fall below and above the bins. (See help HISTC)","title":"autohistogram"},{"location":"reference/plotting/autoplacetext.m/","text":"autoplacetext \u00b6 AUTOPLACETEXT - Automatically place text within the current axes H = AUTOPLACETEXT(TEXTSTRING) At the present time, this function places the text string TEXTSTRING (which can be a simple string, or a cell list of strings) at the location 80% high, 50% centered, in the current axes. This function could be improved to examine the axes and put the text in a \"non-busy\" location.","title":"autoplacetext"},{"location":"reference/plotting/autoplacetext.m/#autoplacetext","text":"AUTOPLACETEXT - Automatically place text within the current axes H = AUTOPLACETEXT(TEXTSTRING) At the present time, this function places the text string TEXTSTRING (which can be a simple string, or a cell list of strings) at the location 80% high, 50% centered, in the current axes. This function could be improved to examine the axes and put the text in a \"non-busy\" location.","title":"autoplacetext"},{"location":"reference/plotting/cleanfig.m/","text":"cleanfig \u00b6 CLEANFIG - Cleans a figure for saving in guide CLEANFIG ( FIGNUM , UNITS ) Cleans all string entries from 'edit' and 'popup' uitools , and sets units of all uitools to UNITS . Useful for saving a figure after editing it .","title":"cleanfig"},{"location":"reference/plotting/cleanfig.m/#cleanfig","text":"CLEANFIG - Cleans a figure for saving in guide CLEANFIG ( FIGNUM , UNITS ) Cleans all string entries from 'edit' and 'popup' uitools , and sets units of all uitools to UNITS . Useful for saving a figure after editing it .","title":"cleanfig"},{"location":"reference/plotting/colorlist.m/","text":"colorlist \u00b6 COLORLIST - Grab a color or group of colors from a list C = COLORLIST Returns an Nx3 list of colors . By default , this function returns the normal 7 colors that Matlab uses as the default ColorOrder for new axes . or C = COLORLIST ( N ) Returns a 1 x3 color chosen from the color list . The Nth entry is chosen . If N is greater than the number of colors in the list , the selection 'wraps around' back to the beginning of the list . This function also takes name / value pairs that extend its functionality : Parameter ( default ) | Description ------------------------------------------------------ ColorList ( 7 x3 default | The color list to choose from axes | Examples : jet ( 256 ) , gray ( 256 ) ColorOrder ) | DoNotWrap ( 0 ) | Directs the function not to wrap the | selection around the list if N | is greater than the number of colors . | Instead , an error will occur .","title":"colorlist"},{"location":"reference/plotting/colorlist.m/#colorlist","text":"COLORLIST - Grab a color or group of colors from a list C = COLORLIST Returns an Nx3 list of colors . By default , this function returns the normal 7 colors that Matlab uses as the default ColorOrder for new axes . or C = COLORLIST ( N ) Returns a 1 x3 color chosen from the color list . The Nth entry is chosen . If N is greater than the number of colors in the list , the selection 'wraps around' back to the beginning of the list . This function also takes name / value pairs that extend its functionality : Parameter ( default ) | Description ------------------------------------------------------ ColorList ( 7 x3 default | The color list to choose from axes | Examples : jet ( 256 ) , gray ( 256 ) ColorOrder ) | DoNotWrap ( 0 ) | Directs the function not to wrap the | selection around the list if N | is greater than the number of colors . | Instead , an error will occur .","title":"colorlist"},{"location":"reference/plotting/ctable.m/","text":"ctable \u00b6 CTABLE Creates a color table from a colormap . CT = CTABLE ( CMAP [, SZ ] ) Returns a color table matrix from the colormap CMAP . The color table is 3 xSZ , and if size is not specified SZ is assumed to be 256 . Each entry of the colortable CT ( i + 1 , j + 1 , k + 1 ) contains the index of the closest color in the colormap cmap , where i , j , and k run from 1 ... SZ .","title":"ctable"},{"location":"reference/plotting/ctable.m/#ctable","text":"CTABLE Creates a color table from a colormap . CT = CTABLE ( CMAP [, SZ ] ) Returns a color table matrix from the colormap CMAP . The color table is 3 xSZ , and if size is not specified SZ is assumed to be 256 . Each entry of the colortable CT ( i + 1 , j + 1 , k + 1 ) contains the index of the closest color in the colormap cmap , where i , j , and k run from 1 ... SZ .","title":"ctable"},{"location":"reference/plotting/cumhist.m/","text":"cumhist \u00b6 CUMHIST - Make data for a cumulative histogram plot This function has been revised . The NEW version is : [ X , Y ] = CUMHIST ( DATA ) Generates X and Y variables suitable for plotting with the plot function . Y values are generated for percentages ranging from 0 to 100 % in steps of PERCENT_DELTA . The XRANGE for the plot is specified in XRANGE = [ lowvalue highvalue ]. Example : r = randn ( 1000 , 1 ); % 1000 normally - distributed random numbers [ X , Y ] = cumhist ( r ); figure ; plot ( X , Y , ' k - ' ); hold on ; plot ([ -4 4 ],[ 50 50 ], ' k -- ' ); % add ' median ' ( 50 %- tile ) dashed line box off ; ylabel ( ' Percentage ' ); xlabel ( ' Values ' ); See also : PRCTILE , CUMSUM , HIST If 3 input arguments are provided , then the LEGACY version of this function is called . [ X , Y ] = CUMHIST ( DATA , XRANGE , PERCENT_DELTA ) Generates X and Y variables suitable for plotting with the plot function . Y values are generated for percentages ranging from 0 to 100 % in steps of PERCENT_DELTA . The XRANGE for the plot is specified in XRANGE = [ lowvalue highvalue ]. Example : r = randn ( 1000 , 1 ); % 1000 normally - distributed random numbers xrange = [ -4 4 ]; percent_delta = 0.1 ; % use steps of 0.1 % [ X , Y ] = cumhist ( r , xrange , percent_delta ); figure ; plot ( X , Y , ' k - ' ); hold on ; plot ([ -4 4 ],[ 50 50 ], ' k -- ' ); % add ' median ' ( 50 %- tile ) dashed line box off ; ylabel ( ' Percentage ' ); xlabel ( ' Values ' ); See also : PRCTILE , CUMSUM , HIST","title":"cumhist"},{"location":"reference/plotting/cumhist.m/#cumhist","text":"CUMHIST - Make data for a cumulative histogram plot This function has been revised . The NEW version is : [ X , Y ] = CUMHIST ( DATA ) Generates X and Y variables suitable for plotting with the plot function . Y values are generated for percentages ranging from 0 to 100 % in steps of PERCENT_DELTA . The XRANGE for the plot is specified in XRANGE = [ lowvalue highvalue ]. Example : r = randn ( 1000 , 1 ); % 1000 normally - distributed random numbers [ X , Y ] = cumhist ( r ); figure ; plot ( X , Y , ' k - ' ); hold on ; plot ([ -4 4 ],[ 50 50 ], ' k -- ' ); % add ' median ' ( 50 %- tile ) dashed line box off ; ylabel ( ' Percentage ' ); xlabel ( ' Values ' ); See also : PRCTILE , CUMSUM , HIST If 3 input arguments are provided , then the LEGACY version of this function is called . [ X , Y ] = CUMHIST ( DATA , XRANGE , PERCENT_DELTA ) Generates X and Y variables suitable for plotting with the plot function . Y values are generated for percentages ranging from 0 to 100 % in steps of PERCENT_DELTA . The XRANGE for the plot is specified in XRANGE = [ lowvalue highvalue ]. Example : r = randn ( 1000 , 1 ); % 1000 normally - distributed random numbers xrange = [ -4 4 ]; percent_delta = 0.1 ; % use steps of 0.1 % [ X , Y ] = cumhist ( r , xrange , percent_delta ); figure ; plot ( X , Y , ' k - ' ); hold on ; plot ([ -4 4 ],[ 50 50 ], ' k -- ' ); % add ' median ' ( 50 %- tile ) dashed line box off ; ylabel ( ' Percentage ' ); xlabel ( ' Values ' ); See also : PRCTILE , CUMSUM , HIST","title":"cumhist"},{"location":"reference/plotting/drawbarinimage.m/","text":"drawbarinimage \u00b6 DRAWBARINIMAGE - Draw bar in image Draws a bar of a particular orientation and size in an image at the location specified . NEWIMAGE = DRAWBARINIMAGE ( IMAGE , COLOR , CENTER ,... SIZE , THICKNESS , ORIENTATION ) Draws a bar of color COLOR in an image IMAGE . The bar will have LENGTH , THICKNESS and ORIENTATION ( in degrees ). The bar will be centered at CENTER = [ X Y ]","title":"drawbarinimage"},{"location":"reference/plotting/drawbarinimage.m/#drawbarinimage","text":"DRAWBARINIMAGE - Draw bar in image Draws a bar of a particular orientation and size in an image at the location specified . NEWIMAGE = DRAWBARINIMAGE ( IMAGE , COLOR , CENTER ,... SIZE , THICKNESS , ORIENTATION ) Draws a bar of color COLOR in an image IMAGE . The bar will have LENGTH , THICKNESS and ORIENTATION ( in degrees ). The bar will be centered at CENTER = [ X Y ]","title":"drawbarinimage"},{"location":"reference/plotting/drawshape.m/","text":"drawshape \u00b6 DRAWSHAPE -- Draw a simple shape in an image or as a vector plot H = DRAWSHAPE ( SHAPE ) Draws a shape using plots in current axes ( vector mode ). H is a list of handles to the plots . INDS = DRAWSHAPE ( SHAPE , MESHX , MESHY ) Returns a set of indexes that will make SHAPE on a bitmap with coordinate system MESHX x MESHY . ( See ' help mesh ' .) SHAPE should be a struct with fields that vary according to the shape requested . Each shape should have a field ' shape ' that describes the shape , and appropriate fields that describe the attributes of that shape . Known shapes are described below . Note that colors should be entered as RGB for vector graphics and a value for SHAPE . shape = ' ellipse ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color , use empty if no line . fillcolor = [ r g b ] or [ n ] % fill color , use empty [] if no fill . orientation = [ theta ]; % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' rect ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color . fillcolor = [ r g b ] or [ n ] % fill color , use empty ([]) if no fill . orientation = [ theta ] % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' arrow ' . posxy = [ x y ] % center position . length = [ x ] % line length . linethickness = [ x ] % thickness of line . linecolor = [ r g b ] or [ n ] % line color . direction = [ theta ] % direction in cartesian angles , degrees ( 0 is right ) . headangle = [ theta ] % angle of head sweep back ( e . g ., 30 ) . headlength = [ x ] % head length ( e . g ., length / 2 )","title":"drawshape"},{"location":"reference/plotting/drawshape.m/#drawshape","text":"DRAWSHAPE -- Draw a simple shape in an image or as a vector plot H = DRAWSHAPE ( SHAPE ) Draws a shape using plots in current axes ( vector mode ). H is a list of handles to the plots . INDS = DRAWSHAPE ( SHAPE , MESHX , MESHY ) Returns a set of indexes that will make SHAPE on a bitmap with coordinate system MESHX x MESHY . ( See ' help mesh ' .) SHAPE should be a struct with fields that vary according to the shape requested . Each shape should have a field ' shape ' that describes the shape , and appropriate fields that describe the attributes of that shape . Known shapes are described below . Note that colors should be entered as RGB for vector graphics and a value for SHAPE . shape = ' ellipse ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color , use empty if no line . fillcolor = [ r g b ] or [ n ] % fill color , use empty [] if no fill . orientation = [ theta ]; % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' rect ' . posxy = [ x y ] % center position . sizexy = [ x y ] % scale in x and y . linethickness = [ x ] % thickness of outside line . linecolor = [ r g b ] or [ n ] % line color . fillcolor = [ r g b ] or [ n ] % fill color , use empty ([]) if no fill . orientation = [ theta ] % orientation in cartesian angles , degrees ( 0 is right ) SHAPE . shape = ' arrow ' . posxy = [ x y ] % center position . length = [ x ] % line length . linethickness = [ x ] % thickness of line . linecolor = [ r g b ] or [ n ] % line color . direction = [ theta ] % direction in cartesian angles , degrees ( 0 is right ) . headangle = [ theta ] % angle of head sweep back ( e . g ., 30 ) . headlength = [ x ] % head length ( e . g ., length / 2 )","title":"drawshape"},{"location":"reference/plotting/hist2d.m/","text":"hist2d \u00b6 function mHist = hist2d ( [vY, vX], vYEdge, vXEdge ) 2 Dimensional Histogram Counts number of points in the bins defined by vYEdge , vXEdge . size ( vX ) == size ( vY ) == [ n , 1 ] size ( mHist ) == [ length ( vYEdge ) - 1 , length ( vXEdge ) - 1 ] EXAMPLE mYX = rand ( 100 , 2 ); vXEdge = linspace ( 0 , 1 , 10 ); vYEdge = linspace ( 0 , 1 , 20 ); mHist2d = hist2d ( mYX , vYEdge , vXEdge ); nXBins = length ( vXEdge ); nYBins = length ( vYEdge ); vXLabel = 0.5 * ( vXEdge ( 1 :( nXBins - 1 )) + vXEdge ( 2 : nXBins )); vYLabel = 0.5 * ( vYEdge ( 1 :( nYBins - 1 )) + vYEdge ( 2 : nYBins )); pcolor ( vXLabel , vYLabel , mHist2d ); colorbar","title":"hist2d"},{"location":"reference/plotting/hist2d.m/#hist2d","text":"function mHist = hist2d ( [vY, vX], vYEdge, vXEdge ) 2 Dimensional Histogram Counts number of points in the bins defined by vYEdge , vXEdge . size ( vX ) == size ( vY ) == [ n , 1 ] size ( mHist ) == [ length ( vYEdge ) - 1 , length ( vXEdge ) - 1 ] EXAMPLE mYX = rand ( 100 , 2 ); vXEdge = linspace ( 0 , 1 , 10 ); vYEdge = linspace ( 0 , 1 , 20 ); mHist2d = hist2d ( mYX , vYEdge , vXEdge ); nXBins = length ( vXEdge ); nYBins = length ( vYEdge ); vXLabel = 0.5 * ( vXEdge ( 1 :( nXBins - 1 )) + vXEdge ( 2 : nXBins )); vYLabel = 0.5 * ( vYEdge ( 1 :( nYBins - 1 )) + vYEdge ( 2 : nYBins )); pcolor ( vXLabel , vYLabel , mHist2d ); colorbar","title":"hist2d"},{"location":"reference/plotting/hist2line.m/","text":"hist2line \u00b6 HIST2LINE - generate a line plot from a histogram that will plot the histogram [X,Y] = HIST2LINE(BINS, COUNTS) Generates a line plot with values X, Y from the histogram with bin edges BINS and bin counts COUNTS. BINS should have one more entry than DATA, since DATA(i) is the number of points between BINS(i) and BINS(i+1). See also: BAR, BARH, HIST, HISTC, SHIFTEDBAR","title":"hist2line"},{"location":"reference/plotting/hist2line.m/#hist2line","text":"HIST2LINE - generate a line plot from a histogram that will plot the histogram [X,Y] = HIST2LINE(BINS, COUNTS) Generates a line plot with values X, Y from the histogram with bin edges BINS and bin counts COUNTS. BINS should have one more entry than DATA, since DATA(i) is the number of points between BINS(i) and BINS(i+1). See also: BAR, BARH, HIST, HISTC, SHIFTEDBAR","title":"hist2line"},{"location":"reference/plotting/imagedisplay.m/","text":"imagedisplay \u00b6 IMAGEDISPLAY - Display an image and allow user to adjust H = IMAGEDISPLAY ( IMAGE , [...] ) Displays the image IMAGE in the current figure . There are buttons provided for adjusting the image scale , including an autoscale button . One may also provide additional arguments in name / value pairs ( e . g ., ' InitialScale ' , [ 0 255 ]) : ' InitialScale ' [ low high ] the high and low bounds for scaling ( initially [ 0 255 ]) ' AutoScale ' , 0 / 1 should autoscale button be visible ? ( initially 1 ) ' Units ' , Units of position ( e . g ., ' pixels ' or ' normalized ' ; default ' normalized ' ) ' Position ' , position of image in figure ( initially [ 0.1 0.1 0.8 0.8 ]) ' ScaleEdits ' 0 / 1 should scale edit boxes be visible ? ( initially 1 ) ' Title ' A title string ' fig ' The figure ( new is created by default )","title":"imagedisplay"},{"location":"reference/plotting/imagedisplay.m/#imagedisplay","text":"IMAGEDISPLAY - Display an image and allow user to adjust H = IMAGEDISPLAY ( IMAGE , [...] ) Displays the image IMAGE in the current figure . There are buttons provided for adjusting the image scale , including an autoscale button . One may also provide additional arguments in name / value pairs ( e . g ., ' InitialScale ' , [ 0 255 ]) : ' InitialScale ' [ low high ] the high and low bounds for scaling ( initially [ 0 255 ]) ' AutoScale ' , 0 / 1 should autoscale button be visible ? ( initially 1 ) ' Units ' , Units of position ( e . g ., ' pixels ' or ' normalized ' ; default ' normalized ' ) ' Position ' , position of image in figure ( initially [ 0.1 0.1 0.8 0.8 ]) ' ScaleEdits ' 0 / 1 should scale edit boxes be visible ? ( initially 1 ) ' Title ' A title string ' fig ' The figure ( new is created by default )","title":"imagedisplay"},{"location":"reference/plotting/intline.m/","text":"intline \u00b6 INTLINE Integer-coordinate line drawing algorithm. [X, Y] = INTLINE(X1, X2, Y1, Y2) computes an approximation to the line segment joining (X1, Y1) and (X2, Y2) with integer coordinates. X1, X2, Y1, and Y2 should be integers. INTLINE is reversible; that is, INTLINE(X1, X2, Y1, Y2) produces the same results as FLIPUD(INTLINE(X2, X1, Y2, Y1)).","title":"intline"},{"location":"reference/plotting/intline.m/#intline","text":"INTLINE Integer-coordinate line drawing algorithm. [X, Y] = INTLINE(X1, X2, Y1, Y2) computes an approximation to the line segment joining (X1, Y1) and (X2, Y2) with integer coordinates. X1, X2, Y1, and Y2 should be integers. INTLINE is reversible; that is, INTLINE(X1, X2, Y1, Y2) produces the same results as FLIPUD(INTLINE(X2, X1, Y2, Y1)).","title":"intline"},{"location":"reference/plotting/matchaxes.m/","text":"matchaxes \u00b6 MATCHAXES - Set the axis limits on a set of axes to the same value MATCHAXES ( AXESLIST , XMIN , XMAX , YMIN , YMAX ) For a list of axes handles AXESHANDLES , this function sets them all to the same AXIS values . If XMIN , XMAX , YMIN , YMAX are numerical values then those values are used . A string can also be passed for XMIN , XMAX , YMIN , or YMAX ( or any combination ). The string can be : string : | Description --------------------------------------------------------------------- ' axis ' | The function uses the minimum ( for XMIN , | YMIN ) or maximum ( for XMAX , YMAX ) of the | values currently on the axes . ' close ' | The function uses the the min ( or max ) value | of the data plotted on the axes . Note that this function doesn ' t install any code that will maintain these axes relationships ( if you change one axis , the others will not automatically change ). It simply sets the AXIS values at the time it is called . If XMIN == XMAX or YMIN == YMAX ( for example , if the data points all have one value ) then MATCHAXES subtracts 1 from the minimum and adds 1 to the maximum to avoid an error , and a warning is given . Example : Rescale 2 axes so the Y axes are matched ( from 0 to 1 ) and the X axes are based on the maximum and minimum of the 2 axes specified . % click in the first axes myaxes1 = gca ; % click in the second axes myaxes2 = gca ; matchaxes ([ myaxes1 myaxes2 ], ' axis ',' axis ' , 0 , 1 ); See also : AXES , AXIS","title":"matchaxes"},{"location":"reference/plotting/matchaxes.m/#matchaxes","text":"MATCHAXES - Set the axis limits on a set of axes to the same value MATCHAXES ( AXESLIST , XMIN , XMAX , YMIN , YMAX ) For a list of axes handles AXESHANDLES , this function sets them all to the same AXIS values . If XMIN , XMAX , YMIN , YMAX are numerical values then those values are used . A string can also be passed for XMIN , XMAX , YMIN , or YMAX ( or any combination ). The string can be : string : | Description --------------------------------------------------------------------- ' axis ' | The function uses the minimum ( for XMIN , | YMIN ) or maximum ( for XMAX , YMAX ) of the | values currently on the axes . ' close ' | The function uses the the min ( or max ) value | of the data plotted on the axes . Note that this function doesn ' t install any code that will maintain these axes relationships ( if you change one axis , the others will not automatically change ). It simply sets the AXIS values at the time it is called . If XMIN == XMAX or YMIN == YMAX ( for example , if the data points all have one value ) then MATCHAXES subtracts 1 from the minimum and adds 1 to the maximum to avoid an error , and a warning is given . Example : Rescale 2 axes so the Y axes are matched ( from 0 to 1 ) and the X axes are based on the maximum and minimum of the 2 axes specified . % click in the first axes myaxes1 = gca ; % click in the second axes myaxes2 = gca ; matchaxes ([ myaxes1 myaxes2 ], ' axis ',' axis ' , 0 , 1 ); See also : AXES , AXIS","title":"matchaxes"},{"location":"reference/plotting/median_within_between_plot.m/","text":"median_within_between_plot \u00b6 MEDIAN_WITHIN_BETWEEN_PLOT - Plot an index for many experiments , different conditions [ H , DATAPOINTS ] = MEDIAN_WITHIN_BETWEEN_PLOT ( DATA , EXPERIMENT_INDEXES , LABELS ) Plots index values from individual experiments that are grouped into different experimental conditions . For each condition , indexes from individual animals are plotted in columns . A bigger space is left between animals that are in different experimental groups . Median values for each animal and each group are highlighted with a horizontal bar . Inputs : There are 2 ways of specifying the data . Method 1 : DATA should be a cell array of index values for different conditions . If there N conditions , then DATA should have N entries . Each entry DATA { n } should have the index values from a single experimental condition . EXPERIMENT_INDEXES { n } indicates the experiment number that produced each data point in DATA { n } . Method 2 : DATA is an array of values . EXPERIMENT_INDEXES is an Mx2 matrix ; the first column of EXPERIMENT_INDEXES should be the experiment index number , and the second column of EXPERIMENT_INDEXES should be the condition number . LABELS { n } should be the label for the conditions . Outputs : H is a set of handles to the plots . DATAPOINTS is a structure with the following fields : experiment : the experiment that corresponds to the point condition : the condition of the point index : the index of the point within the condition x : the x position on the plot y : the y position on the plot ( might be transformed from the raw data )","title":"median_within_between_plot"},{"location":"reference/plotting/median_within_between_plot.m/#median_within_between_plot","text":"MEDIAN_WITHIN_BETWEEN_PLOT - Plot an index for many experiments , different conditions [ H , DATAPOINTS ] = MEDIAN_WITHIN_BETWEEN_PLOT ( DATA , EXPERIMENT_INDEXES , LABELS ) Plots index values from individual experiments that are grouped into different experimental conditions . For each condition , indexes from individual animals are plotted in columns . A bigger space is left between animals that are in different experimental groups . Median values for each animal and each group are highlighted with a horizontal bar . Inputs : There are 2 ways of specifying the data . Method 1 : DATA should be a cell array of index values for different conditions . If there N conditions , then DATA should have N entries . Each entry DATA { n } should have the index values from a single experimental condition . EXPERIMENT_INDEXES { n } indicates the experiment number that produced each data point in DATA { n } . Method 2 : DATA is an array of values . EXPERIMENT_INDEXES is an Mx2 matrix ; the first column of EXPERIMENT_INDEXES should be the experiment index number , and the second column of EXPERIMENT_INDEXES should be the condition number . LABELS { n } should be the label for the conditions . Outputs : H is a set of handles to the plots . DATAPOINTS is a structure with the following fields : experiment : the experiment that corresponds to the point condition : the condition of the point index : the index of the point within the condition x : the x position on the plot y : the y position on the plot ( might be transformed from the raw data )","title":"median_within_between_plot"},{"location":"reference/plotting/movetoback.m/","text":"movetoback \u00b6 MOVETOBACK - Move a plot to the \"back\" of the \"paper\" MOVETOBACK ( PLOT_H ) Moves the pot specified by the plot handle PLOT_H to the \"back\" of the \"paper\" in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 movetoback ( h2 ); % now the red line is in \"back\" PLOT_H can be a single handle or an array of handles .","title":"movetoback"},{"location":"reference/plotting/movetoback.m/#movetoback","text":"MOVETOBACK - Move a plot to the \"back\" of the \"paper\" MOVETOBACK ( PLOT_H ) Moves the pot specified by the plot handle PLOT_H to the \"back\" of the \"paper\" in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 movetoback ( h2 ); % now the red line is in \"back\" PLOT_H can be a single handle or an array of handles .","title":"movetoback"},{"location":"reference/plotting/movetofront.m/","text":"movetofront \u00b6 MOVETOFRONT - Move a plot to the \"front\" of the \"paper\" MOVETOFRONT ( PLOT_H ) Moves the plot specified by the plot handle PLOT_H to the \"front\" of the paper in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 movetofront ( h1 ); % now the black line is in \"front\" PLOT_H can be a single handle or an array of handles .","title":"movetofront"},{"location":"reference/plotting/movetofront.m/#movetofront","text":"MOVETOFRONT - Move a plot to the \"front\" of the \"paper\" MOVETOFRONT ( PLOT_H ) Moves the plot specified by the plot handle PLOT_H to the \"front\" of the paper in the current axis . Example : figure ; hold on ; h1 = plot ([ 0 1 ],[ 0 1 ], 'k' , 'linewidth' , 2 ); h2 = plot ([ 0.5 0.5 ],[ 0 1 ], 'r' , 'linewidth' , 2 ); % at this point, the red line in h2 is \"above\" % the black line in h1 movetofront ( h1 ); % now the black line is in \"front\" PLOT_H can be a single handle or an array of handles .","title":"movetofront"},{"location":"reference/plotting/myerrorbar.m/","text":"myerrorbar \u00b6 MYERRORBAR Error bar plot . ERRORBAR ( X , Y , L , U ) plots the graph of vector X vs . vector Y with error bars specified by the vectors L and U . L and U contain the lower and upper error ranges for each point in Y . Each error bar is L ( i ) + U ( i ) long and is drawn a distance of U ( i ) above and L ( i ) below the points in ( X , Y ) . The vectors X , Y , L and U must all be the same length . If X , Y , L and U are matrices then each column produces a separate line . ERRORBAR ( X , Y , E ) or ERRORBAR ( Y , E ) plots Y with error bars [ Y - E Y + E ] . ERRORBAR ( ... , 'LineSpec' ) uses the color and linestyle specified by the string 'LineSpec' . See PLOT for possibilities . ERRORBAR ( ... , TEE ) gives the 'TEE' width , in the same units as X variable H = ERRORBAR ( ... ) returns a vector of line handles . For example , x = 1 : 10 ; y = sin ( x ); e = std ( y ) * ones ( size ( x )); errorbar ( x , y , e ) draws symmetric error bars of unit standard deviation .","title":"myerrorbar"},{"location":"reference/plotting/myerrorbar.m/#myerrorbar","text":"MYERRORBAR Error bar plot . ERRORBAR ( X , Y , L , U ) plots the graph of vector X vs . vector Y with error bars specified by the vectors L and U . L and U contain the lower and upper error ranges for each point in Y . Each error bar is L ( i ) + U ( i ) long and is drawn a distance of U ( i ) above and L ( i ) below the points in ( X , Y ) . The vectors X , Y , L and U must all be the same length . If X , Y , L and U are matrices then each column produces a separate line . ERRORBAR ( X , Y , E ) or ERRORBAR ( Y , E ) plots Y with error bars [ Y - E Y + E ] . ERRORBAR ( ... , 'LineSpec' ) uses the color and linestyle specified by the string 'LineSpec' . See PLOT for possibilities . ERRORBAR ( ... , TEE ) gives the 'TEE' width , in the same units as X variable H = ERRORBAR ( ... ) returns a vector of line handles . For example , x = 1 : 10 ; y = sin ( x ); e = std ( y ) * ones ( size ( x )); errorbar ( x , y , e ) draws symmetric error bars of unit standard deviation .","title":"myerrorbar"},{"location":"reference/plotting/plot_multichan.m/","text":"plot_multichan \u00b6 PLOT_MULTICHAN - Plots multiple channels H = PLOT_MULTICHAN ( DATA , T , SPACE ) Plots multiple channels of DATA ( assumed to be NUMSAMPLES X NUMCHANNELS ) T is the time for each sample and SPACE is the space to put between channels .","title":"plot_multichan"},{"location":"reference/plotting/plot_multichan.m/#plot_multichan","text":"PLOT_MULTICHAN - Plots multiple channels H = PLOT_MULTICHAN ( DATA , T , SPACE ) Plots multiple channels of DATA ( assumed to be NUMSAMPLES X NUMCHANNELS ) T is the time for each sample and SPACE is the space to put between channels .","title":"plot_multichan"},{"location":"reference/plotting/plotbargraphwithdata.m/","text":"plotbargraphwithdata \u00b6 PLOTMEANBAR - Plot a bar graph indicating mean , standard error , and raw data H = PLOTBARGRAPHWITHDATA ( DATA , ...) Plots a bar graph with height equals to the mean value of the the mean value of each dataset in the cell array DATA { i }. The standard error of the mean is shown with error bars offset by XOFFSET . The raw data is plotted offset by XOFFSET . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ( linspace ( 1 ,... | The location on the x axis where the bars numel ( data ),, numel ( data ))) | should be drawn ([ xstart xend ]) barcolor ([ 0.4 0.4 0.4 ]) | Color of the bar graph ( RGB ) datacolor ([ 0 0 0 ]) | Color of the raw data ( RGB ) stderrcolor ([ 0 0 0 ]) | Color of the std error bars ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? userawdata ( 1 ) | 0 / 1 Should we plot the raw data ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot symbolsize ( 6 ) | Symbol size symbol ( 'o' ) | Symbol to use xoffset ( 0.25 ) | X offset for plotting standard error , raw data measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median ' , e . g .","title":"plotbargraphwithdata"},{"location":"reference/plotting/plotbargraphwithdata.m/#plotbargraphwithdata","text":"PLOTMEANBAR - Plot a bar graph indicating mean , standard error , and raw data H = PLOTBARGRAPHWITHDATA ( DATA , ...) Plots a bar graph with height equals to the mean value of the the mean value of each dataset in the cell array DATA { i }. The standard error of the mean is shown with error bars offset by XOFFSET . The raw data is plotted offset by XOFFSET . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ( linspace ( 1 ,... | The location on the x axis where the bars numel ( data ),, numel ( data ))) | should be drawn ([ xstart xend ]) barcolor ([ 0.4 0.4 0.4 ]) | Color of the bar graph ( RGB ) datacolor ([ 0 0 0 ]) | Color of the raw data ( RGB ) stderrcolor ([ 0 0 0 ]) | Color of the std error bars ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? userawdata ( 1 ) | 0 / 1 Should we plot the raw data ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot symbolsize ( 6 ) | Symbol size symbol ( 'o' ) | Symbol to use xoffset ( 0.25 ) | X offset for plotting standard error , raw data measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median ' , e . g .","title":"plotbargraphwithdata"},{"location":"reference/plotting/plotmeanbar.m/","text":"plotmeanbar \u00b6 PLOTMEANBAR - Plot a horizontal bar indicating mean ( or standard error ) of a dataset H = PLOTMEANBAR ( DATA , ...) Plots the mean value of data as a horizontal bar , and , optionally , a vertical bar indicating the standard error . Returns a handle ( s ) H to the plot . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ([ 0 1 ]) | The location on the x axis where the line | should be drawn ([ xstart xend ]) color ([ 0 0 0 ]) | Color of the bar ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median '","title":"plotmeanbar"},{"location":"reference/plotting/plotmeanbar.m/#plotmeanbar","text":"PLOTMEANBAR - Plot a horizontal bar indicating mean ( or standard error ) of a dataset H = PLOTMEANBAR ( DATA , ...) Plots the mean value of data as a horizontal bar , and , optionally , a vertical bar indicating the standard error . Returns a handle ( s ) H to the plot . This function can be modified by name / value pairs : Parameter ( default value ) | Description -------------------------------------------------------------- xloc ([ 0 1 ]) | The location on the x axis where the line | should be drawn ([ xstart xend ]) color ([ 0 0 0 ]) | Color of the bar ( RGB ) usestderr ( 1 ) | 0 / 1 Should we plot an error bar showing | standard error of the mean ? useholdon ( 1 ) | 0 / 1 Should we call ' hold on ' ? linewidth ( 2 ) | Linewidth for mean bar plot linewidth_stderr ( 1 ) | Linewidth for standard error plot measure ( ' nanmean ( data ( : )) ' ) | Function to call to obtain mean ; could be ' median '","title":"plotmeanbar"},{"location":"reference/plotting/plotoribox.m/","text":"plotoribox \u00b6 PLOTORIBOX - Plot an oriented box ( as a patch ) on a graph H = PLOTORIBOX ( X , Y , ORI , WIDTH , HEIGHT , REVY ) Plots an oriented bar centered on the position X , Y with orientation ORI ( in degrees , in compass coordinates ; that is , 0 degrees is a horizontal bar , and the bar tilts in a clockwise manner with increasing angle ). The bar has the width WIDTH and height HEIGHT . If REVY is 1 , then we assume that the Y axis direction is reversed , and the orientated bar is mirror-reversed in Y . This function can also take extra parameters as NAME / VALUE pairs . PARAMETER ( default ): | DESCRIPTION : --------------------------------------------------------- col ( [ 0 0 0 ] ) | Fill color of the bar ( default is | black [ 0 0 0 ] ; white would be | [ 1 1 1 ]","title":"plotoribox"},{"location":"reference/plotting/plotoribox.m/#plotoribox","text":"PLOTORIBOX - Plot an oriented box ( as a patch ) on a graph H = PLOTORIBOX ( X , Y , ORI , WIDTH , HEIGHT , REVY ) Plots an oriented bar centered on the position X , Y with orientation ORI ( in degrees , in compass coordinates ; that is , 0 degrees is a horizontal bar , and the bar tilts in a clockwise manner with increasing angle ). The bar has the width WIDTH and height HEIGHT . If REVY is 1 , then we assume that the Y axis direction is reversed , and the orientated bar is mirror-reversed in Y . This function can also take extra parameters as NAME / VALUE pairs . PARAMETER ( default ): | DESCRIPTION : --------------------------------------------------------- col ( [ 0 0 0 ] ) | Fill color of the bar ( default is | black [ 0 0 0 ] ; white would be | [ 1 1 1 ]","title":"plotoribox"},{"location":"reference/plotting/plotshade.m/","text":"plotshade \u00b6 PLOTSHADE - Make a plot with region above or below a line shaded H = PLOTSHADE ( X , Y , SHADELINE , COLOR , LOCATIONSTRING ) Creates a Matlab PATCH object that colors the area of a plot that lies above or below the line Y = SHADELINE , using color COLOR ( RGB triple , where each element is in [ 0..1 ]. LOCATIONSTRING should be ' above ' or ' below ' to indicate whether the shading should occur above or below the SHADELINE . A flat line at SHADELINE is drawn at locations where the data should not be shaded ( developer note: an option to avoid these lines could be added in the future ). If SHADELINE is not provided , 0 is assumed . If COLOR is not provided , [ 0 0 0 ] ( black ) is assumed . LOCATIONSTRING should be ' above ' or ' below ' ( assumed ' below ' if it is not provided ). Note that PLOTSHADE does not plot the original points x / y . If that is desired , the user should plot the line in a separate step . Example: x = 0 : 0.01 : 10 ; y = sin ( 2 * pi * x ) + 3 ; shadeline = 3 ; figure ; plot ( x , y ,' k - '); hold on ; plotshade ( x , y , shadeline );","title":"plotshade"},{"location":"reference/plotting/plotshade.m/#plotshade","text":"PLOTSHADE - Make a plot with region above or below a line shaded H = PLOTSHADE ( X , Y , SHADELINE , COLOR , LOCATIONSTRING ) Creates a Matlab PATCH object that colors the area of a plot that lies above or below the line Y = SHADELINE , using color COLOR ( RGB triple , where each element is in [ 0..1 ]. LOCATIONSTRING should be ' above ' or ' below ' to indicate whether the shading should occur above or below the SHADELINE . A flat line at SHADELINE is drawn at locations where the data should not be shaded ( developer note: an option to avoid these lines could be added in the future ). If SHADELINE is not provided , 0 is assumed . If COLOR is not provided , [ 0 0 0 ] ( black ) is assumed . LOCATIONSTRING should be ' above ' or ' below ' ( assumed ' below ' if it is not provided ). Note that PLOTSHADE does not plot the original points x / y . If that is desired , the user should plot the line in a separate step . Example: x = 0 : 0.01 : 10 ; y = sin ( 2 * pi * x ) + 3 ; shadeline = 3 ; figure ; plot ( x , y ,' k - '); hold on ; plotshade ( x , y , shadeline );","title":"plotshade"},{"location":"reference/plotting/posterize.m/","text":"posterize \u00b6 POSTERIZE - Change plot characteristics appropriate for posters POSTERIZE ( FIGNUM , ... ) Changes plot characteristics appropriate for a poster . By default : '_axes_fontsize' is set to 10 '_axes_xlabel_fontsize' is set to 13 '_axes_ylabel_fontsize' is set to 13 '_axes_title_fontsize' is set to 13 'fontname' is set to arial '_axes_box' is set to 'off' If additional arguments are provided in name / value pairs , then the function will attempt to set fields with each name to the value specified . If the variable name has the form '_TYPE_FIELDNAME' , then only fields of handles of type TYPE will be changed . This can be extended to '_TYPE_HANDLENAME_FIELDNAME' and '_TYPE_HANDLENAME_..._HANDLE_NAME_FIELDNAME' Examples : POSTERIZE ( FIGNUM , 'linewidth' , 2 ) will set the value of the field 'linewidth' to 2 in all handles that possess it . POSTERIZE ( FIGNUM , '_axes_fontsize' , 20 ) sets the value of the field 'fontsize' in all handles of type 'axes' . POSTERIZE ( FIGNUM , '_axes_xlabel_fontsize' , 13 ) sets the value of the field 'fontsize' in all handles called 'xlabel' in objects of type 'axes'","title":"posterize"},{"location":"reference/plotting/posterize.m/#posterize","text":"POSTERIZE - Change plot characteristics appropriate for posters POSTERIZE ( FIGNUM , ... ) Changes plot characteristics appropriate for a poster . By default : '_axes_fontsize' is set to 10 '_axes_xlabel_fontsize' is set to 13 '_axes_ylabel_fontsize' is set to 13 '_axes_title_fontsize' is set to 13 'fontname' is set to arial '_axes_box' is set to 'off' If additional arguments are provided in name / value pairs , then the function will attempt to set fields with each name to the value specified . If the variable name has the form '_TYPE_FIELDNAME' , then only fields of handles of type TYPE will be changed . This can be extended to '_TYPE_HANDLENAME_FIELDNAME' and '_TYPE_HANDLENAME_..._HANDLE_NAME_FIELDNAME' Examples : POSTERIZE ( FIGNUM , 'linewidth' , 2 ) will set the value of the field 'linewidth' to 2 in all handles that possess it . POSTERIZE ( FIGNUM , '_axes_fontsize' , 20 ) sets the value of the field 'fontsize' in all handles of type 'axes' . POSTERIZE ( FIGNUM , '_axes_xlabel_fontsize' , 13 ) sets the value of the field 'fontsize' in all handles called 'xlabel' in objects of type 'axes'","title":"posterize"},{"location":"reference/plotting/quickhist.m/","text":"quickhist \u00b6 quickhist is a function. [N, x] = quickhist(data, binedges)","title":"quickhist"},{"location":"reference/plotting/quickhist.m/#quickhist","text":"quickhist is a function. [N, x] = quickhist(data, binedges)","title":"quickhist"},{"location":"reference/plotting/scatterplot.m/","text":"scatterplot \u00b6 SCATTERPLOT -- plot data points SCATTERPLOT ( X ) draws a scatter plot with a dot for each row in X . If X has more than two columns then each dimension is plotted against each other one to form a triangular set of subplots in the current figure . OPTIONS : 'class' - vector containing a class label for each point . If any ( or all ) of markercolor , markersize or markerstyle are cell arrays the label is used to index the cell array to set the marker appearance . 'color' - color for marker border and fill ( if used ) . Defaults to cell array of 'ColorOrder' property of axes . 'fill' - boolean indicating whether to fill marker 'marker' - marker symbol to use 'markeredgecolor' - color for marker border : may be a string or [ r , g , b ] vector 'markerfacecolor' - color for marker fill : may be a string or [ r , g , b ] vector 'markersize' - marker size ( default is 1 ) 'projection' - plot only the specified dimensions 'shrink' - resize the axes to exactly surround the points ( on by default )","title":"scatterplot"},{"location":"reference/plotting/scatterplot.m/#scatterplot","text":"SCATTERPLOT -- plot data points SCATTERPLOT ( X ) draws a scatter plot with a dot for each row in X . If X has more than two columns then each dimension is plotted against each other one to form a triangular set of subplots in the current figure . OPTIONS : 'class' - vector containing a class label for each point . If any ( or all ) of markercolor , markersize or markerstyle are cell arrays the label is used to index the cell array to set the marker appearance . 'color' - color for marker border and fill ( if used ) . Defaults to cell array of 'ColorOrder' property of axes . 'fill' - boolean indicating whether to fill marker 'marker' - marker symbol to use 'markeredgecolor' - color for marker border : may be a string or [ r , g , b ] vector 'markerfacecolor' - color for marker fill : may be a string or [ r , g , b ] vector 'markersize' - marker size ( default is 1 ) 'projection' - plot only the specified dimensions 'shrink' - resize the axes to exactly surround the points ( on by default )","title":"scatterplot"},{"location":"reference/plotting/shiftedbar.m/","text":"shiftedbar \u00b6 SHIFTEDBAR - Shifted bar graph HB = SHIFTEDBAR ( BINS , DATA , SHFT , COL ) Draws a bar graph that is shifted from the X - axis by SHFT and using color COL ( a 1 x3 RGB color ) . If BINS and DATA have multiple rows , then multiple graphs are drawn , and SHFT can be a vector giving the offset for each graph and COL can be nx3 , describing the color for each graph . HB is the set of patch handles created during the drawing . SHIFTEDBAR assumes one is plotting histogram data , so BINS should have one more column than DATA , since DATA ( i , j ) is the number of points between BINS ( i , j ) and BINS ( i , j + 1 ) . See also : BAR , BARH , HIST , HISTC","title":"shiftedbar"},{"location":"reference/plotting/shiftedbar.m/#shiftedbar","text":"SHIFTEDBAR - Shifted bar graph HB = SHIFTEDBAR ( BINS , DATA , SHFT , COL ) Draws a bar graph that is shifted from the X - axis by SHFT and using color COL ( a 1 x3 RGB color ) . If BINS and DATA have multiple rows , then multiple graphs are drawn , and SHFT can be a vector giving the offset for each graph and COL can be nx3 , describing the color for each graph . HB is the set of patch handles created during the drawing . SHIFTEDBAR assumes one is plotting histogram data , so BINS should have one more column than DATA , since DATA ( i , j ) is the number of points between BINS ( i , j ) and BINS ( i , j + 1 ) . See also : BAR , BARH , HIST , HISTC","title":"shiftedbar"},{"location":"reference/plotting/supersubplot.m/","text":"supersubplot \u00b6 SUPERSUBPLOT - Organize axes across multiple figures AX_H = SUPERSUBPLOT ( FIG , M , N , P ) Returns a set of axes that can be arranged across multiple figures . Inputs : FIG - figure number of the first figure in series M - The number of rows of plots in each figure N - the number of columns of plots in each figure P - the plot number to use , where the numbers go from left to right , top to bottom , and then continue across figures . Outputs : AX_H - the axes handle Example : fig = figure ; ax = supersubplot ( fig , 3 , 3 , 12 ); % will return a subplot in position 3 % on a second figure See also : SUBPLOT , AXES","title":"supersubplot"},{"location":"reference/plotting/supersubplot.m/#supersubplot","text":"SUPERSUBPLOT - Organize axes across multiple figures AX_H = SUPERSUBPLOT ( FIG , M , N , P ) Returns a set of axes that can be arranged across multiple figures . Inputs : FIG - figure number of the first figure in series M - The number of rows of plots in each figure N - the number of columns of plots in each figure P - the plot number to use , where the numbers go from left to right , top to bottom , and then continue across figures . Outputs : AX_H - the axes handle Example : fig = figure ; ax = supersubplot ( fig , 3 , 3 , 12 ); % will return a subplot in position 3 % on a second figure See also : SUBPLOT , AXES","title":"supersubplot"},{"location":"reference/signal/correlation_stepfunc.m/","text":"correlation_stepfunc \u00b6 CORRELATION_STEPFUNC - Perform correlation between a time series and a step function CORR = CORRELATION ( T1 , SIGNAL1 , CORR_TIMES , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. WARNING : At present , this function produces tiny differences between XCORR of the step function and SIGNAL1 . I am at a loss to explain it ... The correlation function is : Integral ({ t from T1 ( 1 ) to T1 ( end )}, dt * SIGNAL1 * SIGNAL2 ) ( Dayan and Abbott 2005 , equation in chapter 1 ) and the discrete version is : Let dt = T1 ( 2 ) - T1 ( 1 ) ( use signal 1 's sample interval) CORR ( tau ) = sum over all times t in T1 : dt * SIGNAL1 ( t ) * SIGNAL2 ( t - tau ) where TAU assumes all values listed in the vector CORR_TIMES . See also : XCORR , STEPFUNC , XCORR_STEPFUNC","title":"correlation_stepfunc"},{"location":"reference/signal/correlation_stepfunc.m/#correlation_stepfunc","text":"CORRELATION_STEPFUNC - Perform correlation between a time series and a step function CORR = CORRELATION ( T1 , SIGNAL1 , CORR_TIMES , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. WARNING : At present , this function produces tiny differences between XCORR of the step function and SIGNAL1 . I am at a loss to explain it ... The correlation function is : Integral ({ t from T1 ( 1 ) to T1 ( end )}, dt * SIGNAL1 * SIGNAL2 ) ( Dayan and Abbott 2005 , equation in chapter 1 ) and the discrete version is : Let dt = T1 ( 2 ) - T1 ( 1 ) ( use signal 1 's sample interval) CORR ( tau ) = sum over all times t in T1 : dt * SIGNAL1 ( t ) * SIGNAL2 ( t - tau ) where TAU assumes all values listed in the vector CORR_TIMES . See also : XCORR , STEPFUNC , XCORR_STEPFUNC","title":"correlation_stepfunc"},{"location":"reference/signal/data2intervals.m/","text":"data2intervals \u00b6 DATA2INTERVALS - Identify data recorded during specified intervals [DATA_OUT,T_OUT] = DATA2INTERVALS(DATA, T, INTERVALS) This identifies data observations that were recorded in specified time intervals. The input observations DATA are expected to be a cell list of M vectors; each vector is assumed to reflect a different element such as a neuron. T is also a cell list of M vectors, and each value in T should reflect the time of an observation in DATA. INTERVALS should be a Nx2 matrix of time intervals, such as INTERVALS = [ t11 t12; t21 t22; t31 t32 ; ...]; DATA_OUT is a cell list of size N x M. Each element DATA_OUT{i,p} contains all observations in DATA{p} that occured during the interval [interval(i,1) ... interval(i,2)]. T_OUT is a cell list of size N x M. Each element T{i,p} contains the time of all observation in DATA_OUT{i,p}.","title":"data2intervals"},{"location":"reference/signal/data2intervals.m/#data2intervals","text":"DATA2INTERVALS - Identify data recorded during specified intervals [DATA_OUT,T_OUT] = DATA2INTERVALS(DATA, T, INTERVALS) This identifies data observations that were recorded in specified time intervals. The input observations DATA are expected to be a cell list of M vectors; each vector is assumed to reflect a different element such as a neuron. T is also a cell list of M vectors, and each value in T should reflect the time of an observation in DATA. INTERVALS should be a Nx2 matrix of time intervals, such as INTERVALS = [ t11 t12; t21 t22; t31 t32 ; ...]; DATA_OUT is a cell list of size N x M. Each element DATA_OUT{i,p} contains all observations in DATA{p} that occured during the interval [interval(i,1) ... interval(i,2)]. T_OUT is a cell list of size N x M. Each element T{i,p} contains the time of all observation in DATA_OUT{i,p}.","title":"data2intervals"},{"location":"reference/signal/decompose_time.m/","text":"decompose_time \u00b6 DECOMPOSE_TIME - Unwrap or desegment a concatenated recording into pieces NEWTIMES = DECOMPOSE_TIME ( TIMESTAMPS , TIME_INTERVALS ) Decomposes / desegements time stamps that are from a concatenated recording . It is assumed that TIMESTAMPS are a set of time stamps from a recording that has been concatenated from many smaller recordings . The beginning and end times of the concatenated recordings are provided in TIME_INTERVALS . Each row of TIME_INTERVALS should have the start and stop time ( in the same units as TIMESTAMPS ) of the recordings that comprise the concatenated recordings . Example : myrecording1 = [ 0 1 ]; % first recording started at 0, ended at 1 myrecording2 = [ 2 3 ]; % second recording started at 2, ended at 3 % concaneted record of these recordings would have duration 2 timestamps = [ 0.5 1.5 ]; % event at 1.5 really occured at 2.5 units in real time newtimes = decompose_time ( timestamps ,[ myrecording1 ; myrecording2 ])","title":"decompose_time"},{"location":"reference/signal/decompose_time.m/#decompose_time","text":"DECOMPOSE_TIME - Unwrap or desegment a concatenated recording into pieces NEWTIMES = DECOMPOSE_TIME ( TIMESTAMPS , TIME_INTERVALS ) Decomposes / desegements time stamps that are from a concatenated recording . It is assumed that TIMESTAMPS are a set of time stamps from a recording that has been concatenated from many smaller recordings . The beginning and end times of the concatenated recordings are provided in TIME_INTERVALS . Each row of TIME_INTERVALS should have the start and stop time ( in the same units as TIMESTAMPS ) of the recordings that comprise the concatenated recordings . Example : myrecording1 = [ 0 1 ]; % first recording started at 0, ended at 1 myrecording2 = [ 2 3 ]; % second recording started at 2, ended at 3 % concaneted record of these recordings would have duration 2 timestamps = [ 0.5 1.5 ]; % event at 1.5 really occured at 2.5 units in real time newtimes = decompose_time ( timestamps ,[ myrecording1 ; myrecording2 ])","title":"decompose_time"},{"location":"reference/signal/detrend_median.m/","text":"detrend_median \u00b6 DETREND_MEDIAN - Remove a median trend from data D = DETREND_MEDIAN ( S , SI , T ) Removes the result of a sliding median function of duration T from the sampled data S with sampling interval SI . The number of samples used for the sliding median function will be rounded to the nearest whole sample . The answer is returned in D . The median is sampled at intervals equal to 1 / 10 the windowsize . See also : DETREND , SLIDINGWINDOWFUNC","title":"detrend_median"},{"location":"reference/signal/detrend_median.m/#detrend_median","text":"DETREND_MEDIAN - Remove a median trend from data D = DETREND_MEDIAN ( S , SI , T ) Removes the result of a sliding median function of duration T from the sampled data S with sampling interval SI . The number of samples used for the sliding median function will be rounded to the nearest whole sample . The answer is returned in D . The median is sampled at intervals equal to 1 / 10 the windowsize . See also : DETREND , SLIDINGWINDOWFUNC","title":"detrend_median"},{"location":"reference/signal/dotdisc.m/","text":"dotdisc \u00b6 DOTDISC - Dot discriminator , an advanced window discriminator EVENT_SAMPLES = DOTDISC ( DATA , DOTS ) Detect events with \"dots\" , a form of advanced window discrimination . DATA the data to be examined . DOTS - An N x 3 matrix with the \"dots\" to be used for the discrimination . The first row is [ THRESH SIGN 0 ] indicating that all events larger than THRESH ( in the direction of SIGN , which can be 1 or - 1 ) will be considered . Each additional row is [ THRESH SIGN OFFSET ], and only events that have a signal of size THRESH ( in the direction of SIGN ) at the sample location OFFSET relative to the highest / lowest point that was determined in the first row will be selected . EVENT_SAMPLES returns the sample numbers of events that are described by the DOTS . If more than one adjacent sample passes the dot tests , then the sample number corresponds to the point in the middle of the points that pass . This is implemented as a mex function .","title":"dotdisc"},{"location":"reference/signal/dotdisc.m/#dotdisc","text":"DOTDISC - Dot discriminator , an advanced window discriminator EVENT_SAMPLES = DOTDISC ( DATA , DOTS ) Detect events with \"dots\" , a form of advanced window discrimination . DATA the data to be examined . DOTS - An N x 3 matrix with the \"dots\" to be used for the discrimination . The first row is [ THRESH SIGN 0 ] indicating that all events larger than THRESH ( in the direction of SIGN , which can be 1 or - 1 ) will be considered . Each additional row is [ THRESH SIGN OFFSET ], and only events that have a signal of size THRESH ( in the direction of SIGN ) at the sample location OFFSET relative to the highest / lowest point that was determined in the first row will be selected . EVENT_SAMPLES returns the sample numbers of events that are described by the DOTS . If more than one adjacent sample passes the dot tests , then the sample number corresponds to the point in the middle of the points that pass . This is implemented as a mex function .","title":"dotdisc"},{"location":"reference/signal/dual_led_filters.m/","text":"dual_led_filters \u00b6 LED2FILTERS - Design filters for detecting dual LEDs [ FILTERS , X , Y ] = DUAL_LED_FILTERS ( DA , SEP , RAD ) Designs a pair of circular filters , at a range of orientations , for detecting a pair of bright LEDs in an image . Input arguments : DA - The separation between different filters in orientation ( e . g ., 22 . 5 ) SEP - The physical separation between the the circles , in pixels ( e . g ., 85 ) RAD - The radius of each circle ( e . g ., 15 ) Outputs : Filters - the output filters , as a 3d stack of filters . Each 2d element of the 2d stack contains the filter for one possible orientation of the dual LEDs . X - An X coordinate mesh for the filters Y - A Y coordinate mesh for the filters Example : Create a family of filters and display them [ filters , x , y ] = dual_led_filters ( 22 . 5 , 85 , 15 ); figure ; colormap ( gray ( 256 )); for i = 1 : size ( filters , 3 ), image ( x (:), y (:), 255 * filters (:,:, i )); pause ( 1 ); end ;","title":"dual_led_filters"},{"location":"reference/signal/dual_led_filters.m/#dual_led_filters","text":"LED2FILTERS - Design filters for detecting dual LEDs [ FILTERS , X , Y ] = DUAL_LED_FILTERS ( DA , SEP , RAD ) Designs a pair of circular filters , at a range of orientations , for detecting a pair of bright LEDs in an image . Input arguments : DA - The separation between different filters in orientation ( e . g ., 22 . 5 ) SEP - The physical separation between the the circles , in pixels ( e . g ., 85 ) RAD - The radius of each circle ( e . g ., 15 ) Outputs : Filters - the output filters , as a 3d stack of filters . Each 2d element of the 2d stack contains the filter for one possible orientation of the dual LEDs . X - An X coordinate mesh for the filters Y - A Y coordinate mesh for the filters Example : Create a family of filters and display them [ filters , x , y ] = dual_led_filters ( 22 . 5 , 85 , 15 ); figure ; colormap ( gray ( 256 )); for i = 1 : size ( filters , 3 ), image ( x (:), y (:), 255 * filters (:,:, i )); pause ( 1 ); end ;","title":"dual_led_filters"},{"location":"reference/signal/fermi.m/","text":"fermi \u00b6 FERMI creates a 2D Fermi filter . FFILTER = FERMI ( XDIM , CUTOFF , TRANS_WIDTH ) calculates a 2D Fermi filter on a grid with dimensions XDIM * XDIM . The cutoff frequency is defined by CUTOFF and represents the radius ( in pixels ) of the circular symmetric function at which the amplitude drops below 0 . 5 TRANS_WIDTH defines the width of the transition . Author : Wally Block , UW-Madison 02 / 23 / 01 . Call : ffilter = fermi ( xdim , cutoff , trans_width );","title":"fermi"},{"location":"reference/signal/fermi.m/#fermi","text":"FERMI creates a 2D Fermi filter . FFILTER = FERMI ( XDIM , CUTOFF , TRANS_WIDTH ) calculates a 2D Fermi filter on a grid with dimensions XDIM * XDIM . The cutoff frequency is defined by CUTOFF and represents the radius ( in pixels ) of the circular symmetric function at which the amplitude drops below 0 . 5 TRANS_WIDTH defines the width of the transition . Author : Wally Block , UW-Madison 02 / 23 / 01 . Call : ffilter = fermi ( xdim , cutoff , trans_width );","title":"fermi"},{"location":"reference/signal/filterwaveform.m/","text":"filterwaveform \u00b6 [ D ] = FILTERWAVEFORM ( DATA , PARAMETERS ) Filters a one - dimensional waveform . PARAMETERS is a struct containing the following fields : method = one of 'conv' ( 1 ) or 'filtfilt' ( 2 ). B = the B part of the filter ( or the stencil to convolve ) A = the A part of the filter filtfilt will call the function filtfilt with the filter parameters B and A , while conv will convolve the data with B and remove the boundary points -- to ensure that DATA does not change size , use only odd - length kernels .","title":"filterwaveform"},{"location":"reference/signal/filterwaveform.m/#filterwaveform","text":"[ D ] = FILTERWAVEFORM ( DATA , PARAMETERS ) Filters a one - dimensional waveform . PARAMETERS is a struct containing the following fields : method = one of 'conv' ( 1 ) or 'filtfilt' ( 2 ). B = the B part of the filter ( or the stencil to convolve ) A = the A part of the filter filtfilt will call the function filtfilt with the filter parameters B and A , while conv will convolve the data with B and remove the boundary points -- to ensure that DATA does not change size , use only odd - length kernels .","title":"filterwaveform"},{"location":"reference/signal/oversample.m/","text":"oversample \u00b6 OVERSAMPLE - Calculate sample values for oversampling XN = OVERSAMPLE ( X , N ) For a signal X that takes values X ( 1 ), X ( 2 ), etc , this function calculates the linearly interpolated values of X with N times oversampling . Example : X = [ 0 1 ]; Xn = oversample ( X , 5 ) % Xn is [ 0 0.25 0.5 0.75 1.0 ]","title":"oversample"},{"location":"reference/signal/oversample.m/#oversample","text":"OVERSAMPLE - Calculate sample values for oversampling XN = OVERSAMPLE ( X , N ) For a signal X that takes values X ( 1 ), X ( 2 ), etc , this function calculates the linearly interpolated values of X with N times oversampling . Example : X = [ 0 1 ]; Xn = oversample ( X , 5 ) % Xn is [ 0 0.25 0.5 0.75 1.0 ]","title":"oversample"},{"location":"reference/signal/point2samplelabel.m/","text":"point2samplelabel \u00b6 POINT2SAMPLE - Convert a continuous point to a sample number for regularly sampled data S = POINT2SAMPLELABEL ( TI , DT , [ T0 ] ) Given an array of time values TI , returns the closest sample for a signal that is regularly sampled at interval DT . The closest sample number is determined by rounding . Samples are assumed to be numbered as S = T0 + N * DT ( Notice that these sample labels can be negative or 0 ). T0 is the time of the first sample of the signal . If T0 is not provided , it is assumed to be 0. Example : dt = 0.001 ; T = 0 : dt : 40 ; S = point2samplelabel ( T ( 20 ), dt ) % returns 20 See also : ROUND2SAMPLE","title":"point2samplelabel"},{"location":"reference/signal/point2samplelabel.m/#point2samplelabel","text":"POINT2SAMPLE - Convert a continuous point to a sample number for regularly sampled data S = POINT2SAMPLELABEL ( TI , DT , [ T0 ] ) Given an array of time values TI , returns the closest sample for a signal that is regularly sampled at interval DT . The closest sample number is determined by rounding . Samples are assumed to be numbered as S = T0 + N * DT ( Notice that these sample labels can be negative or 0 ). T0 is the time of the first sample of the signal . If T0 is not provided , it is assumed to be 0. Example : dt = 0.001 ; T = 0 : dt : 40 ; S = point2samplelabel ( T ( 20 ), dt ) % returns 20 See also : ROUND2SAMPLE","title":"point2samplelabel"},{"location":"reference/signal/refractory.m/","text":"refractory \u00b6 REFRACTORY - Impose a refractory period on events [OUT_TIMES,OUT_INDEXES] = REFRACTORY(IN_TIMES, REFRACTORY_PERIOD) This function will remove events from the vector IN_TIMES that occur more frequently than REFRACTORY_PERIOD. IN_TIMES should contain the times of events (in any units, whether they be units of time or sample numbers). REFRACTORY_PERIOD is the time after one event when another event cannot be said to happen. Any events occuring within REFRACTORY_PERIOD of a previous event will be removed. OUT_TIMES are the times that meet the refractory criteria. OUT_INDEXES are the index values of the points in IN_TIMES that meet the criteria, such that OUT_TIMES = IN_TIMES(OUT_INDEXES)","title":"refractory"},{"location":"reference/signal/refractory.m/#refractory","text":"REFRACTORY - Impose a refractory period on events [OUT_TIMES,OUT_INDEXES] = REFRACTORY(IN_TIMES, REFRACTORY_PERIOD) This function will remove events from the vector IN_TIMES that occur more frequently than REFRACTORY_PERIOD. IN_TIMES should contain the times of events (in any units, whether they be units of time or sample numbers). REFRACTORY_PERIOD is the time after one event when another event cannot be said to happen. Any events occuring within REFRACTORY_PERIOD of a previous event will be removed. OUT_TIMES are the times that meet the refractory criteria. OUT_INDEXES are the index values of the points in IN_TIMES that meet the criteria, such that OUT_TIMES = IN_TIMES(OUT_INDEXES)","title":"refractory"},{"location":"reference/signal/remove60hz.m/","text":"remove60hz \u00b6 REMOVE60HZ remove 60 Hz noise DATA_OUT = REMOVE60HZ ( DATA_IN , SAMPLERATE ) Removes 60 Hz noise via filtering with the methods and parameters described below . DATA_IN must be a vector . User beware : check the output of this function carefully with your data , to be sure that it doesn 't produce garbage. High frequencies ( like spikes ) can often be disturbed by certain methods employed here ( 'sgolay' ), so this is best done on low frequency data ( for example , membrane potential with spikes removed ) . The method and parameters of the function can be modified with name / value pairs : Parameter ( default ): | Description -------------------------------------------------------------- METHOD ( 'sgolay' ) | If 'sgolay' : | Use Savitzky - Golay filter | Relies on SOGOLAYFILT | If 'cheby1' : | Use chebychev1 type filter | Relies on CHEBY1 and FILTFILT | ( Signal Processing Toolbox ) | If 'ellip' : | Use elliptical filter | Relies on ELLIP and FILTFILT | If 'ellip+sgolay' , then the algorithm | uses a blend of the 'ellip' and | 'sgolay' methods . The signal is | first high - pass filtered above | 'ellipsgolay_high' . This high - pass | signal is then removed from the data , | and the remaining low - pass signal | is passed through the standard | 'sgolay' mode . Finally , the high | frequencies that were identified | in the 'high-pass' filter are added back . sgolay_freq ( 60 ) | For 'sgolay' , the frequency to remove . | Stop ([ 55 65 ]) | For 'cheby1' and 'ellip' , the | stop filter frequencies R ( 0.5 ) | For 'cheby1' and 'ellip' , R | decibles of peak - | to - peak ripple in passband Rs ( 20 ) | For 'ellip' , at least Rs decibles | of attentuation in the stop band Order ( 3 ) | For 'cheby1' and 'ellip' , the filter | order ellipsgolay_high ( 65 ) | For 'ellip+sgolay' , the high pass frequency If you get NaN for your output data , try reducing the filter order . Contributions : Wes Alford , Steve Van Hooser","title":"remove60hz"},{"location":"reference/signal/remove60hz.m/#remove60hz","text":"REMOVE60HZ remove 60 Hz noise DATA_OUT = REMOVE60HZ ( DATA_IN , SAMPLERATE ) Removes 60 Hz noise via filtering with the methods and parameters described below . DATA_IN must be a vector . User beware : check the output of this function carefully with your data , to be sure that it doesn 't produce garbage. High frequencies ( like spikes ) can often be disturbed by certain methods employed here ( 'sgolay' ), so this is best done on low frequency data ( for example , membrane potential with spikes removed ) . The method and parameters of the function can be modified with name / value pairs : Parameter ( default ): | Description -------------------------------------------------------------- METHOD ( 'sgolay' ) | If 'sgolay' : | Use Savitzky - Golay filter | Relies on SOGOLAYFILT | If 'cheby1' : | Use chebychev1 type filter | Relies on CHEBY1 and FILTFILT | ( Signal Processing Toolbox ) | If 'ellip' : | Use elliptical filter | Relies on ELLIP and FILTFILT | If 'ellip+sgolay' , then the algorithm | uses a blend of the 'ellip' and | 'sgolay' methods . The signal is | first high - pass filtered above | 'ellipsgolay_high' . This high - pass | signal is then removed from the data , | and the remaining low - pass signal | is passed through the standard | 'sgolay' mode . Finally , the high | frequencies that were identified | in the 'high-pass' filter are added back . sgolay_freq ( 60 ) | For 'sgolay' , the frequency to remove . | Stop ([ 55 65 ]) | For 'cheby1' and 'ellip' , the | stop filter frequencies R ( 0.5 ) | For 'cheby1' and 'ellip' , R | decibles of peak - | to - peak ripple in passband Rs ( 20 ) | For 'ellip' , at least Rs decibles | of attentuation in the stop band Order ( 3 ) | For 'cheby1' and 'ellip' , the filter | order ellipsgolay_high ( 65 ) | For 'ellip+sgolay' , the high pass frequency If you get NaN for your output data , try reducing the filter order . Contributions : Wes Alford , Steve Van Hooser","title":"remove60hz"},{"location":"reference/signal/removespikes.m/","text":"removespikes \u00b6 REMOVESPIKES - Remove spikes from voltage trace w / linear interpolation DATA_OUT = REMOVESPIKES ( DATA , T , SPIKETIMES , ...) Inputs: DATA - The voltage data values ( time series data ) ( must be bigger than 3 data points ) T - Either the time of each data sample in DATA , or a 1 x2 vector with T ( 1 ) as the time of the first sample , and T ( 2 ) as the sample interval . For both methods , the samples are assumed to be taken at regular sample intervals . SPIKETIMES - Spike times ( in same time units as T ) Outputs: DATA_OUT - The data with the spikes removed and filled in by linear inpolation Optional inputs: One can provide additional inputs to this function with name / value pairs . For example , to change the time T0 before each spike that is removed or the time T1 after each spike that is removed , use: DATA_OUT = REMOVESPIKES ( DATA , T , SPIKETIMES , ' T0 ', t0 , ' T1 ', t1 ) Parameters that can be modified: Name ( default value ) : | Meaning ------------------------------------------------------------------- SPIKE_INTERP_METHOD ( 1 ) | If 1 , then use linear interpolation ( via Matlab function INTERP1 ) SPIKE_BEGINNING_END_METHOD ( 1 ) | If 1 , then use pre - and post spike time to find the base | of the spike before and after the spike occurs | ( uses parameters t0 and t1 below ) t0 ( 0.003 ) | If 1 x1: Time before spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2: The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g ., [ 0.001 0.003 ] | considers times between 1 ms and 3 ms ) t1 ( 0.005 ) | If 1 x1: Time after spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2: The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g ., [ 0.001 0.003 ] | considers times between 1 ms and 3 ms )","title":"removespikes"},{"location":"reference/signal/removespikes.m/#removespikes","text":"REMOVESPIKES - Remove spikes from voltage trace w / linear interpolation DATA_OUT = REMOVESPIKES ( DATA , T , SPIKETIMES , ...) Inputs: DATA - The voltage data values ( time series data ) ( must be bigger than 3 data points ) T - Either the time of each data sample in DATA , or a 1 x2 vector with T ( 1 ) as the time of the first sample , and T ( 2 ) as the sample interval . For both methods , the samples are assumed to be taken at regular sample intervals . SPIKETIMES - Spike times ( in same time units as T ) Outputs: DATA_OUT - The data with the spikes removed and filled in by linear inpolation Optional inputs: One can provide additional inputs to this function with name / value pairs . For example , to change the time T0 before each spike that is removed or the time T1 after each spike that is removed , use: DATA_OUT = REMOVESPIKES ( DATA , T , SPIKETIMES , ' T0 ', t0 , ' T1 ', t1 ) Parameters that can be modified: Name ( default value ) : | Meaning ------------------------------------------------------------------- SPIKE_INTERP_METHOD ( 1 ) | If 1 , then use linear interpolation ( via Matlab function INTERP1 ) SPIKE_BEGINNING_END_METHOD ( 1 ) | If 1 , then use pre - and post spike time to find the base | of the spike before and after the spike occurs | ( uses parameters t0 and t1 below ) t0 ( 0.003 ) | If 1 x1: Time before spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2: The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g ., [ 0.001 0.003 ] | considers times between 1 ms and 3 ms ) t1 ( 0.005 ) | If 1 x1: Time after spike to remove ( in sec ) | The sample closest to this time is | chosen | If 1 x2: The range of times to consider as | the baseline value ; the median value | is taken as the baseline ; ( e . g ., [ 0.001 0.003 ] | considers times between 1 ms and 3 ms )","title":"removespikes"},{"location":"reference/signal/round2sample.m/","text":"round2sample \u00b6 ROUND2SAMPLE - Round a continuous point to the nearest sampled value for a regularly sampled signal TR = ROUND2SAMPLE ( TI , DT [, T0 ]) Given a signal sampled at regular intervals DT , and given a set of time points TI , calculates the closest sample times TR that are multiples of DT . T0 is the time of the first sample . If it is not provided then it is assumed to be 0. Example : DT = 0.001 ; TI = 0.00100000001 ; TR = ROUND2SAMPLE ( TI , DT ) % returns 0.001 See also : POINT2SAMPLELABEL","title":"round2sample"},{"location":"reference/signal/round2sample.m/#round2sample","text":"ROUND2SAMPLE - Round a continuous point to the nearest sampled value for a regularly sampled signal TR = ROUND2SAMPLE ( TI , DT [, T0 ]) Given a signal sampled at regular intervals DT , and given a set of time points TI , calculates the closest sample times TR that are multiples of DT . T0 is the time of the first sample . If it is not provided then it is assumed to be 0. Example : DT = 0.001 ; TI = 0.00100000001 ; TR = ROUND2SAMPLE ( TI , DT ) % returns 0.001 See also : POINT2SAMPLELABEL","title":"round2sample"},{"location":"reference/signal/samplesinepochs.m/","text":"samplesinepochs \u00b6 SAMPLESINEPOCHS - Identify samples that are within the given recording epochs [ SAMPLES_IN , SAMPLEINDEXES , SAMPLESNOTINEPOCHS ] = SAMPLESINEPOCHS ( SAMPLE_NUMBERS , EPOCHSTARTSAMPLES , EPOCHSTART , EPOCHSTOP ) Given a list of SAMPLE_NUMBERS , determines which are in a set of epochs and returns them in SAMPLES_IN and returns the index numbers of these samples in SAMPLEINDEXES . The recording epochs are specified by start sample numbers : EPOCHSTARTSAMPLES is an array with the sample number that begins each epoch . EPOCHSTART is the Epoch number we want to start including . EPOCHSTOP is the last Epoch number we want to stop including . Example : SN = [ 1 2 3 4 5 6 7 8 9 10 ]; EpStartSamples = [ 1 5 9 ]; % epochs start at samples 1, 5, and 9 EpStart = 1 ; EpStop = 2 ; SI = SAMPLESINEPOCHS ( SN , EpStartSamples , EpStart , EpStop ) % SI = [ 1 2 3 4 5 6 7 8 ] % samples in first 2 epochs","title":"samplesinepochs"},{"location":"reference/signal/samplesinepochs.m/#samplesinepochs","text":"SAMPLESINEPOCHS - Identify samples that are within the given recording epochs [ SAMPLES_IN , SAMPLEINDEXES , SAMPLESNOTINEPOCHS ] = SAMPLESINEPOCHS ( SAMPLE_NUMBERS , EPOCHSTARTSAMPLES , EPOCHSTART , EPOCHSTOP ) Given a list of SAMPLE_NUMBERS , determines which are in a set of epochs and returns them in SAMPLES_IN and returns the index numbers of these samples in SAMPLEINDEXES . The recording epochs are specified by start sample numbers : EPOCHSTARTSAMPLES is an array with the sample number that begins each epoch . EPOCHSTART is the Epoch number we want to start including . EPOCHSTOP is the last Epoch number we want to stop including . Example : SN = [ 1 2 3 4 5 6 7 8 9 10 ]; EpStartSamples = [ 1 5 9 ]; % epochs start at samples 1, 5, and 9 EpStart = 1 ; EpStop = 2 ; SI = SAMPLESINEPOCHS ( SN , EpStartSamples , EpStart , EpStop ) % SI = [ 1 2 3 4 5 6 7 8 ] % samples in first 2 epochs","title":"samplesinepochs"},{"location":"reference/signal/step_autocorrelation.m/","text":"step_autocorrelation \u00b6 STEP_AUTOCORRELATION - Mathematical function describing autocorrelation of a step function SAC = STEP_AUTOCORRELATION ( ALPHA , N , n ) Produces the mathematically determined autocorrelation function of a process that , with probability alpha , produces a unit pulse of width N samples . n is the lag of the autocorrelation to be computed , and can be a vector . Example : alpha = 0 . 2 ; N = 10 ; n = -50 : 50 ; sac = step_autocorrelation ( alpha , N , n ); figure ; plot ( n , sac , '-o' );","title":"step_autocorrelation"},{"location":"reference/signal/step_autocorrelation.m/#step_autocorrelation","text":"STEP_AUTOCORRELATION - Mathematical function describing autocorrelation of a step function SAC = STEP_AUTOCORRELATION ( ALPHA , N , n ) Produces the mathematically determined autocorrelation function of a process that , with probability alpha , produces a unit pulse of width N samples . n is the lag of the autocorrelation to be computed , and can be a vector . Example : alpha = 0 . 2 ; N = 10 ; n = -50 : 50 ; sac = step_autocorrelation ( alpha , N , n ); figure ; plot ( n , sac , '-o' );","title":"step_autocorrelation"},{"location":"reference/signal/step_autocorrelation_ztrans_discrete.m/","text":"step_autocorrelation_ztrans_discrete \u00b6 STEP_AUTOCORRElATION_ZTRANS_DISCRETE Evaluate the z - transform of the step - autocorrelation function OUT = STEP_AUTOCORRELATION_ZTRANS_DISCRETE ( ALPHA , N , Z ) Evalutes the STEP_AUTOCORRELATION z - transform for a given value of the pulse height ALPHA and pulse width N ( samples ) , and a given value of Z . Z may be an array .","title":"step_autocorrelation_ztrans_discrete"},{"location":"reference/signal/step_autocorrelation_ztrans_discrete.m/#step_autocorrelation_ztrans_discrete","text":"STEP_AUTOCORRElATION_ZTRANS_DISCRETE Evaluate the z - transform of the step - autocorrelation function OUT = STEP_AUTOCORRELATION_ZTRANS_DISCRETE ( ALPHA , N , Z ) Evalutes the STEP_AUTOCORRELATION z - transform for a given value of the pulse height ALPHA and pulse width N ( samples ) , and a given value of Z . Z may be an array .","title":"step_autocorrelation_ztrans_discrete"},{"location":"reference/signal/step_whitening_filter.m/","text":"step_whitening_filter \u00b6 STEP_WHITENING_FILTER - Compute the optimal FIR filter for Wiener filtering a step [ RINV,R ] = STEP_WHITENING_FILTER ( ALPHA , N , M ) Computes the inverse of the correlation matrix of a STEP signal for a Wiener filter . Suppose we have a signal d [ n ] , and we wish to make the best linear projection y [ n ] from a signal x [ n ] onto d [ n ] . What is the optimal filter h [ n ] such that y [ n ] = sum ( h [ 1:M ] . * x [ n-[1:M ] ] ) Suppose further that we know that x [ n ] is comprised of STEPs of - 1 , 0 , or 1 , with probability alpha , 1 - 2 * alpha , and alpha , respectively , and exhibits duration N . Then the auto - correlation matrix of the signal x [ n ] is returned in R . R ( i + 1 , j + 1 ) = expectation ( x [ n-i ] x [ n-j ] ) And Rinv is the inverse of this matrix . This matrix can be used to find the optimal filter h [ n ] : h [ n ] = Rinv * P , where P is the correlation of d [ n ] with x [ n ] .","title":"step_whitening_filter"},{"location":"reference/signal/step_whitening_filter.m/#step_whitening_filter","text":"STEP_WHITENING_FILTER - Compute the optimal FIR filter for Wiener filtering a step [ RINV,R ] = STEP_WHITENING_FILTER ( ALPHA , N , M ) Computes the inverse of the correlation matrix of a STEP signal for a Wiener filter . Suppose we have a signal d [ n ] , and we wish to make the best linear projection y [ n ] from a signal x [ n ] onto d [ n ] . What is the optimal filter h [ n ] such that y [ n ] = sum ( h [ 1:M ] . * x [ n-[1:M ] ] ) Suppose further that we know that x [ n ] is comprised of STEPs of - 1 , 0 , or 1 , with probability alpha , 1 - 2 * alpha , and alpha , respectively , and exhibits duration N . Then the auto - correlation matrix of the signal x [ n ] is returned in R . R ( i + 1 , j + 1 ) = expectation ( x [ n-i ] x [ n-j ] ) And Rinv is the inverse of this matrix . This matrix can be used to find the optimal filter h [ n ] : h [ n ] = Rinv * P , where P is the correlation of d [ n ] with x [ n ] .","title":"step_whitening_filter"},{"location":"reference/signal/threshold_crossings.m/","text":"threshold_crossings \u00b6 THRESHOLD_CROSSINGS Detect threshold crossings in data INDEX_VALUES = THRESHOLD_CROSSINGS(INPUT, THRESHOLD) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD. The index values where this occurs are returned in INDEX_VALUES.","title":"threshold_crossings"},{"location":"reference/signal/threshold_crossings.m/#threshold_crossings","text":"THRESHOLD_CROSSINGS Detect threshold crossings in data INDEX_VALUES = THRESHOLD_CROSSINGS(INPUT, THRESHOLD) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD. The index values where this occurs are returned in INDEX_VALUES.","title":"threshold_crossings"},{"location":"reference/signal/threshold_crossings_epochs.m/","text":"threshold_crossings_epochs \u00b6 THRESHOLD_CROSSINGS_EPOCHS Detect threshold crossing epochs in data and the corresponding peaks [ INDEXES_UP , INDEXES_DOWN , INDEXES_PEAKS ] = THRESHOLD_CROSSINGS_EPOCHS ( INPUT , THRESHOLD ) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD , and returns these index values in INDEXES_UP . Note that any threshold crossing that is unaccompanied by a subsequent downward transition is not counted . Next , it finds all places where the data INPUT transitions from above the threshold to below threshold , and returns these index values in INDEXES_DOWN . Note that downward transitions must be associated with an upward transitions , and are excluded if the first samples are above threshold . ( That is , the first downward transition must follow an upward transition present in INPUT . ) Finally , the indexes corresponding to the locations with the largest suprathreshold values between each UP and DOWN transition are returned in INDEXES_PEAK . See also : THRESHOLD_CROSSINGS","title":"threshold_crossings_epochs"},{"location":"reference/signal/threshold_crossings_epochs.m/#threshold_crossings_epochs","text":"THRESHOLD_CROSSINGS_EPOCHS Detect threshold crossing epochs in data and the corresponding peaks [ INDEXES_UP , INDEXES_DOWN , INDEXES_PEAKS ] = THRESHOLD_CROSSINGS_EPOCHS ( INPUT , THRESHOLD ) Finds all places where the data INPUT transitions from below the threshold THRESHOLD to be equal to or above the threshold THRESHOLD , and returns these index values in INDEXES_UP . Note that any threshold crossing that is unaccompanied by a subsequent downward transition is not counted . Next , it finds all places where the data INPUT transitions from above the threshold to below threshold , and returns these index values in INDEXES_DOWN . Note that downward transitions must be associated with an upward transitions , and are excluded if the first samples are above threshold . ( That is , the first downward transition must follow an upward transition present in INPUT . ) Finally , the indexes corresponding to the locations with the largest suprathreshold values between each UP and DOWN transition are returned in INDEXES_PEAK . See also : THRESHOLD_CROSSINGS","title":"threshold_crossings_epochs"},{"location":"reference/signal/whitening_filter_from_autocorr.m/","text":"whitening_filter_from_autocorr \u00b6 WHITENING_FILTER_FROM_AUTOCORR - Compute whitening filter from inverse covariance matrix from autocorrelation of signal [ RINV , R ] = WHITENING_FILTER_FROM_AUTOCORR ( AUTOCORR , M ) Uses the inverse of the covariance matrix derived from the autocorrelation of a signal to generate a whitening filter . Given an autocorrelation of a signal in the form of a vector with lags 1. . N , this function creates a covariance matrix R with dimension M and its inverse , RINV . If M is greater than M , then the matrix R is zero padded .","title":"whitening_filter_from_autocorr"},{"location":"reference/signal/whitening_filter_from_autocorr.m/#whitening_filter_from_autocorr","text":"WHITENING_FILTER_FROM_AUTOCORR - Compute whitening filter from inverse covariance matrix from autocorrelation of signal [ RINV , R ] = WHITENING_FILTER_FROM_AUTOCORR ( AUTOCORR , M ) Uses the inverse of the covariance matrix derived from the autocorrelation of a signal to generate a whitening filter . Given an autocorrelation of a signal in the form of a vector with lags 1. . N , this function creates a covariance matrix R with dimension M and its inverse , RINV . If M is greater than M , then the matrix R is zero padded .","title":"whitening_filter_from_autocorr"},{"location":"reference/signal/wiener_demo.m/","text":"wiener_demo \u00b6 WIENER_DEMO - Demonstration of filter reconstruction using Wiener filtering Given a signal x [ n ] that is filtered by some unknown process , derive the least square best filter such that y [ n ] * myfilter + noise = x [ n ] modified from : Digital Signal Processing Using MATLAB for Students and Researchers John W . Leis ( Wiley , 2011 ) The following parameters of the example can be modified by passing name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------------- N ( 10000 ) | Number of points b ( [ 1 0.8 -0.4 0.1 ] ) | Filter parameters ( computed using filter ) L ( 4 ) | Coefficient length of divided signal NewNoise ( 0 ) | Should we filter the original noise or new noise ?","title":"wiener_demo"},{"location":"reference/signal/wiener_demo.m/#wiener_demo","text":"WIENER_DEMO - Demonstration of filter reconstruction using Wiener filtering Given a signal x [ n ] that is filtered by some unknown process , derive the least square best filter such that y [ n ] * myfilter + noise = x [ n ] modified from : Digital Signal Processing Using MATLAB for Students and Researchers John W . Leis ( Wiley , 2011 ) The following parameters of the example can be modified by passing name / value pairs : Parameter ( default ) | Description ---------------------------------------------------------------------------- N ( 10000 ) | Number of points b ( [ 1 0.8 -0.4 0.1 ] ) | Filter parameters ( computed using filter ) L ( 4 ) | Coefficient length of divided signal NewNoise ( 0 ) | Should we filter the original noise or new noise ?","title":"wiener_demo"},{"location":"reference/signal/xcorr_discrete.m/","text":"xcorr_discrete \u00b6 XCORR_DISCRETE - Calculate the cross - correlation between two signals without FFT XC = XCORR_DISCRETE ( SIGNAL1 , SIGNAL2 , N , NORMSTRING ) Computes the cross - correlation between SIGNAL1 and SIGNAL2 for lags up to N . If NORMSTRING is left off , then the correlation is not normalized . Otherwise it is normalized according to the following values of NORMSTRING : 'none' : no normalization 'biased' : divides by length of SIGNAL1 'unbiased' : divides by the absolute value of length of SIGNAL - LAG","title":"xcorr_discrete"},{"location":"reference/signal/xcorr_discrete.m/#xcorr_discrete","text":"XCORR_DISCRETE - Calculate the cross - correlation between two signals without FFT XC = XCORR_DISCRETE ( SIGNAL1 , SIGNAL2 , N , NORMSTRING ) Computes the cross - correlation between SIGNAL1 and SIGNAL2 for lags up to N . If NORMSTRING is left off , then the correlation is not normalized . Otherwise it is normalized according to the following values of NORMSTRING : 'none' : no normalization 'biased' : divides by length of SIGNAL1 'unbiased' : divides by the absolute value of length of SIGNAL - LAG","title":"xcorr_discrete"},{"location":"reference/signal/xcorr_stepfunc.m/","text":"xcorr_stepfunc \u00b6 XCORR_STEPFUNC - Perform correlation between a time series and a step function [ CORR , LAGS ] = XCORR_STEPFUNC ( T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. MAXLAG is the maximum lag to examine ( in samples of SIGNAL1 ) See also : XCORR , STEPFUNC , CORRELATION_STEPFUNC","title":"xcorr_stepfunc"},{"location":"reference/signal/xcorr_stepfunc.m/#xcorr_stepfunc","text":"XCORR_STEPFUNC - Perform correlation between a time series and a step function [ CORR , LAGS ] = XCORR_STEPFUNC ( T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between a signal ( SIGNAL1 ), which is sampled at times T1 , and up to N step - function signals in the columns SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL2 that are out of the range are set to 0. MAXLAG is the maximum lag to examine ( in samples of SIGNAL1 ) See also : XCORR , STEPFUNC , CORRELATION_STEPFUNC","title":"xcorr_stepfunc"},{"location":"reference/signal/xcorr_stepfuncstepfunc.m/","text":"xcorr_stepfuncstepfunc \u00b6 XCORR_STEPFUNC - Perform correlation between a step function and a step function [ CORR , LAGS ] = XCORR_STEPFUNCSTEPFUNC ( TE , T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between an N step - function SIGNAL1 that changes values at times T1 and is at times T1 , and the N step - function signal SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL1 and SIGNAL2 that are out of the range are set to 0. TE are the times over which to evalute the step functions , and the time between successive values of TE is equal to 1 sample in the returned cross - correlation . MAXLAG is the maximum lag to examine ( in samples of TE ) . The XCORR normalization is 'biased' . The correlation is returned in CORR . It has 1 column per dimension of the two step functions . ( Programmer note : there is a probably a better algorithm for this . ) See also : XCORR , XCORR_STEPFUNC , STEPFUNC , CORRELATION_STEPFUNC","title":"xcorr_stepfuncstepfunc"},{"location":"reference/signal/xcorr_stepfuncstepfunc.m/#xcorr_stepfuncstepfunc","text":"XCORR_STEPFUNC - Perform correlation between a step function and a step function [ CORR , LAGS ] = XCORR_STEPFUNCSTEPFUNC ( TE , T1 , SIGNAL1 , MAXLAG , T2 , SIGNAL2 ) Computes the discrete approximation to the correlation between an N step - function SIGNAL1 that changes values at times T1 and is at times T1 , and the N step - function signal SIGNAL2 , which change values at times T2 . SIGNAL2 does not have to have the same sample interval ( sample rate ) as SIGNAL1 . Note that values of SIGNAL1 and SIGNAL2 that are out of the range are set to 0. TE are the times over which to evalute the step functions , and the time between successive values of TE is equal to 1 sample in the returned cross - correlation . MAXLAG is the maximum lag to examine ( in samples of TE ) . The XCORR normalization is 'biased' . The correlation is returned in CORR . It has 1 column per dimension of the two step functions . ( Programmer note : there is a probably a better algorithm for this . ) See also : XCORR , XCORR_STEPFUNC , STEPFUNC , CORRELATION_STEPFUNC","title":"xcorr_stepfuncstepfunc"},{"location":"reference/signal/ztrans_discrete.m/","text":"ztrans_discrete \u00b6 ZTRANS_DISCRETE Evaluate the discrete Z transform for a value of z OUT = ZTRANS_DISCRETE ( N , V , Z ) Given an array of sample locations N and an array of corresponding values V , computes the Z - transform and evaluates the result at Z . Z can be an array . The Z - transform is X ( Z ) = sum { all_N }{ V ( n ) * z ^ ( - n ) }","title":"ztrans_discrete"},{"location":"reference/signal/ztrans_discrete.m/#ztrans_discrete","text":"ZTRANS_DISCRETE Evaluate the discrete Z transform for a value of z OUT = ZTRANS_DISCRETE ( N , V , Z ) Given an array of sample locations N and an array of corresponding values V , computes the Z - transform and evaluates the result at Z . Z can be an array . The Z - transform is X ( Z ) = sum { all_N }{ V ( n ) * z ^ ( - n ) }","title":"ztrans_discrete"},{"location":"reference/spreadsheet/spreadsheet_filterbydate.m/","text":"spreadsheet_filterbydate \u00b6 SPREADSHEET - Filter a spreadsheet for fields defined by a Timestamp field SPREADSHEET_OUT = SPREADSHEET_FILTERBYDATE ( SPREADSHEET_IN , DATELOW , DATEHIGH , ... ) Filters a spreadsheet ( cell array ) SPREADSHEET_IN to exclude rows that have a 'timestamp' field entry outside of the range DATELOW to DATEHIGH . DATELOW and DATEHIGH can be any date string that is recognized by the Matlab function DATENUM . ( For example , 'YYYY-MM-DD' is acceptable and unambiguous . ) This function can also take name / value pairs that modify its behavior . Parameter ( default ) | Description ------------------------------------------------------------------------------- FirstRowIsHeader ( 1 ) | Is the first row a header ? LeaveHeader ( 1 ) | Leave the header in the filtered spreadsheet TimestampColumnLabel | The label of the timestamp column ( 'Timestamp' ) | TimestampColumnNumber | The column of the timestamp column . If empty , will be ( '' ) | searched for using TimestampColumnLabel . See also : DATENUM , NAMEVALUEPAIR","title":"spreadsheet_filterbydate"},{"location":"reference/spreadsheet/spreadsheet_filterbydate.m/#spreadsheet_filterbydate","text":"SPREADSHEET - Filter a spreadsheet for fields defined by a Timestamp field SPREADSHEET_OUT = SPREADSHEET_FILTERBYDATE ( SPREADSHEET_IN , DATELOW , DATEHIGH , ... ) Filters a spreadsheet ( cell array ) SPREADSHEET_IN to exclude rows that have a 'timestamp' field entry outside of the range DATELOW to DATEHIGH . DATELOW and DATEHIGH can be any date string that is recognized by the Matlab function DATENUM . ( For example , 'YYYY-MM-DD' is acceptable and unambiguous . ) This function can also take name / value pairs that modify its behavior . Parameter ( default ) | Description ------------------------------------------------------------------------------- FirstRowIsHeader ( 1 ) | Is the first row a header ? LeaveHeader ( 1 ) | Leave the header in the filtered spreadsheet TimestampColumnLabel | The label of the timestamp column ( 'Timestamp' ) | TimestampColumnNumber | The column of the timestamp column . If empty , will be ( '' ) | searched for using TimestampColumnLabel . See also : DATENUM , NAMEVALUEPAIR","title":"spreadsheet_filterbydate"},{"location":"reference/spreadsheet/spreadsheet_multiplechoice.m/","text":"spreadsheet_multiplechoice \u00b6 SPREADSHEET_MULTIPLECHOICE - Return answers to a multiple choice spreadsheet question ANSWERS = SPREADSHEET_MULTIPLECHOICE ( SPREADSHEET , QUESTION , ... ) Returns a structure with responses to a multiple choice \"question\" in the header row of a spreadsheet . The header row is assumed to be the first row . The structure ANSWERS has 3 fields : question ( the question asked ) , choices ( a cell array of strings of the choices ) , and results ( a vector of how many choices of each type were made ) . This function can also take name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------- choices ( [] ) | If the user wishes to provide the choices , one | can . This is useful for prescribing the order | of the choices , or for indicating the possibility of | choices that are not represented in the data . If empty , | then choices will be determined empircally by the entries | in the spreadsheet . See also : NAMEVALUEPAIRS","title":"spreadsheet_multiplechoice"},{"location":"reference/spreadsheet/spreadsheet_multiplechoice.m/#spreadsheet_multiplechoice","text":"SPREADSHEET_MULTIPLECHOICE - Return answers to a multiple choice spreadsheet question ANSWERS = SPREADSHEET_MULTIPLECHOICE ( SPREADSHEET , QUESTION , ... ) Returns a structure with responses to a multiple choice \"question\" in the header row of a spreadsheet . The header row is assumed to be the first row . The structure ANSWERS has 3 fields : question ( the question asked ) , choices ( a cell array of strings of the choices ) , and results ( a vector of how many choices of each type were made ) . This function can also take name / value pairs that modify its behavior : Parameter ( default ) | Description -------------------------------------------------------------------- choices ( [] ) | If the user wishes to provide the choices , one | can . This is useful for prescribing the order | of the choices , or for indicating the possibility of | choices that are not represented in the data . If empty , | then choices will be determined empircally by the entries | in the spreadsheet . See also : NAMEVALUEPAIRS","title":"spreadsheet_multiplechoice"},{"location":"reference/stats/chi2class.m/","text":"chi2class \u00b6 CHI2CLASS - Tests whether observations are distributed equally among classes [ P , CHI2 , E ] = CHI2CLASS ( D ) Returns the p value and chi-square value of the test of the null hypothesis that cells are distributed equally among classes in several groups . E is the expected number of members of each group if there are no differences among the experimental groups . D should be the grouping matrix . Each row of D should have the class memberships for an experimental group . Example : Suppose we want to examine whether the gender distribution of computer science majors differs from that of English majors in a small college . Suppose that there are 90 male and 10 female computer science majors and 40 male and 60 female English majors . D = [ 90 10 ; 40 60 ] ; [ p , chi2 , E ] = chi2class ( D )","title":"chi2class"},{"location":"reference/stats/chi2class.m/#chi2class","text":"CHI2CLASS - Tests whether observations are distributed equally among classes [ P , CHI2 , E ] = CHI2CLASS ( D ) Returns the p value and chi-square value of the test of the null hypothesis that cells are distributed equally among classes in several groups . E is the expected number of members of each group if there are no differences among the experimental groups . D should be the grouping matrix . Each row of D should have the class memberships for an experimental group . Example : Suppose we want to examine whether the gender distribution of computer science majors differs from that of English majors in a small college . Suppose that there are 90 male and 10 female computer science majors and 40 male and 60 female English majors . D = [ 90 10 ; 40 60 ] ; [ p , chi2 , E ] = chi2class ( D )","title":"chi2class"},{"location":"reference/stats/chi2uniformtest.m/","text":"chi2uniformtest \u00b6 CHI2UNIFORMTEST - Test for uniformity of distribution of data in bins [ P , V , DF ] = CHI2UNIFORMTEST ( D ) For data classified in discrete bins D ( 1 ) , D ( 2 ) , this returns the probability of the null hypothesis that the \"true\" number of data points in D ( 1 ) == D ( 2 ) == D ( 3 ) etc and that the observed differences are due to statistical sampling .","title":"chi2uniformtest"},{"location":"reference/stats/chi2uniformtest.m/#chi2uniformtest","text":"CHI2UNIFORMTEST - Test for uniformity of distribution of data in bins [ P , V , DF ] = CHI2UNIFORMTEST ( D ) For data classified in discrete bins D ( 1 ) , D ( 2 ) , this returns the probability of the null hypothesis that the \"true\" number of data points in D ( 1 ) == D ( 2 ) == D ( 3 ) etc and that the observed differences are due to statistical sampling .","title":"chi2uniformtest"},{"location":"reference/stats/discrimin_iterative.m/","text":"discrimin_iterative \u00b6 discrimin_iterative is a function. [a, c, P] = discrimin_iterative(DATA, G)","title":"discrimin_iterative"},{"location":"reference/stats/discrimin_iterative.m/#discrimin_iterative","text":"discrimin_iterative is a function. [a, c, P] = discrimin_iterative(DATA, G)","title":"discrimin_iterative"},{"location":"reference/stats/discrimin_iterative_err.m/","text":"discrimin_iterative_err \u00b6 discrimin_iterative_err is a function. err = discrimin_iterative_err(X, data, g)","title":"discrimin_iterative_err"},{"location":"reference/stats/discrimin_iterative_err.m/#discrimin_iterative_err","text":"discrimin_iterative_err is a function. err = discrimin_iterative_err(X, data, g)","title":"discrimin_iterative_err"},{"location":"reference/stats/gof_Zoccolan.m/","text":"gof_Zoccolan \u00b6 GOF_ZOCCOLAN - Goodness of Fit from Zoccolan et al . , 2005 [ GF , Vres , Vexpl , Vnoise ] = GOF_ZOCCOLAN ( TRIALDATA , FIT ) Returns goodness of fit that describes how much of the explainable variation ( i . e . , that not due to noise across trials ) is explained by a given fit . TRIALDATA should have M columns and N rows . Each column should have individual responses for one particular stimulus . If any values are NAN then these trials are excluded . FIT is a fit to the mean response to each stimulus and should be 1 xN . GF is the goodness of fit measure from 0 to 1 Vres is the residual variance left over from the fit Vexpl is the explainable variance Vnoise is the variance of the noise Ref : Zoccolan DE , Cox DD , DiCarlo , JJ . J Neurosci 25 : 8150 - 8164 2005.","title":"gof_Zoccolan"},{"location":"reference/stats/gof_Zoccolan.m/#gof_zoccolan","text":"GOF_ZOCCOLAN - Goodness of Fit from Zoccolan et al . , 2005 [ GF , Vres , Vexpl , Vnoise ] = GOF_ZOCCOLAN ( TRIALDATA , FIT ) Returns goodness of fit that describes how much of the explainable variation ( i . e . , that not due to noise across trials ) is explained by a given fit . TRIALDATA should have M columns and N rows . Each column should have individual responses for one particular stimulus . If any values are NAN then these trials are excluded . FIT is a fit to the mean response to each stimulus and should be 1 xN . GF is the goodness of fit measure from 0 to 1 Vres is the residual variance left over from the fit Vexpl is the explainable variance Vnoise is the variance of the noise Ref : Zoccolan DE , Cox DD , DiCarlo , JJ . J Neurosci 25 : 8150 - 8164 2005.","title":"gof_Zoccolan"},{"location":"reference/stats/gof_dicarlo_totalpower.m/","text":"gof_dicarlo_totalpower \u00b6 GOF_DICARLO_TOTALPOWER - Goodness of Fit from DiCarlo et al . 1988 [ GF , WS ] = GOF_DICARLO_TOTALPOWER ( RAWDATA , FIT , NUMFITPARAMS ) Computes an analog to the \"explanable variance\" goodness - of - fit in DiCarlo et al . 1988 , except using the total power of a response and fit ( not sum of squares around the mean ) . Imagine a measured process Y ( t ) reflects some underlying function F ( t ) plus noise ( due to measurement or process ) N ( t ) . Then the sum of squares ( Y ( t ) ^ 2 ) for all t is ( Y ( t ) ^ 2 ) = ( F ( t ) ^ 2 ) + ( N ( t )) ^ 2 + 2 * F ( t ) * N ( t ) . If we further assume that the expected value of N ( t ) is 0 , then on average ( Y ( t ) ^ 2 ) = F ( t ) ^ 2 + N ( t ) ^ 2. Because of the noise N ( t ), the power ( signal around 0 ) in Y ( t ) due to this noise is unexplanable by any model . The power of Y ( t ) is then Y ( t ) .^ 2 == F ( t ) .^ 2 + N ( t ) .^ 2 but the explanable power ( power of F ) is F ( t ) .^ 2 == Y ( t ) .^ 2 - N ( t ) .^ 2 The goodness of fit GF describes how much of this explanable power of Y ( which is the power of F ) is explained by a fit H . GF = ( FIT_EXPLAINED_POWER ) / ( EXPLANABLE_POWER ) The entire workspace is returned as a structure in WS . Related to : Ref : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey This function accepts name / value pairs that alter its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------------------ NoiseEstimation ( 'median' ) | How will we estimate the noise ? Can be 'median' or 'std' . | If it is 'median' , then STD_FROM_MEDIAN ( X ) is used . | If it is 'STD' , then STD ( X ) is used .","title":"gof_dicarlo_totalpower"},{"location":"reference/stats/gof_dicarlo_totalpower.m/#gof_dicarlo_totalpower","text":"GOF_DICARLO_TOTALPOWER - Goodness of Fit from DiCarlo et al . 1988 [ GF , WS ] = GOF_DICARLO_TOTALPOWER ( RAWDATA , FIT , NUMFITPARAMS ) Computes an analog to the \"explanable variance\" goodness - of - fit in DiCarlo et al . 1988 , except using the total power of a response and fit ( not sum of squares around the mean ) . Imagine a measured process Y ( t ) reflects some underlying function F ( t ) plus noise ( due to measurement or process ) N ( t ) . Then the sum of squares ( Y ( t ) ^ 2 ) for all t is ( Y ( t ) ^ 2 ) = ( F ( t ) ^ 2 ) + ( N ( t )) ^ 2 + 2 * F ( t ) * N ( t ) . If we further assume that the expected value of N ( t ) is 0 , then on average ( Y ( t ) ^ 2 ) = F ( t ) ^ 2 + N ( t ) ^ 2. Because of the noise N ( t ), the power ( signal around 0 ) in Y ( t ) due to this noise is unexplanable by any model . The power of Y ( t ) is then Y ( t ) .^ 2 == F ( t ) .^ 2 + N ( t ) .^ 2 but the explanable power ( power of F ) is F ( t ) .^ 2 == Y ( t ) .^ 2 - N ( t ) .^ 2 The goodness of fit GF describes how much of this explanable power of Y ( which is the power of F ) is explained by a fit H . GF = ( FIT_EXPLAINED_POWER ) / ( EXPLANABLE_POWER ) The entire workspace is returned as a structure in WS . Related to : Ref : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey This function accepts name / value pairs that alter its behavior : Parameter ( default ) | Description ------------------------------------------------------------------------------------------ NoiseEstimation ( 'median' ) | How will we estimate the noise ? Can be 'median' or 'std' . | If it is 'median' , then STD_FROM_MEDIAN ( X ) is used . | If it is 'STD' , then STD ( X ) is used .","title":"gof_dicarlo_totalpower"},{"location":"reference/stats/gof_dicarlo_totalpower_biastest.m/","text":"gof_dicarlo_totalpower_biastest \u00b6 GOF_DICARLO_TOTALPOWER_BIASTEST The total power measure derived in GOF_DICARLO_TOTALPOWER has a bias that is explored here . One needs to read the code . Note that this function is named for a related measure in an appendix of a 1988 paper : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey","title":"gof_dicarlo_totalpower_biastest"},{"location":"reference/stats/gof_dicarlo_totalpower_biastest.m/#gof_dicarlo_totalpower_biastest","text":"GOF_DICARLO_TOTALPOWER_BIASTEST The total power measure derived in GOF_DICARLO_TOTALPOWER has a bias that is explored here . One needs to read the code . Note that this function is named for a related measure in an appendix of a 1988 paper : DiCarlo JJ , Johnson KO , Hsaio SS . J Neurosci 1988 : Structure of Receptive Fields in Area 3 b of Primary Somatosensory Cortex in the Alert Monkey","title":"gof_dicarlo_totalpower_biastest"},{"location":"reference/stats/gof_totalpower.m/","text":"gof_totalpower \u00b6 GOF_TOTALPOWER - Simple computation of how much 'power' of a signal is accounted for by a fit [ GF , TOTAL_POWER , FIT_POWER , RES_POWER , RES ] = GOF_TOTALPOWER ( S , F ) Computes the amount of total power of a signal , the total power of a F of S , and the fraction of the total power that is described by the fit . No effort is made to account for how much of the signal S may be noise . Total power is computed by taking the average value of the square of the signal S and the square of the signal F . This differs from the coefficient of determination , where the mean is subtracted . GF = ( FIT_POWER ) / ( TOTAL_POWER ) RES_POWER is the power of the residual RES which is S - F . S and F are expected to be vectors .","title":"gof_totalpower"},{"location":"reference/stats/gof_totalpower.m/#gof_totalpower","text":"GOF_TOTALPOWER - Simple computation of how much 'power' of a signal is accounted for by a fit [ GF , TOTAL_POWER , FIT_POWER , RES_POWER , RES ] = GOF_TOTALPOWER ( S , F ) Computes the amount of total power of a signal , the total power of a F of S , and the fraction of the total power that is described by the fit . No effort is made to account for how much of the signal S may be noise . Total power is computed by taking the average value of the square of the signal S and the square of the signal F . This differs from the coefficient of determination , where the mean is subtracted . GF = ( FIT_POWER ) / ( TOTAL_POWER ) RES_POWER is the power of the residual RES which is S - F . S and F are expected to be vectors .","title":"gof_totalpower"},{"location":"reference/stats/hartigansdipsigniftest.m/","text":"hartigansdipsigniftest \u00b6 function [dip,p_value, xlow,xup]=HartigansDipSignifTest ( xpdf,nboot ) calculates Hartigan ' s DIP statistic and its significance for the empirical p . d . f XPDF ( vector of sample values ). This routine calls the matlab routine 'HartigansDipTest' that actually calculates the DIP NBOOT is the user - supplied sample size of boot - strap Code by F . Mechler ( 27 August 2002 )","title":"hartigansdipsigniftest"},{"location":"reference/stats/hartigansdipsigniftest.m/#hartigansdipsigniftest","text":"function [dip,p_value, xlow,xup]=HartigansDipSignifTest ( xpdf,nboot ) calculates Hartigan ' s DIP statistic and its significance for the empirical p . d . f XPDF ( vector of sample values ). This routine calls the matlab routine 'HartigansDipTest' that actually calculates the DIP NBOOT is the user - supplied sample size of boot - strap Code by F . Mechler ( 27 August 2002 )","title":"hartigansdipsigniftest"},{"location":"reference/stats/hartigansdiptest.m/","text":"hartigansdiptest \u00b6 function [dip,xl,xu, ifault, gcm, lcm, mn, mj]=HartigansDipTest ( xpdf ) This is a direct translation by F . Mechler ( August 27 2002 ) into MATLAB from the original FORTRAN code of Hartigan ' s Subroutine DIPTST algorithm Ref : Algorithm AS 217 APPL . STATIST . ( 1985 ) Vol . 34. No . 3 pg 322 - 325 Appended by F . Mechler ( September 2 2002 ) to deal with a perfectly unimodal input This check the original Hartigan algorithm omitted , which leads to an infinite cycle HartigansDipTest , like DIPTST , does the dip calculation for an ordered vector XPDF using the greatest convex minorant ( gcm ) and the least concave majorant ( lcm ), skipping through the data using the change points of these distributions . It returns the 'DIP' statistic , and 7 more optional results , which include the modal interval ( XL , XU ), ann error flag IFAULT ( > 0 flags an error ) as well as the minorant and majorant fits GCM , LCM , and the corresponding support indices MN , and MJ","title":"hartigansdiptest"},{"location":"reference/stats/hartigansdiptest.m/#hartigansdiptest","text":"function [dip,xl,xu, ifault, gcm, lcm, mn, mj]=HartigansDipTest ( xpdf ) This is a direct translation by F . Mechler ( August 27 2002 ) into MATLAB from the original FORTRAN code of Hartigan ' s Subroutine DIPTST algorithm Ref : Algorithm AS 217 APPL . STATIST . ( 1985 ) Vol . 34. No . 3 pg 322 - 325 Appended by F . Mechler ( September 2 2002 ) to deal with a perfectly unimodal input This check the original Hartigan algorithm omitted , which leads to an infinite cycle HartigansDipTest , like DIPTST , does the dip calculation for an ordered vector XPDF using the greatest convex minorant ( gcm ) and the least concave majorant ( lcm ), skipping through the data using the change points of these distributions . It returns the 'DIP' statistic , and 7 more optional results , which include the modal interval ( XL , XU ), ann error flag IFAULT ( > 0 flags an error ) as well as the minorant and majorant fits GCM , LCM , and the corresponding support indices MN , and MJ","title":"hartigansdiptest"},{"location":"reference/stats/hist_percentile.m/","text":"hist_percentile \u00b6 HIST_PERCENTILE - Produce a percentile for data values that fall between bins PRCTILES = HIST_PERCENTILES ( BINS , DATA1 , DATA2 , PERCENT_VALUE ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the PERCENT_VALUE percentile of the corresponding values in DATA2 are returned in PRCTILES ( i ) .","title":"hist_percentile"},{"location":"reference/stats/hist_percentile.m/#hist_percentile","text":"HIST_PERCENTILE - Produce a percentile for data values that fall between bins PRCTILES = HIST_PERCENTILES ( BINS , DATA1 , DATA2 , PERCENT_VALUE ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the PERCENT_VALUE percentile of the corresponding values in DATA2 are returned in PRCTILES ( i ) .","title":"hist_percentile"},{"location":"reference/stats/hist_std.m/","text":"hist_std \u00b6 HIST_PERCENTILE - Produce standard deviation for data values that fall between bins STDDEV = HIST_STD ( BINS , DATA1 , DATA2 ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the standard deviation of the corresponding values in DATA2 are returned in STDDEV ( i ) .","title":"hist_std"},{"location":"reference/stats/hist_std.m/#hist_std","text":"HIST_PERCENTILE - Produce standard deviation for data values that fall between bins STDDEV = HIST_STD ( BINS , DATA1 , DATA2 ) For a given set of BINS , this function examines the data provided in DATA1 determine which values fall between BINS ( i ) and BINS ( i + 1 ) . Then , the standard deviation of the corresponding values in DATA2 are returned in STDDEV ( i ) .","title":"hist_std"},{"location":"reference/stats/hotellingt2test.m/","text":"hotellingt2test \u00b6 HOTELLINGT2TEST - Hotelling T ^ 2 test for multivariate samples [ H , P ] = HOTELLINGT2TEST ( X , MU ) [ H , P ] = HOTELLINGT2TEST ( X , MU , ALPHA ) Performs Hotelling 's T^2 test on multivariate samples X to determine if the data have mean MU . X should be a NxP matrix with N observations of P - dimensional data , and the mean MU to be tested should be 1 xP . ALPHA , the significance level , is 0.05 by default . H is 1 if the null hypothesis ( that the mean of X is equal to MU ) can be rejected at significance level ALPHA . P is the actual P value . The code is based on HotellingT2 . m by A . Trujillo - Ortiz and R . Hernandez - Walls . That software is available at TheMathWorks free file exchange site .","title":"hotellingt2test"},{"location":"reference/stats/hotellingt2test.m/#hotellingt2test","text":"HOTELLINGT2TEST - Hotelling T ^ 2 test for multivariate samples [ H , P ] = HOTELLINGT2TEST ( X , MU ) [ H , P ] = HOTELLINGT2TEST ( X , MU , ALPHA ) Performs Hotelling 's T^2 test on multivariate samples X to determine if the data have mean MU . X should be a NxP matrix with N observations of P - dimensional data , and the mean MU to be tested should be 1 xP . ALPHA , the significance level , is 0.05 by default . H is 1 if the null hypothesis ( that the mean of X is equal to MU ) can be rejected at significance level ALPHA . P is the actual P value . The code is based on HotellingT2 . m by A . Trujillo - Ortiz and R . Hernandez - Walls . That software is available at TheMathWorks free file exchange site .","title":"hotellingt2test"},{"location":"reference/stats/kolmogorov_smirnov_cdf.m/","text":"kolmogorov_smirnov_cdf \u00b6 KOLMOGOROV_SMIRNOV_CDF ( X , TOL ) Return the CDF at X of the Kolmogorov - Smirnov distribution , Inf Q ( x ) = SUM ( - 1 ) ^ k exp ( - 2 k ^ 2 x ^ 2 ) k = - Inf for X > 0 . The optional parameter TOL specifies the precision up to which the series should be evaluated ; the default is TOL = `eps'. Ported from octave 2 . 1 . 35","title":"kolmogorov_smirnov_cdf"},{"location":"reference/stats/kolmogorov_smirnov_cdf.m/#kolmogorov_smirnov_cdf","text":"KOLMOGOROV_SMIRNOV_CDF ( X , TOL ) Return the CDF at X of the Kolmogorov - Smirnov distribution , Inf Q ( x ) = SUM ( - 1 ) ^ k exp ( - 2 k ^ 2 x ^ 2 ) k = - Inf for X > 0 . The optional parameter TOL specifies the precision up to which the series should be evaluated ; the default is TOL = `eps'. Ported from octave 2 . 1 . 35","title":"kolmogorov_smirnov_cdf"},{"location":"reference/stats/kolmogorov_smirnov_test.m/","text":"kolmogorov_smirnov_test \u00b6 KOLMOGOROV_SMIRNOV_TEST Kolmogorov - smirnov test [ PVAL . KS ] = KOLMOGOROV_SMIRNOV_TEST ( X , HYP , DIST , PARAMS ) Computes liklihood data X were generated by distribution DIST with parameters PARAMS . Three alternative hypotheses ( HYP ) are available : 'notequal' ( the data are not equal ) '<' X < DIST w / parameters PARAMS '>' X > DIST w / parameters PARAMS See CDF for information about legal DIST names and parameters . Ported from Octave version 2 . 1 . 35","title":"kolmogorov_smirnov_test"},{"location":"reference/stats/kolmogorov_smirnov_test.m/#kolmogorov_smirnov_test","text":"KOLMOGOROV_SMIRNOV_TEST Kolmogorov - smirnov test [ PVAL . KS ] = KOLMOGOROV_SMIRNOV_TEST ( X , HYP , DIST , PARAMS ) Computes liklihood data X were generated by distribution DIST with parameters PARAMS . Three alternative hypotheses ( HYP ) are available : 'notequal' ( the data are not equal ) '<' X < DIST w / parameters PARAMS '>' X > DIST w / parameters PARAMS See CDF for information about legal DIST names and parameters . Ported from Octave version 2 . 1 . 35","title":"kolmogorov_smirnov_test"},{"location":"reference/stats/kruskal_wallis_mv.m/","text":"kruskal_wallis_mv \u00b6 KRUSKAL_WALLIS_MV ( VARARGIN ) Perform a Kruskal - Wallis one - factor 'analysis of variance' for multivariate data . [ PVAL , KW , DF ] = KRUSKAL_WALLIS_MV ( X1 , ... , XK ) Returns the probability ( PVAL ) of the null hypothesis that the distributions of X1 , ... , XK are equal . The multivariate points Xi should be arranged in column form . The KW statistic and degrees of freedom DF are returned . The Kruskal - Wallis test is a rank test based on the order of the datapoints rather than their value ( see ANOVA1 ) . We implement the test described by Choi and Marden and choose the kernel to be ( X - Y ) /|| ( X - Y ) || ( see the reference ) . Reference : Choi and Marden , J . Amer . Stat . Assoc . , 92 : 1581 - 1590 warning : this has been tested for normal distributions and seems to perform reasonably , but I could not find example data for which the authors had performed analysis ; upshot : this is not 100 % tested","title":"kruskal_wallis_mv"},{"location":"reference/stats/kruskal_wallis_mv.m/#kruskal_wallis_mv","text":"KRUSKAL_WALLIS_MV ( VARARGIN ) Perform a Kruskal - Wallis one - factor 'analysis of variance' for multivariate data . [ PVAL , KW , DF ] = KRUSKAL_WALLIS_MV ( X1 , ... , XK ) Returns the probability ( PVAL ) of the null hypothesis that the distributions of X1 , ... , XK are equal . The multivariate points Xi should be arranged in column form . The KW statistic and degrees of freedom DF are returned . The Kruskal - Wallis test is a rank test based on the order of the datapoints rather than their value ( see ANOVA1 ) . We implement the test described by Choi and Marden and choose the kernel to be ( X - Y ) /|| ( X - Y ) || ( see the reference ) . Reference : Choi and Marden , J . Amer . Stat . Assoc . , 92 : 1581 - 1590 warning : this has been tested for normal distributions and seems to perform reasonably , but I could not find example data for which the authors had performed analysis ; upshot : this is not 100 % tested","title":"kruskal_wallis_mv"},{"location":"reference/stats/kruskal_wallis_test.m/","text":"kruskal_wallis_test \u00b6 KRUSKAL_WALLIS_TEST - Kruskal - Wallis one - factor analysis of variance Perform a Kruskal - Wallis one - factor \"analysis of variance\" . [ PVAL , K , DF ] = KRUSKAL_WALLIS_TEST ( X1 , ... , XK ) Suppose a variable is observed for @ var { k } > 1 different groups , and let X1 , ... , XK be the corresponding data vectors . Under the null hypothesis that the ranks in the pooled sample are not affected by the group memberships , the test statistic K is approximately chi - square with DF = K - 1 degrees of freedom . The p - value ( 1 minus the CDF of this distribution at K ) is returned in PVAL } . If no output argument is given , the p - value is displayed . [ From Octave 2.5 . 1 ] Updated 2024 - 04 - 23 : NaNs are excluded ( SDV ) Author : KH < Kurt . Hornik @ ci . tuwien . ac . at > Description : Kruskal - Wallis test","title":"kruskal_wallis_test"},{"location":"reference/stats/kruskal_wallis_test.m/#kruskal_wallis_test","text":"KRUSKAL_WALLIS_TEST - Kruskal - Wallis one - factor analysis of variance Perform a Kruskal - Wallis one - factor \"analysis of variance\" . [ PVAL , K , DF ] = KRUSKAL_WALLIS_TEST ( X1 , ... , XK ) Suppose a variable is observed for @ var { k } > 1 different groups , and let X1 , ... , XK be the corresponding data vectors . Under the null hypothesis that the ranks in the pooled sample are not affected by the group memberships , the test statistic K is approximately chi - square with DF = K - 1 degrees of freedom . The p - value ( 1 minus the CDF of this distribution at K ) is returned in PVAL } . If no output argument is given , the p - value is displayed . [ From Octave 2.5 . 1 ] Updated 2024 - 04 - 23 : NaNs are excluded ( SDV ) Author : KH < Kurt . Hornik @ ci . tuwien . ac . at > Description : Kruskal - Wallis test","title":"kruskal_wallis_test"},{"location":"reference/stats/ks2_cdf.m/","text":"ks2_cdf \u00b6 KS2_CDF - Cumulative density function of Kolmogorov - Smivnov 2 sample test CDF = KS2_CDF ( N1 , N2 , KS_DIFF ) Returns the cumulative density function for 2 samples of size N1 and N2 respectively as a function of the difference between the 2 distributions KS_DIFF . Approximation has been borrowed from MATLAB 's KSTEST2 function.","title":"ks2_cdf"},{"location":"reference/stats/ks2_cdf.m/#ks2_cdf","text":"KS2_CDF - Cumulative density function of Kolmogorov - Smivnov 2 sample test CDF = KS2_CDF ( N1 , N2 , KS_DIFF ) Returns the cumulative density function for 2 samples of size N1 and N2 respectively as a function of the difference between the 2 distributions KS_DIFF . Approximation has been borrowed from MATLAB 's KSTEST2 function.","title":"ks2_cdf"},{"location":"reference/stats/ks_cdf_conf.m/","text":"ks_cdf_conf \u00b6 KS_CDF_CONF Kolmogorov - Smirnov confidence interval for a data set . [ Xvalues , sampleCDF , minCDF , maxCDF ] = KS_CDF_CONF ( X1 , ALPHA ) performs a Kolmogorov - Smirnov ( K - S ) test to determine the confidence interval for independent random samples X1 . ALPHA is the desired significance level ( default = 0 . 05 ) ; observations , indicated by NaNs ( Not - a - Number ) , are ignored . The asymptotic P - value becomes very accurate for large sample sizes , and is believed to be reasonably accurate for sample sizes N1 and N2 such that ( N1 * N2 ) / ( N1 + N2 ) >= 4 . Created by SDV , based on KSTEST2 by the MathWorks See also KSTEST , KSTEST2 , CDFPLOT .","title":"ks_cdf_conf"},{"location":"reference/stats/ks_cdf_conf.m/#ks_cdf_conf","text":"KS_CDF_CONF Kolmogorov - Smirnov confidence interval for a data set . [ Xvalues , sampleCDF , minCDF , maxCDF ] = KS_CDF_CONF ( X1 , ALPHA ) performs a Kolmogorov - Smirnov ( K - S ) test to determine the confidence interval for independent random samples X1 . ALPHA is the desired significance level ( default = 0 . 05 ) ; observations , indicated by NaNs ( Not - a - Number ) , are ignored . The asymptotic P - value becomes very accurate for large sample sizes , and is believed to be reasonably accurate for sample sizes N1 and N2 such that ( N1 * N2 ) / ( N1 + N2 ) >= 4 . Created by SDV , based on KSTEST2 by the MathWorks See also KSTEST , KSTEST2 , CDFPLOT .","title":"ks_cdf_conf"},{"location":"reference/stats/ks_cdf_conf_plot.m/","text":"ks_cdf_conf_plot \u00b6 KS_CDF_CONF_PLOT - Plot gray patch of confidence around a CDF H = KS_CDF_CONF_PLOT ( XVALUES , MINCDF , MAXCDF , XMIN , XMAX ) ; Plots a gray 'patch' around a sample CDF indicating the confidence in the true distribution . It is assumed the XVALUES , MINCDF , and MAXCDF are returned from KS_CDF_CONF . Use XMIN and XMAX to specify the minimum and maximum X values used for the plot .","title":"ks_cdf_conf_plot"},{"location":"reference/stats/ks_cdf_conf_plot.m/#ks_cdf_conf_plot","text":"KS_CDF_CONF_PLOT - Plot gray patch of confidence around a CDF H = KS_CDF_CONF_PLOT ( XVALUES , MINCDF , MAXCDF , XMIN , XMAX ) ; Plots a gray 'patch' around a sample CDF indicating the confidence in the true distribution . It is assumed the XVALUES , MINCDF , and MAXCDF are returned from KS_CDF_CONF . Use XMIN and XMAX to specify the minimum and maximum X values used for the plot .","title":"ks_cdf_conf_plot"},{"location":"reference/stats/manova.m/","text":"manova \u00b6 MANOVA - Multivariate Analysis of Variance [ STATS , H ] = MANOVA ( X , G ), or [ STATS , H ] = MANOVA ( X , G , ALPHA ) Determines whether the means of groups of multivariate data points are the same , using Wilks ' criterion. Each N-dimensional data point is a row in X, so that X is NxP , where P is the total number of data points . Each data point belongs to a group , indicated in vector G , which should be 1 XP . ALPHA is level of significance , and , If ALPHA is not given , 0.01 is assumed . STATS is a struct with the following elements : DF_between = degrees of freedom among samplesm , or ( K - 1 ), K == num of groups DF_within = degrees of freedom within samples , or N - K DF_TOTAL = total degrees of freedom N - 1 B = matrix of sum of squares and products ( SSP ) between samples W = matrix of SSP within samples T = matrix of total SSP , note that T == W + B ratio = | W |/| T | , or ratio to be compared to Wilks ' statistic P = Probability of data under hypothesis that means are equal H = 0 if means are SAME , 1 if DIFFERENT X__ = Grand mean of data X_ = Mean of each group ( KxP ) N = Number of items in each group ( Kx1 ) E = Eigenvalues for canonical variate projection ( inv ( W ) * B ) V = Eigenvectors corresp . to these eigenvalues VV = Eigenvectors normalized ( by W / ( N - K )) for canonical v . proj . See Chapter 12 of _Multivariate Analysis_ , KV Mardia , JT Kent , JM Bibby , Academic Press , London , 1979. Note : The eigenvector corresponding to the largest eigenvalue of inv ( W ) * B is the first canonical variate or Fisher 's linear discriminant function. Projecting onto this variate is useful for visualizing the differences among groups of data . The other canonical variates are the eigenvectors corresponding to the eigenvalues in descending order of magnitude . ( See sec . 11.5 of above book . ) Steve Van Hooser , 2003","title":"manova"},{"location":"reference/stats/manova.m/#manova","text":"MANOVA - Multivariate Analysis of Variance [ STATS , H ] = MANOVA ( X , G ), or [ STATS , H ] = MANOVA ( X , G , ALPHA ) Determines whether the means of groups of multivariate data points are the same , using Wilks ' criterion. Each N-dimensional data point is a row in X, so that X is NxP , where P is the total number of data points . Each data point belongs to a group , indicated in vector G , which should be 1 XP . ALPHA is level of significance , and , If ALPHA is not given , 0.01 is assumed . STATS is a struct with the following elements : DF_between = degrees of freedom among samplesm , or ( K - 1 ), K == num of groups DF_within = degrees of freedom within samples , or N - K DF_TOTAL = total degrees of freedom N - 1 B = matrix of sum of squares and products ( SSP ) between samples W = matrix of SSP within samples T = matrix of total SSP , note that T == W + B ratio = | W |/| T | , or ratio to be compared to Wilks ' statistic P = Probability of data under hypothesis that means are equal H = 0 if means are SAME , 1 if DIFFERENT X__ = Grand mean of data X_ = Mean of each group ( KxP ) N = Number of items in each group ( Kx1 ) E = Eigenvalues for canonical variate projection ( inv ( W ) * B ) V = Eigenvectors corresp . to these eigenvalues VV = Eigenvectors normalized ( by W / ( N - K )) for canonical v . proj . See Chapter 12 of _Multivariate Analysis_ , KV Mardia , JT Kent , JM Bibby , Academic Press , London , 1979. Note : The eigenvector corresponding to the largest eigenvalue of inv ( W ) * B is the first canonical variate or Fisher 's linear discriminant function. Projecting onto this variate is useful for visualizing the differences among groups of data . The other canonical variates are the eigenvectors corresponding to the eigenvalues in descending order of magnitude . ( See sec . 11.5 of above book . ) Steve Van Hooser , 2003","title":"manova"},{"location":"reference/stats/mwustat.m/","text":"mwustat \u00b6 [ u , z , P ] = mwustat ( data1 , data2 ) mwustat . m : given vectors data1 and data2 , the Mann - Whitney U statistic is returned along with the significance statistic Z . The Z value should be compared to T ( alpha , infinity ) for samples larger than 40 data points , otherwise The U value should be compared to a table of the U distribution . This implementation assumes a precision in measurements that renders tie values ( i . e ., > 1 occurence of the same value ) unlikely . If tie values are expected , this function should be modified . Adapted from Biostatistical Analysis , Zar JH , Prentice - Hall , 1974 . This script was written by Carsten D . Hohnke , currently at BCS at MIT u - the U statistic z - the z - score for U P - the p - value for that z thesign - the sign of the difference ( data2 - data1 ) : + 1 if Rank2 > Rank1 NOTE : Is this the correct order ?","title":"mwustat"},{"location":"reference/stats/mwustat.m/#mwustat","text":"[ u , z , P ] = mwustat ( data1 , data2 ) mwustat . m : given vectors data1 and data2 , the Mann - Whitney U statistic is returned along with the significance statistic Z . The Z value should be compared to T ( alpha , infinity ) for samples larger than 40 data points , otherwise The U value should be compared to a table of the U distribution . This implementation assumes a precision in measurements that renders tie values ( i . e ., > 1 occurence of the same value ) unlikely . If tie values are expected , this function should be modified . Adapted from Biostatistical Analysis , Zar JH , Prentice - Hall , 1974 . This script was written by Carsten D . Hohnke , currently at BCS at MIT u - the U statistic z - the z - score for U P - the p - value for that z thesign - the sign of the difference ( data2 - data1 ) : + 1 if Rank2 > Rank1 NOTE : Is this the correct order ?","title":"mwustat"},{"location":"reference/stats/myanova.m/","text":"myanova \u00b6 MYANOVA - One - way analysis of variance with posthoc comparisons MYANOVA performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . If the null hypothesis is rejected , then it makes posthoc comparisons with a modified t - test . [ P, H, COMP ] = MYANOVA ( X , G , [ SIG ] ) has vector inputs X and G . G contains the group number for each point in X . SIG is the significanc level to use ( default is 0.05 ). P is the probability of the null hypothesis , H is 1 if the null hypothesis is rejected and 0 otherwise , and COMP is an NxN matrix of significant comparisons among the groups , where N is the total number of groups ( determined by the number of unique elements in G ).","title":"myanova"},{"location":"reference/stats/myanova.m/#myanova","text":"MYANOVA - One - way analysis of variance with posthoc comparisons MYANOVA performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . If the null hypothesis is rejected , then it makes posthoc comparisons with a modified t - test . [ P, H, COMP ] = MYANOVA ( X , G , [ SIG ] ) has vector inputs X and G . G contains the group number for each point in X . SIG is the significanc level to use ( default is 0.05 ). P is the probability of the null hypothesis , H is 1 if the null hypothesis is rejected and 0 otherwise , and COMP is an NxN matrix of significant comparisons among the groups , where N is the total number of groups ( determined by the number of unique elements in G ).","title":"myanova"},{"location":"reference/stats/myanova1.m/","text":"myanova1 \u00b6 ANOVA1 One - way analysis of variance ( ANOVA ) . ANOVA1 performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . P = ANOVA1 ( X ) for matrix , X , treats each column as a separate group , and determines whether the population means of the columns are equal . This one - input form of ANOVA1 is appropriate when each group has the same number of elements ( balanced ANOVA ) . P = ANOVA1 ( X , GROUP ) has vector inputs X and GROUP . The vector , GROUP , identifies the group of the corresponding element of X . This two - input form of ANOVA1 has no restrictions on the number of elements in each group . ANOVA1 prints the standard one - way ANOVA table in Figure 1 and displays a boxplot in Figure2 .","title":"myanova1"},{"location":"reference/stats/myanova1.m/#myanova1","text":"ANOVA1 One - way analysis of variance ( ANOVA ) . ANOVA1 performs a one - way ANOVA for comparing the means of two or more groups of data . It returns the p - value for the null hypothesis that the means of the groups are equal . P = ANOVA1 ( X ) for matrix , X , treats each column as a separate group , and determines whether the population means of the columns are equal . This one - input form of ANOVA1 is appropriate when each group has the same number of elements ( balanced ANOVA ) . P = ANOVA1 ( X , GROUP ) has vector inputs X and GROUP . The vector , GROUP , identifies the group of the corresponding element of X . This two - input form of ANOVA1 has no restrictions on the number of elements in each group . ANOVA1 prints the standard one - way ANOVA table in Figure 1 and displays a boxplot in Figure2 .","title":"myanova1"},{"location":"reference/stats/nested_f.m/","text":"nested_f \u00b6 nested_f is a function. [p, F] = nested_f(SE1, p1, SE2, p2, ndata)","title":"nested_f"},{"location":"reference/stats/nested_f.m/#nested_f","text":"nested_f is a function. [p, F] = nested_f(SE1, p1, SE2, p2, ndata)","title":"nested_f"},{"location":"reference/stats/nestedftest.m/","text":"nestedftest \u00b6 NESTEDFTEST - Compute Nested F test statistic for 2 nested models [ P , F ] = NESTEDFTEST ( SE1 , P1 , SE2 , P2 , NDATA ) Performs a Nested F test for 2 model fits to the same data , where the first model is \"nested\" inside the second ( that is , the first model is a simplified version of the second , and can be obtained from the second model by setting parameters in the second to particular values ). SE1: The total squared error between the first model and the data . P1: The number of parameters in the first model . SE2: The total squared error between the second model and the data . P2: The number of parameters in the second model . NDATA: The number of data values used to calculate SE1 , SE2 . P: The p-value of the F test . If this is less than your alpha ( say , 0.05 ) then the second model is a significantly better fit than the first . F: The value of the F statistic . See: http: // en . wikipedia . org / wiki / F-test #Regression_problems","title":"nestedftest"},{"location":"reference/stats/nestedftest.m/#nestedftest","text":"NESTEDFTEST - Compute Nested F test statistic for 2 nested models [ P , F ] = NESTEDFTEST ( SE1 , P1 , SE2 , P2 , NDATA ) Performs a Nested F test for 2 model fits to the same data , where the first model is \"nested\" inside the second ( that is , the first model is a simplified version of the second , and can be obtained from the second model by setting parameters in the second to particular values ). SE1: The total squared error between the first model and the data . P1: The number of parameters in the first model . SE2: The total squared error between the second model and the data . P2: The number of parameters in the second model . NDATA: The number of data values used to calculate SE1 , SE2 . P: The p-value of the F test . If this is less than your alpha ( say , 0.05 ) then the second model is a significantly better fit than the first . F: The value of the F statistic . See: http: // en . wikipedia . org / wiki / F-test #Regression_problems","title":"nestedftest"},{"location":"reference/stats/power_index.m/","text":"power_index \u00b6 POWER_INDEX - Compute the number of observations needed to find a change N = POWER_INDEX ( MN , STDDEV , CHANGE , G , CONF ) Uses Monte Carlo techniques to estimate number of samples needed to see a change of size CHANGE from a mean of MN across G groups , assuming the samples have normally distributed noise with standard deviation of STDDEV , with a confidence of CONF . An ANOVA1 is used to look for differences across the G groups in the simulated data . See also : ANOVA1","title":"power_index"},{"location":"reference/stats/power_index.m/#power_index","text":"POWER_INDEX - Compute the number of observations needed to find a change N = POWER_INDEX ( MN , STDDEV , CHANGE , G , CONF ) Uses Monte Carlo techniques to estimate number of samples needed to see a change of size CHANGE from a mean of MN across G groups , assuming the samples have normally distributed noise with standard deviation of STDDEV , with a confidence of CONF . An ANOVA1 is used to look for differences across the G groups in the simulated data . See also : ANOVA1","title":"power_index"},{"location":"reference/stats/pseudorandomorder.m/","text":"pseudorandomorder \u00b6 PSEUDORANDOMORDER - random order where all stims are represented in each trial ORDER = PSEUDORANDOMORDER ( STIMS , TRIALREPS ) Returns ( in ORDER ) a random order of stimulus presentation for stimuli numbered 1 to STIMS . Each trial ( of which there are TRIALREPS ) will have exactly 1 presentation of each stimulus .","title":"pseudorandomorder"},{"location":"reference/stats/pseudorandomorder.m/#pseudorandomorder","text":"PSEUDORANDOMORDER - random order where all stims are represented in each trial ORDER = PSEUDORANDOMORDER ( STIMS , TRIALREPS ) Returns ( in ORDER ) a random order of stimulus presentation for stimuli numbered 1 to STIMS . Each trial ( of which there are TRIALREPS ) will have exactly 1 presentation of each stimulus .","title":"pseudorandomorder"},{"location":"reference/stats/quickregression.m/","text":"quickregression \u00b6 QUICKREGRESSSION - Computes best fit to a line and confidence interval on slope [SLOPE,OFFSET,SLOPE_CONFINTERVAL, ... RESID, RESIDINT, STATS] = QUICKREGRESSION(X,Y, ALPHA) Returns the best fit Y = SLOPE * X + OFFSET Also returns (1-ALPHA) confidence intervals around SLOPE and residuals, residual intervals, and STATS. NAN entries are ignored. See also: POLYFIT, REGRESS, QUICKREGRESIONPVALUE","title":"quickregression"},{"location":"reference/stats/quickregression.m/#quickregression","text":"QUICKREGRESSSION - Computes best fit to a line and confidence interval on slope [SLOPE,OFFSET,SLOPE_CONFINTERVAL, ... RESID, RESIDINT, STATS] = QUICKREGRESSION(X,Y, ALPHA) Returns the best fit Y = SLOPE * X + OFFSET Also returns (1-ALPHA) confidence intervals around SLOPE and residuals, residual intervals, and STATS. NAN entries are ignored. See also: POLYFIT, REGRESS, QUICKREGRESIONPVALUE","title":"quickregression"},{"location":"reference/stats/quickregressionpvalue.m/","text":"quickregressionpvalue \u00b6 QUICKREGRESSSIONPVALUE - Estimate p value of the null hypothesis that slope == 0 P = QUICKREGRESSIONPVALUE ( X , Y , [ NUM_STEPS ] ) Takes NUM_STEPS to estimate the P value that the slope of the regression line between X and Y is 0. This estimate is made by calling QUICKREGRESSION with different ALPHA values , and examining the confidence intervals . If NUM_STEPS is not provided , 30 steps are taken . NAN entries are ignored . See also : QUICKREGRESSION , REGRESS","title":"quickregressionpvalue"},{"location":"reference/stats/quickregressionpvalue.m/#quickregressionpvalue","text":"QUICKREGRESSSIONPVALUE - Estimate p value of the null hypothesis that slope == 0 P = QUICKREGRESSIONPVALUE ( X , Y , [ NUM_STEPS ] ) Takes NUM_STEPS to estimate the P value that the slope of the regression line between X and Y is 0. This estimate is made by calling QUICKREGRESSION with different ALPHA values , and examining the confidence intervals . If NUM_STEPS is not provided , 30 steps are taken . NAN entries are ignored . See also : QUICKREGRESSION , REGRESS","title":"quickregressionpvalue"},{"location":"reference/stats/ranks.m/","text":"ranks \u00b6 RANKS - Returns vector of ranks of X adjusted for ties Y = RANKS ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X [ From Octave 2.5.1 ] Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Description : Compute ranks This code is rather ugly , but is there an easy way to get the ranks adjusted for ties from sort ?","title":"ranks"},{"location":"reference/stats/ranks.m/#ranks","text":"RANKS - Returns vector of ranks of X adjusted for ties Y = RANKS ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X [ From Octave 2.5.1 ] Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Description : Compute ranks This code is rather ugly , but is there an easy way to get the ranks adjusted for ties from sort ?","title":"ranks"},{"location":"reference/stats/ranks2.m/","text":"ranks2 \u00b6 RANKS2 - Returns vector of ranks of X adjusted for ties , assuming ties rare Y = RANKS2 ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X Some code from Octave 2.5.1 Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Modified 9 / 9 / 2004 by SDV for speed ; assumes ties are rare .","title":"ranks2"},{"location":"reference/stats/ranks2.m/#ranks2","text":"RANKS2 - Returns vector of ranks of X adjusted for ties , assuming ties rare Y = RANKS2 ( X ) If X is a vector , return the ( column ) vector of ranks of X adjusted for ties . If X is a matrix , do the above for each column of X Some code from Octave 2.5.1 Author : KH < Kurt . Hornik @ci . tuwien . ac . at > Modified 9 / 9 / 2004 by SDV for speed ; assumes ties are rare .","title":"ranks2"},{"location":"reference/stats/resample_responses.m/","text":"resample_responses \u00b6 RESAMPLE_RESPONSES - Resample responses for montecarlo simulations NEWRESPS = RESAMPLE_RESPONSES ( TRIALDATA , MODE , REPS ) Generates a simulated set of responses . TRIALDATA - A matrix size NUM_STIMS x NTRIALS If no data is available for a given trail , it can be coded as NaN . NaN values will be ignored . If MODE == 1 , then simulated samples are generated with a random number generator given the measured mean and variance of each stimulus . If MODE == 2 , then the data are resampled with replacement , as would be appropriate for bootstrap analysis . REPS - The number of simulated trials to generate . Based on code by Mark Mazurek","title":"resample_responses"},{"location":"reference/stats/resample_responses.m/#resample_responses","text":"RESAMPLE_RESPONSES - Resample responses for montecarlo simulations NEWRESPS = RESAMPLE_RESPONSES ( TRIALDATA , MODE , REPS ) Generates a simulated set of responses . TRIALDATA - A matrix size NUM_STIMS x NTRIALS If no data is available for a given trail , it can be coded as NaN . NaN values will be ignored . If MODE == 1 , then simulated samples are generated with a random number generator given the measured mean and variance of each stimulus . If MODE == 2 , then the data are resampled with replacement , as would be appropriate for bootstrap analysis . REPS - The number of simulated trials to generate . Based on code by Mark Mazurek","title":"resample_responses"},{"location":"reference/stats/roc_analysis.m/","text":"roc_analysis \u00b6 ROC_ANALYSIS - Receiver operating characteristics [ DISCRIM , PROB_TRUE_ACCEPT , PROB_FALSE_ACCEPT , XVALUES ,... CONFUSION , SAMPLE1CUM , SAMPLE2CUM ] = ROC_ANALYSIS ( SAMPLE1 , SAMPLE2 ) Performs ROC analysis to see how sensitivity and false positives trade off if the task is to say which distribution a given value is likely to have arisen from . ( see http : // en . wikipedia . org / wiki / Receiver_operating_characteristic ) For each value of X present in the samples SAMPLE1 and SAMPLE2 , ROC returns the resulting probability of a \"true accept\" ( we say the value is from SAMPLE2 and it is ) and the resulting probability of a \"false accept\" ( we say the sample is from SAMPLE2 but it 's really from SAMPLE1). Inputs: SAMPLE1 - an array of sample data SAMPLE2 - an array of sample data Outputs: DISCRIM - Likelihood of discriminating the 2 distributions (accuracy) for each possible threshold X TRUE_POSITIVE_RATE - The rate a true accept (sensitivity) (TP_x./(TP_x+FN_x)) FALSE_POSITIVE_RATE - The rate of a false accept (FP_x./(FP_x+TN_x)) XVALUES - The X-axis values for the cumulative density functions CONFUSION - A structure with the \"confusion matrix\" assuming each value of X is used as a threshold. It has fields: confusion.TP_x: (true positive) likelihood sample is X or greater and comes from sample 2 confusion.FN_x: (false negative) likelihood sample is less than X and comes from sample 2 TN_X: (true negative) likelihood sample is less than X and comes from sample 1 confusion.FP_x: (false positive) likelihood sample is X or greater and comes from sample 1 SAMPLE1CUM - The cumulative sums of SAMPLE1 SAMPLE2CUM - The cumulative sums SAMPLE2","title":"roc_analysis"},{"location":"reference/stats/roc_analysis.m/#roc_analysis","text":"ROC_ANALYSIS - Receiver operating characteristics [ DISCRIM , PROB_TRUE_ACCEPT , PROB_FALSE_ACCEPT , XVALUES ,... CONFUSION , SAMPLE1CUM , SAMPLE2CUM ] = ROC_ANALYSIS ( SAMPLE1 , SAMPLE2 ) Performs ROC analysis to see how sensitivity and false positives trade off if the task is to say which distribution a given value is likely to have arisen from . ( see http : // en . wikipedia . org / wiki / Receiver_operating_characteristic ) For each value of X present in the samples SAMPLE1 and SAMPLE2 , ROC returns the resulting probability of a \"true accept\" ( we say the value is from SAMPLE2 and it is ) and the resulting probability of a \"false accept\" ( we say the sample is from SAMPLE2 but it 's really from SAMPLE1). Inputs: SAMPLE1 - an array of sample data SAMPLE2 - an array of sample data Outputs: DISCRIM - Likelihood of discriminating the 2 distributions (accuracy) for each possible threshold X TRUE_POSITIVE_RATE - The rate a true accept (sensitivity) (TP_x./(TP_x+FN_x)) FALSE_POSITIVE_RATE - The rate of a false accept (FP_x./(FP_x+TN_x)) XVALUES - The X-axis values for the cumulative density functions CONFUSION - A structure with the \"confusion matrix\" assuming each value of X is used as a threshold. It has fields: confusion.TP_x: (true positive) likelihood sample is X or greater and comes from sample 2 confusion.FN_x: (false negative) likelihood sample is less than X and comes from sample 2 TN_X: (true negative) likelihood sample is less than X and comes from sample 1 confusion.FP_x: (false positive) likelihood sample is X or greater and comes from sample 1 SAMPLE1CUM - The cumulative sums of SAMPLE1 SAMPLE2CUM - The cumulative sums SAMPLE2","title":"roc_analysis"},{"location":"reference/stats/std_from_median.m/","text":"std_from_median \u00b6 STD_FROM_MEDIAN - calculate standard deviation of gaussian process from median SD = STD_FROM_MEDIAN ( X , ... ) Estimates the standard deviation SD of a gaussian process that generated samples X using the median method . SD = MEDIAN ( ABS ( X ), ... ) / 0.6745 Any additional arguments to STD_FROM_MEDIAN are passed to MEDIAN , so that the median can be taken across rows , columns , or other dimensions ( see HELP MEDIAN ) . Proof : Recall : the median is the 0.5 point of a cumulative density function . The cumulative density function for a gaussian - distributed random variable is 0.5 * [ 1 + ERF ( X / SQRT ( 2 * sd ^ 2 ))] . This CDF is based on the symmetry of the ERF () function . It starst at 0.5 and adds or substracts the value of ERF as necessary . For the CDF of the absolute value of X , we can simply take twice the portion that depends on ERF ( X ): CDF ( | X | ) = ERF ( X / ( SQRT ( 2 * SD ^ 2 ))) . Now we want to find the X that corresponds to the median or : CDF ( | X | ) == 0.5 == ERF ( X / SQRT ( 2 * SD ^ 2 )) . Let x = N * SD . Then , 0.5 == ERF ( N * SD / SQRT ( 2 * SD ^ 2 )) == ERF ( N / SQRT ( 2 )) . This is solved numerically and N = 0.6745 . So at the median X is 0.6745 * SD . Analyically , MEDIAN ( | X | ) = 0.6745 * SD , or SD = MEDIAN ( | X | ) / 0.6745 . Ref : Quiroga RQ , Nadasdy Z , Ben - Shaul Y . Neural Comput . 2004 Aug ; 16 ( 8 ): 1661 - 87. Unsupervised spike detection and sorting with wavelets and superparamagnetic clustering . See also : MEDIAN","title":"std_from_median"},{"location":"reference/stats/std_from_median.m/#std_from_median","text":"STD_FROM_MEDIAN - calculate standard deviation of gaussian process from median SD = STD_FROM_MEDIAN ( X , ... ) Estimates the standard deviation SD of a gaussian process that generated samples X using the median method . SD = MEDIAN ( ABS ( X ), ... ) / 0.6745 Any additional arguments to STD_FROM_MEDIAN are passed to MEDIAN , so that the median can be taken across rows , columns , or other dimensions ( see HELP MEDIAN ) . Proof : Recall : the median is the 0.5 point of a cumulative density function . The cumulative density function for a gaussian - distributed random variable is 0.5 * [ 1 + ERF ( X / SQRT ( 2 * sd ^ 2 ))] . This CDF is based on the symmetry of the ERF () function . It starst at 0.5 and adds or substracts the value of ERF as necessary . For the CDF of the absolute value of X , we can simply take twice the portion that depends on ERF ( X ): CDF ( | X | ) = ERF ( X / ( SQRT ( 2 * SD ^ 2 ))) . Now we want to find the X that corresponds to the median or : CDF ( | X | ) == 0.5 == ERF ( X / SQRT ( 2 * SD ^ 2 )) . Let x = N * SD . Then , 0.5 == ERF ( N * SD / SQRT ( 2 * SD ^ 2 )) == ERF ( N / SQRT ( 2 )) . This is solved numerically and N = 0.6745 . So at the median X is 0.6745 * SD . Analyically , MEDIAN ( | X | ) = 0.6745 * SD , or SD = MEDIAN ( | X | ) / 0.6745 . Ref : Quiroga RQ , Nadasdy Z , Ben - Shaul Y . Neural Comput . 2004 Aug ; 16 ( 8 ): 1661 - 87. Unsupervised spike detection and sorting with wavelets and superparamagnetic clustering . See also : MEDIAN","title":"std_from_median"},{"location":"reference/stats/stderr.m/","text":"stderr \u00b6 STDERR - Standard error of a vector of data SE = STDERR(DATA); Computes standard error of each column. SE = std(DATA)./repmat(sqrt(size(DATA,1)),1,size(DATA,2)); See also: STD, NANSTD","title":"stderr"},{"location":"reference/stats/stderr.m/#stderr","text":"STDERR - Standard error of a vector of data SE = STDERR(DATA); Computes standard error of each column. SE = std(DATA)./repmat(sqrt(size(DATA,1)),1,size(DATA,2)); See also: STD, NANSTD","title":"stderr"},{"location":"reference/stats/twocurves_bhfdr.m/","text":"twocurves_bhfdr \u00b6 TWOCURVES_BHFDR - compare significance between 2 curves using the Benjamini-Hochberg false discovery rejection [ADJUSTED_P, RAW_P] = TWOCURVES_BHFDR(CURVE1_EXAMPLES, CURVE2_EXAMPLES) Given two data sets (CURVEN_EXAMPLES, which trace out a curve with each curve observation in a column vector), this function calculates RAW_P, the raw, uncorrected p value of a TTEST2 between the curves, and the adjusted p value ADJUSTED_P using the Behmamini-Hochberg (1995) procedure by calling MAFDR.","title":"twocurves_bhfdr"},{"location":"reference/stats/twocurves_bhfdr.m/#twocurves_bhfdr","text":"TWOCURVES_BHFDR - compare significance between 2 curves using the Benjamini-Hochberg false discovery rejection [ADJUSTED_P, RAW_P] = TWOCURVES_BHFDR(CURVE1_EXAMPLES, CURVE2_EXAMPLES) Given two data sets (CURVEN_EXAMPLES, which trace out a curve with each curve observation in a column vector), this function calculates RAW_P, the raw, uncorrected p value of a TTEST2 between the curves, and the adjusted p value ADJUSTED_P using the Behmamini-Hochberg (1995) procedure by calling MAFDR.","title":"twocurves_bhfdr"},{"location":"reference/string/bracelevel.m/","text":"bracelevel \u00b6 BRACELEVEL - Determine the enclosure depth level for text within braces LEVEL = BRACELEVEL ( STR ) For the string STR , returns an equally long array of numbers LEVEL that indicates the enclosure depth . The enclosure depth answers how many levels deep each character is within parentheses . One can also call : LEVEL = BRACELEVEL ( STR , BRACELEFT , BRACERIGHT ) And specify the LEFTBRACE and RIGHTBRACE characters . Examples : str = 'this is (a test of (depth))' ; level = bracelevel ( str ) str2 = 'this is [a test of [depth]]' ; level = bracelevel ( str , '[' , ']' )","title":"bracelevel"},{"location":"reference/string/bracelevel.m/#bracelevel","text":"BRACELEVEL - Determine the enclosure depth level for text within braces LEVEL = BRACELEVEL ( STR ) For the string STR , returns an equally long array of numbers LEVEL that indicates the enclosure depth . The enclosure depth answers how many levels deep each character is within parentheses . One can also call : LEVEL = BRACELEVEL ( STR , BRACELEFT , BRACERIGHT ) And specify the LEFTBRACE and RIGHTBRACE characters . Examples : str = 'this is (a test of (depth))' ; level = bracelevel ( str ) str2 = 'this is [a test of [depth]]' ; level = bracelevel ( str , '[' , ']' )","title":"bracelevel"},{"location":"reference/string/bracematch.m/","text":"bracematch \u00b6 BRACEMATCH - Match parenthesis in a text string [ POS_MATCH , BRACEDEPTH ] = BRACEMATCH ( STR , POS ) Finds the right parenthesis ')' that matches the left paranthesis '(' in string STR at position POS . One can modify the behavior of this function by passing name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- braceleft ( '(' ) | The character to be the left parenthesis | ( other examples , ' [ ', ' { ', ' < ') braceright (' ) ') | The character to be the right parenthesis | (other examples, ' ] ' , '}' , '>' ) bracedepth ( [] ) | To save time , if one has computed the | brace level using the function BRACELEVEL , | one can pass it here . If empty , the | brace level will be recalculated . Examples : str = 'this is (a test of (depth))' ; match1 = bracematch ( str , 9 ) match2 = bracematch ( str , 20 ) See also : BRACELEVEL","title":"bracematch"},{"location":"reference/string/bracematch.m/#bracematch","text":"BRACEMATCH - Match parenthesis in a text string [ POS_MATCH , BRACEDEPTH ] = BRACEMATCH ( STR , POS ) Finds the right parenthesis ')' that matches the left paranthesis '(' in string STR at position POS . One can modify the behavior of this function by passing name / value pairs : Name ( default ): | Description --------------------------------------------------------------------- braceleft ( '(' ) | The character to be the left parenthesis | ( other examples , ' [ ', ' { ', ' < ') braceright (' ) ') | The character to be the right parenthesis | (other examples, ' ] ' , '}' , '>' ) bracedepth ( [] ) | To save time , if one has computed the | brace level using the function BRACELEVEL , | one can pass it here . If empty , the | brace level will be recalculated . Examples : str = 'this is (a test of (depth))' ; match1 = bracematch ( str , 9 ) match2 = bracematch ( str , 20 ) See also : BRACELEVEL","title":"bracematch"},{"location":"reference/string/intseq2str.m/","text":"intseq2str \u00b6 INTSEQ2STR - Convert an array of integers to a compact string , maintaining sequence STR = INTSEQ2STR ( A ) Converts the sequence of integers in array A to a compact , human - readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : A = [ 1 2 3 7 10 ] str = intseq2str ( A ) % str == '1-3,7,10' See also : INT2STR , STR2INTSEQ","title":"intseq2str"},{"location":"reference/string/intseq2str.m/#intseq2str","text":"INTSEQ2STR - Convert an array of integers to a compact string , maintaining sequence STR = INTSEQ2STR ( A ) Converts the sequence of integers in array A to a compact , human - readable sequence with '-' indicating inclusion of a series of numbers and commas separating discontinuous numbers . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : A = [ 1 2 3 7 10 ] str = intseq2str ( A ) % str == '1-3,7,10' See also : INT2STR , STR2INTSEQ","title":"intseq2str"},{"location":"reference/string/ismatlabstring.m/","text":"ismatlabstring \u00b6 ISMATLABSTRING - is a character within a Matlab string ? TF = ISMATLABSTRING ( STR , [ STARTISWITHINSTRING ] ) Returns 0 / 1 for each character of STR as to whether or not the character is within a Matlab string literal . The quotes are considered to be part of the string . It is normally assumed that the beginning of STR is not already considered to be part of a Matlab string . The user can pass STARTISWITHINSTRING as 1 to indicate that the first character of STR should be taken to be within a Matlab string . Examples : str = [ 'myvar=5; a = ''my string'';' ] ismatlabstring ( str ) 000000000000011111111100 str = [ 'myvar=5; a = [''my '''' '' int2str(5) '' string''; ] '] ismatlabstring ( str )","title":"ismatlabstring"},{"location":"reference/string/ismatlabstring.m/#ismatlabstring","text":"ISMATLABSTRING - is a character within a Matlab string ? TF = ISMATLABSTRING ( STR , [ STARTISWITHINSTRING ] ) Returns 0 / 1 for each character of STR as to whether or not the character is within a Matlab string literal . The quotes are considered to be part of the string . It is normally assumed that the beginning of STR is not already considered to be part of a Matlab string . The user can pass STARTISWITHINSTRING as 1 to indicate that the first character of STR should be taken to be within a Matlab string . Examples : str = [ 'myvar=5; a = ''my string'';' ] ismatlabstring ( str ) 000000000000011111111100 str = [ 'myvar=5; a = [''my '''' '' int2str(5) '' string''; ] '] ismatlabstring ( str )","title":"ismatlabstring"},{"location":"reference/string/line_n.m/","text":"line_n \u00b6 LINE_N - Get the Nth line of a character string [ LINE_N_STR , POS , EOL_MARKS ] = LINE_N ( STR , N , ... ) Returns the Nth line of a multiline string STR . LINE_N_STR is the string contents of the Nth line , without the end of line character . The position of the beginning of the Nth line within the string STR is returned in POS . The function also returns all of the locations of the end of line marks EOL_MARKS . If the last character of STR is not an end - of - line , then the function adds an end - of - line character to the end of the string ( and this is returned in EOL_MARKS ) . The behavior of the function can be altered by adding name / value pairs : Name ( default value ): | Description ----------------------------------------------------------------------- eol ( sprintf ( ' \\n ' )) | End of line character , could also use ' \\r ' eol_marks ([]) | If it is non - empty , then the program | skips the search for eol_marks and | uses the provided variable . This is useful | if the user is going to call LINE_N | many times ; one can save the search time | in subsequent calls . Example : str = sprintf ( 'This is a test. \\n This is line two. \\n This is line 3.' ) line_n ( str , 1 ) line_n ( str , 2 ) line_n ( str , 3 )","title":"line_n"},{"location":"reference/string/line_n.m/#line_n","text":"LINE_N - Get the Nth line of a character string [ LINE_N_STR , POS , EOL_MARKS ] = LINE_N ( STR , N , ... ) Returns the Nth line of a multiline string STR . LINE_N_STR is the string contents of the Nth line , without the end of line character . The position of the beginning of the Nth line within the string STR is returned in POS . The function also returns all of the locations of the end of line marks EOL_MARKS . If the last character of STR is not an end - of - line , then the function adds an end - of - line character to the end of the string ( and this is returned in EOL_MARKS ) . The behavior of the function can be altered by adding name / value pairs : Name ( default value ): | Description ----------------------------------------------------------------------- eol ( sprintf ( ' \\n ' )) | End of line character , could also use ' \\r ' eol_marks ([]) | If it is non - empty , then the program | skips the search for eol_marks and | uses the provided variable . This is useful | if the user is going to call LINE_N | many times ; one can save the search time | in subsequent calls . Example : str = sprintf ( 'This is a test. \\n This is line two. \\n This is line 3.' ) line_n ( str , 1 ) line_n ( str , 2 ) line_n ( str , 3 )","title":"line_n"},{"location":"reference/string/str2intseq.m/","text":"str2intseq \u00b6 STR2INTSEQ - Recover a sequence of integers from a string A = STR2INTSEQ ( STR ) Given a string that specifies a list of integers , with a dash ( '-' ) indicating a run of sequential integers in order , and a comma ( ',' ) indicating integers that are not ( necessarily ) sequential . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : str = '1-3,7,10,12' ; a = str2intseq ( str ); % a == [1 2 3 7 10 12]","title":"str2intseq"},{"location":"reference/string/str2intseq.m/#str2intseq","text":"STR2INTSEQ - Recover a sequence of integers from a string A = STR2INTSEQ ( STR ) Given a string that specifies a list of integers , with a dash ( '-' ) indicating a run of sequential integers in order , and a comma ( ',' ) indicating integers that are not ( necessarily ) sequential . The function can also take extra parameters as name / value pairs : Parameter ( default value ) | Description ---------------------------------------------------------------- sep ( ',' ) | The separator between the numbers seq ( '-' ) | The character that indicates a sequential run of numbers Example : str = '1-3,7,10,12' ; a = str2intseq ( str ); % a == [1 2 3 7 10 12]","title":"str2intseq"},{"location":"reference/string/strcmp_substitution.m/","text":"strcmp_substitution \u00b6 STRCMP_SUBSTITUTION - Checks strings for match with ability to substitute a symbol for a string [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = STRCMP_SUBSTITUTION ( S1 , S2 , ... ) Compares S1 and S2 and returns in TF a logical 1 if they are of the same form and logical 0 otherwise . These strings are of the same form if a ) S1 and S2 are identical b ) S2 is a regular expression match of S1 ( see REGEXP ) c ) S2 matches S1 when the symbol '#' in S1 is replaced by some string in S2 , either as a direct comparison with STRCMP or a regular expression match with REGEXP . In this case , SUBSTITUTE_STRING , the string that can replace the SubstituteStringSymbol '#' is also returned . In any case , the entire matched string MATCH_STRING will be returned . The function also has the form : [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = STRCMP_SUBSTITUTION ( S1 , A , ... ) where A is a cell array of strings . TF will be a vector of 0 / 1 s the same length as A , and SUBSTITUTE_STRING will be a cell array of the suitable substitute strings . One can also specify the substitute string to be used ( that is , not allow it to vary ) by adding the name / value pair 'SubstituteString' , THESTRING as extra arguments to the function . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SubstituteStringSymbol ( '#' ) | The symbol to indicate the substitute string UseSubstituteString ( 1 ) | Should we use the SubstituteString option ? SubstituteString ( '' ) | Force the function to use this string as the only acceptable | replacement for SubstituteStringSymbol ForceCellOutput ( 0 ) | 0 / 1 should we output a cell even if we receive single strings as S1 , S2 ? Examples : s1 = [ '.*\\.ext\\>' ]; % equivalent of *. ext on the command line s2 = { 'myfile1.ext' 'myfile2.ext' 'myotherfile.ext1' }; [ tf , matchstring , substring ] = strcmp_substitution ( s1 , s2 , 'UseSubstituteString' , 0 ) s1 = [ 'stimtimes#.txt' ]; s2 = { 'dummy.ext' 'stimtimes123.txt' 'stimtimes.txt' 'stimtimes456.txt' } [ tf , matchstring , substring ] = strcmp_substitution ( s1 , s2 )","title":"strcmp_substitution"},{"location":"reference/string/strcmp_substitution.m/#strcmp_substitution","text":"STRCMP_SUBSTITUTION - Checks strings for match with ability to substitute a symbol for a string [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = STRCMP_SUBSTITUTION ( S1 , S2 , ... ) Compares S1 and S2 and returns in TF a logical 1 if they are of the same form and logical 0 otherwise . These strings are of the same form if a ) S1 and S2 are identical b ) S2 is a regular expression match of S1 ( see REGEXP ) c ) S2 matches S1 when the symbol '#' in S1 is replaced by some string in S2 , either as a direct comparison with STRCMP or a regular expression match with REGEXP . In this case , SUBSTITUTE_STRING , the string that can replace the SubstituteStringSymbol '#' is also returned . In any case , the entire matched string MATCH_STRING will be returned . The function also has the form : [ TF , MATCH_STRING , SUBSTITUTE_STRING ] = STRCMP_SUBSTITUTION ( S1 , A , ... ) where A is a cell array of strings . TF will be a vector of 0 / 1 s the same length as A , and SUBSTITUTE_STRING will be a cell array of the suitable substitute strings . One can also specify the substitute string to be used ( that is , not allow it to vary ) by adding the name / value pair 'SubstituteString' , THESTRING as extra arguments to the function . This file can be modified by passing name / value pairs : Parameter ( default ): | Description : ---------------------------------------------------------------------- SubstituteStringSymbol ( '#' ) | The symbol to indicate the substitute string UseSubstituteString ( 1 ) | Should we use the SubstituteString option ? SubstituteString ( '' ) | Force the function to use this string as the only acceptable | replacement for SubstituteStringSymbol ForceCellOutput ( 0 ) | 0 / 1 should we output a cell even if we receive single strings as S1 , S2 ? Examples : s1 = [ '.*\\.ext\\>' ]; % equivalent of *. ext on the command line s2 = { 'myfile1.ext' 'myfile2.ext' 'myotherfile.ext1' }; [ tf , matchstring , substring ] = strcmp_substitution ( s1 , s2 , 'UseSubstituteString' , 0 ) s1 = [ 'stimtimes#.txt' ]; s2 = { 'dummy.ext' 'stimtimes123.txt' 'stimtimes.txt' 'stimtimes456.txt' } [ tf , matchstring , substring ] = strcmp_substitution ( s1 , s2 )","title":"strcmp_substitution"},{"location":"reference/string/trimsymbol.m/","text":"trimsymbol \u00b6 TRIMSYMBOL - Trim a symbol ( or symbols ) from a string NEWSTR = TRIMSYMBOL ( STR , SYMBOL ) Removes the character symbols in the array SYMBOL from the character string STR , and return the result in NEWSTR . If STR is a cell array of strings , then each string in the cell array will be processed separately . Example : mystr = '*myhighlightedname#' newstr = trimsymbol ( mystr , '*#' ) % newstr = 'myhighlightedname'","title":"trimsymbol"},{"location":"reference/string/trimsymbol.m/#trimsymbol","text":"TRIMSYMBOL - Trim a symbol ( or symbols ) from a string NEWSTR = TRIMSYMBOL ( STR , SYMBOL ) Removes the character symbols in the array SYMBOL from the character string STR , and return the result in NEWSTR . If STR is a cell array of strings , then each string in the cell array will be processed separately . Example : mystr = '*myhighlightedname#' newstr = trimsymbol ( mystr , '*#' ) % newstr = 'myhighlightedname'","title":"trimsymbol"},{"location":"reference/string/trimws.m/","text":"trimws \u00b6 TRIMWS - Trim leading whitespace from a string NEWSTR = TRIMWS ( STR ) Trims leading spaces from a string . There is probably no reason for this function to exist , as the Matlab function STRTRIM seems to perform its function . This function is provided for backward compatibility . I recommend simply using STRTRIM rather than this function , as it will probably be removed in a future release . The only difference between STRTRIM and TRIMWS is that TRIMWS only operates on leading spaces , whereas STRTRIM removes trailing whitespace and also operates on any whitespace character as defined by the function ISSPACE . Example : m = trimws ( ' this string has leading whitespace' ) See also : STRTRIM , ISSPACE","title":"trimws"},{"location":"reference/string/trimws.m/#trimws","text":"TRIMWS - Trim leading whitespace from a string NEWSTR = TRIMWS ( STR ) Trims leading spaces from a string . There is probably no reason for this function to exist , as the Matlab function STRTRIM seems to perform its function . This function is provided for backward compatibility . I recommend simply using STRTRIM rather than this function , as it will probably be removed in a future release . The only difference between STRTRIM and TRIMWS is that TRIMWS only operates on leading spaces , whereas STRTRIM removes trailing whitespace and also operates on any whitespace character as defined by the function ISSPACE . Example : m = trimws ( ' this string has leading whitespace' ) See also : STRTRIM , ISSPACE","title":"trimws"},{"location":"reference/string/version_decode.m/","text":"version_decode \u00b6 VERSION_DECODE - Decode a version string ( a . b . c . d ) into a number V = VERSION_DECODE ( VERSION_STRING ) Decodes a version string 'a.b.c.d' into a vector of integers V = [ a b c d ] Example : version_string = '5.0.32.100' ; v = version_decode ( version_string ) % v = [ 5 0 32 100]","title":"version_decode"},{"location":"reference/string/version_decode.m/#version_decode","text":"VERSION_DECODE - Decode a version string ( a . b . c . d ) into a number V = VERSION_DECODE ( VERSION_STRING ) Decodes a version string 'a.b.c.d' into a vector of integers V = [ a b c d ] Example : version_string = '5.0.32.100' ; v = version_decode ( version_string ) % v = [ 5 0 32 100]","title":"version_decode"},{"location":"reference/time/datevecdiff.m/","text":"datevecdiff \u00b6 DATEVECDIFF - Compute difference in date vectors , in seconds D = DATEVECDIFF ( V1 , V2 ) Compute the difference between 2 date vectors , V = V2-V1 V1 and V2 should be date vectors in the style of DATEVEC ( V1 = [ year month date hour minute seconds ] ) ( V2 = [ year month date hour minute seconds ] ) Example : V1 = [ 2013 12 25 0 0 0 ] ; V2 = [ 2014 12 25 0 0 0 ] ; D = datevecdiff ( V1 , V2 ) See also : NOW , DATEVEC","title":"datevecdiff"},{"location":"reference/time/datevecdiff.m/#datevecdiff","text":"DATEVECDIFF - Compute difference in date vectors , in seconds D = DATEVECDIFF ( V1 , V2 ) Compute the difference between 2 date vectors , V = V2-V1 V1 and V2 should be date vectors in the style of DATEVEC ( V1 = [ year month date hour minute seconds ] ) ( V2 = [ year month date hour minute seconds ] ) Example : V1 = [ 2013 12 25 0 0 0 ] ; V2 = [ 2014 12 25 0 0 0 ] ; D = datevecdiff ( V1 , V2 ) See also : NOW , DATEVEC","title":"datevecdiff"},{"location":"reference/time/dowait.m/","text":"dowait \u00b6 DOWAIT - Pause for a particular amount of time based on platform DOWAIT ( HOWLONG ) Waits the specified amount of time . If it is on a non - Mac , this function assumes it is on a unix machine and call sleep on the shell which does not use any processor time . Otherwise , it calls Matlab 's pause function. See also: PAUSE, man sleep","title":"dowait"},{"location":"reference/time/dowait.m/#dowait","text":"DOWAIT - Pause for a particular amount of time based on platform DOWAIT ( HOWLONG ) Waits the specified amount of time . If it is on a non - Mac , this function assumes it is on a unix machine and call sleep on the shell which does not use any processor time . Otherwise , it calls Matlab 's pause function. See also: PAUSE, man sleep","title":"dowait"},{"location":"reference/time/fulltimestamp2datevec.m/","text":"fulltimestamp2datevec \u00b6 FULLTIMESTAMP2DATEVEC - Convert full time stamp yyyy - mm - ddTHH : MM : SS - TIMEZONE , to a date vector [ V , TZ ] = FULLTIMESTAMP2DATEVEC ( FULLTIMESTAMP_STR ) Converts a full time stamp in the format yyyy - mm - ddTHH : MM : SSTIMEZONE The date vector V has the same format as the Matlab DATEVEC routine : V = [ year month day hour minute seconds ] TZ is the time zone offset from GMT ( e . g ., EST is GMT -5 ), in vector format [ hour minute ]. Example : fulltimestamp_str = ' 2013-11-27 T10 : 35 : 35.0695379 -05 : 00 ' ; [ V , TZ ] = fulltimestamp2datevec ( fulltimestamp_str ) See also : DATEVEC , DATESTRING","title":"fulltimestamp2datevec"},{"location":"reference/time/fulltimestamp2datevec.m/#fulltimestamp2datevec","text":"FULLTIMESTAMP2DATEVEC - Convert full time stamp yyyy - mm - ddTHH : MM : SS - TIMEZONE , to a date vector [ V , TZ ] = FULLTIMESTAMP2DATEVEC ( FULLTIMESTAMP_STR ) Converts a full time stamp in the format yyyy - mm - ddTHH : MM : SSTIMEZONE The date vector V has the same format as the Matlab DATEVEC routine : V = [ year month day hour minute seconds ] TZ is the time zone offset from GMT ( e . g ., EST is GMT -5 ), in vector format [ hour minute ]. Example : fulltimestamp_str = ' 2013-11-27 T10 : 35 : 35.0695379 -05 : 00 ' ; [ V , TZ ] = fulltimestamp2datevec ( fulltimestamp_str ) See also : DATEVEC , DATESTRING","title":"fulltimestamp2datevec"},{"location":"reference/user_interface/basicuitools_defs.m/","text":"basicuitools_defs \u00b6 BASICUITOOLS_DEFS - Basic user interface uitools setup UIDEFS = BASICUITOOLS_DEFS Returns a basic defined set of specifications for the commonly used user interface controls . The foreground and background colors are compatible with the current Matlab version . This function also accepts name / value pairs that modify the default options . Parameter ( default ) : Description ------------------------------------------------------------------------ callbackstr ( '' ) | Callback function for all active controls | ( 'popup' , 'button' , 'slider' , 'list' , 'radiobutton' , ... | 'togglebutton' ) uiBackgroundColor ( 0.94 * [ 1 1 1 ]) | Background color for all except 'frame' frameBackgroundColor ( 0.8 * [ 1 1 1 ]) | Background color for 'frame' uiUnits ( 'pixels' ) | Units for controls ( could be 'normalized' , 'points' ) | Example : uidefs = basicuitools_defs ; See also : UICONTROL","title":"basicuitools_defs"},{"location":"reference/user_interface/basicuitools_defs.m/#basicuitools_defs","text":"BASICUITOOLS_DEFS - Basic user interface uitools setup UIDEFS = BASICUITOOLS_DEFS Returns a basic defined set of specifications for the commonly used user interface controls . The foreground and background colors are compatible with the current Matlab version . This function also accepts name / value pairs that modify the default options . Parameter ( default ) : Description ------------------------------------------------------------------------ callbackstr ( '' ) | Callback function for all active controls | ( 'popup' , 'button' , 'slider' , 'list' , 'radiobutton' , ... | 'togglebutton' ) uiBackgroundColor ( 0.94 * [ 1 1 1 ]) | Background color for all except 'frame' frameBackgroundColor ( 0.8 * [ 1 1 1 ]) | Background color for 'frame' uiUnits ( 'pixels' ) | Units for controls ( could be 'normalized' , 'points' ) | Example : uidefs = basicuitools_defs ; See also : UICONTROL","title":"basicuitools_defs"},{"location":"reference/user_interface/callbacknametag.m/","text":"callbacknametag \u00b6 CALLBACKNAMETAG - Callback to run a specified function with name and 'command' based on tag CALLBACKNAMETAG(FUNCTIONNAME, NAME, ...) Calls the function FUNCTIONNAME with first argument NAME, followed by a name/ref pair argument 'command',TAG, where TAG is the TAG of the UICONTROL that was clicked. Any additional arguments passed to CALLBACKNAMETAG will be passed along to the function call to FUNCTIONNAME.","title":"callbacknametag"},{"location":"reference/user_interface/callbacknametag.m/#callbacknametag","text":"CALLBACKNAMETAG - Callback to run a specified function with name and 'command' based on tag CALLBACKNAMETAG(FUNCTIONNAME, NAME, ...) Calls the function FUNCTIONNAME with first argument NAME, followed by a name/ref pair argument 'command',TAG, where TAG is the TAG of the UICONTROL that was clicked. Any additional arguments passed to CALLBACKNAMETAG will be passed along to the function call to FUNCTIONNAME.","title":"callbacknametag"},{"location":"reference/user_interface/checksyntaxsize.m/","text":"checksyntaxsize \u00b6 CHECKSYNTAXSIZE - Checks syntax and size of uitools string arguments [ B , VALS ] = CHECKSYNTAXSIZE ( THEFIG , TAGLIST , SIZELIST ,[ ERRORMSG , VARNAMELIST ]) Examines strings of user interface tools in figure THEFIG . TAGLIST is a cell list of 'Tag' fields to look at , and SIZELIST is a cell list of the expected sizes for the arguments ( leave an element empty to skip the examination for that field ) . If a syntax error is found , B is 0 and VALS is an empty cell . Otherwise , the values resulting from evaluating each string is returned in the cell list VALS . Optionally , an error dialog is presented to the user describing the syntax or size error ( if ERRORMSG is provided and is 1 ), and the field is referenced in this message either by its tag or by the corresponding entry in VARNAMELIST if it is provided .","title":"checksyntaxsize"},{"location":"reference/user_interface/checksyntaxsize.m/#checksyntaxsize","text":"CHECKSYNTAXSIZE - Checks syntax and size of uitools string arguments [ B , VALS ] = CHECKSYNTAXSIZE ( THEFIG , TAGLIST , SIZELIST ,[ ERRORMSG , VARNAMELIST ]) Examines strings of user interface tools in figure THEFIG . TAGLIST is a cell list of 'Tag' fields to look at , and SIZELIST is a cell list of the expected sizes for the arguments ( leave an element empty to skip the examination for that field ) . If a syntax error is found , B is 0 and VALS is an empty cell . Otherwise , the values resulting from evaluating each string is returned in the cell list VALS . Optionally , an error dialog is presented to the user describing the syntax or size error ( if ERRORMSG is provided and is 1 ), and the field is referenced in this message either by its tag or by the corresponding entry in VARNAMELIST if it is provided .","title":"checksyntaxsize"},{"location":"reference/user_interface/dlg2struct.m/","text":"dlg2struct \u00b6 DLG2STRUCT - Have a user fill in a structure with values S = DLG2STRUCT ( WINDOWNAME , FN , DESCRIPTIONS , DEFAULTS ) Prompts a user to fill in a structure with INPUTDLG . The fieldnames of the structure should be in the cell array of strings FN , and the human-readable descriptions of each field should be in the cell array of strings DESCRIPTIONS . Default values for each value should be the cell array DEFAULTS . Alternatively , DEFAULTS can be a structure with field names that match those in FN . The dialog window will have a name WINDOWNAME . S will be a struct with fields FN . If the user clicks cancel , then S will be empty ( [] ). This function is only appropriate for simple structure values such as numbers and strings . Example : mystruct . a = 5 ; mystruct . b = 1 ; desc = { 'Favorite number (1-10)', '2nd favorite number (1-10)' } ; s = dlg2struct ( 'Favorite numbers' , fieldnames ( mystruct ), desc , mystruct );","title":"dlg2struct"},{"location":"reference/user_interface/dlg2struct.m/#dlg2struct","text":"DLG2STRUCT - Have a user fill in a structure with values S = DLG2STRUCT ( WINDOWNAME , FN , DESCRIPTIONS , DEFAULTS ) Prompts a user to fill in a structure with INPUTDLG . The fieldnames of the structure should be in the cell array of strings FN , and the human-readable descriptions of each field should be in the cell array of strings DESCRIPTIONS . Default values for each value should be the cell array DEFAULTS . Alternatively , DEFAULTS can be a structure with field names that match those in FN . The dialog window will have a name WINDOWNAME . S will be a struct with fields FN . If the user clicks cancel , then S will be empty ( [] ). This function is only appropriate for simple structure values such as numbers and strings . Example : mystruct . a = 5 ; mystruct . b = 1 ; desc = { 'Favorite number (1-10)', '2nd favorite number (1-10)' } ; s = dlg2struct ( 'Favorite numbers' , fieldnames ( mystruct ), desc , mystruct );","title":"dlg2struct"},{"location":"reference/user_interface/figurecommandcallbackstr.m/","text":"figurecommandcallbackstr \u00b6 FIGURECOMMANDCALLBACKSTR - Callback string that calls function in figure tag with uicontrol command CALLBACKSTR = FIGURECOMMANDCALLBACKSTR Returns a string that is a useful callback for uicontrols in graphical user interfaces . This string performs the following actions : 1 ) Obtains the name of a function , located in the figure 's tag field (say, ' myfunction ') 2 ) Calls this function with input arguments 'command' , TAG , 'fig' , f , where f is the number of the current figure , and TAG is the tag of the uicontrol that was clicked . That is , this function calls myfunction ( 'command' , TAG , 'fig' , f ) See also = : UICONTROL","title":"figurecommandcallbackstr"},{"location":"reference/user_interface/figurecommandcallbackstr.m/#figurecommandcallbackstr","text":"FIGURECOMMANDCALLBACKSTR - Callback string that calls function in figure tag with uicontrol command CALLBACKSTR = FIGURECOMMANDCALLBACKSTR Returns a string that is a useful callback for uicontrols in graphical user interfaces . This string performs the following actions : 1 ) Obtains the name of a function , located in the figure 's tag field (say, ' myfunction ') 2 ) Calls this function with input arguments 'command' , TAG , 'fig' , f , where f is the number of the current figure , and TAG is the tag of the uicontrol that was clicked . That is , this function calls myfunction ( 'command' , TAG , 'fig' , f ) See also = : UICONTROL","title":"figurecommandcallbackstr"},{"location":"reference/user_interface/findclosestpointclick.m/","text":"findclosestpointclick \u00b6 FINDCLOSESTPOINT - Find the closest point to where a user clicked [ I , PT ] = FINDCLOSESTPOINTCLICK ( POINTLIST ) or [ I , PT ] = FINDCLOSESTPOINTCLICK ( POINTLIST , SCALE ) Examines the 'CurrentPoint' in the current axes , and sees which of the points in POINTLIST is closest to the 'CurrentPoint' . The index of the point in POINTLIST is returned in I , and the actual X / Y pair of the point are in PT . By default , the function does not use the absolute Euclidean distance but rather scales the points by the current view on the axes . This is useful if the X scale is very different from the Y scale ; usually when clicking the user wants the closest point in screen coordinates . One can modify this behavior by passing SCALE and setting it to 0 , and true Euclidean distance will be used . By default SCALE is 1 . POINTLIST should be in the format of 1 point per row . If POINTLIST is in 3 - space ( 3 D ) then a 3 D comparison is made . If POINTLIST is in 2 - space ( 2 D ) then a 2 D comparison is made . See also : FINDCLOSEST , FINDCLOSESTPOINT","title":"findclosestpointclick"},{"location":"reference/user_interface/findclosestpointclick.m/#findclosestpointclick","text":"FINDCLOSESTPOINT - Find the closest point to where a user clicked [ I , PT ] = FINDCLOSESTPOINTCLICK ( POINTLIST ) or [ I , PT ] = FINDCLOSESTPOINTCLICK ( POINTLIST , SCALE ) Examines the 'CurrentPoint' in the current axes , and sees which of the points in POINTLIST is closest to the 'CurrentPoint' . The index of the point in POINTLIST is returned in I , and the actual X / Y pair of the point are in PT . By default , the function does not use the absolute Euclidean distance but rather scales the points by the current view on the axes . This is useful if the X scale is very different from the Y scale ; usually when clicking the user wants the closest point in screen coordinates . One can modify this behavior by passing SCALE and setting it to 0 , and true Euclidean distance will be used . By default SCALE is 1 . POINTLIST should be in the format of 1 point per row . If POINTLIST is in 3 - space ( 3 D ) then a 3 D comparison is made . If POINTLIST is in 2 - space ( 2 D ) then a 2 D comparison is made . See also : FINDCLOSEST , FINDCLOSESTPOINT","title":"findclosestpointclick"},{"location":"reference/user_interface/genercallback.m/","text":"genercallback \u00b6 GENERCALLBACK - Generic callback function for user interfaces Attempts to call a function with the same name as the 'Tag' field in the figure handle with the callback object as the argument . Example : Suppose there is a button pressed in Figure 1 , and the 'Tag' field of Figure 1 is 'myFunnyPanel' . Then , the generic callback calls the function 'myFunnyPanel(gcbo)' ;","title":"genercallback"},{"location":"reference/user_interface/genercallback.m/#genercallback","text":"GENERCALLBACK - Generic callback function for user interfaces Attempts to call a function with the same name as the 'Tag' field in the figure handle with the callback object as the argument . Example : Suppose there is a button pressed in Figure 1 , and the 'Tag' field of Figure 1 is 'myFunnyPanel' . Then , the generic callback calls the function 'myFunnyPanel(gcbo)' ;","title":"genercallback"},{"location":"reference/user_interface/lb_getselected.m/","text":"lb_getselected \u00b6 Part of the NewStim package LISTSTR = LB_GETSELECTED ( LB ) Returns a list of strings containing the names of the currently selected items in the listbox LB . LB should be a handle to a listbox . Questions to vanhoosr @brandeis . edu","title":"lb_getselected"},{"location":"reference/user_interface/lb_getselected.m/#lb_getselected","text":"Part of the NewStim package LISTSTR = LB_GETSELECTED ( LB ) Returns a list of strings containing the names of the currently selected items in the listbox LB . LB should be a handle to a listbox . Questions to vanhoosr @brandeis . edu","title":"lb_getselected"},{"location":"reference/user_interface/myuiinit.m/","text":"myuiinit \u00b6 MYUIINIT - a script to initialize workspace variables for user interfaces Initializes several structure variables that can then be passed to UICONTROL . These variables are assigned in the CALLER ( that is , if you call this function from another function , the variable names below will be assigned in the function that calls this function ) . The following variables are initialized : Name : | Description : ----------------------------------------------- 'button' | Push button control * 'txt' | Static text control 'uiedit' | Editable text control 'popup' | Popup menu control * 'checkbox' | Checkbox type control * * indicates that the 'callback' field is set to 'genercallback' Horizontal alignment of 'txt' and 'edit' controls is set to 'center' All backgrounds are set to 0.8 * [ 1 1 1 ] except for 'edit' , which is set to [ 1 1 1 ] See also : UICONTROL , GENERCALLBACK , ASSIGNIN","title":"myuiinit"},{"location":"reference/user_interface/myuiinit.m/#myuiinit","text":"MYUIINIT - a script to initialize workspace variables for user interfaces Initializes several structure variables that can then be passed to UICONTROL . These variables are assigned in the CALLER ( that is , if you call this function from another function , the variable names below will be assigned in the function that calls this function ) . The following variables are initialized : Name : | Description : ----------------------------------------------- 'button' | Push button control * 'txt' | Static text control 'uiedit' | Editable text control 'popup' | Popup menu control * 'checkbox' | Checkbox type control * * indicates that the 'callback' field is set to 'genercallback' Horizontal alignment of 'txt' and 'edit' controls is set to 'center' All backgrounds are set to 0.8 * [ 1 1 1 ] except for 'edit' , which is set to [ 1 1 1 ] See also : UICONTROL , GENERCALLBACK , ASSIGNIN","title":"myuiinit"},{"location":"reference/user_interface/nitemmenuselection.m/","text":"nitemmenuselection \u00b6 NITEMNENUSELECTION - control multiple item selection for a popup menu [ SELECTED , B , ERRORMSG ] = NITEMMENUSELECTION ( POPUPMENU_HANDLE , ...) Note that you shouldn 't allow any item names to begin with ItemPrefix{:} entries. This function' s performance is modified by name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------- ItemPrefix (... | Prefix strings to add to selected items { ' x : ',' y : ',' z : '}) | The number of prefixes determines the number | of items that can be selected simulatenously (N). value (current | The value to toggle uicontrol value) | Example: names = {' a ',' b ',' c ',' d '}; fig=figure; uicontrol(' units ',' normalized ',' position ', [ 0.1 0.1 0.2 0.5 ] ,' tag ',' mymenu ',... ' style ',' popup ',' string ',names,' callback ',' nitemmenuselection ( gcbo ); ') ; selected=nitemmenuselection(findobj(fig,'tag','mymenu'),'value', [] ) ;","title":"nitemmenuselection"},{"location":"reference/user_interface/nitemmenuselection.m/#nitemmenuselection","text":"NITEMNENUSELECTION - control multiple item selection for a popup menu [ SELECTED , B , ERRORMSG ] = NITEMMENUSELECTION ( POPUPMENU_HANDLE , ...) Note that you shouldn 't allow any item names to begin with ItemPrefix{:} entries. This function' s performance is modified by name / value pairs : Parameter ( default ) | Description ----------------------------------------------------------- ItemPrefix (... | Prefix strings to add to selected items { ' x : ',' y : ',' z : '}) | The number of prefixes determines the number | of items that can be selected simulatenously (N). value (current | The value to toggle uicontrol value) | Example: names = {' a ',' b ',' c ',' d '}; fig=figure; uicontrol(' units ',' normalized ',' position ', [ 0.1 0.1 0.2 0.5 ] ,' tag ',' mymenu ',... ' style ',' popup ',' string ',names,' callback ',' nitemmenuselection ( gcbo ); ') ; selected=nitemmenuselection(findobj(fig,'tag','mymenu'),'value', [] ) ;","title":"nitemmenuselection"},{"location":"reference/user_interface/settoolbar.m/","text":"settoolbar \u00b6 SETTOOLBAR - Sets toolbar SETTOOLBAR ( FIGNUM , TOOLSTRING ) Calls SET to set the toolbar to the value of TOOLSTRING . If matlab version is too low for the toolbar , then nothing is done .","title":"settoolbar"},{"location":"reference/user_interface/settoolbar.m/#settoolbar","text":"SETTOOLBAR - Sets toolbar SETTOOLBAR ( FIGNUM , TOOLSTRING ) Calls SET to set the toolbar to the value of TOOLSTRING . If matlab version is too low for the toolbar , then nothing is done .","title":"settoolbar"},{"location":"reference/user_interface/simplepopupmenucallback.m/","text":"simplepopupmenucallback \u00b6 SIMPLEPOPUPMENUCALLBACK - Evaluates an expression based on the value of a popup list SIMPLEPOPUPMENUCALLBACK ( CALLBACKLIST [ , VALUE ] ) Evaluates the expression at the VALUE index of the cell array of strings CALLBACKLIST ( that is , evalutes CALLBACKLIST { VALUE } ). If VALUE is not provided , then it is obtained from the 'value' field of the current callback object as obtained by the function GCBO . Example : uicontol ( 'Style' , 'popup' , 'String' , { 'Option 1','Option 2' } ,... 'callback' , 'simplepopupmenucallback({''func1'',''func2''});' ); When Option 1 is chosen , 'func1' is called by EVAL , when Option 2 is chosen , 'func2' is called by EVAL . See also : GCBO , SUBREF , EVAL , GENERCALLBACK","title":"simplepopupmenucallback"},{"location":"reference/user_interface/simplepopupmenucallback.m/#simplepopupmenucallback","text":"SIMPLEPOPUPMENUCALLBACK - Evaluates an expression based on the value of a popup list SIMPLEPOPUPMENUCALLBACK ( CALLBACKLIST [ , VALUE ] ) Evaluates the expression at the VALUE index of the cell array of strings CALLBACKLIST ( that is , evalutes CALLBACKLIST { VALUE } ). If VALUE is not provided , then it is obtained from the 'value' field of the current callback object as obtained by the function GCBO . Example : uicontol ( 'Style' , 'popup' , 'String' , { 'Option 1','Option 2' } ,... 'callback' , 'simplepopupmenucallback({''func1'',''func2''});' ); When Option 1 is chosen , 'func1' is called by EVAL , when Option 2 is chosen , 'func2' is called by EVAL . See also : GCBO , SUBREF , EVAL , GENERCALLBACK","title":"simplepopupmenucallback"},{"location":"reference/user_interface/textbox.m/","text":"textbox \u00b6 TEXTBOX - Display a string in a window and wait for a click in an OK box TEXTBOX ( TITLE , STR ) Displays the text in the string STR in a new window with title TITLE . The only button is an OK button to dismiss the window .","title":"textbox"},{"location":"reference/user_interface/textbox.m/#textbox","text":"TEXTBOX - Display a string in a window and wait for a click in an OK box TEXTBOX ( TITLE , STR ) Displays the text in the string STR in a new window with title TITLE . The only button is an OK button to dismiss the window .","title":"textbox"},{"location":"reference/user_interface/uigetvarname.m/","text":"uigetvarname \u00b6 Part of the NewStim package NAME = UIGETVARNAME ( PROMPT , DEFAULT ) Prompts the user for a variable name until they cancel the window or enter a valid variable name . PROMPT should be a string prompting the user , and DEFAULT is the default variable name ( or use '' for blank ) . If the user clicks cancel , then the empty string is returned .","title":"uigetvarname"},{"location":"reference/user_interface/uigetvarname.m/#uigetvarname","text":"Part of the NewStim package NAME = UIGETVARNAME ( PROMPT , DEFAULT ) Prompts the user for a variable name until they cancel the window or enter a valid variable name . PROMPT should be a string prompting the user , and DEFAULT is the default variable name ( or use '' for blank ) . If the user clicks cancel , then the empty string is returned .","title":"uigetvarname"}]}