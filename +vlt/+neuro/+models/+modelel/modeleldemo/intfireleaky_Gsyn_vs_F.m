function [Gsyn,F] = intfireleaky_Gsyn_vs_F(intfireel, synapseel, searchtime, searchrange)
% INTFIRELEAKY_GSYNAP - Empirically determine minimum synaptic strength for AP
%
%   [GSYN,F] = vlt.neuro.models.modelel.modeleldemo.intfireleaky_Gsyn_vs_F(INTFIREEL, SYNAPSEEL,
%        SEARCHTIME, SEARCHRANGE)
%
%   Determine number of action potentials generated by various synaptic input
%   conductances in an integrate and fire neuron modelel INTFIRE and a synapse to be connected
%   called SYNAPSEEL. The program will step from time 0 to time SEARCHTIME to see
%   if an action potential is generated.
%
%   If INTFIREEL and SYNAPSEEL are empty, defaults will be used.
%  
%   The variable SEARCHRANGE = [ MIN MAX STEPS ] specifies the search domain.
%   The conductance values will be explored between MIN and MAX in STEPS number of
%   steps.
%
%   See also: vlt.neuro.models.modelel.neuronmodelel.intfiremodels.intfireleakyel_init, SYNAPSEEL_INIT , vlt.neuro.models.modelel.modeleldemo.intfireleaky_GsynAP

if isempty(intfireel),
	intfireel = vlt.neuro.models.modelel.neuronmodelel.intfiremodels.intfireleakyel_init;
end;
if isempty(synapseel),
	synapseel = vlt.neuro.models.modelel.synapseel.synapset1t2el.synapset1t2el_init;
end;
if isempty(searchtime),
	searchtime = 3*synapseel.model.tau2;
end;
if isempty(searchrange),
	searchrange = [0 10e-9 30];
end;

dt = synapseel.dT;
timesteps = ceil(searchtime/dt); % number of steps to simulate

 % make sure cells are connected 
synapseel.model.post = 1;
synapseel.model.pre= 3;
intfireel.model.synapse_list = 2;
spiketimelistel = vlt.neuro.models.modelel.neuronmodelel.spiketimelistel.spiketimelistel_init('name','pre','spiketimes',dt);
model = [intfireel;synapseel;spiketimelistel];

Gsyn = linspace(searchrange(1),searchrange(2),searchrange(3));
F = zeros(size(Gsyn));

for g = 1:length(Gsyn),
	modelhere = model;
	modelhere(2).model.Gmax = Gsyn(g);
	modelout = vlt.neuro.models.modelel.modelelrun.modelelrun(modelhere,'Steps',timesteps);
	F(g) = length(modelout.Model_Final_Structure(1).model.spiketimes);
end;
