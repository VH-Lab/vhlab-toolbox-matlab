 % embedded version

function b = git_embedded_assert
% GIT_ASSERT - do we have command line git on this machine?
%
% B = GIT_ASSERT
%
% Tests for presence of 'git' using SYSTEM.
%
%

[status, result] = system('git');

b = (status==0 | status==1) & ~isempty(result);


function b = git_embedded_install(dirname, repository)
% GIT_PULL - pull changes to a git repository
%
% B = GIT_PULL(DIRNAME, REPOSITORY)
%
% 'Install' is our term for forcing the local directory DIRNAME to match the
% remote REPOSITORY, either by cloning or pulling the latest changes. Any files
% in the local directory DIRNAME that don't match the remote REPOSITORY are deleted.
% 
% If DIRNAME does not exist, then the repository is cloned.
% If DIRNAME exists and has local changes, the changes are stashed and the
%    directory is updated by pulling
% If the DIRNAME exists and has no local changes, the directory is updated by
%    pulling.
%
% Note: if you have any local changes, GIT_INSTALL will stash them and warn the user.
%
% B is 1 if the operation is successful.
%

localparentdir = fileparts(dirname);

must_clone = 0;

if ~exist(dirname,'dir'),
	must_clone = 1;
end;

status_good = 0;
if ~must_clone,
        try,
                [uptodate,changes,untrackedfiles] = git_embedded_status(dirname);
                status_good = ~changes; %  & ~untrackedfiles;  % untracked files okay
        end;

	if status_good, % we can pull without difficulty
		b=git_embedded_pull(dirname);
	else, % stash first, then pull
		warning(['STASHING changes in ' dirname '...']);
		git_embedded_stash(dirname);
		b=git_embedded_pull(dirname);
	end;
else,
	if exist(dirname,'dir'), 
		rmdir(dirname,'s');
	end;
	b=git_embedded_clone(repository,localparentdir);
end;


function b = git_embedded_pull(dirname)
% GIT_PULL - pull changes to a git repository
%
% B = GIT_PULL(DIRNAME)
%
% Pulls the remote changes to a GIT repository into the local directory
% DIRNAME.
%
% If there are local changes to be committed, the operation may fail and B
% will be 0.
%

localparentdir = fileparts(dirname);

 % see if pull succeeds

pull_success = 1; % assume success, and update to failure if need be

if ~exist(dirname,'dir'),
	pull_success = 0;
end;

if pull_success, % if we are still going, try to pull
	[status,results]=system(['git -C "' dirname '" pull']);

	pull_success=(status==0);
end;

b = pull_success;


function b = git_embedded_isgitdirectory(dirname)
% GIT_ISGITDIRECTORY - is a given directory a GIT directory?
%
% B = GIT_ISGITDIRECTORY(DIRNAME)
%
% Examines whether DIRNAME is a GIT directory.
%

if git_embedded_assert,
	[status,results] = system(['git -C "' dirname '" status']);
	b = ((status==0) | (status==1)) & ~isempty(results);
else,
	error(['GIT not available on system.']);
end;

function b = git_embedded_stash(dirname)
% GIT_EMBEDDED_STASH - stash changes to a git repository
%
% B = GIT_EMBEDDED_STASH(DIRNAME)
%
% Stash the local changes to a GIT repository in DIRNAME.
%

localparentdir = fileparts(dirname);

 % see if stash succeeds

stash_success = 1; % assume success, and update to failure if need be

if ~exist(dirname,'dir'),
        stash_success = 0;
end;

if stash_success, % if we are still going, try to
        [status,results]=system(['git -C "' dirname '" stash']);

        stash_success=(status==0);
end;

b = stash_success;


function [uptodate, changes, untracked_present] = git_embedded_status(dirname)
% GIT_STATUS - return git working tree status
%
% [UPTODATE, CHANGES, UNTRACKED_PRESENT] = GIT_STATUS(DIRNAME)
%
% Examines whether a git working tree is up to date with its current branch
%
% UPTODATE is 1 if the working tree is up-to-date, and 0 if not.
% CHANGES is 1 if the working tree has changes to be committed, and 0 if not.
% UNTRACKED_PRESENT is 1 if there are untracked files present, and 0 if not.
%
% An error is generated if DIRNAME is not a GIT directory.
%
% See also: GIT_ISGITDIRECTORY

b = git_embedded_isgitdirectory(dirname);

if ~b,
	error(['Not a GIT directory: ' dirname '.']);
end;

[status,results] = system(['git -C "' dirname '" status ']); 

uptodate = 0;
untracked_present = 0;

if status==0,
	uptodate = ~isempty(strfind(results,'Your branch is up to date with'));
	changes = ~isempty(strfind(results,'Changes'));
	untracked_present = ~isempty(strfind(results,'untracked files present'));
else,
	error(['Error running git status: ' results]);
end;


function b = git_embedded_clone(repository, localparentdir)
% GIT_CLONE - clone a git repository onto the local computer
%
% B = GIT_CLONE(REPOSITORY, LOCALPARENTDIR)
%
% Clones a git repository REPOSITORY into the local directory
% LOCALPARENTDIR.
%
% If a folder containing the local repository already exists,
% an error is returned.
%
% B is 1 if the operation is successful.
%

if ~exist(localparentdir,'dir'),
	mkdir(localparentdir);
end;

reponames = split(repository,'/');

localreponame = [localparentdir filesep reponames{end}];

if exist([localreponame],'dir'),
	error([localreponame ' already exists.']);
end;

[status,results]=system(['git -C "' localparentdir '" clone ' repository]);

b = (status==0);

